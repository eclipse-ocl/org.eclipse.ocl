/**
 * <copyright>
 * </copyright>
 *
 * $Id: LibraryItemProviderAdapterFactory.java,v 1.1.2.8 2010/01/30 07:49:44 ewillink Exp $
 */
package org.eclipse.ocl.library.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eclipse.ocl.library.util.LibraryAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LibraryItemProviderAdapterFactory extends LibraryAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LibraryItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLAnyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLAnyTypeItemProvider oclAnyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLAnyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLAnyTypeAdapter() {
		if (oclAnyTypeItemProvider == null) {
			oclAnyTypeItemProvider = new OCLAnyTypeItemProvider(this);
		}

		return oclAnyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLLibraryItemProvider oclLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLLibraryAdapter() {
		if (oclLibraryItemProvider == null) {
			oclLibraryItemProvider = new OCLLibraryItemProvider(this);
		}

		return oclLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLBoundType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLBoundTypeItemProvider oclBoundTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLBoundType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLBoundTypeAdapter() {
		if (oclBoundTypeItemProvider == null) {
			oclBoundTypeItemProvider = new OCLBoundTypeItemProvider(this);
		}

		return oclBoundTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLConcreteType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLConcreteTypeItemProvider oclConcreteTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLConcreteType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLConcreteTypeAdapter() {
		if (oclConcreteTypeItemProvider == null) {
			oclConcreteTypeItemProvider = new OCLConcreteTypeItemProvider(this);
		}

		return oclConcreteTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLDeprecatedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLDeprecatedTypeItemProvider oclDeprecatedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLDeprecatedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLDeprecatedTypeAdapter() {
		if (oclDeprecatedTypeItemProvider == null) {
			oclDeprecatedTypeItemProvider = new OCLDeprecatedTypeItemProvider(this);
		}

		return oclDeprecatedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLInvalidType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLInvalidTypeItemProvider oclInvalidTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLInvalidType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLInvalidTypeAdapter() {
		if (oclInvalidTypeItemProvider == null) {
			oclInvalidTypeItemProvider = new OCLInvalidTypeItemProvider(this);
		}

		return oclInvalidTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLIterator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLIteratorItemProvider oclIteratorItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLIterator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLIteratorAdapter() {
		if (oclIteratorItemProvider == null) {
			oclIteratorItemProvider = new OCLIteratorItemProvider(this);
		}

		return oclIteratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLJavaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLJavaTypeItemProvider oclJavaTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLJavaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLJavaTypeAdapter() {
		if (oclJavaTypeItemProvider == null) {
			oclJavaTypeItemProvider = new OCLJavaTypeItemProvider(this);
		}

		return oclJavaTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLLibraryOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLLibraryOperationItemProvider oclLibraryOperationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLLibraryOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLLibraryOperationAdapter() {
		if (oclLibraryOperationItemProvider == null) {
			oclLibraryOperationItemProvider = new OCLLibraryOperationItemProvider(this);
		}

		return oclLibraryOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLLibraryProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLLibraryPropertyItemProvider oclLibraryPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLLibraryProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLLibraryPropertyAdapter() {
		if (oclLibraryPropertyItemProvider == null) {
			oclLibraryPropertyItemProvider = new OCLLibraryPropertyItemProvider(this);
		}

		return oclLibraryPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLPackageItemProvider oclPackageItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLPackageAdapter() {
		if (oclPackageItemProvider == null) {
			oclPackageItemProvider = new OCLPackageItemProvider(this);
		}

		return oclPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLParameterItemProvider oclParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLParameterAdapter() {
		if (oclParameterItemProvider == null) {
			oclParameterItemProvider = new OCLParameterItemProvider(this);
		}

		return oclParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLRootItemProvider oclRootItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLRootAdapter() {
		if (oclRootItemProvider == null) {
			oclRootItemProvider = new OCLRootItemProvider(this);
		}

		return oclRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLTypeBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLTypeBindingItemProvider oclTypeBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLTypeBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLTypeBindingAdapter() {
		if (oclTypeBindingItemProvider == null) {
			oclTypeBindingItemProvider = new OCLTypeBindingItemProvider(this);
		}

		return oclTypeBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLTypeParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLTypeParameterItemProvider oclTypeParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLTypeParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLTypeParameterAdapter() {
		if (oclTypeParameterItemProvider == null) {
			oclTypeParameterItemProvider = new OCLTypeParameterItemProvider(this);
		}

		return oclTypeParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.ocl.library.OCLVoidType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OCLVoidTypeItemProvider oclVoidTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.ocl.library.OCLVoidType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOCLVoidTypeAdapter() {
		if (oclVoidTypeItemProvider == null) {
			oclVoidTypeItemProvider = new OCLVoidTypeItemProvider(this);
		}

		return oclVoidTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (oclAnyTypeItemProvider != null) oclAnyTypeItemProvider.dispose();
		if (oclBoundTypeItemProvider != null) oclBoundTypeItemProvider.dispose();
		if (oclConcreteTypeItemProvider != null) oclConcreteTypeItemProvider.dispose();
		if (oclDeprecatedTypeItemProvider != null) oclDeprecatedTypeItemProvider.dispose();
		if (oclInvalidTypeItemProvider != null) oclInvalidTypeItemProvider.dispose();
		if (oclIteratorItemProvider != null) oclIteratorItemProvider.dispose();
		if (oclJavaTypeItemProvider != null) oclJavaTypeItemProvider.dispose();
		if (oclLibraryItemProvider != null) oclLibraryItemProvider.dispose();
		if (oclLibraryOperationItemProvider != null) oclLibraryOperationItemProvider.dispose();
		if (oclLibraryPropertyItemProvider != null) oclLibraryPropertyItemProvider.dispose();
		if (oclPackageItemProvider != null) oclPackageItemProvider.dispose();
		if (oclParameterItemProvider != null) oclParameterItemProvider.dispose();
		if (oclRootItemProvider != null) oclRootItemProvider.dispose();
		if (oclTypeBindingItemProvider != null) oclTypeBindingItemProvider.dispose();
		if (oclTypeParameterItemProvider != null) oclTypeParameterItemProvider.dispose();
		if (oclVoidTypeItemProvider != null) oclVoidTypeItemProvider.dispose();
	}

}
