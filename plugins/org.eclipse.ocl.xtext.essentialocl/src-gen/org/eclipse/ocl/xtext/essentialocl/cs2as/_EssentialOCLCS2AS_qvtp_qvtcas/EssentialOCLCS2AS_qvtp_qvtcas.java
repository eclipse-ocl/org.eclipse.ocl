/*******************************************************************************
 * «codeGenHelper.getCopyright(' * ')»
 *
 * This code is 100% auto-generated
 * using: org.eclipse.qvtd.cs2as.compiler.internal.CS2ASJavaCompilerImpl$1
 *
 * Do not edit it.
 ********************************************************************************/

package org.eclipse.ocl.xtext.essentialocl.cs2as._EssentialOCLCS2AS_qvtp_qvtcas;

import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.ocl.pivot.Annotation;
import org.eclipse.ocl.pivot.AssociationClass;
import org.eclipse.ocl.pivot.AssociationClassCallExp;
import org.eclipse.ocl.pivot.BooleanLiteralExp;
import org.eclipse.ocl.pivot.Class;
import org.eclipse.ocl.pivot.CollectionItem;
import org.eclipse.ocl.pivot.CollectionLiteralExp;
import org.eclipse.ocl.pivot.CollectionLiteralPart;
import org.eclipse.ocl.pivot.CollectionRange;
import org.eclipse.ocl.pivot.CollectionType;
import org.eclipse.ocl.pivot.Constraint;
import org.eclipse.ocl.pivot.DataType;
import org.eclipse.ocl.pivot.Detail;
import org.eclipse.ocl.pivot.Element;
import org.eclipse.ocl.pivot.Enumeration;
import org.eclipse.ocl.pivot.EnumerationLiteral;
import org.eclipse.ocl.pivot.ExpressionInOCL;
import org.eclipse.ocl.pivot.IfExp;
import org.eclipse.ocl.pivot.Import;
import org.eclipse.ocl.pivot.IntegerLiteralExp;
import org.eclipse.ocl.pivot.InvalidLiteralExp;
import org.eclipse.ocl.pivot.IterateExp;
import org.eclipse.ocl.pivot.Iteration;
import org.eclipse.ocl.pivot.IteratorExp;
import org.eclipse.ocl.pivot.LambdaType;
import org.eclipse.ocl.pivot.LanguageExpression;
import org.eclipse.ocl.pivot.LetExp;
import org.eclipse.ocl.pivot.Namespace;
import org.eclipse.ocl.pivot.NullLiteralExp;
import org.eclipse.ocl.pivot.OCLExpression;
import org.eclipse.ocl.pivot.Operation;
import org.eclipse.ocl.pivot.OperationCallExp;
import org.eclipse.ocl.pivot.Package;
import org.eclipse.ocl.pivot.Parameter;
import org.eclipse.ocl.pivot.PivotFactory;
import org.eclipse.ocl.pivot.PivotPackage;
import org.eclipse.ocl.pivot.PrimitiveType;
import org.eclipse.ocl.pivot.Property;
import org.eclipse.ocl.pivot.PropertyCallExp;
import org.eclipse.ocl.pivot.ShadowExp;
import org.eclipse.ocl.pivot.ShadowPart;
import org.eclipse.ocl.pivot.StringLiteralExp;
import org.eclipse.ocl.pivot.TemplateBinding;
import org.eclipse.ocl.pivot.TemplateParameter;
import org.eclipse.ocl.pivot.TemplateParameterSubstitution;
import org.eclipse.ocl.pivot.TemplateSignature;
import org.eclipse.ocl.pivot.TupleLiteralExp;
import org.eclipse.ocl.pivot.TupleLiteralPart;
import org.eclipse.ocl.pivot.TupleType;
import org.eclipse.ocl.pivot.Type;
import org.eclipse.ocl.pivot.TypeExp;
import org.eclipse.ocl.pivot.UnlimitedNaturalLiteralExp;
import org.eclipse.ocl.pivot.Variable;
import org.eclipse.ocl.pivot.VariableDeclaration;
import org.eclipse.ocl.pivot.VariableExp;
import org.eclipse.ocl.pivot.evaluation.Executor;
import org.eclipse.ocl.pivot.ids.ClassId;
import org.eclipse.ocl.pivot.ids.CollectionTypeId;
import org.eclipse.ocl.pivot.ids.DataTypeId;
import org.eclipse.ocl.pivot.ids.IdManager;
import org.eclipse.ocl.pivot.ids.IdResolver;
import org.eclipse.ocl.pivot.ids.NsURIPackageId;
import org.eclipse.ocl.pivot.ids.PropertyId;
import org.eclipse.ocl.pivot.ids.RootPackageId;
import org.eclipse.ocl.pivot.ids.TypeId;
import org.eclipse.ocl.pivot.internal.lookup.util.PivotLookupResult;
import org.eclipse.ocl.pivot.internal.lookup.util.PivotLookupSolver;
import org.eclipse.ocl.pivot.library.collection.CollectionIncludesOperation;
import org.eclipse.ocl.pivot.library.collection.CollectionIsEmptyOperation;
import org.eclipse.ocl.pivot.library.collection.CollectionNotEmptyOperation;
import org.eclipse.ocl.pivot.library.collection.CollectionSizeOperation;
import org.eclipse.ocl.pivot.library.collection.OrderedCollectionAtOperation;
import org.eclipse.ocl.pivot.library.collection.OrderedCollectionFirstOperation;
import org.eclipse.ocl.pivot.library.collection.OrderedCollectionIndexOfOperation;
import org.eclipse.ocl.pivot.library.collection.OrderedCollectionLastOperation;
import org.eclipse.ocl.pivot.library.collection.OrderedSetSubOrderedSetOperation;
import org.eclipse.ocl.pivot.library.logical.BooleanAndOperation;
import org.eclipse.ocl.pivot.library.logical.BooleanNotOperation;
import org.eclipse.ocl.pivot.library.numeric.NumericMinusOperation;
import org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsSetOperation;
import org.eclipse.ocl.pivot.library.oclany.OclAnyOclAsTypeOperation;
import org.eclipse.ocl.pivot.library.oclany.OclAnyOclIsKindOfOperation;
import org.eclipse.ocl.pivot.library.string.StringConcatOperation;
import org.eclipse.ocl.pivot.library.string.StringToBooleanOperation;
import org.eclipse.ocl.pivot.messages.PivotMessages;
import org.eclipse.ocl.pivot.util.Visitable;
import org.eclipse.ocl.pivot.utilities.ClassUtil;
import org.eclipse.ocl.pivot.utilities.ValueUtil;
import org.eclipse.ocl.pivot.values.IntegerValue;
import org.eclipse.ocl.pivot.values.InvalidValueException;
import org.eclipse.ocl.pivot.values.OrderedSetValue;
import org.eclipse.ocl.pivot.values.SequenceValue;
import org.eclipse.ocl.pivot.values.SetValue;
import org.eclipse.ocl.xtext.basecs.AnnotationCS;
import org.eclipse.ocl.xtext.basecs.AnnotationElementCS;
import org.eclipse.ocl.xtext.basecs.AttributeCS;
import org.eclipse.ocl.xtext.basecs.BaseCSPackage;
import org.eclipse.ocl.xtext.basecs.ClassCS;
import org.eclipse.ocl.xtext.basecs.ConstraintCS;
import org.eclipse.ocl.xtext.basecs.DataTypeCS;
import org.eclipse.ocl.xtext.basecs.DetailCS;
import org.eclipse.ocl.xtext.basecs.EnumerationCS;
import org.eclipse.ocl.xtext.basecs.EnumerationLiteralCS;
import org.eclipse.ocl.xtext.basecs.ImportCS;
import org.eclipse.ocl.xtext.basecs.LambdaTypeCS;
import org.eclipse.ocl.xtext.basecs.ModelElementCS;
import org.eclipse.ocl.xtext.basecs.ModelElementRefCS;
import org.eclipse.ocl.xtext.basecs.MultiplicityCS;
import org.eclipse.ocl.xtext.basecs.OperationCS;
import org.eclipse.ocl.xtext.basecs.PackageCS;
import org.eclipse.ocl.xtext.basecs.ParameterCS;
import org.eclipse.ocl.xtext.basecs.PathElementCS;
import org.eclipse.ocl.xtext.basecs.PathNameCS;
import org.eclipse.ocl.xtext.basecs.PrimitiveTypeRefCS;
import org.eclipse.ocl.xtext.basecs.ReferenceCS;
import org.eclipse.ocl.xtext.basecs.RootPackageCS;
import org.eclipse.ocl.xtext.basecs.SpecificationCS;
import org.eclipse.ocl.xtext.basecs.StructuralFeatureCS;
import org.eclipse.ocl.xtext.basecs.StructuredClassCS;
import org.eclipse.ocl.xtext.basecs.TemplateBindingCS;
import org.eclipse.ocl.xtext.basecs.TemplateParameterCS;
import org.eclipse.ocl.xtext.basecs.TemplateParameterSubstitutionCS;
import org.eclipse.ocl.xtext.basecs.TemplateSignatureCS;
import org.eclipse.ocl.xtext.basecs.TuplePartCS;
import org.eclipse.ocl.xtext.basecs.TupleTypeCS;
import org.eclipse.ocl.xtext.basecs.TypeParameterCS;
import org.eclipse.ocl.xtext.basecs.TypeRefCS;
import org.eclipse.ocl.xtext.basecs.TypedRefCS;
import org.eclipse.ocl.xtext.basecs.TypedTypeRefCS;
import org.eclipse.ocl.xtext.essentialoclcs.BooleanLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.CollectionLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.CollectionLiteralPartCS;
import org.eclipse.ocl.xtext.essentialoclcs.CollectionTypeCS;
import org.eclipse.ocl.xtext.essentialoclcs.ContextCS;
import org.eclipse.ocl.xtext.essentialoclcs.CurlyBracketedClauseCS;
import org.eclipse.ocl.xtext.essentialoclcs.EssentialOCLCSPackage;
import org.eclipse.ocl.xtext.essentialoclcs.ExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.ExpSpecificationCS;
import org.eclipse.ocl.xtext.essentialoclcs.IfExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.InvalidLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.LetExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.NameExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.NullLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.NumberLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.RoundBracketedClauseCS;
import org.eclipse.ocl.xtext.essentialoclcs.SelfExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.ShadowPartCS;
import org.eclipse.ocl.xtext.essentialoclcs.SquareBracketedClauseCS;
import org.eclipse.ocl.xtext.essentialoclcs.StringLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.TupleLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.TupleLiteralPartCS;
import org.eclipse.ocl.xtext.essentialoclcs.TypeLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.UnlimitedNaturalLiteralExpCS;
import org.eclipse.ocl.xtext.essentialoclcs.VariableCS;
import org.eclipse.ocl.xtext.base.cs2as.tx.AbstractCS2ASTransformer;
import org.eclipse.ocl.pivot.library.model.ModelObjectsOfKindOperation;

/**
 * The EssentialOCLCS2AS_qvtp_qvtcas transformation:
 * <p>
 * Construct with an evaluator
 * <br>
 * Populate each input model with {@link addRootObjects(String,List)}
 * <br>
 * {@link run()}
 * <br>
 * Extract each output model with {@link getRootObjects(String)}
 */
@SuppressWarnings("nls")
public class EssentialOCLCS2AS_qvtp_qvtcas extends AbstractCS2ASTransformer
{
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull RootPackageId PACKid_$metamodel$ = IdManager.getRootPackageId("$metamodel$");
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull NsURIPackageId PACKid_http_c_s_s_www_eclipse_org_s_emf_s_2002_s_Ecore = IdManager.getNsURIPackageId("http://www.eclipse.org/emf/2002/Ecore", null, EcorePackage.eINSTANCE);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull NsURIPackageId PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS = IdManager.getNsURIPackageId("http://www.eclipse.org/ocl/2015/BaseCS", null, BaseCSPackage.eINSTANCE);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull NsURIPackageId PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS = IdManager.getNsURIPackageId("http://www.eclipse.org/ocl/2015/EssentialOCLCS", null, EssentialOCLCSPackage.eINSTANCE);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull NsURIPackageId PACKid_http_c_s_s_www_eclipse_org_s_qvt_s_2015_s_QVTbaseLibrary = IdManager.getNsURIPackageId("http://www.eclipse.org/qvt/2015/QVTbaseLibrary", "qvtbaselib", null);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Annotation = PACKid_$metamodel$.getClassId("Annotation", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AnnotationCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("AnnotationCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AnnotationElementCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("AnnotationElementCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AssociationClass = PACKid_$metamodel$.getClassId("AssociationClass", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AssociationClassCallExp = PACKid_$metamodel$.getClassId("AssociationClassCallExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_AttributeCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("AttributeCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_BooleanLiteralExp = PACKid_$metamodel$.getClassId("BooleanLiteralExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_BooleanLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("BooleanLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Class = PACKid_$metamodel$.getClassId("Class", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ClassCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("ClassCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CollectionItem = PACKid_$metamodel$.getClassId("CollectionItem", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CollectionLiteralExp = PACKid_$metamodel$.getClassId("CollectionLiteralExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CollectionLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("CollectionLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CollectionLiteralPart = PACKid_$metamodel$.getClassId("CollectionLiteralPart", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CollectionLiteralPartCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("CollectionLiteralPartCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CollectionRange = PACKid_$metamodel$.getClassId("CollectionRange", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CollectionType = PACKid_$metamodel$.getClassId("CollectionType", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CollectionTypeCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("CollectionTypeCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Constraint = PACKid_$metamodel$.getClassId("Constraint", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ConstraintCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("ConstraintCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ContextCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("ContextCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_CurlyBracketedClauseCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("CurlyBracketedClauseCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DataType = PACKid_$metamodel$.getClassId("DataType", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DataTypeCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("DataTypeCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Detail = PACKid_$metamodel$.getClassId("Detail", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_DetailCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("DetailCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Element = PACKid_$metamodel$.getClassId("Element", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Enumeration = PACKid_$metamodel$.getClassId("Enumeration", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_EnumerationCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("EnumerationCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_EnumerationLiteral = PACKid_$metamodel$.getClassId("EnumerationLiteral", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_EnumerationLiteralCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("EnumerationLiteralCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("ExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ExpSpecificationCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("ExpSpecificationCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ExpressionInOCL = PACKid_$metamodel$.getClassId("ExpressionInOCL", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_IfExp = PACKid_$metamodel$.getClassId("IfExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_IfExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("IfExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Import = PACKid_$metamodel$.getClassId("Import", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ImportCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("ImportCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_IntegerLiteralExp = PACKid_$metamodel$.getClassId("IntegerLiteralExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_InvalidLiteralExp = PACKid_$metamodel$.getClassId("InvalidLiteralExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_InvalidLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("InvalidLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_IterateExp = PACKid_$metamodel$.getClassId("IterateExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Iteration = PACKid_$metamodel$.getClassId("Iteration", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_IteratorExp = PACKid_$metamodel$.getClassId("IteratorExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LambdaType = PACKid_$metamodel$.getClassId("LambdaType", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LambdaTypeCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("LambdaTypeCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LanguageExpression = PACKid_$metamodel$.getClassId("LanguageExpression", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LetExp = PACKid_$metamodel$.getClassId("LetExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_LetExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("LetExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Model = PACKid_http_c_s_s_www_eclipse_org_s_qvt_s_2015_s_QVTbaseLibrary.getClassId("Model", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ModelElementCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("ModelElementCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ModelElementRefCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("ModelElementRefCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Model_0 = PACKid_$metamodel$.getClassId("Model", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_MultiplicityCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("MultiplicityCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NameExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("NameExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NamedElement = PACKid_$metamodel$.getClassId("NamedElement", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Namespace = PACKid_$metamodel$.getClassId("Namespace", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NullLiteralExp = PACKid_$metamodel$.getClassId("NullLiteralExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NullLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("NullLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_NumberLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("NumberLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_OCLExpression = PACKid_$metamodel$.getClassId("OCLExpression", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_OclElement = PACKid_$metamodel$.getClassId("OclElement", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Operation = PACKid_$metamodel$.getClassId("Operation", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_OperationCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("OperationCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_OperationCallExp = PACKid_$metamodel$.getClassId("OperationCallExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Package = PACKid_$metamodel$.getClassId("Package", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_PackageCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("PackageCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Parameter = PACKid_$metamodel$.getClassId("Parameter", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ParameterCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("ParameterCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_PathElementCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("PathElementCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_PathNameCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("PathNameCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_PrimitiveType = PACKid_$metamodel$.getClassId("PrimitiveType", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_PrimitiveTypeRefCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("PrimitiveTypeRefCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Property = PACKid_$metamodel$.getClassId("Property", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_PropertyCallExp = PACKid_$metamodel$.getClassId("PropertyCallExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ReferenceCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("ReferenceCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_RootPackageCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("RootPackageCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_RoundBracketedClauseCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("RoundBracketedClauseCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_SelfExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("SelfExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ShadowExp = PACKid_$metamodel$.getClassId("ShadowExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ShadowPart = PACKid_$metamodel$.getClassId("ShadowPart", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_ShadowPartCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("ShadowPartCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_SpecificationCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("SpecificationCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_SquareBracketedClauseCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("SquareBracketedClauseCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_StringLiteralExp = PACKid_$metamodel$.getClassId("StringLiteralExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_StringLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("StringLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_StructuralFeatureCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("StructuralFeatureCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_StructuredClassCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("StructuredClassCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TemplateBinding = PACKid_$metamodel$.getClassId("TemplateBinding", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TemplateBindingCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TemplateBindingCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TemplateParameter = PACKid_$metamodel$.getClassId("TemplateParameter", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TemplateParameterCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TemplateParameterCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TemplateParameterSubstitution = PACKid_$metamodel$.getClassId("TemplateParameterSubstitution", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TemplateParameterSubstitutionCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TemplateParameterSubstitutionCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TemplateSignature = PACKid_$metamodel$.getClassId("TemplateSignature", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TemplateSignatureCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TemplateSignatureCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TupleLiteralExp = PACKid_$metamodel$.getClassId("TupleLiteralExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TupleLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("TupleLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TupleLiteralPart = PACKid_$metamodel$.getClassId("TupleLiteralPart", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TupleLiteralPartCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("TupleLiteralPartCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TuplePartCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TuplePartCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TupleType = PACKid_$metamodel$.getClassId("TupleType", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TupleTypeCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TupleTypeCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Type = PACKid_$metamodel$.getClassId("Type", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypeExp = PACKid_$metamodel$.getClassId("TypeExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypeLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("TypeLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypeParameterCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TypeParameterCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypeRefCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TypeRefCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypedElement = PACKid_$metamodel$.getClassId("TypedElement", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypedRefCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TypedRefCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_TypedTypeRefCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_BaseCS.getClassId("TypedTypeRefCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_UnlimitedNaturalLiteralExp = PACKid_$metamodel$.getClassId("UnlimitedNaturalLiteralExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_UnlimitedNaturalLiteralExpCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("UnlimitedNaturalLiteralExpCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Variable = PACKid_$metamodel$.getClassId("Variable", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_VariableCS = PACKid_http_c_s_s_www_eclipse_org_s_ocl_s_2015_s_EssentialOCLCS.getClassId("VariableCS", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_VariableDeclaration = PACKid_$metamodel$.getClassId("VariableDeclaration", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_VariableExp = PACKid_$metamodel$.getClassId("VariableExp", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull ClassId CLSSid_Visitable = PACKid_$metamodel$.getClassId("Visitable", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull DataTypeId DATAid_EInt = PACKid_http_c_s_s_www_eclipse_org_s_emf_s_2002_s_Ecore.getDataTypeId("EInt", 0);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull IntegerValue INT_1 = ValueUtil.integerValueOf("1");
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_PRIMid_String = TypeId.ORDERED_SET.getSpecializedId(TypeId.STRING);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_PRIMid_String = TypeId.SEQUENCE.getSpecializedId(TypeId.STRING);
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_ = "";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_Boolean = "Boolean";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR__33_resolve = "!resolve";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_compososes = "compososes";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_derived = "derived";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_id = "id";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_prod = "*";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_readonly = "readonly";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_static = "static";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_transient = "transient";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_unsettable = "unsettable";
    public static final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String STR_volatile = "volatile";
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId COL_CLSSid_Class = TypeId.COLLECTION.getSpecializedId(CLSSid_Class);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_AnnotationElementCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_AnnotationElementCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ClassCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_ClassCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_CollectionLiteralPartCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_CollectionLiteralPartCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ConstraintCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_ConstraintCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_DetailCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_DetailCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_EnumerationLiteralCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_EnumerationLiteralCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ExpCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_ExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ImportCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_ImportCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ModelElementCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_ModelElementCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ModelElementRefCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_ModelElementRefCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_OperationCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_OperationCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_PackageCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_PackageCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ParameterCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_ParameterCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_PathElementCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_PathElementCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_Property = TypeId.ORDERED_SET.getSpecializedId(CLSSid_Property);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_ShadowPartCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_ShadowPartCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_SpecificationCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_SpecificationCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_SquareBracketedClauseCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_SquareBracketedClauseCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_StructuralFeatureCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_StructuralFeatureCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_TemplateParameter = TypeId.ORDERED_SET.getSpecializedId(CLSSid_TemplateParameter);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_TemplateParameterCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_TemplateParameterCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_TemplateParameterSubstitutionCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_TemplateParameterSubstitutionCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_TupleLiteralPartCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_TupleLiteralPartCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_TuplePartCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_TuplePartCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_TypedRefCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_TypedRefCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId ORD_CLSSid_VariableCS = TypeId.ORDERED_SET.getSpecializedId(CLSSid_VariableCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull PropertyId PROPid_isImplicit = CLSSid_Property.getPropertyId("isImplicit");
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull PropertyId PROPid_isRequired = CLSSid_TypedElement.getPropertyId("isRequired");
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull PropertyId PROPid_name = CLSSid_NamedElement.getPropertyId("name");
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull PropertyId PROPid_owningClass = CLSSid_Property.getPropertyId("owningClass");
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Class = TypeId.SEQUENCE.getSpecializedId(CLSSid_Class);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_CollectionLiteralPart = TypeId.SEQUENCE.getSpecializedId(CLSSid_CollectionLiteralPart);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Constraint = TypeId.SEQUENCE.getSpecializedId(CLSSid_Constraint);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Detail = TypeId.SEQUENCE.getSpecializedId(CLSSid_Detail);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Element = TypeId.SEQUENCE.getSpecializedId(CLSSid_Element);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_EnumerationLiteral = TypeId.SEQUENCE.getSpecializedId(CLSSid_EnumerationLiteral);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Import = TypeId.SEQUENCE.getSpecializedId(CLSSid_Import);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_LanguageExpression = TypeId.SEQUENCE.getSpecializedId(CLSSid_LanguageExpression);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_OCLExpression = TypeId.SEQUENCE.getSpecializedId(CLSSid_OCLExpression);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Operation = TypeId.SEQUENCE.getSpecializedId(CLSSid_Operation);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Package = TypeId.SEQUENCE.getSpecializedId(CLSSid_Package);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Parameter = TypeId.SEQUENCE.getSpecializedId(CLSSid_Parameter);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Property = TypeId.SEQUENCE.getSpecializedId(CLSSid_Property);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_ShadowPart = TypeId.SEQUENCE.getSpecializedId(CLSSid_ShadowPart);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_TemplateParameter = TypeId.SEQUENCE.getSpecializedId(CLSSid_TemplateParameter);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_TemplateParameterSubstitution = TypeId.SEQUENCE.getSpecializedId(CLSSid_TemplateParameterSubstitution);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_TupleLiteralPart = TypeId.SEQUENCE.getSpecializedId(CLSSid_TupleLiteralPart);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SEQ_CLSSid_Variable = TypeId.SEQUENCE.getSpecializedId(CLSSid_Variable);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_AnnotationCS = TypeId.SET.getSpecializedId(CLSSid_AnnotationCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_AttributeCS = TypeId.SET.getSpecializedId(CLSSid_AttributeCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_BooleanLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_BooleanLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_Class = TypeId.SET.getSpecializedId(CLSSid_Class);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_CollectionLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_CollectionLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_CollectionLiteralPartCS = TypeId.SET.getSpecializedId(CLSSid_CollectionLiteralPartCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_CollectionTypeCS = TypeId.SET.getSpecializedId(CLSSid_CollectionTypeCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_ConstraintCS = TypeId.SET.getSpecializedId(CLSSid_ConstraintCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_ContextCS = TypeId.SET.getSpecializedId(CLSSid_ContextCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_CurlyBracketedClauseCS = TypeId.SET.getSpecializedId(CLSSid_CurlyBracketedClauseCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_DataTypeCS = TypeId.SET.getSpecializedId(CLSSid_DataTypeCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_DetailCS = TypeId.SET.getSpecializedId(CLSSid_DetailCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_EnumerationCS = TypeId.SET.getSpecializedId(CLSSid_EnumerationCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_EnumerationLiteralCS = TypeId.SET.getSpecializedId(CLSSid_EnumerationLiteralCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_ExpSpecificationCS = TypeId.SET.getSpecializedId(CLSSid_ExpSpecificationCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_IfExpCS = TypeId.SET.getSpecializedId(CLSSid_IfExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_ImportCS = TypeId.SET.getSpecializedId(CLSSid_ImportCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_InvalidLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_InvalidLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_LambdaTypeCS = TypeId.SET.getSpecializedId(CLSSid_LambdaTypeCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_LetExpCS = TypeId.SET.getSpecializedId(CLSSid_LetExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_NameExpCS = TypeId.SET.getSpecializedId(CLSSid_NameExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_NullLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_NullLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_NumberLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_NumberLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_OperationCS = TypeId.SET.getSpecializedId(CLSSid_OperationCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_PackageCS = TypeId.SET.getSpecializedId(CLSSid_PackageCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_ParameterCS = TypeId.SET.getSpecializedId(CLSSid_ParameterCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_PrimitiveTypeRefCS = TypeId.SET.getSpecializedId(CLSSid_PrimitiveTypeRefCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_ReferenceCS = TypeId.SET.getSpecializedId(CLSSid_ReferenceCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_RootPackageCS = TypeId.SET.getSpecializedId(CLSSid_RootPackageCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_RoundBracketedClauseCS = TypeId.SET.getSpecializedId(CLSSid_RoundBracketedClauseCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_SelfExpCS = TypeId.SET.getSpecializedId(CLSSid_SelfExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_ShadowPartCS = TypeId.SET.getSpecializedId(CLSSid_ShadowPartCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_SpecificationCS = TypeId.SET.getSpecializedId(CLSSid_SpecificationCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_StringLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_StringLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_StructuredClassCS = TypeId.SET.getSpecializedId(CLSSid_StructuredClassCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TemplateBindingCS = TypeId.SET.getSpecializedId(CLSSid_TemplateBindingCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TemplateParameterSubstitutionCS = TypeId.SET.getSpecializedId(CLSSid_TemplateParameterSubstitutionCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TemplateSignatureCS = TypeId.SET.getSpecializedId(CLSSid_TemplateSignatureCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TupleLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_TupleLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TupleLiteralPartCS = TypeId.SET.getSpecializedId(CLSSid_TupleLiteralPartCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TuplePartCS = TypeId.SET.getSpecializedId(CLSSid_TuplePartCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TupleTypeCS = TypeId.SET.getSpecializedId(CLSSid_TupleTypeCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TypeLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_TypeLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_TypeParameterCS = TypeId.SET.getSpecializedId(CLSSid_TypeParameterCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_UnlimitedNaturalLiteralExpCS = TypeId.SET.getSpecializedId(CLSSid_UnlimitedNaturalLiteralExpCS);
    public static final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull CollectionTypeId SET_CLSSid_VariableCS = TypeId.SET.getSpecializedId(CLSSid_VariableCS);
    
    /*
     * Array of the ClassIds of each class for which allInstances() may be invoked. Array index is the ClassIndex.
     */
    private static final @NonNull ClassId[] classIndex2classId = new @NonNull ClassId[]{
        CLSSid_AnnotationCS,            // 0 => AnnotationCS
        CLSSid_AttributeCS,             // 1 => AttributeCS
        CLSSid_BooleanLiteralExpCS,     // 2 => BooleanLiteralExpCS
        CLSSid_CollectionLiteralExpCS,  // 3 => CollectionLiteralExpCS
        CLSSid_CollectionLiteralPartCS, // 4 => CollectionLiteralPartCS
        CLSSid_CollectionTypeCS,        // 5 => CollectionTypeCS
        CLSSid_ConstraintCS,            // 6 => ConstraintCS
        CLSSid_ContextCS,               // 7 => ContextCS
        CLSSid_DataTypeCS,              // 8 => DataTypeCS
        CLSSid_DetailCS,                // 9 => DetailCS
        CLSSid_EnumerationCS,           // 10 => EnumerationCS
        CLSSid_EnumerationLiteralCS,    // 11 => EnumerationLiteralCS
        CLSSid_ExpSpecificationCS,      // 12 => ExpSpecificationCS
        CLSSid_IfExpCS,                 // 13 => IfExpCS
        CLSSid_ImportCS,                // 14 => ImportCS
        CLSSid_InvalidLiteralExpCS,     // 15 => InvalidLiteralExpCS
        CLSSid_LambdaTypeCS,            // 16 => LambdaTypeCS
        CLSSid_LetExpCS,                // 17 => LetExpCS
        CLSSid_NameExpCS,               // 18 => NameExpCS
        CLSSid_NullLiteralExpCS,        // 19 => NullLiteralExpCS
        CLSSid_NumberLiteralExpCS,      // 20 => NumberLiteralExpCS
        CLSSid_OperationCS,             // 21 => OperationCS
        CLSSid_PackageCS,               // 22 => PackageCS
        CLSSid_ParameterCS,             // 23 => ParameterCS
        CLSSid_PrimitiveTypeRefCS,      // 24 => PrimitiveTypeRefCS
        CLSSid_ReferenceCS,             // 25 => ReferenceCS
        CLSSid_RootPackageCS,           // 26 => RootPackageCS
        CLSSid_SelfExpCS,               // 27 => SelfExpCS
        CLSSid_ShadowPartCS,            // 28 => ShadowPartCS
        CLSSid_SpecificationCS,         // 29 => SpecificationCS
        CLSSid_StringLiteralExpCS,      // 30 => StringLiteralExpCS
        CLSSid_StructuredClassCS,       // 31 => StructuredClassCS
        CLSSid_TemplateBindingCS,       // 32 => TemplateBindingCS
        CLSSid_TemplateParameterSubstitutionCS,// 33 => TemplateParameterSubstitutionCS
        CLSSid_TemplateSignatureCS,     // 34 => TemplateSignatureCS
        CLSSid_TupleLiteralExpCS,       // 35 => TupleLiteralExpCS
        CLSSid_TupleLiteralPartCS,      // 36 => TupleLiteralPartCS
        CLSSid_TuplePartCS,             // 37 => TuplePartCS
        CLSSid_TupleTypeCS,             // 38 => TupleTypeCS
        CLSSid_TypeLiteralExpCS,        // 39 => TypeLiteralExpCS
        CLSSid_TypeParameterCS,         // 40 => TypeParameterCS
        CLSSid_UnlimitedNaturalLiteralExpCS,// 41 => UnlimitedNaturalLiteralExpCS
        CLSSid_VariableCS               // 42 => VariableCS
    };
    
    /*
     * Mapping from each ClassIndex to all the ClassIndexes to which an object of the outer index
     * may contribute results to an allInstances() invocation.
     * Non trivial inner arrays arise when one ClassId is a derivation of another and so an
     * instance of the derived classId contributes to derived and inherited ClassIndexes.
     */
    private final static int @NonNull [] @NonNull [] classIndex2allClassIndexes = new int @NonNull [] @NonNull [] {
        {0},                    // 0 : AnnotationCS -> {AnnotationCS}
        {1},                    // 1 : AttributeCS -> {AttributeCS}
        {2},                    // 2 : BooleanLiteralExpCS -> {BooleanLiteralExpCS}
        {3},                    // 3 : CollectionLiteralExpCS -> {CollectionLiteralExpCS}
        {4},                    // 4 : CollectionLiteralPartCS -> {CollectionLiteralPartCS}
        {5},                    // 5 : CollectionTypeCS -> {CollectionTypeCS}
        {6},                    // 6 : ConstraintCS -> {ConstraintCS}
        {7},                    // 7 : ContextCS -> {ContextCS}
        {8},                    // 8 : DataTypeCS -> {DataTypeCS}
        {9},                    // 9 : DetailCS -> {DetailCS}
        {10},                   // 10 : EnumerationCS -> {EnumerationCS}
        {11},                   // 11 : EnumerationLiteralCS -> {EnumerationLiteralCS}
        {12,29},                // 12 : ExpSpecificationCS -> {ExpSpecificationCS,SpecificationCS}
        {13},                   // 13 : IfExpCS -> {IfExpCS}
        {14},                   // 14 : ImportCS -> {ImportCS}
        {15},                   // 15 : InvalidLiteralExpCS -> {InvalidLiteralExpCS}
        {16},                   // 16 : LambdaTypeCS -> {LambdaTypeCS}
        {17},                   // 17 : LetExpCS -> {LetExpCS}
        {18},                   // 18 : NameExpCS -> {NameExpCS}
        {19},                   // 19 : NullLiteralExpCS -> {NullLiteralExpCS}
        {20},                   // 20 : NumberLiteralExpCS -> {NumberLiteralExpCS}
        {21},                   // 21 : OperationCS -> {OperationCS}
        {22},                   // 22 : PackageCS -> {PackageCS}
        {23},                   // 23 : ParameterCS -> {ParameterCS}
        {24},                   // 24 : PrimitiveTypeRefCS -> {PrimitiveTypeRefCS}
        {25},                   // 25 : ReferenceCS -> {ReferenceCS}
        {26},                   // 26 : RootPackageCS -> {RootPackageCS}
        {27},                   // 27 : SelfExpCS -> {SelfExpCS}
        {28},                   // 28 : ShadowPartCS -> {ShadowPartCS}
        {29},                   // 29 : SpecificationCS -> {SpecificationCS}
        {30},                   // 30 : StringLiteralExpCS -> {StringLiteralExpCS}
        {31},                   // 31 : StructuredClassCS -> {StructuredClassCS}
        {32},                   // 32 : TemplateBindingCS -> {TemplateBindingCS}
        {33},                   // 33 : TemplateParameterSubstitutionCS -> {TemplateParameterSubstitutionCS}
        {34},                   // 34 : TemplateSignatureCS -> {TemplateSignatureCS}
        {35},                   // 35 : TupleLiteralExpCS -> {TupleLiteralExpCS}
        {36,42},                // 36 : TupleLiteralPartCS -> {TupleLiteralPartCS,VariableCS}
        {37},                   // 37 : TuplePartCS -> {TuplePartCS}
        {38},                   // 38 : TupleTypeCS -> {TupleTypeCS}
        {39},                   // 39 : TypeLiteralExpCS -> {TypeLiteralExpCS}
        {40},                   // 40 : TypeParameterCS -> {TypeParameterCS}
        {41},                   // 41 : UnlimitedNaturalLiteralExpCS -> {UnlimitedNaturalLiteralExpCS}
        {42}                    // 42 : VariableCS -> {VariableCS}
    };
    
    private final PivotLookupSolver lookupSolver = new PivotLookupSolver(executor);
    
    public EssentialOCLCS2AS_qvtp_qvtcas(final @NonNull Executor executor) throws ReflectiveOperationException {
        super(executor, new @NonNull String[] {"leftCS", "rightAS"}, null, classIndex2classId, classIndex2allClassIndexes);
    }
    
    @Override
    public boolean run() throws ReflectiveOperationException {
        return MAP___root__() && invocationManager.flush();
    }
    
    /**
     * pivot::Visitable::lookupClass(cName : String[?]) : Class[?]
     * 
     * lookupClass(cName)
     */
    public /*@NonInvalid*/ Class lookupClass(final /*@NonInvalid*/ org.eclipse.ocl.pivot.util.@org.eclipse.jdt.annotation.NonNull Visitable self_0, final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.Nullable String cName) {
        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Class lookupClass = this.lookupClass(self_0, cName);
        return lookupClass;
    }
    
    /**
     * pivot::Visitable::lookupNamespace(segments : OrderedSet(basecs::PathElementCS)) : Namespace[?]
     * 
     * 
     * if segments->size() = 1
     * then lookupNamespace(segments->first())
     * else
     *   let
     *     qualifierSegments : OrderedSet(basecs::PathElementCS) = segments->subOrderedSet(1,
     *       segments->size() - 1)
     *   in
     *     let
     *       qualifier : Namespace[?] = lookupNamespace(qualifierSegments)
     *     in qualifier?.lookupQualifiedNamespace(segments->last())
     * endif
     */
    public /*@NonInvalid*/ Namespace lookupNamespace(final /*@NonInvalid*/ org.eclipse.ocl.pivot.util.@org.eclipse.jdt.annotation.NonNull Visitable self_1, final /*@NonInvalid*/ List<PathElementCS> segments) {
        final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
        final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_segments = idResolver.createOrderedSetOfAll(ORD_CLSSid_PathElementCS, segments);
        final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull IntegerValue size = CollectionSizeOperation.INSTANCE.evaluate(BOXED_segments);
        final /*@NonInvalid*/ boolean eq = size.equals(INT_1);
        /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Namespace symbol_1;
        if (eq) {
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable PathElementCS aPathElementCS = (PathElementCS)OrderedCollectionFirstOperation.INSTANCE.evaluate(BOXED_segments);
            if (aPathElementCS == null) {
                throw new InvalidValueException("Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PathElementCS::name\'");
            }
            @SuppressWarnings("null")
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.NonNull String name = aPathElementCS.getName();
            PivotLookupResult<Namespace> _lookupResult = lookupSolver._lookupUnqualifiedNamespace(self_1, name);
            Namespace _lookupUnqualifiedNamespace = null;
            if (_lookupResult.size() == 1) {
                _lookupUnqualifiedNamespace = _lookupResult.getSingleResult();
            } else {
                handleLookupError(aPathElementCS,name);
            };
            symbol_1 = _lookupUnqualifiedNamespace;
        }
        else {
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull IntegerValue diff = (IntegerValue)NumericMinusOperation.INSTANCE.evaluate(size, INT_1);
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue qualifierSegments = OrderedSetSubOrderedSetOperation.INSTANCE.evaluate(BOXED_segments, INT_1, diff);
            final List<PathElementCS> UNBOXED_qualifierSegments = qualifierSegments.asEcoreObjects(idResolver, PathElementCS.class);
            assert UNBOXED_qualifierSegments != null;
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Namespace qualifier = this.lookupNamespace(self_1, UNBOXED_qualifierSegments);
            /*@Caught*/ @Nullable Object CAUGHT_qualifier;
            try {
                CAUGHT_qualifier = qualifier;
            }
            catch (Exception e) {
                CAUGHT_qualifier = ValueUtil.createInvalidValue(e);
            }
            final /*@NonInvalid*/ @NonNull Object symbol_0 = CAUGHT_qualifier == null;
            /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Namespace safe_lookupQualifiedNamespace_source;
            if (symbol_0 == Boolean.TRUE) {
                safe_lookupQualifiedNamespace_source = null;
            }
            else {
                if (qualifier == null) {
                    throw new InvalidValueException("Null where non-null value required");
                }
                final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable PathElementCS aPathElementCS_0 = (PathElementCS)OrderedCollectionLastOperation.INSTANCE.evaluate(BOXED_segments);
                if (aPathElementCS_0 == null) {
                    throw new InvalidValueException("Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PathElementCS::name\'");
                }
                @SuppressWarnings("null")
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.NonNull String name_0 = aPathElementCS_0.getName();
                PivotLookupResult<Namespace> _lookupResult_0 = lookupSolver._lookupQualifiedNamespace(qualifier, name_0);
                Namespace _lookupQualifiedNamespace = null;
                if (_lookupResult_0.size() == 1) {
                    _lookupQualifiedNamespace = _lookupResult_0.getSingleResult();
                } else {
                    handleLookupError(aPathElementCS_0,name_0);
                };
                safe_lookupQualifiedNamespace_source = _lookupQualifiedNamespace;
            }
            symbol_1 = safe_lookupQualifiedNamespace_source;
        }
        return symbol_1;
    }
    
    /**
     * pivot::Visitable::lookupVariable(vName : String[?]) : Variable[?]
     * 
     * lookupVariable(vName)
     */
    public /*@NonInvalid*/ Variable lookupVariable(final /*@NonInvalid*/ org.eclipse.ocl.pivot.util.@org.eclipse.jdt.annotation.NonNull Visitable self_2, final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.Nullable String vName) {
        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable lookupVariable = this.lookupVariable(self_2, vName);
        return lookupVariable;
    }
    
    /**
     * 
     * map __root__ in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS ( |)
     * { |}
     * where ( |)
     * {_'\u00ABAnnotationCS\u00BB' : Set(basecs::AnnotationCS) = leftCS.objectsOfKind(basecs::AnnotationCS)
     *   ;
     * _'\u00ABAttributeCS\u00BB' : Set(basecs::AttributeCS) = leftCS.objectsOfKind(basecs::AttributeCS)
     *   ;
     * _'\u00ABBooleanLiteralExpCS\u00BB' : Set(essentialoclcs::BooleanLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::BooleanLiteralExpCS)
     *   ;
     * _'\u00ABCollectionLiteralExpCS\u00BB' : Set(essentialoclcs::CollectionLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::CollectionLiteralExpCS)
     *   ;
     * _'\u00ABCollectionLiteralPartCS\u00BB' : Set(essentialoclcs::CollectionLiteralPartCS) = leftCS.objectsOfKind(essentialoclcs::CollectionLiteralPartCS)
     *   ;
     * _'\u00ABCollectionTypeCS\u00BB' : Set(essentialoclcs::CollectionTypeCS) = leftCS.objectsOfKind(essentialoclcs::CollectionTypeCS)
     *   ;
     * _'\u00ABConstraintCS\u00BB' : Set(basecs::ConstraintCS) = leftCS.objectsOfKind(basecs::ConstraintCS)
     *   ;
     * _'\u00ABContextCS\u00BB' : Set(essentialoclcs::ContextCS) = leftCS.objectsOfKind(essentialoclcs::ContextCS)
     *   ;
     * _'\u00ABDataTypeCS\u00BB' : Set(basecs::DataTypeCS) = leftCS.objectsOfKind(basecs::DataTypeCS)
     *   ;
     * _'\u00ABDetailCS\u00BB' : Set(basecs::DetailCS) = leftCS.objectsOfKind(basecs::DetailCS)
     *   ;
     * _'\u00ABEnumerationCS\u00BB' : Set(basecs::EnumerationCS) = leftCS.objectsOfKind(basecs::EnumerationCS)
     *   ;
     * _'\u00ABEnumerationLiteralCS\u00BB' : Set(basecs::EnumerationLiteralCS) = leftCS.objectsOfKind(basecs::EnumerationLiteralCS)
     *   ;
     * _'\u00ABExpSpecificationCS\u00BB' : Set(essentialoclcs::ExpSpecificationCS) = leftCS.objectsOfKind(essentialoclcs::ExpSpecificationCS)
     *   ;
     * _'\u00ABIfExpCS\u00BB' : Set(essentialoclcs::IfExpCS) = leftCS.objectsOfKind(essentialoclcs::IfExpCS)
     *   ;
     * _'\u00ABImportCS\u00BB' : Set(basecs::ImportCS) = leftCS.objectsOfKind(basecs::ImportCS)
     *   ;
     * _'\u00ABInvalidLiteralExpCS\u00BB' : Set(essentialoclcs::InvalidLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::InvalidLiteralExpCS)
     *   ;
     * _'\u00ABLambdaTypeCS\u00BB' : Set(basecs::LambdaTypeCS) = leftCS.objectsOfKind(basecs::LambdaTypeCS)
     *   ;
     * _'\u00ABLetExpCS\u00BB' : Set(essentialoclcs::LetExpCS) = leftCS.objectsOfKind(essentialoclcs::LetExpCS)
     *   ;
     * _'\u00ABNameExpCS\u00BB' : Set(essentialoclcs::NameExpCS) = leftCS.objectsOfKind(essentialoclcs::NameExpCS)
     *   ;
     * _'\u00ABNullLiteralExpCS\u00BB' : Set(essentialoclcs::NullLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::NullLiteralExpCS)
     *   ;
     * _'\u00ABNumberLiteralExpCS\u00BB' : Set(essentialoclcs::NumberLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::NumberLiteralExpCS)
     *   ;
     * _'\u00ABOperationCS\u00BB' : Set(basecs::OperationCS) = leftCS.objectsOfKind(basecs::OperationCS)
     *   ;
     * _'\u00ABPackageCS\u00BB' : Set(basecs::PackageCS) = leftCS.objectsOfKind(basecs::PackageCS)
     *   ;
     * _'\u00ABParameterCS\u00BB' : Set(basecs::ParameterCS) = leftCS.objectsOfKind(basecs::ParameterCS)
     *   ;
     * _'\u00ABPrimitiveTypeRefCS\u00BB' : Set(basecs::PrimitiveTypeRefCS) = leftCS.objectsOfKind(basecs::PrimitiveTypeRefCS)
     *   ;
     * _'\u00ABReferenceCS\u00BB' : Set(basecs::ReferenceCS) = leftCS.objectsOfKind(basecs::ReferenceCS)
     *   ;
     * _'\u00ABRootPackageCS\u00BB' : Set(basecs::RootPackageCS) = leftCS.objectsOfKind(basecs::RootPackageCS)
     *   ;
     * _'\u00ABSelfExpCS\u00BB' : Set(essentialoclcs::SelfExpCS) = leftCS.objectsOfKind(essentialoclcs::SelfExpCS)
     *   ;
     * _'\u00ABShadowPartCS\u00BB' : Set(essentialoclcs::ShadowPartCS) = leftCS.objectsOfKind(essentialoclcs::ShadowPartCS)
     *   ;
     * _'\u00ABSpecificationCS\u00BB' : Set(basecs::SpecificationCS) = leftCS.objectsOfKind(basecs::SpecificationCS)
     *   ;
     * _'\u00ABStringLiteralExpCS\u00BB' : Set(essentialoclcs::StringLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::StringLiteralExpCS)
     *   ;
     * _'\u00ABStructuredClassCS\u00BB' : Set(basecs::StructuredClassCS) = leftCS.objectsOfKind(basecs::StructuredClassCS)
     *   ;
     * _'\u00ABTemplateBindingCS\u00BB' : Set(basecs::TemplateBindingCS) = leftCS.objectsOfKind(basecs::TemplateBindingCS)
     *   ;
     * _'\u00ABTemplateParameterSubstitutionCS\u00BB' : Set(basecs::TemplateParameterSubstitutionCS) = leftCS.objectsOfKind(basecs::TemplateParameterSubstitutionCS)
     *   ;
     * _'\u00ABTemplateSignatureCS\u00BB' : Set(basecs::TemplateSignatureCS) = leftCS.objectsOfKind(basecs::TemplateSignatureCS)
     *   ;
     * _'\u00ABTupleLiteralExpCS\u00BB' : Set(essentialoclcs::TupleLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::TupleLiteralExpCS)
     *   ;
     * _'\u00ABTupleLiteralPartCS\u00BB' : Set(essentialoclcs::TupleLiteralPartCS) = leftCS.objectsOfKind(essentialoclcs::TupleLiteralPartCS)
     *   ;
     * _'\u00ABTuplePartCS\u00BB' : Set(basecs::TuplePartCS) = leftCS.objectsOfKind(basecs::TuplePartCS)
     *   ;
     * _'\u00ABTupleTypeCS\u00BB' : Set(basecs::TupleTypeCS) = leftCS.objectsOfKind(basecs::TupleTypeCS)
     *   ;
     * _'\u00ABTypeLiteralExpCS\u00BB' : Set(essentialoclcs::TypeLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::TypeLiteralExpCS)
     *   ;
     * _'\u00ABTypeParameterCS\u00BB' : Set(basecs::TypeParameterCS) = leftCS.objectsOfKind(basecs::TypeParameterCS)
     *   ;
     * _'\u00ABUnlimitedNaturalLiteralExpCS\u00BB' : Set(essentialoclcs::UnlimitedNaturalLiteralExpCS) = leftCS.objectsOfKind(essentialoclcs::UnlimitedNaturalLiteralExpCS)
     *   ;
     * _'\u00ABVariableCS\u00BB' : Set(essentialoclcs::VariableCS) = leftCS.objectsOfKind(essentialoclcs::VariableCS)
     *   ;
     * ji_AnnotationCS : Set(basecs::AnnotationCS[*|1]) = _'\u00ABAnnotationCS\u00BB';
     * ji_AttributeCS : Set(basecs::AttributeCS[*|1]) = _'\u00ABAttributeCS\u00BB';
     * ji_BooleanLiteralExpCS : Set(essentialoclcs::BooleanLiteralExpCS[*|1]) = _'\u00ABBooleanLiteralExpCS\u00BB';
     * ji_CollectionLiteralExpCS : Set(essentialoclcs::CollectionLiteralExpCS[*|1]) = _'\u00ABCollectionLiteralExpCS\u00BB';
     * ji_CollectionLiteralPartCS : Set(essentialoclcs::CollectionLiteralPartCS[*|1]) = _'\u00ABCollectionLiteralPartCS\u00BB';
     * ji_CollectionTypeCS : Set(essentialoclcs::CollectionTypeCS[*|1]) = _'\u00ABCollectionTypeCS\u00BB';
     * ji_ConstraintCS : Set(basecs::ConstraintCS[*|1]) = _'\u00ABConstraintCS\u00BB';
     * ji_ContextCS : Set(essentialoclcs::ContextCS[*|1]) = _'\u00ABContextCS\u00BB';
     * ji_DataTypeCS : Set(basecs::DataTypeCS[*|1]) = _'\u00ABDataTypeCS\u00BB';
     * ji_DetailCS : Set(basecs::DetailCS[*|1]) = _'\u00ABDetailCS\u00BB';
     * ji_EnumerationCS : Set(basecs::EnumerationCS[*|1]) = _'\u00ABEnumerationCS\u00BB';
     * ji_EnumerationLiteralCS : Set(basecs::EnumerationLiteralCS[*|1]) = _'\u00ABEnumerationLiteralCS\u00BB';
     * ji_ExpSpecificationCS : Set(essentialoclcs::ExpSpecificationCS[*|1]) = _'\u00ABExpSpecificationCS\u00BB';
     * ji_IfExpCS : Set(essentialoclcs::IfExpCS[*|1]) = _'\u00ABIfExpCS\u00BB';
     * ji_ImportCS : Set(basecs::ImportCS[*|1]) = _'\u00ABImportCS\u00BB';
     * ji_InvalidLiteralExpCS : Set(essentialoclcs::InvalidLiteralExpCS[*|1]) = _'\u00ABInvalidLiteralExpCS\u00BB';
     * ji_LambdaTypeCS : Set(basecs::LambdaTypeCS[*|1]) = _'\u00ABLambdaTypeCS\u00BB';
     * ji_LetExpCS : Set(essentialoclcs::LetExpCS[*|1]) = _'\u00ABLetExpCS\u00BB';
     * ji_NameExpCS : Set(essentialoclcs::NameExpCS[*|1]) = _'\u00ABNameExpCS\u00BB';
     * ji_NullLiteralExpCS : Set(essentialoclcs::NullLiteralExpCS[*|1]) = _'\u00ABNullLiteralExpCS\u00BB';
     * ji_NumberLiteralExpCS : Set(essentialoclcs::NumberLiteralExpCS[*|1]) = _'\u00ABNumberLiteralExpCS\u00BB';
     * ji_OperationCS : Set(basecs::OperationCS[*|1]) = _'\u00ABOperationCS\u00BB';
     * ji_PackageCS : Set(basecs::PackageCS[*|1]) = _'\u00ABPackageCS\u00BB';
     * ji_ParameterCS : Set(basecs::ParameterCS[*|1]) = _'\u00ABParameterCS\u00BB';
     * ji_PrimitiveTypeRefCS : Set(basecs::PrimitiveTypeRefCS[*|1]) = _'\u00ABPrimitiveTypeRefCS\u00BB';
     * ji_ReferenceCS : Set(basecs::ReferenceCS[*|1]) = _'\u00ABReferenceCS\u00BB';
     * ji_RootPackageCS : Set(basecs::RootPackageCS[*|1]) = _'\u00ABRootPackageCS\u00BB';
     * ji_SelfExpCS : Set(essentialoclcs::SelfExpCS[*|1]) = _'\u00ABSelfExpCS\u00BB';
     * ji_ShadowPartCS : Set(essentialoclcs::ShadowPartCS[*|1]) = _'\u00ABShadowPartCS\u00BB';
     * ji_SpecificationCS : Set(basecs::SpecificationCS[*|1]) = _'\u00ABSpecificationCS\u00BB';
     * ji_StringLiteralExpCS : Set(essentialoclcs::StringLiteralExpCS[*|1]) = _'\u00ABStringLiteralExpCS\u00BB';
     * ji_StructuredClassCS : Set(basecs::StructuredClassCS[*|1]) = _'\u00ABStructuredClassCS\u00BB';
     * ji_TemplateBindingCS : Set(basecs::TemplateBindingCS[*|1]) = _'\u00ABTemplateBindingCS\u00BB';
     * ji_TemplateParameterSubstitutionCS : Set(basecs::TemplateParameterSubstitutionCS[*|1]) = _'\u00ABTemplateParameterSubstitutionCS\u00BB';
     * ji_TemplateParameterSubstitutionCS_1 : Set(basecs::TemplateParameterSubstitutionCS[*|1]) = _'\u00ABTemplateParameterSubstitutionCS\u00BB'->select(i | i.owningBinding <> null)
     *   ;
     * ji_TemplateSignatureCS : Set(basecs::TemplateSignatureCS[*|1]) = _'\u00ABTemplateSignatureCS\u00BB';
     * ji_TupleLiteralExpCS : Set(essentialoclcs::TupleLiteralExpCS[*|1]) = _'\u00ABTupleLiteralExpCS\u00BB';
     * ji_TupleLiteralPartCS : Set(essentialoclcs::TupleLiteralPartCS[*|1]) = _'\u00ABTupleLiteralPartCS\u00BB';
     * ji_TuplePartCS : Set(basecs::TuplePartCS[*|1]) = _'\u00ABTuplePartCS\u00BB';
     * ji_TupleTypeCS : Set(basecs::TupleTypeCS[*|1]) = _'\u00ABTupleTypeCS\u00BB';
     * ji_TypeLiteralExpCS : Set(essentialoclcs::TypeLiteralExpCS[*|1]) = _'\u00ABTypeLiteralExpCS\u00BB';
     * ji_TypeParameterCS : Set(basecs::TypeParameterCS[*|1]) = _'\u00ABTypeParameterCS\u00BB';
     * ji_UnlimitedNaturalLiteralExpCS : Set(essentialoclcs::UnlimitedNaturalLiteralExpCS[*|1]) = _'\u00ABUnlimitedNaturalLiteralExpCS\u00BB';
     * ji_VariableCS : Set(essentialoclcs::VariableCS[*|1]) = _'\u00ABVariableCS\u00BB';
     *  |}
     * for loop0 : basecs::AnnotationCS in ji_AnnotationCS {
     *     call m_AnnotationCS_pivot {
     * lAnnotationCS := loop0;
     * }}
     *   for loop0 : basecs::AttributeCS in ji_AttributeCS {
     *     call m_AttributeCS_pivot {
     * lAttributeCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::BooleanLiteralExpCS in ji_BooleanLiteralExpCS {
     *     call m_BooleanLiteralExpCS_pivot {
     * lBooleanLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralExpCS in ji_CollectionLiteralExpCS {
     *     call m_CollectionLiteralExpCS_pivot {
     * lCollectionLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralPartCS in ji_CollectionLiteralPartCS {
     *     call m_CollectionLiteralPartCS_pivot {
     * lCollectionLiteralPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralPartCS in ji_CollectionLiteralPartCS {
     *     call m_CollectionLiteralPartCS_pivot_1 {
     * lCollectionLiteralPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionTypeCS in ji_CollectionTypeCS {
     *     call m_CollectionTypeCS_pivot {
     * lCollectionTypeCS := loop0;
     * }}
     *   for loop0 : basecs::ConstraintCS in ji_ConstraintCS {
     *     call m_ConstraintCS_pivot {
     * lConstraintCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ContextCS in ji_ContextCS {
     *     call m_ContextCS_pivot {
     * lContextCS := loop0;
     * }}
     *   for loop0 : basecs::DataTypeCS in ji_DataTypeCS {
     *     call m_DataTypeCS_pivot {
     * lDataTypeCS := loop0;
     * }}
     *   for loop0 : basecs::DetailCS in ji_DetailCS {
     *     call m_DetailCS_pivot {
     * lDetailCS := loop0;
     * }}
     *   for loop0 : basecs::EnumerationCS in ji_EnumerationCS {
     *     call m_EnumerationCS_pivot {
     * lEnumerationCS := loop0;
     * }}
     *   for loop0 : basecs::EnumerationLiteralCS in ji_EnumerationLiteralCS {
     *     call m_EnumerationLiteralCS_pivot {
     * lEnumerationLiteralCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ExpSpecificationCS in ji_ExpSpecificationCS {
     *     call m_ExpSpecificationCS_ownedExpression_pivot {
     * lExpSpecificationCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ExpSpecificationCS in ji_ExpSpecificationCS {
     *     call m_ExpSpecificationCS_ownedExpression0_pivot {
     * lExpSpecificationCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::IfExpCS in ji_IfExpCS {
     *     call m_IfExpCS_pivot {
     * lIfExpCS := loop0;
     * }}
     *   for loop0 : basecs::ImportCS in ji_ImportCS {
     *     call m_ImportCS_pivot {
     * lImportCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::InvalidLiteralExpCS in ji_InvalidLiteralExpCS {
     *     call m_InvalidLiteralExpCS_pivot {
     * lInvalidLiteralExpCS := loop0;
     * }}
     *   for loop0 : basecs::LambdaTypeCS in ji_LambdaTypeCS {
     *     call m_LambdaTypeCS_pivot {
     * lLambdaTypeCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::LetExpCS in ji_LetExpCS {
     *     call m_LetExpCS_pivot {
     * lLetExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_2 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_3 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_4 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_5 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_6 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NullLiteralExpCS in ji_NullLiteralExpCS {
     *     call m_NullLiteralExpCS_pivot {
     * lNullLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NumberLiteralExpCS in ji_NumberLiteralExpCS {
     *     call m_NumberLiteralExpCS_pivot {
     * lNumberLiteralExpCS := loop0;
     * }}
     *   for loop0 : basecs::OperationCS in ji_OperationCS {
     *     call m_OperationCS_pivot {
     * lOperationCS := loop0;
     * }}
     *   for loop0 : basecs::PackageCS in ji_PackageCS {
     *     call m_PackageCS_pivot {
     * lPackageCS := loop0;
     * }}
     *   for loop0 : basecs::ParameterCS in ji_ParameterCS {
     *     call m_ParameterCS_pivot {
     * lParameterCS := loop0;
     * }}
     *   for loop0 : basecs::PrimitiveTypeRefCS in ji_PrimitiveTypeRefCS {
     *     call m_PrimitiveTypeRefCS_pivot {
     * lPrimitiveTypeRefCS := loop0;
     * }}
     *   for loop0 : basecs::ReferenceCS in ji_ReferenceCS {
     *     call m_ReferenceCS_pivot {
     * lReferenceCS := loop0;
     * }}
     *   for loop0 : basecs::RootPackageCS in ji_RootPackageCS {
     *     call m_RootPackageCS_pivot {
     * lRootPackageCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::SelfExpCS in ji_SelfExpCS {
     *     call m_SelfExpCS_pivot {
     * lSelfExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ShadowPartCS in ji_ShadowPartCS {
     *     call m_ShadowPartCS_pivot {
     * lShadowPartCS := loop0;
     * }}
     *   for loop0 : basecs::SpecificationCS in ji_SpecificationCS {
     *     call m_SpecificationCS_pivot {
     * lSpecificationCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::StringLiteralExpCS in ji_StringLiteralExpCS {
     *     call m_StringLiteralExpCS_pivot {
     * lStringLiteralExpCS := loop0;
     * }}
     *   for loop0 : basecs::StructuredClassCS in ji_StructuredClassCS {
     *     call m_StructuredClassCS_pivot {
     * lStructuredClassCS := loop0;
     * }}
     *   for loop0 : basecs::TemplateBindingCS in ji_TemplateBindingCS {
     *     call m_TemplateBindingCS_pivot {
     * lTemplateBindingCS := loop0;
     * }}
     *   for loop0 : basecs::TemplateParameterSubstitutionCS in ji_TemplateParameterSubstitutionCS {
     *     call m_TemplateParameterSubstitutionCS_pivot {
     * lTemplateParameterSubstitutionCS := loop0;
     * }}
     *   for loop0 : basecs::TemplateSignatureCS in ji_TemplateSignatureCS {
     *     call m_TemplateSignatureCS_pivot {
     * lTemplateSignatureCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TupleLiteralExpCS in ji_TupleLiteralExpCS {
     *     call m_TupleLiteralExpCS_pivot {
     * lTupleLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TupleLiteralPartCS in ji_TupleLiteralPartCS {
     *     call m_TupleLiteralPartCS_pivot {
     * lTupleLiteralPartCS := loop0;
     * }}
     *   for loop0 : basecs::TuplePartCS in ji_TuplePartCS {
     *     call m_TuplePartCS_pivot {
     * lTuplePartCS := loop0;
     * }}
     *   for loop0 : basecs::TupleTypeCS in ji_TupleTypeCS {
     *     call m_TupleTypeCS_pivot {
     * lTupleTypeCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TypeLiteralExpCS in ji_TypeLiteralExpCS {
     *     call m_TypeLiteralExpCS_pivot {
     * lTypeLiteralExpCS := loop0;
     * }}
     *   for loop0 : basecs::TypeParameterCS in ji_TypeParameterCS {
     *     call m_TypeParameterCS_pivot {
     * lTypeParameterCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::UnlimitedNaturalLiteralExpCS in ji_UnlimitedNaturalLiteralExpCS {
     *     call m_UnlimitedNaturalLiteralExpCS_pivot {
     * lUnlimitedNaturalLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::VariableCS in ji_VariableCS {
     *     call m_VariableCS_pivot {
     * lVariableCS := loop0;
     * }}
     *   for loop0 : basecs::AnnotationCS in ji_AnnotationCS {
     *     call m_AnnotationCS_name_ownedAnnotations_ownedContents {
     * lAnnotationCS := loop0;
     * }}
     *   for loop0 : basecs::AttributeCS in ji_AttributeCS {
     *     call m_AttributeCS_default_name_ownedAnnotations_pivot_ {
     * lAttributeCS := loop0;
     * }}
     *   for loop0 : basecs::AttributeCS in ji_AttributeCS {
     *     call m_AttributeCS_ownedDefaultExpressions_pivot {
     * lAttributeCS := loop0;
     * }}
     *   for loop0 : basecs::AttributeCS in ji_AttributeCS {
     *     call m_AttributeCS_ownedType_pivot {
     * lAttributeCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::BooleanLiteralExpCS in ji_BooleanLiteralExpCS {
     *     call m_BooleanLiteralExpCS_pivot_symbol {
     * lBooleanLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::BooleanLiteralExpCS in ji_BooleanLiteralExpCS {
     *     call m_BooleanLiteralExpCS_pivot_1 {
     * lBooleanLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralExpCS in ji_CollectionLiteralExpCS {
     *     call m_CollectionLiteralExpCS_ownedParts_pivot {
     * lCollectionLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralExpCS in ji_CollectionLiteralExpCS {
     *     call m_CollectionLiteralExpCS_ownedType_pivot {
     * lCollectionLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralPartCS in ji_CollectionLiteralPartCS {
     *     call m_CollectionLiteralPartCS_ownedExpression_pivot {
     * lCollectionLiteralPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralPartCS in ji_CollectionLiteralPartCS {
     *     call m_CollectionLiteralPartCS_ownedExpression_pivot_1 {
     * lCollectionLiteralPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralPartCS in ji_CollectionLiteralPartCS {
     *     call m_CollectionLiteralPartCS_ownedExpression_pivot_2 {
     * lCollectionLiteralPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionLiteralPartCS in ji_CollectionLiteralPartCS {
     *     call m_CollectionLiteralPartCS_ownedLastExpression_pivo {
     * lCollectionLiteralPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::CollectionTypeCS in ji_CollectionTypeCS {
     *     call m_CollectionTypeCS_ownedType_pivot {
     * lCollectionTypeCS := loop0;
     * }}
     *   for loop0 : basecs::ConstraintCS in ji_ConstraintCS {
     *     call m_ConstraintCS_ownedSpecification_pivot {
     * lConstraintCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ContextCS in ji_ContextCS {
     *     call m_ContextCS_ownedExpression_pivot {
     * lContextCS := loop0;
     * }}
     *   for loop0 : basecs::DataTypeCS in ji_DataTypeCS {
     *     call m_DataTypeCS_instanceClassName_isSerializable_name {
     * lDataTypeCS := loop0;
     * }}
     *   for loop0 : basecs::DataTypeCS in ji_DataTypeCS {
     *     call m_DataTypeCS_ownedSignature_pivot {
     * lDataTypeCS := loop0;
     * }}
     *   for loop0 : basecs::DetailCS in ji_DetailCS {
     *     call m_DetailCS_name_pivot_values {
     * lDetailCS := loop0;
     * }}
     *   for loop0 : basecs::EnumerationCS in ji_EnumerationCS {
     *     call m_EnumerationCS_instanceClassName_isSerializable_n {
     * lEnumerationCS := loop0;
     * }}
     *   for loop0 : basecs::EnumerationCS in ji_EnumerationCS {
     *     call m_EnumerationCS_ownedSignature_pivot {
     * lEnumerationCS := loop0;
     * }}
     *   for loop0 : basecs::EnumerationLiteralCS in ji_EnumerationLiteralCS {
     *     call m_EnumerationLiteralCS_name_ownedAnnotations_pivot {
     * lEnumerationLiteralCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ExpSpecificationCS in ji_ExpSpecificationCS {
     *     call m_ExpSpecificationCS_ownedExpression_pivot_1 {
     * lExpSpecificationCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ExpSpecificationCS in ji_ExpSpecificationCS {
     *     call m_ExpSpecificationCS_exprString_ownedExpression0_p {
     * lExpSpecificationCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::IfExpCS in ji_IfExpCS {
     *     call m_IfExpCS_ownedCondition_pivot {
     * lIfExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::IfExpCS in ji_IfExpCS {
     *     call m_IfExpCS_ownedElseExpression_pivot {
     * lIfExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::IfExpCS in ji_IfExpCS {
     *     call m_IfExpCS_ownedThenExpression_pivot {
     * lIfExpCS := loop0;
     * }}
     *   for loop0 : basecs::ImportCS in ji_ImportCS {
     *     call m_ImportCS_name_pivot {
     * lImportCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::InvalidLiteralExpCS in ji_InvalidLiteralExpCS {
     *     call m_InvalidLiteralExpCS_pivot_1 {
     * lInvalidLiteralExpCS := loop0;
     * }}
     *   for loop0 : basecs::LambdaTypeCS in ji_LambdaTypeCS {
     *     call m_LambdaTypeCS_ownedContextType_pivot {
     * lLambdaTypeCS := loop0;
     * }}
     *   for loop0 : basecs::LambdaTypeCS in ji_LambdaTypeCS {
     *     call m_LambdaTypeCS_name_ownedParameterTypes_pivot {
     * lLambdaTypeCS := loop0;
     * }}
     *   for loop0 : basecs::LambdaTypeCS in ji_LambdaTypeCS {
     *     call m_LambdaTypeCS_ownedResultType_pivot {
     * lLambdaTypeCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::LetExpCS in ji_LetExpCS {
     *     call m_LetExpCS_ownedInExpression_pivot {
     * lLetExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::LetExpCS in ji_LetExpCS {
     *     call m_LetExpCS_ownedInExpression_pivot_1 {
     * lLetExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_isPre_pivot {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredAssociation {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_source {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredAssociation_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_arguments_pivot {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_iterators_pivot {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_accumulators_pivot {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_source_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredIteration {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_arguments_pivot_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_iterators_pivot_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_source_2 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredIteration_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_arguments_isPre_pivot {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_source_3 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredOperation {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_isPre_pivot_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_source_4 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredProperty {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_parts_pivot_value {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredVariable {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NullLiteralExpCS in ji_NullLiteralExpCS {
     *     call m_NullLiteralExpCS_pivot_1 {
     * lNullLiteralExpCS := loop0;
     * }}
     *   for loop0 : basecs::OperationCS in ji_OperationCS {
     *     call m_OperationCS_ownedBodyExpressions_pivot {
     * lOperationCS := loop0;
     * }}
     *   for loop0 : basecs::OperationCS in ji_OperationCS {
     *     call m_OperationCS_name_ownedAnnotations_ownedException {
     * lOperationCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredIteration_2 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredIteration_3 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredOperation_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : basecs::OperationCS in ji_OperationCS {
     *     call m_OperationCS_ownedSignature_pivot {
     * lOperationCS := loop0;
     * }}
     *   for loop0 : basecs::OperationCS in ji_OperationCS {
     *     call m_OperationCS_ownedType_pivot {
     * lOperationCS := loop0;
     * }}
     *   for loop0 : basecs::PackageCS in ji_PackageCS {
     *     call m_PackageCS_name_nsPrefix_nsURI_ownedAnnotations_o {
     * lPackageCS := loop0;
     * }}
     *   for loop0 : basecs::ParameterCS in ji_ParameterCS {
     *     call m_ParameterCS_name_ownedAnnotations_pivot {
     * lParameterCS := loop0;
     * }}
     *   for loop0 : basecs::ParameterCS in ji_ParameterCS {
     *     call m_ParameterCS_ownedType_pivot {
     * lParameterCS := loop0;
     * }}
     *   for loop0 : basecs::PrimitiveTypeRefCS in ji_PrimitiveTypeRefCS {
     *     call m_PrimitiveTypeRefCS_name_pivot {
     * lPrimitiveTypeRefCS := loop0;
     * }}
     *   for loop0 : basecs::ReferenceCS in ji_ReferenceCS {
     *     call m_ReferenceCS_default_name_ownedAnnotations_pivot_ {
     * lReferenceCS := loop0;
     * }}
     *   for loop0 : basecs::ReferenceCS in ji_ReferenceCS {
     *     call m_ReferenceCS_ownedDefaultExpressions_ownedDefault {
     * lReferenceCS := loop0;
     * }}
     *   for loop0 : basecs::ReferenceCS in ji_ReferenceCS {
     *     call m_ReferenceCS_ownedType_pivot {
     * lReferenceCS := loop0;
     * }}
     *   for loop0 : basecs::RootPackageCS in ji_RootPackageCS {
     *     call m_RootPackageCS_ownedImports_ownedPackages_pivot {
     * lRootPackageCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::SelfExpCS in ji_SelfExpCS {
     *     call m_SelfExpCS_name_pivot {
     * lSelfExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ShadowPartCS in ji_ShadowPartCS {
     *     call m_ShadowPartCS_ownedInitExpression_pivot {
     * lShadowPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::ShadowPartCS in ji_ShadowPartCS {
     *     call m_ShadowPartCS_pivot_referredProperty {
     * lShadowPartCS := loop0;
     * }}
     *   for loop0 : basecs::SpecificationCS in ji_SpecificationCS {
     *     call m_SpecificationCS_exprString_pivot {
     * lSpecificationCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::StringLiteralExpCS in ji_StringLiteralExpCS {
     *     call m_StringLiteralExpCS_pivot_segments {
     * lStringLiteralExpCS := loop0;
     * }}
     *   for loop0 : basecs::StructuredClassCS in ji_StructuredClassCS {
     *     call m_StructuredClassCS_instanceClassName_isAbstract_i {
     * lStructuredClassCS := loop0;
     * }}
     *   for loop0 : basecs::StructuredClassCS in ji_StructuredClassCS {
     *     call m_StructuredClassCS_ownedSignature_pivot {
     * lStructuredClassCS := loop0;
     * }}
     *   for loop0 : basecs::TemplateBindingCS in ji_TemplateBindingCS {
     *     call m_TemplateBindingCS_ownedSubstitutions_pivot {
     * lTemplateBindingCS := loop0;
     * }}
     *   for loop0 : basecs::TemplateParameterSubstitutionCS in ji_TemplateParameterSubstitutionCS {
     *     call m_TemplateParameterSubstitutionCS_ownedActualParam {
     * lTemplateParameterSubstitutionCS := loop0;
     * }}
     *   for loop0 : basecs::TemplateParameterSubstitutionCS in ji_TemplateParameterSubstitutionCS_1 {
     *     call m_TemplateParameterSubstitutionCS_owningBinding_pi {
     * lTemplateParameterSubstitutionCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TupleLiteralExpCS in ji_TupleLiteralExpCS {
     *     call m_TupleLiteralExpCS_ownedParts_pivot {
     * lTupleLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TupleLiteralPartCS in ji_TupleLiteralPartCS {
     *     call m_TupleLiteralPartCS_name_pivot {
     * lTupleLiteralPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TupleLiteralPartCS in ji_TupleLiteralPartCS {
     *     call m_TupleLiteralPartCS_ownedInitExpression_pivot {
     * lTupleLiteralPartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TupleLiteralPartCS in ji_TupleLiteralPartCS {
     *     call m_TupleLiteralPartCS_ownedType_pivot {
     * lTupleLiteralPartCS := loop0;
     * }}
     *   for loop0 : basecs::TuplePartCS in ji_TuplePartCS {
     *     call m_TuplePartCS_name_pivot {
     * lTuplePartCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredProperty_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : basecs::TuplePartCS in ji_TuplePartCS {
     *     call m_TuplePartCS_ownedType_pivot {
     * lTuplePartCS := loop0;
     * }}
     *   for loop0 : basecs::TupleTypeCS in ji_TupleTypeCS {
     *     call m_TupleTypeCS_name_ownedParts_pivot {
     * lTupleTypeCS := loop0;
     * }}
     *   for loop0 : basecs::ImportCS in ji_ImportCS {
     *     call m_ImportCS_ownedPathName_pivot {
     * lImportCS := loop0;
     * }}
     *   for loop0 : basecs::ReferenceCS in ji_ReferenceCS {
     *     call m_ReferenceCS_ownedType_pivot_referredOpposite {
     * lReferenceCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TypeLiteralExpCS in ji_TypeLiteralExpCS {
     *     call m_TypeLiteralExpCS_ownedType_pivot {
     * lTypeLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::TypeLiteralExpCS in ji_TypeLiteralExpCS {
     *     call m_TypeLiteralExpCS_pivot_1 {
     * lTypeLiteralExpCS := loop0;
     * }}
     *   for loop0 : basecs::TypeParameterCS in ji_TypeParameterCS {
     *     call m_TypeParameterCS_name_ownedExtends_pivot {
     * lTypeParameterCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::UnlimitedNaturalLiteralExpCS in ji_UnlimitedNaturalLiteralExpCS {
     *     call m_UnlimitedNaturalLiteralExpCS_pivot_1 {
     * lUnlimitedNaturalLiteralExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::VariableCS in ji_VariableCS {
     *     call m_VariableCS_name_pivot {
     * lVariableCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredVariable_1 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::VariableCS in ji_VariableCS {
     *     call m_VariableCS_ownedInitExpression_pivot {
     * lVariableCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::VariableCS in ji_VariableCS {
     *     call m_VariableCS_ownedType_pivot {
     * lVariableCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::NameExpCS in ji_NameExpCS {
     *     call m_NameExpCS_pivot_referredVariable_2 {
     * lNameExpCS := loop0;
     * }}
     *   for loop0 : essentialoclcs::SelfExpCS in ji_SelfExpCS {
     *     call m_SelfExpCS_pivot_1 {
     * lSelfExpCS := loop0;
     * }}
     */
    protected boolean MAP___root__() throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_AnnotationCS_0 = idResolver.getClass(CLSSid_AnnotationCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_AnnotationCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_AnnotationCS, models[0/*leftCS*/], TYP_basecs_c_c_AnnotationCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_AttributeCS_0 = idResolver.getClass(CLSSid_AttributeCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_AttributeCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_AttributeCS, models[0/*leftCS*/], TYP_basecs_c_c_AttributeCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_BooleanLiteralExpCS_0 = idResolver.getClass(CLSSid_BooleanLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_BooleanLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_BooleanLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_BooleanLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_CollectionLiteralExpCS_0 = idResolver.getClass(CLSSid_CollectionLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_CollectionLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_CollectionLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_CollectionLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_CollectionLiteralPartCS_0 = idResolver.getClass(CLSSid_CollectionLiteralPartCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_CollectionLiteralPartCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_CollectionLiteralPartCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_CollectionLiteralPartCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_CollectionTypeCS_0 = idResolver.getClass(CLSSid_CollectionTypeCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_CollectionTypeCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_CollectionTypeCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_CollectionTypeCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_ConstraintCS_0 = idResolver.getClass(CLSSid_ConstraintCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_ConstraintCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_ConstraintCS, models[0/*leftCS*/], TYP_basecs_c_c_ConstraintCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_ContextCS_0 = idResolver.getClass(CLSSid_ContextCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_ContextCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_ContextCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_ContextCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_DataTypeCS_0 = idResolver.getClass(CLSSid_DataTypeCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_DataTypeCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_DataTypeCS, models[0/*leftCS*/], TYP_basecs_c_c_DataTypeCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_DetailCS_0 = idResolver.getClass(CLSSid_DetailCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_DetailCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_DetailCS, models[0/*leftCS*/], TYP_basecs_c_c_DetailCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_EnumerationCS_0 = idResolver.getClass(CLSSid_EnumerationCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_EnumerationCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_EnumerationCS, models[0/*leftCS*/], TYP_basecs_c_c_EnumerationCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_EnumerationLiteralCS_0 = idResolver.getClass(CLSSid_EnumerationLiteralCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_EnumerationLiteralCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_EnumerationLiteralCS, models[0/*leftCS*/], TYP_basecs_c_c_EnumerationLiteralCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_ExpSpecificationCS_0 = idResolver.getClass(CLSSid_ExpSpecificationCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_ExpSpecificationCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_ExpSpecificationCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_ExpSpecificationCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_IfExpCS_0 = idResolver.getClass(CLSSid_IfExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_IfExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_IfExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_IfExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_ImportCS_0 = idResolver.getClass(CLSSid_ImportCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_ImportCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_ImportCS, models[0/*leftCS*/], TYP_basecs_c_c_ImportCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_InvalidLiteralExpCS_0 = idResolver.getClass(CLSSid_InvalidLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_InvalidLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_InvalidLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_InvalidLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_LambdaTypeCS_0 = idResolver.getClass(CLSSid_LambdaTypeCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_LambdaTypeCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_LambdaTypeCS, models[0/*leftCS*/], TYP_basecs_c_c_LambdaTypeCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_LetExpCS_0 = idResolver.getClass(CLSSid_LetExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_LetExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_LetExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_LetExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_NameExpCS_0 = idResolver.getClass(CLSSid_NameExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_NameExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_NameExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_NameExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_NullLiteralExpCS_0 = idResolver.getClass(CLSSid_NullLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_NullLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_NullLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_NullLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_NumberLiteralExpCS_0 = idResolver.getClass(CLSSid_NumberLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_NumberLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_NumberLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_NumberLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_OperationCS_0 = idResolver.getClass(CLSSid_OperationCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_OperationCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_OperationCS, models[0/*leftCS*/], TYP_basecs_c_c_OperationCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_PackageCS_0 = idResolver.getClass(CLSSid_PackageCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_PackageCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_PackageCS, models[0/*leftCS*/], TYP_basecs_c_c_PackageCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_ParameterCS_0 = idResolver.getClass(CLSSid_ParameterCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_ParameterCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_ParameterCS, models[0/*leftCS*/], TYP_basecs_c_c_ParameterCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_PrimitiveTypeRefCS_0 = idResolver.getClass(CLSSid_PrimitiveTypeRefCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_PrimitiveTypeRefCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_PrimitiveTypeRefCS, models[0/*leftCS*/], TYP_basecs_c_c_PrimitiveTypeRefCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_ReferenceCS_0 = idResolver.getClass(CLSSid_ReferenceCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_ReferenceCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_ReferenceCS, models[0/*leftCS*/], TYP_basecs_c_c_ReferenceCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_RootPackageCS_0 = idResolver.getClass(CLSSid_RootPackageCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_RootPackageCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_RootPackageCS, models[0/*leftCS*/], TYP_basecs_c_c_RootPackageCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_SelfExpCS_0 = idResolver.getClass(CLSSid_SelfExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_SelfExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_SelfExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_SelfExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_ShadowPartCS_0 = idResolver.getClass(CLSSid_ShadowPartCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_ShadowPartCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_ShadowPartCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_ShadowPartCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_SpecificationCS_0 = idResolver.getClass(CLSSid_SpecificationCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_SpecificationCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_SpecificationCS, models[0/*leftCS*/], TYP_basecs_c_c_SpecificationCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_StringLiteralExpCS_0 = idResolver.getClass(CLSSid_StringLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_StringLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_StringLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_StringLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_StructuredClassCS_0 = idResolver.getClass(CLSSid_StructuredClassCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_StructuredClassCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_StructuredClassCS, models[0/*leftCS*/], TYP_basecs_c_c_StructuredClassCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_TemplateBindingCS_0 = idResolver.getClass(CLSSid_TemplateBindingCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TemplateBindingCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TemplateBindingCS, models[0/*leftCS*/], TYP_basecs_c_c_TemplateBindingCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_TemplateParameterSubstitutionCS_0 = idResolver.getClass(CLSSid_TemplateParameterSubstitutionCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TemplateParameterSubstitutionCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TemplateParameterSubstitutionCS, models[0/*leftCS*/], TYP_basecs_c_c_TemplateParameterSubstitutionCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_TemplateSignatureCS_0 = idResolver.getClass(CLSSid_TemplateSignatureCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TemplateSignatureCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TemplateSignatureCS, models[0/*leftCS*/], TYP_basecs_c_c_TemplateSignatureCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_TupleLiteralExpCS_0 = idResolver.getClass(CLSSid_TupleLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TupleLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TupleLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_TupleLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_TupleLiteralPartCS_0 = idResolver.getClass(CLSSid_TupleLiteralPartCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TupleLiteralPartCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TupleLiteralPartCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_TupleLiteralPartCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_TuplePartCS_0 = idResolver.getClass(CLSSid_TuplePartCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TuplePartCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TuplePartCS, models[0/*leftCS*/], TYP_basecs_c_c_TuplePartCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_TupleTypeCS_0 = idResolver.getClass(CLSSid_TupleTypeCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TupleTypeCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TupleTypeCS, models[0/*leftCS*/], TYP_basecs_c_c_TupleTypeCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_TypeLiteralExpCS_0 = idResolver.getClass(CLSSid_TypeLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TypeLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TypeLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_TypeLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_basecs_c_c_TypeParameterCS_0 = idResolver.getClass(CLSSid_TypeParameterCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_TypeParameterCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_TypeParameterCS, models[0/*leftCS*/], TYP_basecs_c_c_TypeParameterCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_UnlimitedNaturalLiteralExpCS_0 = idResolver.getClass(CLSSid_UnlimitedNaturalLiteralExpCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_UnlimitedNaturalLiteralExpCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_UnlimitedNaturalLiteralExpCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_UnlimitedNaturalLiteralExpCS_0);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_VariableCS_0 = idResolver.getClass(CLSSid_VariableCS, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue _171_VariableCS_187 = ModelObjectsOfKindOperation.INSTANCE.evaluate(executor, SET_CLSSid_VariableCS, models[0/*leftCS*/], TYP_essentialoclcs_c_c_VariableCS_0);
            // connection variables
            final SetValue.@NonNull Accumulator ji_AnnotationCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_AnnotationCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AnnotationCS iterator : ValueUtil.typedIterable(AnnotationCS.class, _171_AnnotationCS_187)) {
                ji_AnnotationCS.add(iterator);
            }
            final SetValue.@NonNull Accumulator ji_AttributeCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_AttributeCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS iterator_0 : ValueUtil.typedIterable(AttributeCS.class, _171_AttributeCS_187)) {
                ji_AttributeCS.add(iterator_0);
            }
            final SetValue.@NonNull Accumulator ji_BooleanLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_BooleanLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExpCS iterator_1 : ValueUtil.typedIterable(BooleanLiteralExpCS.class, _171_BooleanLiteralExpCS_187)) {
                ji_BooleanLiteralExpCS.add(iterator_1);
            }
            final SetValue.@NonNull Accumulator ji_CollectionLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_CollectionLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExpCS iterator_2 : ValueUtil.typedIterable(CollectionLiteralExpCS.class, _171_CollectionLiteralExpCS_187)) {
                ji_CollectionLiteralExpCS.add(iterator_2);
            }
            final SetValue.@NonNull Accumulator ji_CollectionLiteralPartCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_CollectionLiteralPartCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS iterator_3 : ValueUtil.typedIterable(CollectionLiteralPartCS.class, _171_CollectionLiteralPartCS_187)) {
                ji_CollectionLiteralPartCS.add(iterator_3);
            }
            final SetValue.@NonNull Accumulator ji_CollectionTypeCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_CollectionTypeCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionTypeCS iterator_4 : ValueUtil.typedIterable(CollectionTypeCS.class, _171_CollectionTypeCS_187)) {
                ji_CollectionTypeCS.add(iterator_4);
            }
            final SetValue.@NonNull Accumulator ji_ConstraintCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_ConstraintCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ConstraintCS iterator_5 : ValueUtil.typedIterable(ConstraintCS.class, _171_ConstraintCS_187)) {
                ji_ConstraintCS.add(iterator_5);
            }
            final SetValue.@NonNull Accumulator ji_ContextCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_ContextCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ContextCS iterator_6 : ValueUtil.typedIterable(ContextCS.class, _171_ContextCS_187)) {
                ji_ContextCS.add(iterator_6);
            }
            final SetValue.@NonNull Accumulator ji_DataTypeCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_DataTypeCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DataTypeCS iterator_7 : ValueUtil.typedIterable(DataTypeCS.class, _171_DataTypeCS_187)) {
                ji_DataTypeCS.add(iterator_7);
            }
            final SetValue.@NonNull Accumulator ji_DetailCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_DetailCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DetailCS iterator_8 : ValueUtil.typedIterable(DetailCS.class, _171_DetailCS_187)) {
                ji_DetailCS.add(iterator_8);
            }
            final SetValue.@NonNull Accumulator ji_EnumerationCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_EnumerationCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationCS iterator_9 : ValueUtil.typedIterable(EnumerationCS.class, _171_EnumerationCS_187)) {
                ji_EnumerationCS.add(iterator_9);
            }
            final SetValue.@NonNull Accumulator ji_EnumerationLiteralCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_EnumerationLiteralCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationLiteralCS iterator_10 : ValueUtil.typedIterable(EnumerationLiteralCS.class, _171_EnumerationLiteralCS_187)) {
                ji_EnumerationLiteralCS.add(iterator_10);
            }
            final SetValue.@NonNull Accumulator ji_ExpSpecificationCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_ExpSpecificationCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS iterator_11 : ValueUtil.typedIterable(ExpSpecificationCS.class, _171_ExpSpecificationCS_187)) {
                ji_ExpSpecificationCS.add(iterator_11);
            }
            final SetValue.@NonNull Accumulator ji_IfExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_IfExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS iterator_12 : ValueUtil.typedIterable(IfExpCS.class, _171_IfExpCS_187)) {
                ji_IfExpCS.add(iterator_12);
            }
            final SetValue.@NonNull Accumulator ji_ImportCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_ImportCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ImportCS iterator_13 : ValueUtil.typedIterable(ImportCS.class, _171_ImportCS_187)) {
                ji_ImportCS.add(iterator_13);
            }
            final SetValue.@NonNull Accumulator ji_InvalidLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_InvalidLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull InvalidLiteralExpCS iterator_14 : ValueUtil.typedIterable(InvalidLiteralExpCS.class, _171_InvalidLiteralExpCS_187)) {
                ji_InvalidLiteralExpCS.add(iterator_14);
            }
            final SetValue.@NonNull Accumulator ji_LambdaTypeCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_LambdaTypeCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS iterator_15 : ValueUtil.typedIterable(LambdaTypeCS.class, _171_LambdaTypeCS_187)) {
                ji_LambdaTypeCS.add(iterator_15);
            }
            final SetValue.@NonNull Accumulator ji_LetExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_LetExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull LetExpCS iterator_16 : ValueUtil.typedIterable(LetExpCS.class, _171_LetExpCS_187)) {
                ji_LetExpCS.add(iterator_16);
            }
            final SetValue.@NonNull Accumulator ji_NameExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_NameExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS iterator_17 : ValueUtil.typedIterable(NameExpCS.class, _171_NameExpCS_187)) {
                ji_NameExpCS.add(iterator_17);
            }
            final SetValue.@NonNull Accumulator ji_NullLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_NullLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NullLiteralExpCS iterator_18 : ValueUtil.typedIterable(NullLiteralExpCS.class, _171_NullLiteralExpCS_187)) {
                ji_NullLiteralExpCS.add(iterator_18);
            }
            final SetValue.@NonNull Accumulator ji_NumberLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_NumberLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NumberLiteralExpCS iterator_19 : ValueUtil.typedIterable(NumberLiteralExpCS.class, _171_NumberLiteralExpCS_187)) {
                ji_NumberLiteralExpCS.add(iterator_19);
            }
            final SetValue.@NonNull Accumulator ji_OperationCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_OperationCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS iterator_20 : ValueUtil.typedIterable(OperationCS.class, _171_OperationCS_187)) {
                ji_OperationCS.add(iterator_20);
            }
            final SetValue.@NonNull Accumulator ji_PackageCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_PackageCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PackageCS iterator_21 : ValueUtil.typedIterable(PackageCS.class, _171_PackageCS_187)) {
                ji_PackageCS.add(iterator_21);
            }
            final SetValue.@NonNull Accumulator ji_ParameterCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_ParameterCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ParameterCS iterator_22 : ValueUtil.typedIterable(ParameterCS.class, _171_ParameterCS_187)) {
                ji_ParameterCS.add(iterator_22);
            }
            final SetValue.@NonNull Accumulator ji_PrimitiveTypeRefCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_PrimitiveTypeRefCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PrimitiveTypeRefCS iterator_23 : ValueUtil.typedIterable(PrimitiveTypeRefCS.class, _171_PrimitiveTypeRefCS_187)) {
                ji_PrimitiveTypeRefCS.add(iterator_23);
            }
            final SetValue.@NonNull Accumulator ji_ReferenceCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_ReferenceCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS iterator_24 : ValueUtil.typedIterable(ReferenceCS.class, _171_ReferenceCS_187)) {
                ji_ReferenceCS.add(iterator_24);
            }
            final SetValue.@NonNull Accumulator ji_RootPackageCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_RootPackageCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull RootPackageCS iterator_25 : ValueUtil.typedIterable(RootPackageCS.class, _171_RootPackageCS_187)) {
                ji_RootPackageCS.add(iterator_25);
            }
            final SetValue.@NonNull Accumulator ji_SelfExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_SelfExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull SelfExpCS iterator_26 : ValueUtil.typedIterable(SelfExpCS.class, _171_SelfExpCS_187)) {
                ji_SelfExpCS.add(iterator_26);
            }
            final SetValue.@NonNull Accumulator ji_ShadowPartCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_ShadowPartCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ShadowPartCS iterator_27 : ValueUtil.typedIterable(ShadowPartCS.class, _171_ShadowPartCS_187)) {
                ji_ShadowPartCS.add(iterator_27);
            }
            final SetValue.@NonNull Accumulator ji_SpecificationCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_SpecificationCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull SpecificationCS iterator_28 : ValueUtil.typedIterable(SpecificationCS.class, _171_SpecificationCS_187)) {
                ji_SpecificationCS.add(iterator_28);
            }
            final SetValue.@NonNull Accumulator ji_StringLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_StringLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull StringLiteralExpCS iterator_29 : ValueUtil.typedIterable(StringLiteralExpCS.class, _171_StringLiteralExpCS_187)) {
                ji_StringLiteralExpCS.add(iterator_29);
            }
            final SetValue.@NonNull Accumulator ji_StructuredClassCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_StructuredClassCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull StructuredClassCS iterator_30 : ValueUtil.typedIterable(StructuredClassCS.class, _171_StructuredClassCS_187)) {
                ji_StructuredClassCS.add(iterator_30);
            }
            final SetValue.@NonNull Accumulator ji_TemplateBindingCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TemplateBindingCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateBindingCS iterator_31 : ValueUtil.typedIterable(TemplateBindingCS.class, _171_TemplateBindingCS_187)) {
                ji_TemplateBindingCS.add(iterator_31);
            }
            final SetValue.@NonNull Accumulator ji_TemplateParameterSubstitutionCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TemplateParameterSubstitutionCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS iterator_32 : ValueUtil.typedIterable(TemplateParameterSubstitutionCS.class, _171_TemplateParameterSubstitutionCS_187)) {
                ji_TemplateParameterSubstitutionCS.add(iterator_32);
            }
            final SetValue.@NonNull Accumulator ji_TemplateParameterSubstitutionCS_1 = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TemplateParameterSubstitutionCS);
            /*@Thrown*/ SetValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSetAccumulatorValue(SET_CLSSid_TemplateParameterSubstitutionCS);
            @NonNull Iterator<Object> ITERATOR_i = _171_TemplateParameterSubstitutionCS_187.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue select;
            while (true) {
                if (!ITERATOR_i.hasNext()) {
                    select = accumulator;
                    break;
                }
                @SuppressWarnings("null")
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS i = (TemplateParameterSubstitutionCS)ITERATOR_i.next();
                /**
                 * i.owningBinding <> null
                 */
                final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TemplateBindingCS owningBinding = i.getOwningBinding();
                final /*@Thrown*/ boolean symbol_152 = owningBinding != null;
                //
                if (symbol_152 == ValueUtil.TRUE_VALUE) {
                    accumulator.add(i);
                }
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS iterator_33 : ValueUtil.typedIterable(TemplateParameterSubstitutionCS.class, select)) {
                ji_TemplateParameterSubstitutionCS_1.add(iterator_33);
            }
            final SetValue.@NonNull Accumulator ji_TemplateSignatureCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TemplateSignatureCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateSignatureCS iterator_34 : ValueUtil.typedIterable(TemplateSignatureCS.class, _171_TemplateSignatureCS_187)) {
                ji_TemplateSignatureCS.add(iterator_34);
            }
            final SetValue.@NonNull Accumulator ji_TupleLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TupleLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralExpCS iterator_35 : ValueUtil.typedIterable(TupleLiteralExpCS.class, _171_TupleLiteralExpCS_187)) {
                ji_TupleLiteralExpCS.add(iterator_35);
            }
            final SetValue.@NonNull Accumulator ji_TupleLiteralPartCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TupleLiteralPartCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS iterator_36 : ValueUtil.typedIterable(TupleLiteralPartCS.class, _171_TupleLiteralPartCS_187)) {
                ji_TupleLiteralPartCS.add(iterator_36);
            }
            final SetValue.@NonNull Accumulator ji_TuplePartCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TuplePartCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TuplePartCS iterator_37 : ValueUtil.typedIterable(TuplePartCS.class, _171_TuplePartCS_187)) {
                ji_TuplePartCS.add(iterator_37);
            }
            final SetValue.@NonNull Accumulator ji_TupleTypeCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TupleTypeCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TupleTypeCS iterator_38 : ValueUtil.typedIterable(TupleTypeCS.class, _171_TupleTypeCS_187)) {
                ji_TupleTypeCS.add(iterator_38);
            }
            final SetValue.@NonNull Accumulator ji_TypeLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TypeLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TypeLiteralExpCS iterator_39 : ValueUtil.typedIterable(TypeLiteralExpCS.class, _171_TypeLiteralExpCS_187)) {
                ji_TypeLiteralExpCS.add(iterator_39);
            }
            final SetValue.@NonNull Accumulator ji_TypeParameterCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_TypeParameterCS);
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TypeParameterCS iterator_40 : ValueUtil.typedIterable(TypeParameterCS.class, _171_TypeParameterCS_187)) {
                ji_TypeParameterCS.add(iterator_40);
            }
            final SetValue.@NonNull Accumulator ji_UnlimitedNaturalLiteralExpCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_UnlimitedNaturalLiteralExpCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull UnlimitedNaturalLiteralExpCS iterator_41 : ValueUtil.typedIterable(UnlimitedNaturalLiteralExpCS.class, _171_UnlimitedNaturalLiteralExpCS_187)) {
                ji_UnlimitedNaturalLiteralExpCS.add(iterator_41);
            }
            final SetValue.@NonNull Accumulator ji_VariableCS = (SetValue.Accumulator)ValueUtil.createCollectionAccumulatorValue(SET_CLSSid_VariableCS);
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS iterator_42 : ValueUtil.typedIterable(VariableCS.class, _171_VariableCS_187)) {
                ji_VariableCS.add(iterator_42);
            }
            // mapping statements
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AnnotationCS loop0 : ValueUtil.typedIterable(AnnotationCS.class, ji_AnnotationCS)) {
                MAP_m_AnnotationCS_pivot(loop0);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS loop0_0 : ValueUtil.typedIterable(AttributeCS.class, ji_AttributeCS)) {
                MAP_m_AttributeCS_pivot(loop0_0);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExpCS loop0_1 : ValueUtil.typedIterable(BooleanLiteralExpCS.class, ji_BooleanLiteralExpCS)) {
                MAP_m_BooleanLiteralExpCS_pivot(loop0_1);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExpCS loop0_2 : ValueUtil.typedIterable(CollectionLiteralExpCS.class, ji_CollectionLiteralExpCS)) {
                MAP_m_CollectionLiteralExpCS_pivot(loop0_2);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS loop0_3 : ValueUtil.typedIterable(CollectionLiteralPartCS.class, ji_CollectionLiteralPartCS)) {
                MAP_m_CollectionLiteralPartCS_pivot(loop0_3);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS loop0_4 : ValueUtil.typedIterable(CollectionLiteralPartCS.class, ji_CollectionLiteralPartCS)) {
                MAP_m_CollectionLiteralPartCS_pivot_1(loop0_4);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionTypeCS loop0_5 : ValueUtil.typedIterable(CollectionTypeCS.class, ji_CollectionTypeCS)) {
                MAP_m_CollectionTypeCS_pivot(loop0_5);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ConstraintCS loop0_6 : ValueUtil.typedIterable(ConstraintCS.class, ji_ConstraintCS)) {
                MAP_m_ConstraintCS_pivot(loop0_6);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ContextCS loop0_7 : ValueUtil.typedIterable(ContextCS.class, ji_ContextCS)) {
                MAP_m_ContextCS_pivot(loop0_7);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DataTypeCS loop0_8 : ValueUtil.typedIterable(DataTypeCS.class, ji_DataTypeCS)) {
                MAP_m_DataTypeCS_pivot(loop0_8);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DetailCS loop0_9 : ValueUtil.typedIterable(DetailCS.class, ji_DetailCS)) {
                MAP_m_DetailCS_pivot(loop0_9);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationCS loop0_10 : ValueUtil.typedIterable(EnumerationCS.class, ji_EnumerationCS)) {
                MAP_m_EnumerationCS_pivot(loop0_10);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationLiteralCS loop0_11 : ValueUtil.typedIterable(EnumerationLiteralCS.class, ji_EnumerationLiteralCS)) {
                MAP_m_EnumerationLiteralCS_pivot(loop0_11);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS loop0_12 : ValueUtil.typedIterable(ExpSpecificationCS.class, ji_ExpSpecificationCS)) {
                MAP_m_ExpSpecificationCS_ownedExpression_pivot(loop0_12);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS loop0_13 : ValueUtil.typedIterable(ExpSpecificationCS.class, ji_ExpSpecificationCS)) {
                MAP_m_ExpSpecificationCS_ownedExpression0_pivot(loop0_13);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS loop0_14 : ValueUtil.typedIterable(IfExpCS.class, ji_IfExpCS)) {
                MAP_m_IfExpCS_pivot(loop0_14);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ImportCS loop0_15 : ValueUtil.typedIterable(ImportCS.class, ji_ImportCS)) {
                MAP_m_ImportCS_pivot(loop0_15);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull InvalidLiteralExpCS loop0_16 : ValueUtil.typedIterable(InvalidLiteralExpCS.class, ji_InvalidLiteralExpCS)) {
                MAP_m_InvalidLiteralExpCS_pivot(loop0_16);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS loop0_17 : ValueUtil.typedIterable(LambdaTypeCS.class, ji_LambdaTypeCS)) {
                MAP_m_LambdaTypeCS_pivot(loop0_17);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull LetExpCS loop0_18 : ValueUtil.typedIterable(LetExpCS.class, ji_LetExpCS)) {
                MAP_m_LetExpCS_pivot(loop0_18);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_19 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot(loop0_19);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_20 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_1(loop0_20);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_21 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_2(loop0_21);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_22 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_3(loop0_22);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_23 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_4(loop0_23);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_24 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_5(loop0_24);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_25 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_6(loop0_25);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NullLiteralExpCS loop0_26 : ValueUtil.typedIterable(NullLiteralExpCS.class, ji_NullLiteralExpCS)) {
                MAP_m_NullLiteralExpCS_pivot(loop0_26);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NumberLiteralExpCS loop0_27 : ValueUtil.typedIterable(NumberLiteralExpCS.class, ji_NumberLiteralExpCS)) {
                MAP_m_NumberLiteralExpCS_pivot(loop0_27);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS loop0_28 : ValueUtil.typedIterable(OperationCS.class, ji_OperationCS)) {
                MAP_m_OperationCS_pivot(loop0_28);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PackageCS loop0_29 : ValueUtil.typedIterable(PackageCS.class, ji_PackageCS)) {
                MAP_m_PackageCS_pivot(loop0_29);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ParameterCS loop0_30 : ValueUtil.typedIterable(ParameterCS.class, ji_ParameterCS)) {
                MAP_m_ParameterCS_pivot(loop0_30);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PrimitiveTypeRefCS loop0_31 : ValueUtil.typedIterable(PrimitiveTypeRefCS.class, ji_PrimitiveTypeRefCS)) {
                MAP_m_PrimitiveTypeRefCS_pivot(loop0_31);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS loop0_32 : ValueUtil.typedIterable(ReferenceCS.class, ji_ReferenceCS)) {
                MAP_m_ReferenceCS_pivot(loop0_32);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull RootPackageCS loop0_33 : ValueUtil.typedIterable(RootPackageCS.class, ji_RootPackageCS)) {
                MAP_m_RootPackageCS_pivot(loop0_33);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull SelfExpCS loop0_34 : ValueUtil.typedIterable(SelfExpCS.class, ji_SelfExpCS)) {
                MAP_m_SelfExpCS_pivot(loop0_34);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ShadowPartCS loop0_35 : ValueUtil.typedIterable(ShadowPartCS.class, ji_ShadowPartCS)) {
                MAP_m_ShadowPartCS_pivot(loop0_35);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull SpecificationCS loop0_36 : ValueUtil.typedIterable(SpecificationCS.class, ji_SpecificationCS)) {
                MAP_m_SpecificationCS_pivot(loop0_36);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull StringLiteralExpCS loop0_37 : ValueUtil.typedIterable(StringLiteralExpCS.class, ji_StringLiteralExpCS)) {
                MAP_m_StringLiteralExpCS_pivot(loop0_37);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull StructuredClassCS loop0_38 : ValueUtil.typedIterable(StructuredClassCS.class, ji_StructuredClassCS)) {
                MAP_m_StructuredClassCS_pivot(loop0_38);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateBindingCS loop0_39 : ValueUtil.typedIterable(TemplateBindingCS.class, ji_TemplateBindingCS)) {
                MAP_m_TemplateBindingCS_pivot(loop0_39);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS loop0_40 : ValueUtil.typedIterable(TemplateParameterSubstitutionCS.class, ji_TemplateParameterSubstitutionCS)) {
                MAP_m_TemplateParameterSubstitutionCS_pivot(loop0_40);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateSignatureCS loop0_41 : ValueUtil.typedIterable(TemplateSignatureCS.class, ji_TemplateSignatureCS)) {
                MAP_m_TemplateSignatureCS_pivot(loop0_41);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralExpCS loop0_42 : ValueUtil.typedIterable(TupleLiteralExpCS.class, ji_TupleLiteralExpCS)) {
                MAP_m_TupleLiteralExpCS_pivot(loop0_42);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS loop0_43 : ValueUtil.typedIterable(TupleLiteralPartCS.class, ji_TupleLiteralPartCS)) {
                MAP_m_TupleLiteralPartCS_pivot(loop0_43);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TuplePartCS loop0_44 : ValueUtil.typedIterable(TuplePartCS.class, ji_TuplePartCS)) {
                MAP_m_TuplePartCS_pivot(loop0_44);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TupleTypeCS loop0_45 : ValueUtil.typedIterable(TupleTypeCS.class, ji_TupleTypeCS)) {
                MAP_m_TupleTypeCS_pivot(loop0_45);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TypeLiteralExpCS loop0_46 : ValueUtil.typedIterable(TypeLiteralExpCS.class, ji_TypeLiteralExpCS)) {
                MAP_m_TypeLiteralExpCS_pivot(loop0_46);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TypeParameterCS loop0_47 : ValueUtil.typedIterable(TypeParameterCS.class, ji_TypeParameterCS)) {
                MAP_m_TypeParameterCS_pivot(loop0_47);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull UnlimitedNaturalLiteralExpCS loop0_48 : ValueUtil.typedIterable(UnlimitedNaturalLiteralExpCS.class, ji_UnlimitedNaturalLiteralExpCS)) {
                MAP_m_UnlimitedNaturalLiteralExpCS_pivot(loop0_48);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS loop0_49 : ValueUtil.typedIterable(VariableCS.class, ji_VariableCS)) {
                MAP_m_VariableCS_pivot(loop0_49);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AnnotationCS loop0_50 : ValueUtil.typedIterable(AnnotationCS.class, ji_AnnotationCS)) {
                MAP_m_AnnotationCS_name_ownedAnnotations_ownedContents(loop0_50);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS loop0_51 : ValueUtil.typedIterable(AttributeCS.class, ji_AttributeCS)) {
                MAP_m_AttributeCS_default_name_ownedAnnotations_pivot_(loop0_51);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS loop0_52 : ValueUtil.typedIterable(AttributeCS.class, ji_AttributeCS)) {
                MAP_m_AttributeCS_ownedDefaultExpressions_pivot(loop0_52);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS loop0_53 : ValueUtil.typedIterable(AttributeCS.class, ji_AttributeCS)) {
                MAP_m_AttributeCS_ownedType_pivot(loop0_53);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExpCS loop0_54 : ValueUtil.typedIterable(BooleanLiteralExpCS.class, ji_BooleanLiteralExpCS)) {
                MAP_m_BooleanLiteralExpCS_pivot_symbol(loop0_54);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExpCS loop0_55 : ValueUtil.typedIterable(BooleanLiteralExpCS.class, ji_BooleanLiteralExpCS)) {
                MAP_m_BooleanLiteralExpCS_pivot_1(loop0_55);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExpCS loop0_56 : ValueUtil.typedIterable(CollectionLiteralExpCS.class, ji_CollectionLiteralExpCS)) {
                MAP_m_CollectionLiteralExpCS_ownedParts_pivot(loop0_56);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExpCS loop0_57 : ValueUtil.typedIterable(CollectionLiteralExpCS.class, ji_CollectionLiteralExpCS)) {
                MAP_m_CollectionLiteralExpCS_ownedType_pivot(loop0_57);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS loop0_58 : ValueUtil.typedIterable(CollectionLiteralPartCS.class, ji_CollectionLiteralPartCS)) {
                MAP_m_CollectionLiteralPartCS_ownedExpression_pivot(loop0_58);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS loop0_59 : ValueUtil.typedIterable(CollectionLiteralPartCS.class, ji_CollectionLiteralPartCS)) {
                MAP_m_CollectionLiteralPartCS_ownedExpression_pivot_1(loop0_59);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS loop0_60 : ValueUtil.typedIterable(CollectionLiteralPartCS.class, ji_CollectionLiteralPartCS)) {
                MAP_m_CollectionLiteralPartCS_ownedExpression_pivot_2(loop0_60);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS loop0_61 : ValueUtil.typedIterable(CollectionLiteralPartCS.class, ji_CollectionLiteralPartCS)) {
                MAP_m_CollectionLiteralPartCS_ownedLastExpression_pivo(loop0_61);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionTypeCS loop0_62 : ValueUtil.typedIterable(CollectionTypeCS.class, ji_CollectionTypeCS)) {
                MAP_m_CollectionTypeCS_ownedType_pivot(loop0_62);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ConstraintCS loop0_63 : ValueUtil.typedIterable(ConstraintCS.class, ji_ConstraintCS)) {
                MAP_m_ConstraintCS_ownedSpecification_pivot(loop0_63);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ContextCS loop0_64 : ValueUtil.typedIterable(ContextCS.class, ji_ContextCS)) {
                MAP_m_ContextCS_ownedExpression_pivot(loop0_64);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DataTypeCS loop0_65 : ValueUtil.typedIterable(DataTypeCS.class, ji_DataTypeCS)) {
                MAP_m_DataTypeCS_instanceClassName_isSerializable_name(loop0_65);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DataTypeCS loop0_66 : ValueUtil.typedIterable(DataTypeCS.class, ji_DataTypeCS)) {
                MAP_m_DataTypeCS_ownedSignature_pivot(loop0_66);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DetailCS loop0_67 : ValueUtil.typedIterable(DetailCS.class, ji_DetailCS)) {
                MAP_m_DetailCS_name_pivot_values(loop0_67);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationCS loop0_68 : ValueUtil.typedIterable(EnumerationCS.class, ji_EnumerationCS)) {
                MAP_m_EnumerationCS_instanceClassName_isSerializable_n(loop0_68);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationCS loop0_69 : ValueUtil.typedIterable(EnumerationCS.class, ji_EnumerationCS)) {
                MAP_m_EnumerationCS_ownedSignature_pivot(loop0_69);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationLiteralCS loop0_70 : ValueUtil.typedIterable(EnumerationLiteralCS.class, ji_EnumerationLiteralCS)) {
                MAP_m_EnumerationLiteralCS_name_ownedAnnotations_pivot(loop0_70);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS loop0_71 : ValueUtil.typedIterable(ExpSpecificationCS.class, ji_ExpSpecificationCS)) {
                MAP_m_ExpSpecificationCS_ownedExpression_pivot_1(loop0_71);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS loop0_72 : ValueUtil.typedIterable(ExpSpecificationCS.class, ji_ExpSpecificationCS)) {
                MAP_m_ExpSpecificationCS_exprString_ownedExpression0_p(loop0_72);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS loop0_73 : ValueUtil.typedIterable(IfExpCS.class, ji_IfExpCS)) {
                MAP_m_IfExpCS_ownedCondition_pivot(loop0_73);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS loop0_74 : ValueUtil.typedIterable(IfExpCS.class, ji_IfExpCS)) {
                MAP_m_IfExpCS_ownedElseExpression_pivot(loop0_74);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS loop0_75 : ValueUtil.typedIterable(IfExpCS.class, ji_IfExpCS)) {
                MAP_m_IfExpCS_ownedThenExpression_pivot(loop0_75);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ImportCS loop0_76 : ValueUtil.typedIterable(ImportCS.class, ji_ImportCS)) {
                MAP_m_ImportCS_name_pivot(loop0_76);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull InvalidLiteralExpCS loop0_77 : ValueUtil.typedIterable(InvalidLiteralExpCS.class, ji_InvalidLiteralExpCS)) {
                MAP_m_InvalidLiteralExpCS_pivot_1(loop0_77);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS loop0_78 : ValueUtil.typedIterable(LambdaTypeCS.class, ji_LambdaTypeCS)) {
                MAP_m_LambdaTypeCS_ownedContextType_pivot(loop0_78);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS loop0_79 : ValueUtil.typedIterable(LambdaTypeCS.class, ji_LambdaTypeCS)) {
                MAP_m_LambdaTypeCS_name_ownedParameterTypes_pivot(loop0_79);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS loop0_80 : ValueUtil.typedIterable(LambdaTypeCS.class, ji_LambdaTypeCS)) {
                MAP_m_LambdaTypeCS_ownedResultType_pivot(loop0_80);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull LetExpCS loop0_81 : ValueUtil.typedIterable(LetExpCS.class, ji_LetExpCS)) {
                MAP_m_LetExpCS_ownedInExpression_pivot(loop0_81);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull LetExpCS loop0_82 : ValueUtil.typedIterable(LetExpCS.class, ji_LetExpCS)) {
                MAP_m_LetExpCS_ownedInExpression_pivot_1(loop0_82);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_83 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_isPre_pivot(loop0_83);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_84 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredAssociation(loop0_84);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_85 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_source(loop0_85);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_86 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredAssociation_1(loop0_86);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_87 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_arguments_pivot(loop0_87);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_88 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_iterators_pivot(loop0_88);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_89 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_accumulators_pivot(loop0_89);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_90 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_source_1(loop0_90);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_91 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredIteration(loop0_91);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_92 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_arguments_pivot_1(loop0_92);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_93 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_iterators_pivot_1(loop0_93);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_94 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_source_2(loop0_94);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_95 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredIteration_1(loop0_95);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_96 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_arguments_isPre_pivot(loop0_96);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_97 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_source_3(loop0_97);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_98 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredOperation(loop0_98);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_99 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_isPre_pivot_1(loop0_99);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_100 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_source_4(loop0_100);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_101 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredProperty(loop0_101);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_102 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_parts_pivot_value(loop0_102);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_103 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredVariable(loop0_103);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NullLiteralExpCS loop0_104 : ValueUtil.typedIterable(NullLiteralExpCS.class, ji_NullLiteralExpCS)) {
                MAP_m_NullLiteralExpCS_pivot_1(loop0_104);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS loop0_105 : ValueUtil.typedIterable(OperationCS.class, ji_OperationCS)) {
                MAP_m_OperationCS_ownedBodyExpressions_pivot(loop0_105);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS loop0_106 : ValueUtil.typedIterable(OperationCS.class, ji_OperationCS)) {
                MAP_m_OperationCS_name_ownedAnnotations_ownedException(loop0_106);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_107 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredIteration_2(loop0_107);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_108 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredIteration_3(loop0_108);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_109 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredOperation_1(loop0_109);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS loop0_110 : ValueUtil.typedIterable(OperationCS.class, ji_OperationCS)) {
                MAP_m_OperationCS_ownedSignature_pivot(loop0_110);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS loop0_111 : ValueUtil.typedIterable(OperationCS.class, ji_OperationCS)) {
                MAP_m_OperationCS_ownedType_pivot(loop0_111);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PackageCS loop0_112 : ValueUtil.typedIterable(PackageCS.class, ji_PackageCS)) {
                MAP_m_PackageCS_name_nsPrefix_nsURI_ownedAnnotations_o(loop0_112);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ParameterCS loop0_113 : ValueUtil.typedIterable(ParameterCS.class, ji_ParameterCS)) {
                MAP_m_ParameterCS_name_ownedAnnotations_pivot(loop0_113);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ParameterCS loop0_114 : ValueUtil.typedIterable(ParameterCS.class, ji_ParameterCS)) {
                MAP_m_ParameterCS_ownedType_pivot(loop0_114);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PrimitiveTypeRefCS loop0_115 : ValueUtil.typedIterable(PrimitiveTypeRefCS.class, ji_PrimitiveTypeRefCS)) {
                MAP_m_PrimitiveTypeRefCS_name_pivot(loop0_115);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS loop0_116 : ValueUtil.typedIterable(ReferenceCS.class, ji_ReferenceCS)) {
                MAP_m_ReferenceCS_default_name_ownedAnnotations_pivot_(loop0_116);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS loop0_117 : ValueUtil.typedIterable(ReferenceCS.class, ji_ReferenceCS)) {
                MAP_m_ReferenceCS_ownedDefaultExpressions_ownedDefault(loop0_117);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS loop0_118 : ValueUtil.typedIterable(ReferenceCS.class, ji_ReferenceCS)) {
                MAP_m_ReferenceCS_ownedType_pivot(loop0_118);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull RootPackageCS loop0_119 : ValueUtil.typedIterable(RootPackageCS.class, ji_RootPackageCS)) {
                MAP_m_RootPackageCS_ownedImports_ownedPackages_pivot(loop0_119);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull SelfExpCS loop0_120 : ValueUtil.typedIterable(SelfExpCS.class, ji_SelfExpCS)) {
                MAP_m_SelfExpCS_name_pivot(loop0_120);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ShadowPartCS loop0_121 : ValueUtil.typedIterable(ShadowPartCS.class, ji_ShadowPartCS)) {
                MAP_m_ShadowPartCS_ownedInitExpression_pivot(loop0_121);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ShadowPartCS loop0_122 : ValueUtil.typedIterable(ShadowPartCS.class, ji_ShadowPartCS)) {
                MAP_m_ShadowPartCS_pivot_referredProperty(loop0_122);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull SpecificationCS loop0_123 : ValueUtil.typedIterable(SpecificationCS.class, ji_SpecificationCS)) {
                MAP_m_SpecificationCS_exprString_pivot(loop0_123);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull StringLiteralExpCS loop0_124 : ValueUtil.typedIterable(StringLiteralExpCS.class, ji_StringLiteralExpCS)) {
                MAP_m_StringLiteralExpCS_pivot_segments(loop0_124);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull StructuredClassCS loop0_125 : ValueUtil.typedIterable(StructuredClassCS.class, ji_StructuredClassCS)) {
                MAP_m_StructuredClassCS_instanceClassName_isAbstract_i(loop0_125);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull StructuredClassCS loop0_126 : ValueUtil.typedIterable(StructuredClassCS.class, ji_StructuredClassCS)) {
                MAP_m_StructuredClassCS_ownedSignature_pivot(loop0_126);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateBindingCS loop0_127 : ValueUtil.typedIterable(TemplateBindingCS.class, ji_TemplateBindingCS)) {
                MAP_m_TemplateBindingCS_ownedSubstitutions_pivot(loop0_127);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS loop0_128 : ValueUtil.typedIterable(TemplateParameterSubstitutionCS.class, ji_TemplateParameterSubstitutionCS)) {
                MAP_m_TemplateParameterSubstitutionCS_ownedActualParam(loop0_128);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS loop0_129 : ValueUtil.typedIterable(TemplateParameterSubstitutionCS.class, ji_TemplateParameterSubstitutionCS_1)) {
                MAP_m_TemplateParameterSubstitutionCS_owningBinding_pi(loop0_129);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralExpCS loop0_130 : ValueUtil.typedIterable(TupleLiteralExpCS.class, ji_TupleLiteralExpCS)) {
                MAP_m_TupleLiteralExpCS_ownedParts_pivot(loop0_130);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS loop0_131 : ValueUtil.typedIterable(TupleLiteralPartCS.class, ji_TupleLiteralPartCS)) {
                MAP_m_TupleLiteralPartCS_name_pivot(loop0_131);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS loop0_132 : ValueUtil.typedIterable(TupleLiteralPartCS.class, ji_TupleLiteralPartCS)) {
                MAP_m_TupleLiteralPartCS_ownedInitExpression_pivot(loop0_132);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS loop0_133 : ValueUtil.typedIterable(TupleLiteralPartCS.class, ji_TupleLiteralPartCS)) {
                MAP_m_TupleLiteralPartCS_ownedType_pivot(loop0_133);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TuplePartCS loop0_134 : ValueUtil.typedIterable(TuplePartCS.class, ji_TuplePartCS)) {
                MAP_m_TuplePartCS_name_pivot(loop0_134);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_135 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredProperty_1(loop0_135);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TuplePartCS loop0_136 : ValueUtil.typedIterable(TuplePartCS.class, ji_TuplePartCS)) {
                MAP_m_TuplePartCS_ownedType_pivot(loop0_136);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TupleTypeCS loop0_137 : ValueUtil.typedIterable(TupleTypeCS.class, ji_TupleTypeCS)) {
                MAP_m_TupleTypeCS_name_ownedParts_pivot(loop0_137);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ImportCS loop0_138 : ValueUtil.typedIterable(ImportCS.class, ji_ImportCS)) {
                MAP_m_ImportCS_ownedPathName_pivot(loop0_138);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS loop0_139 : ValueUtil.typedIterable(ReferenceCS.class, ji_ReferenceCS)) {
                MAP_m_ReferenceCS_ownedType_pivot_referredOpposite(loop0_139);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TypeLiteralExpCS loop0_140 : ValueUtil.typedIterable(TypeLiteralExpCS.class, ji_TypeLiteralExpCS)) {
                MAP_m_TypeLiteralExpCS_ownedType_pivot(loop0_140);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TypeLiteralExpCS loop0_141 : ValueUtil.typedIterable(TypeLiteralExpCS.class, ji_TypeLiteralExpCS)) {
                MAP_m_TypeLiteralExpCS_pivot_1(loop0_141);
            }
            for (org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TypeParameterCS loop0_142 : ValueUtil.typedIterable(TypeParameterCS.class, ji_TypeParameterCS)) {
                MAP_m_TypeParameterCS_name_ownedExtends_pivot(loop0_142);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull UnlimitedNaturalLiteralExpCS loop0_143 : ValueUtil.typedIterable(UnlimitedNaturalLiteralExpCS.class, ji_UnlimitedNaturalLiteralExpCS)) {
                MAP_m_UnlimitedNaturalLiteralExpCS_pivot_1(loop0_143);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS loop0_144 : ValueUtil.typedIterable(VariableCS.class, ji_VariableCS)) {
                MAP_m_VariableCS_name_pivot(loop0_144);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_145 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredVariable_1(loop0_145);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS loop0_146 : ValueUtil.typedIterable(VariableCS.class, ji_VariableCS)) {
                MAP_m_VariableCS_ownedInitExpression_pivot(loop0_146);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS loop0_147 : ValueUtil.typedIterable(VariableCS.class, ji_VariableCS)) {
                MAP_m_VariableCS_ownedType_pivot(loop0_147);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS loop0_148 : ValueUtil.typedIterable(NameExpCS.class, ji_NameExpCS)) {
                MAP_m_NameExpCS_pivot_referredVariable_2(loop0_148);
            }
            for (org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull SelfExpCS loop0_149 : ValueUtil.typedIterable(SelfExpCS.class, ji_SelfExpCS)) {
                MAP_m_SelfExpCS_pivot_1(loop0_149);
            }
            boolean __root__ = ValueUtil.TRUE_VALUE;
            return __root__;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP___root__", e);
        }
    }
    
    /**
     * 
     * map m_AnnotationCS_name_ownedAnnotations_ownedContents in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lAnnotationCS : basecs::AnnotationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aAnnotation : Annotation[1] = lAnnotationCS.pivot.oclAsType(Annotation)
     *   ;
     * name : String[?] = lAnnotationCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lAnnotationCS.ownedAnnotations;
     * ownedContents : OrderedSet(basecs::ModelElementCS) = lAnnotationCS.ownedContents;
     * ownedDetails : OrderedSet(basecs::DetailCS) = lAnnotationCS.ownedDetails;
     * ownedReferences : OrderedSet(basecs::ModelElementRefCS) = lAnnotationCS.ownedReferences;
     * pivot : Element[?] = lAnnotationCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Element) = ownedReferences->collect(_'1_' | _'1_'.pivot)
     *   ;
     * _'\u00ABcollect\u00BB1' : Sequence(Detail) = ownedDetails->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Detail))
     *   ;
     * _'\u00ABcollect\u00BB2' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot)
     *   ;
     * _'\u00ABcollect\u00BB3' : Sequence(Element) = ownedContents->collect(_'1_' | _'1_'.pivot);
     *  |
     * aAnnotation.name := name;
     * aAnnotation.ownedAnnotations := _'\u00ABcollect\u00BB2';
     * aAnnotation.ownedContents := _'\u00ABcollect\u00BB3';
     * aAnnotation.ownedDetails := _'\u00ABcollect\u00BB1';
     * aAnnotation.references := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_AnnotationCS_name_ownedAnnotations_ownedContents(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AnnotationCS lAnnotationCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Annotation_0 = idResolver.getClass(CLSSid_Annotation, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lAnnotationCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Annotation aAnnotation = ClassUtil.nonNullState((Annotation)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Annotation_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lAnnotationCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lAnnotationCS.getOwnedAnnotations();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ModelElementCS> ownedContents = lAnnotationCS.getOwnedContents();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<DetailCS> ownedDetails = lAnnotationCS.getOwnedDetails();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ModelElementRefCS> ownedReferences = lAnnotationCS.getOwnedReferences();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lAnnotationCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedReferences = idResolver.createOrderedSetOfAll(ORD_CLSSid_ModelElementRefCS, ownedReferences);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedReferences.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ModelElementRefCS _1 = (ModelElementRefCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1 == null) {
                    throw throwNull(lAnnotationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                //
                accumulator.add(pivot_1);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedDetails = idResolver.createOrderedSetOfAll(ORD_CLSSid_DetailCS, ownedDetails);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_0 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Detail);
            @Nullable Iterator<Object> ITERATOR__1_0 = BOXED_ownedDetails.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_1;
            while (true) {
                if (!ITERATOR__1_0.hasNext()) {
                    _171_collect_187_1 = accumulator_0;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable DetailCS _1_0 = (DetailCS)ITERATOR__1_0.next();
                /**
                 * _'1_'.pivot.oclAsType(Detail)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Detail_0 = idResolver.getClass(CLSSid_Detail, null);
                if (_1_0 == null) {
                    throw throwNull(lAnnotationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_2 = _1_0.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Detail oclAsType = ClassUtil.nonNullState((Detail)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_2, TYP_Detail_0));
                //
                accumulator_0.add(oclAsType);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_1 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1_1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_2;
            while (true) {
                if (!ITERATOR__1_1.hasNext()) {
                    _171_collect_187_2 = accumulator_1;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1_1 = (AnnotationElementCS)ITERATOR__1_1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1_1 == null) {
                    throw throwNull(lAnnotationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_3 = _1_1.getPivot();
                //
                accumulator_1.add(pivot_3);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedContents = idResolver.createOrderedSetOfAll(ORD_CLSSid_ModelElementCS, ownedContents);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_2 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1_2 = BOXED_ownedContents.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_3;
            while (true) {
                if (!ITERATOR__1_2.hasNext()) {
                    _171_collect_187_3 = accumulator_2;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ModelElementCS _1_2 = (ModelElementCS)ITERATOR__1_2.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1_2 == null) {
                    throw throwNull(lAnnotationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_4 = _1_2.getPivot();
                //
                accumulator_2.add(pivot_4);
            }
            // property assignments
            aAnnotation.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187_2 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187_2);
            aAnnotation.getOwnedAnnotations().addAll(ECORE__171_collect_187_2);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187_3 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187_3);
            aAnnotation.getOwnedContents().addAll(ECORE__171_collect_187_3);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Detail> ECORE__171_collect_187_1 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Detail.class, _171_collect_187_1);
            aAnnotation.getOwnedDetails().addAll(ECORE__171_collect_187_1);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187);
            aAnnotation.getReferences().addAll(ECORE__171_collect_187);
            boolean m_AnnotationCS_name_ownedAnnotations_ownedContents = ValueUtil.TRUE_VALUE;
            return m_AnnotationCS_name_ownedAnnotations_ownedContents;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_AnnotationCS_name_ownedAnnotations_ownedContents", e);
        }
    }
    
    /**
     * 
     * map m_AnnotationCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lAnnotationCS : basecs::AnnotationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rAnnotation : Annotation[1];
     *  |}
     * where ( |)
     * { |
     * lAnnotationCS.pivot := rAnnotation;
     * }
     * 
     */
    protected boolean MAP_m_AnnotationCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AnnotationCS lAnnotationCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Annotation rAnnotation = PivotFactory.eINSTANCE.createAnnotation();
            assert rAnnotation != null;
            models[1/*rightAS*/].add(rAnnotation);
            // property assignments
            lAnnotationCS_0.setPivot(rAnnotation);
            boolean m_AnnotationCS_pivot = ValueUtil.TRUE_VALUE;
            return m_AnnotationCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_AnnotationCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_AttributeCS_default_name_ownedAnnotations_pivot_ in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lAttributeCS : basecs::AttributeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lAttributeCS.pivot.oclAsType(Property)
     *   ;
     * default : String[?] = lAttributeCS.default;
     * name : String[?] = lAttributeCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lAttributeCS.ownedAnnotations;
     * pivot : Element[?] = lAttributeCS.pivot;
     * qualifiers : OrderedSet(String) = lAttributeCS.qualifiers;
     * includes : Boolean[1] = qualifiers->includes('readonly')
     *   ;
     * includes1 : Boolean[1] = qualifiers->includes('static')
     *   ;
     * includes2 : Boolean[1] = qualifiers->includes('transient')
     *   ;
     * includes3 : Boolean[1] = qualifiers->includes('volatile')
     *   ;
     * includes4 : Boolean[1] = qualifiers->includes('id')
     *   ;
     * includes5 : Boolean[1] = qualifiers->includes('unsettable')
     *   ;
     * includes6 : Boolean[1] = qualifiers->includes('derived')
     *   ;
     * _'\u00ABcollect\u00BB' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot);
     *  |
     * aProperty.defaultValueString := default;
     * aProperty.isDerived := includes6;
     * aProperty.isID := includes4;
     * aProperty.isReadOnly := includes;
     * aProperty.isStatic := includes1;
     * aProperty.isTransient := includes2;
     * aProperty.isUnsettable := includes5;
     * aProperty.isVolatile := includes3;
     * aProperty.name := name;
     * aProperty.ownedAnnotations := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_AttributeCS_default_name_ownedAnnotations_pivot_(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS lAttributeCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lAttributeCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String symbol_0 = lAttributeCS.getDefault();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lAttributeCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lAttributeCS.getOwnedAnnotations();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lAttributeCS.getPivot();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<String> qualifiers = lAttributeCS.getQualifiers();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_qualifiers = idResolver.createOrderedSetOfAll(ORD_PRIMid_String, qualifiers);
            final /*@Thrown*/ boolean includes = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_readonly).booleanValue();
            final /*@Thrown*/ boolean includes1 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_static).booleanValue();
            final /*@Thrown*/ boolean includes2 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_transient).booleanValue();
            final /*@Thrown*/ boolean includes3 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_volatile).booleanValue();
            final /*@Thrown*/ boolean includes4 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_id).booleanValue();
            final /*@Thrown*/ boolean includes5 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_unsettable).booleanValue();
            final /*@Thrown*/ boolean includes6 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_derived).booleanValue();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1 = (AnnotationElementCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1 == null) {
                    throw throwNull(lAttributeCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                //
                accumulator.add(pivot_1);
            }
            // property assignments
            aProperty.setDefaultValueString(symbol_0);
            aProperty.setIsDerived(includes6);
            aProperty.setIsID(includes4);
            aProperty.setIsReadOnly(includes);
            aProperty.setIsStatic(includes1);
            aProperty.setIsTransient(includes2);
            aProperty.setIsUnsettable(includes5);
            aProperty.setIsVolatile(includes3);
            aProperty.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187);
            aProperty.getOwnedAnnotations().addAll(ECORE__171_collect_187);
            boolean m_AttributeCS_default_name_ownedAnnotations_pivot_ = ValueUtil.TRUE_VALUE;
            return m_AttributeCS_default_name_ownedAnnotations_pivot_;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_AttributeCS_default_name_ownedAnnotations_pivot_", e);
        }
    }
    
    /**
     * 
     * map m_AttributeCS_ownedDefaultExpressions_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lAttributeCS : basecs::AttributeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lAttributeCS.pivot.oclAsType(Property)
     *   ;
     * ownedDefaultExpressions : OrderedSet(basecs::SpecificationCS) = lAttributeCS.ownedDefaultExpressions;
     * pivot : Element[?] = lAttributeCS.pivot;
     * ownedExpression : LanguageExpression[1] = ownedDefaultExpressions->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(LanguageExpression))
     *   ->oclAsType(LanguageExpression);
     *  |
     * aProperty.ownedExpression := ownedExpression;
     * }
     * 
     */
    protected boolean MAP_m_AttributeCS_ownedDefaultExpressions_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS lAttributeCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lAttributeCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SpecificationCS> ownedDefaultExpressions = lAttributeCS_0.getOwnedDefaultExpressions();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lAttributeCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LanguageExpression_1 = idResolver.getClass(CLSSid_LanguageExpression, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedDefaultExpressions = idResolver.createOrderedSetOfAll(ORD_CLSSid_SpecificationCS, ownedDefaultExpressions);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_LanguageExpression);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedDefaultExpressions.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue collect;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    collect = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable SpecificationCS _1 = (SpecificationCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(LanguageExpression)
                 */
                if (_1 == null) {
                    throw throwNull(lAttributeCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LanguageExpression oclAsType = ClassUtil.nonNullState((LanguageExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_LanguageExpression_1));
                //
                accumulator.add(oclAsType);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LanguageExpression ownedExpression = ClassUtil.nonNullState((LanguageExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, collect, TYP_LanguageExpression_1));
            // property assignments
            aProperty.setOwnedExpression(ownedExpression);
            boolean m_AttributeCS_ownedDefaultExpressions_pivot = ValueUtil.TRUE_VALUE;
            return m_AttributeCS_ownedDefaultExpressions_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_AttributeCS_ownedDefaultExpressions_pivot", e);
        }
    }
    
    /**
     * 
     * map m_AttributeCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lAttributeCS : basecs::AttributeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lAttributeCS.pivot.oclAsType(Property)
     *   ;
     * ownedType : basecs::TypedRefCS[?] = lAttributeCS.ownedType;
     * pivot : Element[?] = lAttributeCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aProperty.type := aClass;
     * }
     * 
     */
    protected boolean MAP_m_AttributeCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS lAttributeCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lAttributeCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lAttributeCS_1.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lAttributeCS_1.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedType == null) {
                throw throwNull(lAttributeCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aProperty.setType(aClass);
            boolean m_AttributeCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_AttributeCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_AttributeCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_AttributeCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lAttributeCS : basecs::AttributeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rProperty : Property[1];
     *  |}
     * where ( |)
     * { |
     * lAttributeCS.pivot := rProperty;
     * }
     * 
     */
    protected boolean MAP_m_AttributeCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull AttributeCS lAttributeCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property rProperty = PivotFactory.eINSTANCE.createProperty();
            assert rProperty != null;
            models[1/*rightAS*/].add(rProperty);
            // property assignments
            lAttributeCS_2.setPivot(rProperty);
            boolean m_AttributeCS_pivot = ValueUtil.TRUE_VALUE;
            return m_AttributeCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_AttributeCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_BooleanLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lBooleanLiteralExpCS : essentialoclcs::BooleanLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rBooleanLiteralExp : BooleanLiteralExp[1];
     *  |}
     * where ( |)
     * { |
     * lBooleanLiteralExpCS.pivot := rBooleanLiteralExp;
     * }
     * 
     */
    protected boolean MAP_m_BooleanLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExpCS lBooleanLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable BooleanLiteralExp rBooleanLiteralExp = PivotFactory.eINSTANCE.createBooleanLiteralExp();
            assert rBooleanLiteralExp != null;
            models[1/*rightAS*/].add(rBooleanLiteralExp);
            // property assignments
            lBooleanLiteralExpCS.setPivot(rBooleanLiteralExp);
            boolean m_BooleanLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_BooleanLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_BooleanLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_BooleanLiteralExpCS_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lBooleanLiteralExpCS : essentialoclcs::BooleanLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aBooleanLiteralExp : BooleanLiteralExp[1] = lBooleanLiteralExpCS.pivot.oclAsType(BooleanLiteralExp)
     *   ;
     * pivot : Element[?] = lBooleanLiteralExpCS.pivot;
     * type : Type[?] = aBooleanLiteralExp.lookupClass('Boolean');
     *  |
     * aBooleanLiteralExp.type := type;
     * }
     * 
     */
    protected boolean MAP_m_BooleanLiteralExpCS_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExpCS lBooleanLiteralExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_BooleanLiteralExp_0 = idResolver.getClass(CLSSid_BooleanLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lBooleanLiteralExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExp aBooleanLiteralExp = ClassUtil.nonNullState((BooleanLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_BooleanLiteralExp_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lBooleanLiteralExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Class type = this.lookupClass(aBooleanLiteralExp, STR_Boolean);
            // property assignments
            aBooleanLiteralExp.setType(type);
            objectManager.assigned(aBooleanLiteralExp, PivotPackage.Literals.TYPED_ELEMENT__TYPE, type, null);
            boolean m_BooleanLiteralExpCS_pivot_1 = ValueUtil.TRUE_VALUE;
            return m_BooleanLiteralExpCS_pivot_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_BooleanLiteralExpCS_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_BooleanLiteralExpCS_pivot_symbol in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lBooleanLiteralExpCS : essentialoclcs::BooleanLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aBooleanLiteralExp : BooleanLiteralExp[1] = lBooleanLiteralExpCS.pivot.oclAsType(BooleanLiteralExp)
     *   ;
     * pivot : Element[?] = lBooleanLiteralExpCS.pivot;
     * symbol : String[?] = lBooleanLiteralExpCS.symbol;
     * toBoolean : Boolean[1] = symbol.toBoolean();
     *  |
     * aBooleanLiteralExp.booleanSymbol := toBoolean;
     * }
     * 
     */
    protected boolean MAP_m_BooleanLiteralExpCS_pivot_symbol(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExpCS lBooleanLiteralExpCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_BooleanLiteralExp_0 = idResolver.getClass(CLSSid_BooleanLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lBooleanLiteralExpCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull BooleanLiteralExp aBooleanLiteralExp = ClassUtil.nonNullState((BooleanLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_BooleanLiteralExp_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lBooleanLiteralExpCS_1.getPivot();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String symbol = lBooleanLiteralExpCS_1.getSymbol();
            final /*@Thrown*/ boolean toBoolean = StringToBooleanOperation.INSTANCE.evaluate(symbol).booleanValue();
            // property assignments
            aBooleanLiteralExp.setBooleanSymbol(toBoolean);
            boolean m_BooleanLiteralExpCS_pivot_symbol = ValueUtil.TRUE_VALUE;
            return m_BooleanLiteralExpCS_pivot_symbol;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_BooleanLiteralExpCS_pivot_symbol", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralExpCS_ownedParts_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionLiteralExpCS : essentialoclcs::CollectionLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aCollectionLiteralExp : CollectionLiteralExp[1] = lCollectionLiteralExpCS.pivot.oclAsType(CollectionLiteralExp)
     *   ;
     * ownedParts : OrderedSet(essentialoclcs::CollectionLiteralPartCS) = lCollectionLiteralExpCS.ownedParts;
     * pivot : Element[?] = lCollectionLiteralExpCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(CollectionLiteralPart) = ownedParts->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(CollectionLiteralPart));
     *  |
     * aCollectionLiteralExp.ownedParts := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralExpCS_ownedParts_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExpCS lCollectionLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionLiteralExp_0 = idResolver.getClass(CLSSid_CollectionLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lCollectionLiteralExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExp aCollectionLiteralExp = ClassUtil.nonNullState((CollectionLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_CollectionLiteralExp_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<CollectionLiteralPartCS> ownedParts = lCollectionLiteralExpCS.getOwnedParts();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lCollectionLiteralExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedParts = idResolver.createOrderedSetOfAll(ORD_CLSSid_CollectionLiteralPartCS, ownedParts);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_CollectionLiteralPart);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedParts.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CollectionLiteralPartCS _1 = (CollectionLiteralPartCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(CollectionLiteralPart)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionLiteralPart_0 = idResolver.getClass(CLSSid_CollectionLiteralPart, null);
                if (_1 == null) {
                    throw throwNull(lCollectionLiteralExpCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPart oclAsType = ClassUtil.nonNullState((CollectionLiteralPart)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_CollectionLiteralPart_0));
                //
                accumulator.add(oclAsType);
            }
            // property assignments
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<CollectionLiteralPart> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(CollectionLiteralPart.class, _171_collect_187);
            aCollectionLiteralExp.getOwnedParts().addAll(ECORE__171_collect_187);
            boolean m_CollectionLiteralExpCS_ownedParts_pivot = ValueUtil.TRUE_VALUE;
            return m_CollectionLiteralExpCS_ownedParts_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralExpCS_ownedParts_pivot", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralExpCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionLiteralExpCS : essentialoclcs::CollectionLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aCollectionLiteralExp : CollectionLiteralExp[1] = lCollectionLiteralExpCS.pivot.oclAsType(CollectionLiteralExp)
     *   ;
     * ownedType : essentialoclcs::CollectionTypeCS[?] = lCollectionLiteralExpCS.ownedType;
     * pivot : Element[?] = lCollectionLiteralExpCS.pivot;
     * aCollectionType : CollectionType[1] = ownedType.pivot.oclAsType(CollectionType);
     * name : String[?] = ownedType.name;
     * ownedMultiplicity : basecs::MultiplicityCS[?] = ownedType.ownedMultiplicity;
     * pivot1 : Element[?] = ownedType.pivot;
     * _'=' : Boolean[1] = ownedMultiplicity =
     *   null;
     * _'if' : ecore::EInt[?] = if _'='
     *   then null
     *   else ownedMultiplicity.getUpper()
     *   endif
     *   ;
     * if1 : ecore::EInt[?] = if _'='
     *   then null
     *   else ownedMultiplicity.getLower()
     *   endif;
     *  |
     * aCollectionType.lower := if1;
     * aCollectionType.name := name;
     * aCollectionLiteralExp.type := aCollectionType;
     * aCollectionType.upper := _'if';
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralExpCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExpCS lCollectionLiteralExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionLiteralExp_0 = idResolver.getClass(CLSSid_CollectionLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lCollectionLiteralExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExp aCollectionLiteralExp = ClassUtil.nonNullState((CollectionLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_CollectionLiteralExp_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CollectionTypeCS ownedType = lCollectionLiteralExpCS_0.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lCollectionLiteralExpCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionType_0 = idResolver.getClass(CLSSid_CollectionType, null);
            if (ownedType == null) {
                throw throwNull(lCollectionLiteralExpCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/EssentialOCLCS\'::CollectionTypeCS::name\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionType aCollectionType = ClassUtil.nonNullState((CollectionType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_CollectionType_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = ownedType.getName();
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable MultiplicityCS ownedMultiplicity = ownedType.getOwnedMultiplicity();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            final /*@Thrown*/ boolean eq = ownedMultiplicity == null;
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.Nullable IntegerValue symbol_0;
            if (eq) {
                symbol_0 = null;
            }
            else {
                if (ownedMultiplicity == null) {
                    throw throwNull(lCollectionLiteralExpCS_0, "Null source for \'basecs::MultiplicityCS::getUpper() : ecore::EInt[1]\'");
                }
                final /*@Thrown*/ int getUpper = ownedMultiplicity.getUpper();
                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull IntegerValue BOXED_getUpper = ValueUtil.integerValueOf(getUpper);
                symbol_0 = BOXED_getUpper;
            }
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.Nullable IntegerValue if1;
            if (eq) {
                if1 = null;
            }
            else {
                if (ownedMultiplicity == null) {
                    throw throwNull(lCollectionLiteralExpCS_0, "Null source for \'basecs::MultiplicityCS::getLower() : ecore::EInt[1]\'");
                }
                final /*@Thrown*/ int getLower = ownedMultiplicity.getLower();
                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull IntegerValue BOXED_getLower = ValueUtil.integerValueOf(getLower);
                if1 = BOXED_getLower;
            }
            // property assignments
            final /*@Thrown*/ Integer ECORE_if1 = if1 == null ? null : if1.intValue();
            if (ECORE_if1 == null) {
                throw throwNull(lCollectionLiteralExpCS_0, "Null value");
            }
            aCollectionType.setLower(ECORE_if1);
            aCollectionType.setName(name);
            aCollectionLiteralExp.setType(aCollectionType);
            final /*@Thrown*/ Integer ECORE_symbol_0 = symbol_0 == null ? null : symbol_0.intValue();
            if (ECORE_symbol_0 == null) {
                throw throwNull(lCollectionLiteralExpCS_0, "Null value");
            }
            aCollectionType.setUpper(ECORE_symbol_0);
            boolean m_CollectionLiteralExpCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_CollectionLiteralExpCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralExpCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lCollectionLiteralExpCS : essentialoclcs::CollectionLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rCollectionLiteralExp : CollectionLiteralExp[1];
     *  |}
     * where ( |)
     * { |
     * lCollectionLiteralExpCS.pivot := rCollectionLiteralExp;
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralExpCS lCollectionLiteralExpCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable CollectionLiteralExp rCollectionLiteralExp = PivotFactory.eINSTANCE.createCollectionLiteralExp();
            assert rCollectionLiteralExp != null;
            models[1/*rightAS*/].add(rCollectionLiteralExp);
            // property assignments
            lCollectionLiteralExpCS_1.setPivot(rCollectionLiteralExp);
            boolean m_CollectionLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_CollectionLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralPartCS_ownedExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionLiteralPartCS : essentialoclcs::CollectionLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lCollectionLiteralPartCS.isCollectionItem()
     *   )
     * {aCollectionItem : CollectionItem[1] = lCollectionLiteralPartCS.pivot.oclAsType(CollectionItem)
     *   ;
     * ownedExpression : essentialoclcs::ExpCS[?] = lCollectionLiteralPartCS.ownedExpression;
     * pivot : Element[?] = lCollectionLiteralPartCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedExpression.pivot;
     *  |
     * aCollectionItem.ownedItem := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralPartCS_ownedExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS lCollectionLiteralPartCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression = lCollectionLiteralPartCS.getOwnedLastExpression();
            final /*@Thrown*/ boolean eq = ownedLastExpression == null;
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (eq) {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionItem_0 = idResolver.getClass(CLSSid_CollectionItem, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lCollectionLiteralPartCS.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionItem aCollectionItem = ClassUtil.nonNullState((CollectionItem)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_CollectionItem_0));
                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedExpression = lCollectionLiteralPartCS.getOwnedExpression();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lCollectionLiteralPartCS.getPivot();
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                if (ownedExpression == null) {
                    throw throwNull(lCollectionLiteralPartCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedExpression.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedExpression.getPivot();
                // property assignments
                aCollectionItem.setOwnedItem(aOCLExpression);
                boolean m_CollectionLiteralPartCS_ownedExpression_pivot = ValueUtil.TRUE_VALUE;
                symbol_1 = m_CollectionLiteralPartCS_ownedExpression_pivot;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralPartCS_ownedExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralPartCS_ownedExpression_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionLiteralPartCS : essentialoclcs::CollectionLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lCollectionLiteralPartCS.isCollectionItem()
     *   )
     * {aCollectionItem : CollectionItem[1] = lCollectionLiteralPartCS.pivot.oclAsType(CollectionItem)
     *   ;
     * ownedExpression : essentialoclcs::ExpCS[?] = lCollectionLiteralPartCS.ownedExpression;
     * pivot : Element[?] = lCollectionLiteralPartCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedExpression.pivot;
     * type : Type[?] = aOCLExpression.type;
     *  |
     * aCollectionItem.type := type;
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralPartCS_ownedExpression_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS lCollectionLiteralPartCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression = lCollectionLiteralPartCS_0.getOwnedLastExpression();
            final /*@Thrown*/ boolean eq = ownedLastExpression == null;
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (eq) {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionItem_0 = idResolver.getClass(CLSSid_CollectionItem, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lCollectionLiteralPartCS_0.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionItem aCollectionItem = ClassUtil.nonNullState((CollectionItem)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_CollectionItem_0));
                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedExpression = lCollectionLiteralPartCS_0.getOwnedExpression();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lCollectionLiteralPartCS_0.getPivot();
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                if (ownedExpression == null) {
                    throw throwNull(lCollectionLiteralPartCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedExpression.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedExpression.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Type type = aOCLExpression.getType();
                // property assignments
                aCollectionItem.setType(type);
                boolean m_CollectionLiteralPartCS_ownedExpression_pivot_1 = ValueUtil.TRUE_VALUE;
                symbol_1 = m_CollectionLiteralPartCS_ownedExpression_pivot_1;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralPartCS_ownedExpression_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralPartCS_ownedExpression_pivot_2 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionLiteralPartCS : essentialoclcs::CollectionLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lCollectionLiteralPartCS.isCollectionItem()
     *   lCollectionLiteralPartCS.isCollectionRange()
     *   )
     * {aCollectionRange : CollectionRange[1] = lCollectionLiteralPartCS.pivot.oclAsType(CollectionRange)
     *   ;
     * ownedExpression : essentialoclcs::ExpCS[?] = lCollectionLiteralPartCS.ownedExpression;
     * pivot : Element[?] = lCollectionLiteralPartCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedExpression.pivot;
     *  |
     * aCollectionRange.ownedFirst := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralPartCS_ownedExpression_pivot_2(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS lCollectionLiteralPartCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression = lCollectionLiteralPartCS_1.getOwnedLastExpression();
            final /*@Thrown*/ boolean eq = ownedLastExpression == null;
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(eq);
            if (not == null) {
                throw throwNull(lCollectionLiteralPartCS_1, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression_0 = lCollectionLiteralPartCS_1.getOwnedLastExpression();
                final /*@Thrown*/ boolean ne = ownedLastExpression_0 != null;
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (ne) {
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionRange_0 = idResolver.getClass(CLSSid_CollectionRange, null);
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lCollectionLiteralPartCS_1.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionRange aCollectionRange = ClassUtil.nonNullState((CollectionRange)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_CollectionRange_0));
                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedExpression = lCollectionLiteralPartCS_1.getOwnedExpression();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lCollectionLiteralPartCS_1.getPivot();
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                    if (ownedExpression == null) {
                        throw throwNull(lCollectionLiteralPartCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                    }
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedExpression.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedExpression.getPivot();
                    // property assignments
                    aCollectionRange.setOwnedFirst(aOCLExpression);
                    boolean m_CollectionLiteralPartCS_ownedExpression_pivot_2 = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_CollectionLiteralPartCS_ownedExpression_pivot_2;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralPartCS_ownedExpression_pivot_2", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralPartCS_ownedLastExpression_pivo in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionLiteralPartCS : essentialoclcs::CollectionLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lCollectionLiteralPartCS.isCollectionItem()
     *   lCollectionLiteralPartCS.isCollectionRange()
     *   )
     * {aCollectionRange : CollectionRange[1] = lCollectionLiteralPartCS.pivot.oclAsType(CollectionRange)
     *   ;
     * ownedLastExpression : essentialoclcs::ExpCS[?] = lCollectionLiteralPartCS.ownedLastExpression;
     * pivot : Element[?] = lCollectionLiteralPartCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedLastExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedLastExpression.pivot;
     *  |
     * aCollectionRange.ownedLast := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralPartCS_ownedLastExpression_pivo(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS lCollectionLiteralPartCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression = lCollectionLiteralPartCS_2.getOwnedLastExpression();
            final /*@Thrown*/ boolean eq = ownedLastExpression == null;
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(eq);
            if (not == null) {
                throw throwNull(lCollectionLiteralPartCS_2, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression_0 = lCollectionLiteralPartCS_2.getOwnedLastExpression();
                final /*@Thrown*/ boolean ne = ownedLastExpression_0 != null;
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (ne) {
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionRange_0 = idResolver.getClass(CLSSid_CollectionRange, null);
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lCollectionLiteralPartCS_2.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionRange aCollectionRange = ClassUtil.nonNullState((CollectionRange)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_CollectionRange_0));
                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression_1 = lCollectionLiteralPartCS_2.getOwnedLastExpression();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lCollectionLiteralPartCS_2.getPivot();
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                    if (ownedLastExpression_1 == null) {
                        throw throwNull(lCollectionLiteralPartCS_2, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                    }
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedLastExpression_1.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedLastExpression_1.getPivot();
                    // property assignments
                    aCollectionRange.setOwnedLast(aOCLExpression);
                    boolean m_CollectionLiteralPartCS_ownedLastExpression_pivo = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_CollectionLiteralPartCS_ownedLastExpression_pivo;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralPartCS_ownedLastExpression_pivo", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralPartCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionLiteralPartCS : essentialoclcs::CollectionLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rCollectionItem : CollectionItem[1];
     *  |}
     * where ( |
     * lCollectionLiteralPartCS.isCollectionItem())
     * { |
     * lCollectionLiteralPartCS.pivot := rCollectionItem;
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralPartCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS lCollectionLiteralPartCS_3) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression = lCollectionLiteralPartCS_3.getOwnedLastExpression();
            final /*@Thrown*/ boolean eq = ownedLastExpression == null;
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (eq) {
                // creations
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable CollectionItem rCollectionItem = PivotFactory.eINSTANCE.createCollectionItem();
                assert rCollectionItem != null;
                models[1/*rightAS*/].add(rCollectionItem);
                // property assignments
                lCollectionLiteralPartCS_3.setPivot(rCollectionItem);
                boolean m_CollectionLiteralPartCS_pivot = ValueUtil.TRUE_VALUE;
                symbol_1 = m_CollectionLiteralPartCS_pivot;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralPartCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_CollectionLiteralPartCS_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionLiteralPartCS : essentialoclcs::CollectionLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rCollectionRange : CollectionRange[1];
     *  |}
     * where ( |
     * lCollectionLiteralPartCS.isCollectionRange()
     *   not lCollectionLiteralPartCS.isCollectionItem())
     * { |
     * lCollectionLiteralPartCS.pivot := rCollectionRange;
     * }
     * 
     */
    protected boolean MAP_m_CollectionLiteralPartCS_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionLiteralPartCS lCollectionLiteralPartCS_4) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression = lCollectionLiteralPartCS_4.getOwnedLastExpression();
            final /*@Thrown*/ boolean ne = ownedLastExpression != null;
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (ne) {
                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedLastExpression_0 = lCollectionLiteralPartCS_4.getOwnedLastExpression();
                final /*@Thrown*/ boolean eq = ownedLastExpression_0 == null;
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(eq);
                if (not == null) {
                    throw throwNull(lCollectionLiteralPartCS_4, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (not) {
                    // creations
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable CollectionRange rCollectionRange = PivotFactory.eINSTANCE.createCollectionRange();
                    assert rCollectionRange != null;
                    models[1/*rightAS*/].add(rCollectionRange);
                    // property assignments
                    lCollectionLiteralPartCS_4.setPivot(rCollectionRange);
                    boolean m_CollectionLiteralPartCS_pivot_1 = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_CollectionLiteralPartCS_pivot_1;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionLiteralPartCS_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_CollectionTypeCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lCollectionTypeCS : essentialoclcs::CollectionTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aCollectionType : CollectionType[1] = lCollectionTypeCS.pivot.oclAsType(CollectionType)
     *   ;
     * ownedType : basecs::TypedRefCS[?] = lCollectionTypeCS.ownedType;
     * pivot : Element[?] = lCollectionTypeCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aCollectionType.elementType := aClass;
     * }
     * 
     */
    protected boolean MAP_m_CollectionTypeCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionTypeCS lCollectionTypeCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_CollectionType_0 = idResolver.getClass(CLSSid_CollectionType, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lCollectionTypeCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull CollectionType aCollectionType = ClassUtil.nonNullState((CollectionType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_CollectionType_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lCollectionTypeCS.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lCollectionTypeCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedType == null) {
                throw throwNull(lCollectionTypeCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aCollectionType.setElementType(aClass);
            boolean m_CollectionTypeCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_CollectionTypeCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionTypeCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_CollectionTypeCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lCollectionTypeCS : essentialoclcs::CollectionTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rCollectionType : CollectionType[1];
     *  |}
     * where ( |)
     * { |
     * lCollectionTypeCS.pivot := rCollectionType;
     * }
     * 
     */
    protected boolean MAP_m_CollectionTypeCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull CollectionTypeCS lCollectionTypeCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable CollectionType rCollectionType = PivotFactory.eINSTANCE.createCollectionType();
            assert rCollectionType != null;
            models[1/*rightAS*/].add(rCollectionType);
            // property assignments
            lCollectionTypeCS_0.setPivot(rCollectionType);
            boolean m_CollectionTypeCS_pivot = ValueUtil.TRUE_VALUE;
            return m_CollectionTypeCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_CollectionTypeCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ConstraintCS_ownedSpecification_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lConstraintCS : basecs::ConstraintCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aConstraint : Constraint[1] = lConstraintCS.pivot.oclAsType(Constraint)
     *   ;
     * ownedSpecification : basecs::SpecificationCS[?] = lConstraintCS.ownedSpecification;
     * pivot : Element[?] = lConstraintCS.pivot;
     * aLanguageExpression : LanguageExpression[1] = ownedSpecification.pivot.oclAsType(LanguageExpression);
     * pivot1 : Element[?] = ownedSpecification.pivot;
     *  |
     * aConstraint.ownedSpecification := aLanguageExpression;
     * }
     * 
     */
    protected boolean MAP_m_ConstraintCS_ownedSpecification_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ConstraintCS lConstraintCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Constraint_0 = idResolver.getClass(CLSSid_Constraint, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lConstraintCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Constraint aConstraint = ClassUtil.nonNullState((Constraint)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Constraint_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable SpecificationCS ownedSpecification = lConstraintCS.getOwnedSpecification();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lConstraintCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LanguageExpression_0 = idResolver.getClass(CLSSid_LanguageExpression, null);
            if (ownedSpecification == null) {
                throw throwNull(lConstraintCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedSpecification.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LanguageExpression aLanguageExpression = ClassUtil.nonNullState((LanguageExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_LanguageExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedSpecification.getPivot();
            // property assignments
            aConstraint.setOwnedSpecification(aLanguageExpression);
            boolean m_ConstraintCS_ownedSpecification_pivot = ValueUtil.TRUE_VALUE;
            return m_ConstraintCS_ownedSpecification_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ConstraintCS_ownedSpecification_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ConstraintCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lConstraintCS : basecs::ConstraintCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rConstraint : Constraint[1];
     *  |}
     * where ( |)
     * { |
     * lConstraintCS.pivot := rConstraint;
     * }
     * 
     */
    protected boolean MAP_m_ConstraintCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ConstraintCS lConstraintCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Constraint rConstraint = PivotFactory.eINSTANCE.createConstraint();
            assert rConstraint != null;
            models[1/*rightAS*/].add(rConstraint);
            // property assignments
            lConstraintCS_0.setPivot(rConstraint);
            boolean m_ConstraintCS_pivot = ValueUtil.TRUE_VALUE;
            return m_ConstraintCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ConstraintCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ContextCS_ownedExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lContextCS : essentialoclcs::ContextCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aExpressionInOCL : ExpressionInOCL[1] = lContextCS.pivot.oclAsType(ExpressionInOCL)
     *   ;
     * ownedExpression : essentialoclcs::ExpCS[?] = lContextCS.ownedExpression;
     * pivot : Element[?] = lContextCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedExpression.pivot;
     *  |
     * aExpressionInOCL.ownedBody := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_ContextCS_ownedExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ContextCS lContextCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_ExpressionInOCL_0 = idResolver.getClass(CLSSid_ExpressionInOCL, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lContextCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull ExpressionInOCL aExpressionInOCL = ClassUtil.nonNullState((ExpressionInOCL)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_ExpressionInOCL_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedExpression = lContextCS.getOwnedExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lContextCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedExpression == null) {
                throw throwNull(lContextCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedExpression.getPivot();
            // property assignments
            aExpressionInOCL.setOwnedBody(aOCLExpression);
            boolean m_ContextCS_ownedExpression_pivot = ValueUtil.TRUE_VALUE;
            return m_ContextCS_ownedExpression_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ContextCS_ownedExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ContextCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lContextCS : essentialoclcs::ContextCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rExpressionInOCL : ExpressionInOCL[1];
     *  |}
     * where ( |)
     * { |
     * lContextCS.pivot := rExpressionInOCL;
     * }
     * 
     */
    protected boolean MAP_m_ContextCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ContextCS lContextCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable ExpressionInOCL rExpressionInOCL = PivotFactory.eINSTANCE.createExpressionInOCL();
            assert rExpressionInOCL != null;
            models[1/*rightAS*/].add(rExpressionInOCL);
            // property assignments
            lContextCS_0.setPivot(rExpressionInOCL);
            boolean m_ContextCS_pivot = ValueUtil.TRUE_VALUE;
            return m_ContextCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ContextCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_DataTypeCS_instanceClassName_isSerializable_name in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lDataTypeCS : basecs::DataTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {OclElement : Class[1] = OclElement;
     * aDataType : DataType[1] = lDataTypeCS.pivot.oclAsType(DataType)
     *   ;
     * instanceClassName : String[?] = lDataTypeCS.instanceClassName;
     * isSerializable : Boolean[?] = lDataTypeCS.isSerializable;
     * name : String[?] = lDataTypeCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lDataTypeCS.ownedAnnotations;
     * ownedConstraints : OrderedSet(basecs::ConstraintCS) = lDataTypeCS.ownedConstraints;
     * pivot : Element[?] = lDataTypeCS.pivot;
     * Set : Set(Class[*|1]) = Set{OclElement
     *   }
     *   ;
     * _'\u00ABcollect\u00BB' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot)
     *   ;
     * _'\u00ABcollect\u00BB1' : Sequence(Constraint) = ownedConstraints->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Constraint));
     *  |
     * aDataType.instanceClassName := instanceClassName;
     * aDataType.isSerializable := isSerializable;
     * aDataType.name := name;
     * aDataType.ownedAnnotations := _'\u00ABcollect\u00BB';
     * aDataType.ownedInvariants := _'\u00ABcollect\u00BB1';
     * aDataType.superClasses := Set;
     * }
     * 
     */
    protected boolean MAP_m_DataTypeCS_instanceClassName_isSerializable_name(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DataTypeCS lDataTypeCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OclElement_0 = idResolver.getClass(CLSSid_OclElement, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_DataType_0 = idResolver.getClass(CLSSid_DataType, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lDataTypeCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull DataType aDataType = ClassUtil.nonNullState((DataType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_DataType_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String instanceClassName = lDataTypeCS.getInstanceClassName();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean isSerializable = lDataTypeCS.isIsSerializable();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lDataTypeCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lDataTypeCS.getOwnedAnnotations();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ConstraintCS> ownedConstraints = lDataTypeCS.getOwnedConstraints();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lDataTypeCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue Set = ValueUtil.createSetOfEach(SET_CLSSid_Class, TYP_OclElement_0);
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1 = (AnnotationElementCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1 == null) {
                    throw throwNull(lDataTypeCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                //
                accumulator.add(pivot_1);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedConstraints = idResolver.createOrderedSetOfAll(ORD_CLSSid_ConstraintCS, ownedConstraints);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_0 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Constraint);
            @Nullable Iterator<Object> ITERATOR__1_0 = BOXED_ownedConstraints.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_1;
            while (true) {
                if (!ITERATOR__1_0.hasNext()) {
                    _171_collect_187_1 = accumulator_0;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ConstraintCS _1_0 = (ConstraintCS)ITERATOR__1_0.next();
                /**
                 * _'1_'.pivot.oclAsType(Constraint)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Constraint_0 = idResolver.getClass(CLSSid_Constraint, null);
                if (_1_0 == null) {
                    throw throwNull(lDataTypeCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_2 = _1_0.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Constraint oclAsType = ClassUtil.nonNullState((Constraint)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_2, TYP_Constraint_0));
                //
                accumulator_0.add(oclAsType);
            }
            // property assignments
            aDataType.setInstanceClassName(instanceClassName);
            if (isSerializable == null) {
                throw throwNull(lDataTypeCS, "Null value");
            }
            aDataType.setIsSerializable(isSerializable);
            aDataType.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187);
            aDataType.getOwnedAnnotations().addAll(ECORE__171_collect_187);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Constraint> ECORE__171_collect_187_1 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Constraint.class, _171_collect_187_1);
            aDataType.getOwnedInvariants().addAll(ECORE__171_collect_187_1);
            final /*@NonInvalid*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Class> ECORE_Set = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Class.class, Set);
            aDataType.getSuperClasses().addAll(ECORE_Set);
            boolean m_DataTypeCS_instanceClassName_isSerializable_name = ValueUtil.TRUE_VALUE;
            return m_DataTypeCS_instanceClassName_isSerializable_name;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_DataTypeCS_instanceClassName_isSerializable_name", e);
        }
    }
    
    /**
     * 
     * map m_DataTypeCS_ownedSignature_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lDataTypeCS : basecs::DataTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aDataType : DataType[1] = lDataTypeCS.pivot.oclAsType(DataType)
     *   ;
     * ownedSignature : basecs::TemplateSignatureCS[?] = lDataTypeCS.ownedSignature;
     * pivot : Element[?] = lDataTypeCS.pivot;
     * aTemplateSignature : TemplateSignature[1] = ownedSignature.pivot.oclAsType(TemplateSignature)
     *   ;
     * ownedParameters : OrderedSet(basecs::TemplateParameterCS) = ownedSignature.ownedParameters;
     * pivot1 : Element[?] = ownedSignature.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(TemplateParameter) = ownedParameters->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(TemplateParameter));
     *  |
     * aTemplateSignature.ownedParameters := _'\u00ABcollect\u00BB';
     * aTemplateSignature.owningElement := aDataType;
     * }
     * 
     */
    protected boolean MAP_m_DataTypeCS_ownedSignature_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DataTypeCS lDataTypeCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_DataType_0 = idResolver.getClass(CLSSid_DataType, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lDataTypeCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull DataType aDataType = ClassUtil.nonNullState((DataType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_DataType_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TemplateSignatureCS ownedSignature = lDataTypeCS_0.getOwnedSignature();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lDataTypeCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateSignature_0 = idResolver.getClass(CLSSid_TemplateSignature, null);
            if (ownedSignature == null) {
                throw throwNull(lDataTypeCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::TemplateSignatureCS::ownedParameters\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedSignature.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateSignature aTemplateSignature = ClassUtil.nonNullState((TemplateSignature)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_TemplateSignature_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TemplateParameterCS> ownedParameters = ownedSignature.getOwnedParameters();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedSignature.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedParameters = idResolver.createOrderedSetOfAll(ORD_CLSSid_TemplateParameterCS, ownedParameters);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_TemplateParameter);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedParameters.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TemplateParameterCS _1 = (TemplateParameterCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(TemplateParameter)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateParameter_0 = idResolver.getClass(CLSSid_TemplateParameter, null);
                if (_1 == null) {
                    throw throwNull(lDataTypeCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_2 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateParameter oclAsType = ClassUtil.nonNullState((TemplateParameter)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_2, TYP_TemplateParameter_0));
                //
                accumulator.add(oclAsType);
            }
            // property assignments
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TemplateParameter> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(TemplateParameter.class, _171_collect_187);
            aTemplateSignature.getOwnedParameters().addAll(ECORE__171_collect_187);
            aTemplateSignature.setOwningElement(aDataType);
            objectManager.assigned(aTemplateSignature, PivotPackage.Literals.TEMPLATE_SIGNATURE__OWNING_ELEMENT, aDataType, null);
            boolean m_DataTypeCS_ownedSignature_pivot = ValueUtil.TRUE_VALUE;
            return m_DataTypeCS_ownedSignature_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_DataTypeCS_ownedSignature_pivot", e);
        }
    }
    
    /**
     * 
     * map m_DataTypeCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lDataTypeCS : basecs::DataTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rDataType : DataType[1];
     *  |}
     * where ( |)
     * { |
     * lDataTypeCS.pivot := rDataType;
     * }
     * 
     */
    protected boolean MAP_m_DataTypeCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DataTypeCS lDataTypeCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable DataType rDataType = PivotFactory.eINSTANCE.createDataType();
            assert rDataType != null;
            models[1/*rightAS*/].add(rDataType);
            // property assignments
            lDataTypeCS_1.setPivot(rDataType);
            boolean m_DataTypeCS_pivot = ValueUtil.TRUE_VALUE;
            return m_DataTypeCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_DataTypeCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_DetailCS_name_pivot_values in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lDetailCS : basecs::DetailCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aDetail : Detail[1] = lDetailCS.pivot.oclAsType(Detail);
     * name : String[?] = lDetailCS.name;
     * pivot : Element[?] = lDetailCS.pivot;
     * values : OrderedSet(String) = lDetailCS.values;
     *  |
     * aDetail.name := name;
     * aDetail.values := values;
     * }
     * 
     */
    protected boolean MAP_m_DetailCS_name_pivot_values(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DetailCS lDetailCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Detail_0 = idResolver.getClass(CLSSid_Detail, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lDetailCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Detail aDetail = ClassUtil.nonNullState((Detail)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Detail_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lDetailCS.getName();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lDetailCS.getPivot();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<String> values = lDetailCS.getValues();
            // property assignments
            aDetail.setName(name);
            aDetail.getValues().addAll(values);
            boolean m_DetailCS_name_pivot_values = ValueUtil.TRUE_VALUE;
            return m_DetailCS_name_pivot_values;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_DetailCS_name_pivot_values", e);
        }
    }
    
    /**
     * 
     * map m_DetailCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lDetailCS : basecs::DetailCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rDetail : Detail[1];
     *  |}
     * where ( |)
     * { |
     * lDetailCS.pivot := rDetail;
     * }
     * 
     */
    protected boolean MAP_m_DetailCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull DetailCS lDetailCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Detail rDetail = PivotFactory.eINSTANCE.createDetail();
            assert rDetail != null;
            models[1/*rightAS*/].add(rDetail);
            // property assignments
            lDetailCS_0.setPivot(rDetail);
            boolean m_DetailCS_pivot = ValueUtil.TRUE_VALUE;
            return m_DetailCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_DetailCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_EnumerationCS_instanceClassName_isSerializable_n in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lEnumerationCS : basecs::EnumerationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {OclElement : Class[1] = OclElement;
     * aEnumeration : Enumeration[1] = lEnumerationCS.pivot.oclAsType(Enumeration)
     *   ;
     * instanceClassName : String[?] = lEnumerationCS.instanceClassName;
     * isSerializable : Boolean[?] = lEnumerationCS.isSerializable;
     * name : String[?] = lEnumerationCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lEnumerationCS.ownedAnnotations;
     * ownedConstraints : OrderedSet(basecs::ConstraintCS) = lEnumerationCS.ownedConstraints;
     * ownedLiterals : OrderedSet(basecs::EnumerationLiteralCS) = lEnumerationCS.ownedLiterals;
     * pivot : Element[?] = lEnumerationCS.pivot;
     * Set : Set(Class[*|1]) = Set{OclElement
     *   }
     *   ;
     * _'\u00ABcollect\u00BB' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot)
     *   ;
     * _'\u00ABcollect\u00BB1' : Sequence(Constraint) = ownedConstraints->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Constraint))
     *   ;
     * _'\u00ABcollect\u00BB2' : Sequence(EnumerationLiteral) = ownedLiterals->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(EnumerationLiteral));
     *  |
     * aEnumeration.instanceClassName := instanceClassName;
     * aEnumeration.isSerializable := isSerializable;
     * aEnumeration.name := name;
     * aEnumeration.ownedAnnotations := _'\u00ABcollect\u00BB';
     * aEnumeration.ownedInvariants := _'\u00ABcollect\u00BB1';
     * aEnumeration.ownedLiterals := _'\u00ABcollect\u00BB2';
     * aEnumeration.superClasses := Set;
     * }
     * 
     */
    protected boolean MAP_m_EnumerationCS_instanceClassName_isSerializable_n(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationCS lEnumerationCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OclElement_0 = idResolver.getClass(CLSSid_OclElement, null);
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Enumeration_0 = idResolver.getClass(CLSSid_Enumeration, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lEnumerationCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Enumeration aEnumeration = ClassUtil.nonNullState((Enumeration)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Enumeration_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String instanceClassName = lEnumerationCS.getInstanceClassName();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean isSerializable = lEnumerationCS.isIsSerializable();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lEnumerationCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lEnumerationCS.getOwnedAnnotations();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ConstraintCS> ownedConstraints = lEnumerationCS.getOwnedConstraints();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<EnumerationLiteralCS> ownedLiterals = lEnumerationCS.getOwnedLiterals();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lEnumerationCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue Set = ValueUtil.createSetOfEach(SET_CLSSid_Class, TYP_OclElement_0);
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1 = (AnnotationElementCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1 == null) {
                    throw throwNull(lEnumerationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                //
                accumulator.add(pivot_1);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedConstraints = idResolver.createOrderedSetOfAll(ORD_CLSSid_ConstraintCS, ownedConstraints);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_0 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Constraint);
            @Nullable Iterator<Object> ITERATOR__1_0 = BOXED_ownedConstraints.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_1;
            while (true) {
                if (!ITERATOR__1_0.hasNext()) {
                    _171_collect_187_1 = accumulator_0;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ConstraintCS _1_0 = (ConstraintCS)ITERATOR__1_0.next();
                /**
                 * _'1_'.pivot.oclAsType(Constraint)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Constraint_0 = idResolver.getClass(CLSSid_Constraint, null);
                if (_1_0 == null) {
                    throw throwNull(lEnumerationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_2 = _1_0.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Constraint oclAsType = ClassUtil.nonNullState((Constraint)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_2, TYP_Constraint_0));
                //
                accumulator_0.add(oclAsType);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedLiterals = idResolver.createOrderedSetOfAll(ORD_CLSSid_EnumerationLiteralCS, ownedLiterals);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_1 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_EnumerationLiteral);
            @Nullable Iterator<Object> ITERATOR__1_1 = BOXED_ownedLiterals.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_2;
            while (true) {
                if (!ITERATOR__1_1.hasNext()) {
                    _171_collect_187_2 = accumulator_1;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable EnumerationLiteralCS _1_1 = (EnumerationLiteralCS)ITERATOR__1_1.next();
                /**
                 * _'1_'.pivot.oclAsType(EnumerationLiteral)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_EnumerationLiteral_0 = idResolver.getClass(CLSSid_EnumerationLiteral, null);
                if (_1_1 == null) {
                    throw throwNull(lEnumerationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_3 = _1_1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull EnumerationLiteral oclAsType_0 = ClassUtil.nonNullState((EnumerationLiteral)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_3, TYP_EnumerationLiteral_0));
                //
                accumulator_1.add(oclAsType_0);
            }
            // property assignments
            aEnumeration.setInstanceClassName(instanceClassName);
            if (isSerializable == null) {
                throw throwNull(lEnumerationCS, "Null value");
            }
            aEnumeration.setIsSerializable(isSerializable);
            aEnumeration.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187);
            aEnumeration.getOwnedAnnotations().addAll(ECORE__171_collect_187);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Constraint> ECORE__171_collect_187_1 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Constraint.class, _171_collect_187_1);
            aEnumeration.getOwnedInvariants().addAll(ECORE__171_collect_187_1);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<EnumerationLiteral> ECORE__171_collect_187_2 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(EnumerationLiteral.class, _171_collect_187_2);
            aEnumeration.getOwnedLiterals().addAll(ECORE__171_collect_187_2);
            final /*@NonInvalid*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Class> ECORE_Set = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Class.class, Set);
            aEnumeration.getSuperClasses().addAll(ECORE_Set);
            boolean m_EnumerationCS_instanceClassName_isSerializable_n = ValueUtil.TRUE_VALUE;
            return m_EnumerationCS_instanceClassName_isSerializable_n;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_EnumerationCS_instanceClassName_isSerializable_n", e);
        }
    }
    
    /**
     * 
     * map m_EnumerationCS_ownedSignature_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lEnumerationCS : basecs::EnumerationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aEnumeration : Enumeration[1] = lEnumerationCS.pivot.oclAsType(Enumeration)
     *   ;
     * ownedSignature : basecs::TemplateSignatureCS[?] = lEnumerationCS.ownedSignature;
     * pivot : Element[?] = lEnumerationCS.pivot;
     * aTemplateSignature : TemplateSignature[1] = ownedSignature.pivot.oclAsType(TemplateSignature);
     * pivot1 : Element[?] = ownedSignature.pivot;
     *  |
     * aTemplateSignature.owningElement := aEnumeration;
     * }
     * 
     */
    protected boolean MAP_m_EnumerationCS_ownedSignature_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationCS lEnumerationCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Enumeration_0 = idResolver.getClass(CLSSid_Enumeration, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lEnumerationCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Enumeration aEnumeration = ClassUtil.nonNullState((Enumeration)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Enumeration_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TemplateSignatureCS ownedSignature = lEnumerationCS_0.getOwnedSignature();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lEnumerationCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateSignature_0 = idResolver.getClass(CLSSid_TemplateSignature, null);
            if (ownedSignature == null) {
                throw throwNull(lEnumerationCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedSignature.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateSignature aTemplateSignature = ClassUtil.nonNullState((TemplateSignature)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_TemplateSignature_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedSignature.getPivot();
            // property assignments
            aTemplateSignature.setOwningElement(aEnumeration);
            objectManager.assigned(aTemplateSignature, PivotPackage.Literals.TEMPLATE_SIGNATURE__OWNING_ELEMENT, aEnumeration, null);
            boolean m_EnumerationCS_ownedSignature_pivot = ValueUtil.TRUE_VALUE;
            return m_EnumerationCS_ownedSignature_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_EnumerationCS_ownedSignature_pivot", e);
        }
    }
    
    /**
     * 
     * map m_EnumerationCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lEnumerationCS : basecs::EnumerationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rEnumeration : Enumeration[1];
     *  |}
     * where ( |)
     * { |
     * lEnumerationCS.pivot := rEnumeration;
     * }
     * 
     */
    protected boolean MAP_m_EnumerationCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationCS lEnumerationCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Enumeration rEnumeration = PivotFactory.eINSTANCE.createEnumeration();
            assert rEnumeration != null;
            models[1/*rightAS*/].add(rEnumeration);
            // property assignments
            lEnumerationCS_1.setPivot(rEnumeration);
            boolean m_EnumerationCS_pivot = ValueUtil.TRUE_VALUE;
            return m_EnumerationCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_EnumerationCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_EnumerationLiteralCS_name_ownedAnnotations_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lEnumerationLiteralCS : basecs::EnumerationLiteralCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aEnumerationLiteral : EnumerationLiteral[1] = lEnumerationLiteralCS.pivot.oclAsType(EnumerationLiteral)
     *   ;
     * name : String[?] = lEnumerationLiteralCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lEnumerationLiteralCS.ownedAnnotations;
     * pivot : Element[?] = lEnumerationLiteralCS.pivot;
     * value : ecore::EInt[?] = lEnumerationLiteralCS.value;
     * _'\u00ABcollect\u00BB' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot);
     *  |
     * aEnumerationLiteral.name := name;
     * aEnumerationLiteral.ownedAnnotations := _'\u00ABcollect\u00BB';
     * aEnumerationLiteral.value := value;
     * }
     * 
     */
    protected boolean MAP_m_EnumerationLiteralCS_name_ownedAnnotations_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationLiteralCS lEnumerationLiteralCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_EnumerationLiteral_0 = idResolver.getClass(CLSSid_EnumerationLiteral, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lEnumerationLiteralCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull EnumerationLiteral aEnumerationLiteral = ClassUtil.nonNullState((EnumerationLiteral)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_EnumerationLiteral_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lEnumerationLiteralCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lEnumerationLiteralCS.getOwnedAnnotations();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lEnumerationLiteralCS.getPivot();
            final /*@Thrown*/ int value = lEnumerationLiteralCS.getValue();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1 = (AnnotationElementCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1 == null) {
                    throw throwNull(lEnumerationLiteralCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                //
                accumulator.add(pivot_1);
            }
            // property assignments
            aEnumerationLiteral.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187);
            aEnumerationLiteral.getOwnedAnnotations().addAll(ECORE__171_collect_187);
            aEnumerationLiteral.setValue(value);
            boolean m_EnumerationLiteralCS_name_ownedAnnotations_pivot = ValueUtil.TRUE_VALUE;
            return m_EnumerationLiteralCS_name_ownedAnnotations_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_EnumerationLiteralCS_name_ownedAnnotations_pivot", e);
        }
    }
    
    /**
     * 
     * map m_EnumerationLiteralCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lEnumerationLiteralCS : basecs::EnumerationLiteralCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rEnumerationLiteral : EnumerationLiteral[1];
     *  |}
     * where ( |)
     * { |
     * lEnumerationLiteralCS.pivot := rEnumerationLiteral;
     * }
     * 
     */
    protected boolean MAP_m_EnumerationLiteralCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull EnumerationLiteralCS lEnumerationLiteralCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable EnumerationLiteral rEnumerationLiteral = PivotFactory.eINSTANCE.createEnumerationLiteral();
            assert rEnumerationLiteral != null;
            models[1/*rightAS*/].add(rEnumerationLiteral);
            // property assignments
            lEnumerationLiteralCS_0.setPivot(rEnumerationLiteral);
            boolean m_EnumerationLiteralCS_pivot = ValueUtil.TRUE_VALUE;
            return m_EnumerationLiteralCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_EnumerationLiteralCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ExpSpecificationCS_exprString_ownedExpression0_p in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lExpSpecificationCS : essentialoclcs::ExpSpecificationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lExpSpecificationCS.ownedExpression =
     *   null)
     * {aExpressionInOCL : ExpressionInOCL[1] = lExpSpecificationCS.pivot.oclAsType(ExpressionInOCL);
     * exprString : String[?] = lExpSpecificationCS.exprString;
     * pivot : Element[?] = lExpSpecificationCS.pivot;
     *  |
     * aExpressionInOCL.body := exprString;
     * }
     * 
     */
    protected boolean MAP_m_ExpSpecificationCS_exprString_ownedExpression0_p(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS lExpSpecificationCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedExpression = lExpSpecificationCS.getOwnedExpression();
            final /*@Thrown*/ boolean symbol_0 = ownedExpression == null;
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (symbol_0) {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_ExpressionInOCL_0 = idResolver.getClass(CLSSid_ExpressionInOCL, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lExpSpecificationCS.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull ExpressionInOCL aExpressionInOCL = ClassUtil.nonNullState((ExpressionInOCL)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_ExpressionInOCL_0));
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String exprString = lExpSpecificationCS.getExprString();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lExpSpecificationCS.getPivot();
                // property assignments
                aExpressionInOCL.setBody(exprString);
                boolean m_ExpSpecificationCS_exprString_ownedExpression0_p = ValueUtil.TRUE_VALUE;
                symbol_2 = m_ExpSpecificationCS_exprString_ownedExpression0_p;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ExpSpecificationCS_exprString_ownedExpression0_p", e);
        }
    }
    
    /**
     * 
     * map m_ExpSpecificationCS_ownedExpression0_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lExpSpecificationCS : essentialoclcs::ExpSpecificationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rExpressionInOCL : ExpressionInOCL[1];
     *  |}
     * where ( |
     * lExpSpecificationCS.ownedExpression = null)
     * { |
     * lExpSpecificationCS.pivot := rExpressionInOCL;
     * }
     * 
     */
    protected boolean MAP_m_ExpSpecificationCS_ownedExpression0_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS lExpSpecificationCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedExpression = lExpSpecificationCS_0.getOwnedExpression();
            final /*@Thrown*/ boolean symbol_0 = ownedExpression == null;
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (symbol_0) {
                // creations
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable ExpressionInOCL rExpressionInOCL = PivotFactory.eINSTANCE.createExpressionInOCL();
                assert rExpressionInOCL != null;
                models[1/*rightAS*/].add(rExpressionInOCL);
                // property assignments
                lExpSpecificationCS_0.setPivot(rExpressionInOCL);
                boolean m_ExpSpecificationCS_ownedExpression0_pivot = ValueUtil.TRUE_VALUE;
                symbol_2 = m_ExpSpecificationCS_ownedExpression0_pivot;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ExpSpecificationCS_ownedExpression0_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ExpSpecificationCS_ownedExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lExpSpecificationCS : essentialoclcs::ExpSpecificationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rExpressionInOCL : ExpressionInOCL[1];
     *  |}
     * where ( |)
     * {ownedExpression : essentialoclcs::ExpCS[?] = lExpSpecificationCS.ownedExpression;
     *  |
     * not (ownedExpression = null
     *   )
     * lExpSpecificationCS.pivot := rExpressionInOCL;
     * }
     * 
     */
    protected boolean MAP_m_ExpSpecificationCS_ownedExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS lExpSpecificationCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedExpression = lExpSpecificationCS_1.getOwnedExpression();
            final /*@Thrown*/ boolean symbol_0 = ownedExpression == null;
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(symbol_0);
            if (not == null) {
                throw throwNull(lExpSpecificationCS_1, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                // creations
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable ExpressionInOCL rExpressionInOCL = PivotFactory.eINSTANCE.createExpressionInOCL();
                assert rExpressionInOCL != null;
                models[1/*rightAS*/].add(rExpressionInOCL);
                // property assignments
                lExpSpecificationCS_1.setPivot(rExpressionInOCL);
                boolean m_ExpSpecificationCS_ownedExpression_pivot = ValueUtil.TRUE_VALUE;
                symbol_2 = m_ExpSpecificationCS_ownedExpression_pivot;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ExpSpecificationCS_ownedExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ExpSpecificationCS_ownedExpression_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lExpSpecificationCS : essentialoclcs::ExpSpecificationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aExpressionInOCL : ExpressionInOCL[1] = lExpSpecificationCS.pivot.oclAsType(ExpressionInOCL)
     *   ;
     * ownedExpression : essentialoclcs::ExpCS[?] = lExpSpecificationCS.ownedExpression;
     * pivot : Element[?] = lExpSpecificationCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedExpression.pivot.oclAsType(OCLExpression)
     *   ;
     * pivot1 : Element[?] = ownedExpression.pivot;
     *  |
     * not (ownedExpression = null
     *   )
     * aExpressionInOCL.ownedBody := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_ExpSpecificationCS_ownedExpression_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpSpecificationCS lExpSpecificationCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_ExpressionInOCL_0 = idResolver.getClass(CLSSid_ExpressionInOCL, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lExpSpecificationCS_2.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull ExpressionInOCL aExpressionInOCL = ClassUtil.nonNullState((ExpressionInOCL)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_ExpressionInOCL_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedExpression = lExpSpecificationCS_2.getOwnedExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lExpSpecificationCS_2.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedExpression == null) {
                throw throwNull(lExpSpecificationCS_2, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedExpression.getPivot();
            final /*@Thrown*/ boolean symbol_0 = ownedExpression == null;
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(symbol_0);
            if (not == null) {
                throw throwNull(lExpSpecificationCS_2, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                // property assignments
                aExpressionInOCL.setOwnedBody(aOCLExpression);
                boolean m_ExpSpecificationCS_ownedExpression_pivot_1 = ValueUtil.TRUE_VALUE;
                symbol_2 = m_ExpSpecificationCS_ownedExpression_pivot_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ExpSpecificationCS_ownedExpression_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_IfExpCS_ownedCondition_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lIfExpCS : essentialoclcs::IfExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aIfExp : IfExp[1] = lIfExpCS.pivot.oclAsType(IfExp)
     *   ;
     * ownedCondition : essentialoclcs::ExpCS[?] = lIfExpCS.ownedCondition;
     * pivot : Element[?] = lIfExpCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedCondition.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedCondition.pivot;
     *  |
     * aIfExp.ownedCondition := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_IfExpCS_ownedCondition_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS lIfExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IfExp_0 = idResolver.getClass(CLSSid_IfExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lIfExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IfExp aIfExp = ClassUtil.nonNullState((IfExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IfExp_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedCondition = lIfExpCS.getOwnedCondition();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lIfExpCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedCondition == null) {
                throw throwNull(lIfExpCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedCondition.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedCondition.getPivot();
            // property assignments
            aIfExp.setOwnedCondition(aOCLExpression);
            boolean m_IfExpCS_ownedCondition_pivot = ValueUtil.TRUE_VALUE;
            return m_IfExpCS_ownedCondition_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_IfExpCS_ownedCondition_pivot", e);
        }
    }
    
    /**
     * 
     * map m_IfExpCS_ownedElseExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lIfExpCS : essentialoclcs::IfExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aIfExp : IfExp[1] = lIfExpCS.pivot.oclAsType(IfExp)
     *   ;
     * ownedElseExpression : essentialoclcs::ExpCS[?] = lIfExpCS.ownedElseExpression;
     * pivot : Element[?] = lIfExpCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedElseExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedElseExpression.pivot;
     *  |
     * aIfExp.ownedElse := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_IfExpCS_ownedElseExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS lIfExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IfExp_0 = idResolver.getClass(CLSSid_IfExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lIfExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IfExp aIfExp = ClassUtil.nonNullState((IfExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IfExp_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedElseExpression = lIfExpCS_0.getOwnedElseExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lIfExpCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedElseExpression == null) {
                throw throwNull(lIfExpCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedElseExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedElseExpression.getPivot();
            // property assignments
            aIfExp.setOwnedElse(aOCLExpression);
            boolean m_IfExpCS_ownedElseExpression_pivot = ValueUtil.TRUE_VALUE;
            return m_IfExpCS_ownedElseExpression_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_IfExpCS_ownedElseExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_IfExpCS_ownedThenExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lIfExpCS : essentialoclcs::IfExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aIfExp : IfExp[1] = lIfExpCS.pivot.oclAsType(IfExp)
     *   ;
     * ownedThenExpression : essentialoclcs::ExpCS[?] = lIfExpCS.ownedThenExpression;
     * pivot : Element[?] = lIfExpCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedThenExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedThenExpression.pivot;
     *  |
     * aIfExp.ownedThen := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_IfExpCS_ownedThenExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS lIfExpCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IfExp_0 = idResolver.getClass(CLSSid_IfExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lIfExpCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IfExp aIfExp = ClassUtil.nonNullState((IfExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IfExp_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedThenExpression = lIfExpCS_1.getOwnedThenExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lIfExpCS_1.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedThenExpression == null) {
                throw throwNull(lIfExpCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedThenExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedThenExpression.getPivot();
            // property assignments
            aIfExp.setOwnedThen(aOCLExpression);
            boolean m_IfExpCS_ownedThenExpression_pivot = ValueUtil.TRUE_VALUE;
            return m_IfExpCS_ownedThenExpression_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_IfExpCS_ownedThenExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_IfExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lIfExpCS : essentialoclcs::IfExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rIfExp : IfExp[1];
     *  |}
     * where ( |)
     * { |
     * lIfExpCS.pivot := rIfExp;
     * }
     * 
     */
    protected boolean MAP_m_IfExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull IfExpCS lIfExpCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable IfExp rIfExp = PivotFactory.eINSTANCE.createIfExp();
            assert rIfExp != null;
            models[1/*rightAS*/].add(rIfExp);
            // property assignments
            lIfExpCS_2.setPivot(rIfExp);
            boolean m_IfExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_IfExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_IfExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ImportCS_name_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lImportCS : basecs::ImportCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aImport : Import[1] = lImportCS.pivot.oclAsType(Import);
     * name : String[?] = lImportCS.name;
     * pivot : Element[?] = lImportCS.pivot;
     *  |
     * aImport.name := name;
     * }
     * 
     */
    protected boolean MAP_m_ImportCS_name_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ImportCS lImportCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Import_0 = idResolver.getClass(CLSSid_Import, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lImportCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Import aImport = ClassUtil.nonNullState((Import)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Import_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lImportCS.getName();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lImportCS.getPivot();
            // property assignments
            aImport.setName(name);
            boolean m_ImportCS_name_pivot = ValueUtil.TRUE_VALUE;
            return m_ImportCS_name_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ImportCS_name_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ImportCS_ownedPathName_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lImportCS : basecs::ImportCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aImport : Import[1] = lImportCS.pivot.oclAsType(Import)
     *   ;
     * ownedPathName : basecs::PathNameCS[?] = lImportCS.ownedPathName;
     * pivot : Element[?] = lImportCS.pivot;
     * importedNamespace : Namespace[?] = aImport.lookupNamespace(ownedPathName);
     *  |
     * aImport.importedNamespace := importedNamespace;
     * }
     * 
     */
    protected boolean MAP_m_ImportCS_ownedPathName_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ImportCS lImportCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Import_0 = idResolver.getClass(CLSSid_Import, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lImportCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Import aImport = ClassUtil.nonNullState((Import)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Import_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable PathNameCS ownedPathName = lImportCS_0.getOwnedPathName();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lImportCS_0.getPivot();
            if (ownedPathName == null) {
                throw throwNull(lImportCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PathNameCS::ownedPathElements\'");
            }
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<PathElementCS> ownedPathElements = ownedPathName.getOwnedPathElements();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Namespace lookupNamespace = this.lookupNamespace(aImport, (List<PathElementCS>)ownedPathElements);
            // property assignments
            if (lookupNamespace == null) {
                throw throwNull(lImportCS_0, "Null value");
            }
            aImport.setImportedNamespace(lookupNamespace);
            boolean m_ImportCS_ownedPathName_pivot = ValueUtil.TRUE_VALUE;
            return m_ImportCS_ownedPathName_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ImportCS_ownedPathName_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ImportCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lImportCS : basecs::ImportCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rImport : Import[1];
     *  |}
     * where ( |)
     * { |
     * lImportCS.pivot := rImport;
     * }
     * 
     */
    protected boolean MAP_m_ImportCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ImportCS lImportCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Import rImport = PivotFactory.eINSTANCE.createImport();
            assert rImport != null;
            models[1/*rightAS*/].add(rImport);
            // property assignments
            lImportCS_1.setPivot(rImport);
            boolean m_ImportCS_pivot = ValueUtil.TRUE_VALUE;
            return m_ImportCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ImportCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_InvalidLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lInvalidLiteralExpCS : essentialoclcs::InvalidLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rInvalidLiteralExp : InvalidLiteralExp[1];
     *  |}
     * where ( |)
     * { |
     * lInvalidLiteralExpCS.pivot := rInvalidLiteralExp;
     * }
     * 
     */
    protected boolean MAP_m_InvalidLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull InvalidLiteralExpCS lInvalidLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable InvalidLiteralExp rInvalidLiteralExp = PivotFactory.eINSTANCE.createInvalidLiteralExp();
            assert rInvalidLiteralExp != null;
            models[1/*rightAS*/].add(rInvalidLiteralExp);
            // property assignments
            lInvalidLiteralExpCS.setPivot(rInvalidLiteralExp);
            boolean m_InvalidLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_InvalidLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_InvalidLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_InvalidLiteralExpCS_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lInvalidLiteralExpCS : essentialoclcs::InvalidLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aInvalidLiteralExp : InvalidLiteralExp[1] = lInvalidLiteralExpCS.pivot.oclAsType(InvalidLiteralExp);
     * pivot : Element[?] = lInvalidLiteralExpCS.pivot;
     * type : Type[1] = OclInvalid;
     *  |
     * aInvalidLiteralExp.type := type;
     * }
     * 
     */
    protected boolean MAP_m_InvalidLiteralExpCS_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull InvalidLiteralExpCS lInvalidLiteralExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_InvalidLiteralExp_0 = idResolver.getClass(CLSSid_InvalidLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lInvalidLiteralExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull InvalidLiteralExp aInvalidLiteralExp = ClassUtil.nonNullState((InvalidLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_InvalidLiteralExp_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lInvalidLiteralExpCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OclInvalid_0 = idResolver.getClass(TypeId.OCL_INVALID, null);
            // property assignments
            aInvalidLiteralExp.setType(TYP_OclInvalid_0);
            boolean m_InvalidLiteralExpCS_pivot_1 = ValueUtil.TRUE_VALUE;
            return m_InvalidLiteralExpCS_pivot_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_InvalidLiteralExpCS_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_LambdaTypeCS_name_ownedParameterTypes_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lLambdaTypeCS : basecs::LambdaTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aLambdaType : LambdaType[1] = lLambdaTypeCS.pivot.oclAsType(LambdaType)
     *   ;
     * name : String[?] = lLambdaTypeCS.name;
     * ownedParameterTypes : OrderedSet(basecs::TypedRefCS) = lLambdaTypeCS.ownedParameterTypes;
     * pivot : Element[?] = lLambdaTypeCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Class) = ownedParameterTypes->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Class));
     *  |
     * aLambdaType.name := name;
     * aLambdaType.parameterType := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_LambdaTypeCS_name_ownedParameterTypes_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS lLambdaTypeCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LambdaType_0 = idResolver.getClass(CLSSid_LambdaType, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lLambdaTypeCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LambdaType aLambdaType = ClassUtil.nonNullState((LambdaType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_LambdaType_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lLambdaTypeCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TypedRefCS> ownedParameterTypes = lLambdaTypeCS.getOwnedParameterTypes();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lLambdaTypeCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedParameterTypes = idResolver.createOrderedSetOfAll(ORD_CLSSid_TypedRefCS, ownedParameterTypes);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Class);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedParameterTypes.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS _1 = (TypedRefCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(Class)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
                if (_1 == null) {
                    throw throwNull(lLambdaTypeCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class oclAsType = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
                //
                accumulator.add(oclAsType);
            }
            // property assignments
            aLambdaType.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Class> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Class.class, _171_collect_187);
            aLambdaType.getParameterType().addAll(ECORE__171_collect_187);
            boolean m_LambdaTypeCS_name_ownedParameterTypes_pivot = ValueUtil.TRUE_VALUE;
            return m_LambdaTypeCS_name_ownedParameterTypes_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_LambdaTypeCS_name_ownedParameterTypes_pivot", e);
        }
    }
    
    /**
     * 
     * map m_LambdaTypeCS_ownedContextType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lLambdaTypeCS : basecs::LambdaTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aLambdaType : LambdaType[1] = lLambdaTypeCS.pivot.oclAsType(LambdaType)
     *   ;
     * ownedContextType : basecs::TypedRefCS[?] = lLambdaTypeCS.ownedContextType;
     * pivot : Element[?] = lLambdaTypeCS.pivot;
     * aClass : Class[1] = ownedContextType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedContextType.pivot;
     *  |
     * aLambdaType.contextType := aClass;
     * }
     * 
     */
    protected boolean MAP_m_LambdaTypeCS_ownedContextType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS lLambdaTypeCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LambdaType_0 = idResolver.getClass(CLSSid_LambdaType, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lLambdaTypeCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LambdaType aLambdaType = ClassUtil.nonNullState((LambdaType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_LambdaType_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedContextType = lLambdaTypeCS_0.getOwnedContextType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lLambdaTypeCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedContextType == null) {
                throw throwNull(lLambdaTypeCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedContextType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedContextType.getPivot();
            // property assignments
            aLambdaType.setContextType(aClass);
            boolean m_LambdaTypeCS_ownedContextType_pivot = ValueUtil.TRUE_VALUE;
            return m_LambdaTypeCS_ownedContextType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_LambdaTypeCS_ownedContextType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_LambdaTypeCS_ownedResultType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lLambdaTypeCS : basecs::LambdaTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aLambdaType : LambdaType[1] = lLambdaTypeCS.pivot.oclAsType(LambdaType)
     *   ;
     * ownedResultType : basecs::TypedRefCS[?] = lLambdaTypeCS.ownedResultType;
     * pivot : Element[?] = lLambdaTypeCS.pivot;
     * aClass : Class[1] = ownedResultType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedResultType.pivot;
     *  |
     * aLambdaType.resultType := aClass;
     * }
     * 
     */
    protected boolean MAP_m_LambdaTypeCS_ownedResultType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS lLambdaTypeCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LambdaType_0 = idResolver.getClass(CLSSid_LambdaType, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lLambdaTypeCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LambdaType aLambdaType = ClassUtil.nonNullState((LambdaType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_LambdaType_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedResultType = lLambdaTypeCS_1.getOwnedResultType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lLambdaTypeCS_1.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedResultType == null) {
                throw throwNull(lLambdaTypeCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedResultType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedResultType.getPivot();
            // property assignments
            aLambdaType.setResultType(aClass);
            boolean m_LambdaTypeCS_ownedResultType_pivot = ValueUtil.TRUE_VALUE;
            return m_LambdaTypeCS_ownedResultType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_LambdaTypeCS_ownedResultType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_LambdaTypeCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lLambdaTypeCS : basecs::LambdaTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rLambdaType : LambdaType[1];
     *  |}
     * where ( |)
     * { |
     * lLambdaTypeCS.pivot := rLambdaType;
     * }
     * 
     */
    protected boolean MAP_m_LambdaTypeCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull LambdaTypeCS lLambdaTypeCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable LambdaType rLambdaType = PivotFactory.eINSTANCE.createLambdaType();
            assert rLambdaType != null;
            models[1/*rightAS*/].add(rLambdaType);
            // property assignments
            lLambdaTypeCS_2.setPivot(rLambdaType);
            boolean m_LambdaTypeCS_pivot = ValueUtil.TRUE_VALUE;
            return m_LambdaTypeCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_LambdaTypeCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_LetExpCS_ownedInExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lLetExpCS : essentialoclcs::LetExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aLetExp : LetExp[1] = lLetExpCS.pivot.oclAsType(LetExp)
     *   ;
     * ownedInExpression : essentialoclcs::ExpCS[?] = lLetExpCS.ownedInExpression;
     * pivot : Element[?] = lLetExpCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedInExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedInExpression.pivot;
     *  |
     * aLetExp.ownedIn := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_LetExpCS_ownedInExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull LetExpCS lLetExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LetExp_0 = idResolver.getClass(CLSSid_LetExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lLetExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LetExp aLetExp = ClassUtil.nonNullState((LetExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_LetExp_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedInExpression = lLetExpCS.getOwnedInExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lLetExpCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedInExpression == null) {
                throw throwNull(lLetExpCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedInExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedInExpression.getPivot();
            // property assignments
            aLetExp.setOwnedIn(aOCLExpression);
            boolean m_LetExpCS_ownedInExpression_pivot = ValueUtil.TRUE_VALUE;
            return m_LetExpCS_ownedInExpression_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_LetExpCS_ownedInExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_LetExpCS_ownedInExpression_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lLetExpCS : essentialoclcs::LetExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aLetExp : LetExp[1] = lLetExpCS.pivot.oclAsType(LetExp)
     *   ;
     * ownedInExpression : essentialoclcs::ExpCS[?] = lLetExpCS.ownedInExpression;
     * pivot : Element[?] = lLetExpCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedInExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedInExpression.pivot;
     * type : Type[?] = aOCLExpression.type;
     *  |
     * aLetExp.type := type;
     * }
     * 
     */
    protected boolean MAP_m_LetExpCS_ownedInExpression_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull LetExpCS lLetExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LetExp_0 = idResolver.getClass(CLSSid_LetExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lLetExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LetExp aLetExp = ClassUtil.nonNullState((LetExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_LetExp_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedInExpression = lLetExpCS_0.getOwnedInExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lLetExpCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedInExpression == null) {
                throw throwNull(lLetExpCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedInExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedInExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Type type = aOCLExpression.getType();
            // property assignments
            aLetExp.setType(type);
            boolean m_LetExpCS_ownedInExpression_pivot_1 = ValueUtil.TRUE_VALUE;
            return m_LetExpCS_ownedInExpression_pivot_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_LetExpCS_ownedInExpression_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_LetExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lLetExpCS : essentialoclcs::LetExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rLetExp : LetExp[1];
     *  |}
     * where ( |)
     * { |
     * lLetExpCS.pivot := rLetExp;
     * }
     * 
     */
    protected boolean MAP_m_LetExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull LetExpCS lLetExpCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable LetExp rLetExp = PivotFactory.eINSTANCE.createLetExp();
            assert rLetExp != null;
            models[1/*rightAS*/].add(rLetExp);
            // property assignments
            lLetExpCS_1.setPivot(rLetExp);
            boolean m_LetExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_LetExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_LetExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_accumulators_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isIterateExp()
     *   )
     * {aIterateExp : IterateExp[1] = lNameExpCS.pivot.oclAsType(IterateExp)
     *   ;
     * accumulators : OrderedSet(essentialoclcs::VariableCS) = lNameExpCS.accumulators;
     * pivot : Element[?] = lNameExpCS.pivot;
     * at : essentialoclcs::VariableCS[?] = accumulators->at(1)
     *   ;
     * aVariable : Variable[1] = at.pivot.oclAsType(Variable);
     *  |
     * aIterateExp.ownedResult := aVariable;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_accumulators_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS.getReferredIteration();
                    final /*@Thrown*/ boolean ne_0 = referredIteration != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                if (and_4 == null) {
                    throw throwNull(lNameExpCS, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (and_4) {
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IterateExp_0 = idResolver.getClass(CLSSid_IterateExp, null);
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IterateExp aIterateExp = ClassUtil.nonNullState((IterateExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IterateExp_0));
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<VariableCS> accumulators = lNameExpCS.getAccumulators();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_accumulators = idResolver.createOrderedSetOfAll(ORD_CLSSid_VariableCS, accumulators);
                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable VariableCS at = (VariableCS)OrderedCollectionAtOperation.INSTANCE.evaluate(BOXED_accumulators, INT_1);
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Variable_0 = idResolver.getClass(CLSSid_Variable, null);
                    if (at == null) {
                        throw throwNull(lNameExpCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                    }
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = at.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Variable aVariable = ClassUtil.nonNullState((Variable)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Variable_0));
                    // property assignments
                    aIterateExp.setOwnedResult(aVariable);
                    boolean m_NameExpCS_accumulators_pivot = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_NameExpCS_accumulators_pivot;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_accumulators_pivot", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_arguments_isPre_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isOperationCallExp()
     *   lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   )
     * {aOperationCallExp : OperationCallExp[1] = lNameExpCS.pivot.oclAsType(OperationCallExp)
     *   ;
     * arguments : OrderedSet(essentialoclcs::ExpCS) = lNameExpCS.arguments;
     * isPre : Boolean[?] = lNameExpCS.isPre;
     * pivot : Element[?] = lNameExpCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(OCLExpression) = arguments->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(OCLExpression));
     *  |
     * aOperationCallExp.isPre := isPre;
     * aOperationCallExp.ownedArguments := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_arguments_isPre_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_0.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_0.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_0.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_0.getReferredOperation();
                final /*@Thrown*/ boolean ne = referredOperation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_0, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_9;
            if (and_1) {
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_8;
                if (and_1) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_0.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_3 = isEmpty_3;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_notEmpty_1;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_0.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean notEmpty_1 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_notEmpty_1 = notEmpty_1;
                            }
                            catch (Exception e) {
                                CAUGHT_notEmpty_1 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_3, CAUGHT_notEmpty_1);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_0.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_4 = isEmpty_4;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_4);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_0.getReferredIteration();
                        final /*@Thrown*/ boolean ne_1 = referredIteration != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not == null) {
                        throw throwNull(lNameExpCS_0, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_7;
                    if (not) {
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_6;
                        if (not) {
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
                            if (not) {
                                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                                if (not) {
                                    /*@Caught*/ @Nullable Object CAUGHT_and_18;
                                    try {
                                        /*@Caught*/ @Nullable Object CAUGHT_and_17;
                                        try {
                                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_11;
                                            try {
                                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_5 = lNameExpCS_0.getOwnedCurlyBracketedClause();
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_11 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_5);
                                                final /*@Thrown*/ boolean isEmpty_11 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_11).booleanValue();
                                                CAUGHT_isEmpty_11 = isEmpty_11;
                                            }
                                            catch (Exception e) {
                                                CAUGHT_isEmpty_11 = ValueUtil.createInvalidValue(e);
                                            }
                                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_12;
                                            try {
                                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_5 = lNameExpCS_0.getOwnedRoundBracketedClause();
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_12 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_5);
                                                final /*@Thrown*/ boolean isEmpty_12 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_12).booleanValue();
                                                CAUGHT_isEmpty_12 = isEmpty_12;
                                            }
                                            catch (Exception e) {
                                                CAUGHT_isEmpty_12 = ValueUtil.createInvalidValue(e);
                                            }
                                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_17 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_11, CAUGHT_isEmpty_12);
                                            CAUGHT_and_17 = and_17;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_and_17 = ValueUtil.createInvalidValue(e);
                                        }
                                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_13;
                                        try {
                                            @SuppressWarnings("null")
                                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_5 = lNameExpCS_0.getOwnedSquareBracketedClauses();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_5 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_5);
                                            final /*@Thrown*/ boolean isEmpty_13 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_5).booleanValue();
                                            CAUGHT_isEmpty_13 = isEmpty_13;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_isEmpty_13 = ValueUtil.createInvalidValue(e);
                                        }
                                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_18 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_17, CAUGHT_isEmpty_13);
                                        CAUGHT_and_18 = and_18;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_and_18 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_ne_5;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_0.getReferredAssociation();
                                        final /*@Thrown*/ boolean ne_5 = referredAssociation != null;
                                        CAUGHT_ne_5 = ne_5;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_ne_5 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_19 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_18, CAUGHT_ne_5);
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_3 = BooleanNotOperation.INSTANCE.evaluate(and_19);
                                    if (not_3 == null) {
                                        throw throwNull(lNameExpCS_0, "Null if condition");
                                    }
                                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                                    if (not_3) {
                                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                                        if (not_3) {
                                            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OperationCallExp_0 = idResolver.getClass(CLSSid_OperationCallExp, null);
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_0.getPivot();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OperationCallExp aOperationCallExp = ClassUtil.nonNullState((OperationCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_OperationCallExp_0));
                                            @SuppressWarnings("null")
                                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ExpCS> arguments = lNameExpCS_0.getArguments();
                                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean isPre = lNameExpCS_0.isIsPre();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_0.getPivot();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_arguments = idResolver.createOrderedSetOfAll(ORD_CLSSid_ExpCS, arguments);
                                            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_OCLExpression);
                                            @Nullable Iterator<Object> ITERATOR__1 = BOXED_arguments.iterator();
                                            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
                                            while (true) {
                                                if (!ITERATOR__1.hasNext()) {
                                                    _171_collect_187 = accumulator;
                                                    break;
                                                }
                                                /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS _1 = (ExpCS)ITERATOR__1.next();
                                                /**
                                                 * _'1_'.pivot.oclAsType(OCLExpression)
                                                 */
                                                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                                                if (_1 == null) {
                                                    throw throwNull(lNameExpCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                                                }
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression oclAsType = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                                                //
                                                accumulator.add(oclAsType);
                                            }
                                            // property assignments
                                            if (isPre == null) {
                                                throw throwNull(lNameExpCS_0, "Null value");
                                            }
                                            aOperationCallExp.setIsPre(isPre);
                                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<OCLExpression> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(OCLExpression.class, _171_collect_187);
                                            aOperationCallExp.getOwnedArguments().addAll(ECORE__171_collect_187);
                                            boolean m_NameExpCS_arguments_isPre_pivot = ValueUtil.TRUE_VALUE;
                                            symbol_2 = m_NameExpCS_arguments_isPre_pivot;
                                        }
                                        else {
                                            symbol_2 = ValueUtil.FALSE_VALUE;
                                        }
                                        symbol_3 = symbol_2;
                                    }
                                    else {
                                        symbol_3 = ValueUtil.FALSE_VALUE;
                                    }
                                    symbol_4 = symbol_3;
                                }
                                else {
                                    symbol_4 = ValueUtil.FALSE_VALUE;
                                }
                                symbol_5 = symbol_4;
                            }
                            else {
                                symbol_5 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_6 = symbol_5;
                        }
                        else {
                            symbol_6 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_7 = symbol_6;
                    }
                    else {
                        symbol_7 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_8 = symbol_7;
                }
                else {
                    symbol_8 = ValueUtil.FALSE_VALUE;
                }
                symbol_9 = symbol_8;
            }
            else {
                symbol_9 = ValueUtil.FALSE_VALUE;
            }
            return symbol_9;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_arguments_isPre_pivot", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_arguments_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isIterateExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   )
     * {aIterateExp : IterateExp[1] = lNameExpCS.pivot.oclAsType(IterateExp)
     *   ;
     * arguments : OrderedSet(essentialoclcs::ExpCS) = lNameExpCS.arguments;
     * pivot : Element[?] = lNameExpCS.pivot;
     * at : essentialoclcs::ExpCS[?] = arguments->at(1)
     *   ;
     * aOCLExpression : OCLExpression[1] = at.pivot.oclAsType(OCLExpression);
     *  |
     * aIterateExp.ownedBody := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_arguments_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_1.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_1.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_1.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_1.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_1, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (and_1) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_1.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_1.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_isEmpty_2);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_1.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_1.getReferredAssociation();
                    final /*@Thrown*/ boolean ne_0 = referredAssociation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not == null) {
                    throw throwNull(lNameExpCS_1, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (not) {
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IterateExp_0 = idResolver.getClass(CLSSid_IterateExp, null);
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_1.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IterateExp aIterateExp = ClassUtil.nonNullState((IterateExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IterateExp_0));
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ExpCS> arguments = lNameExpCS_1.getArguments();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_1.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_arguments = idResolver.createOrderedSetOfAll(ORD_CLSSid_ExpCS, arguments);
                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS at = (ExpCS)OrderedCollectionAtOperation.INSTANCE.evaluate(BOXED_arguments, INT_1);
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                    if (at == null) {
                        throw throwNull(lNameExpCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                    }
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = at.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                    // property assignments
                    aIterateExp.setOwnedBody(aOCLExpression);
                    boolean m_NameExpCS_arguments_pivot = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_NameExpCS_arguments_pivot;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_arguments_pivot", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_arguments_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   )
     * {aIteratorExp : IteratorExp[1] = lNameExpCS.pivot.oclAsType(IteratorExp)
     *   ;
     * arguments : OrderedSet(essentialoclcs::ExpCS) = lNameExpCS.arguments;
     * pivot : Element[?] = lNameExpCS.pivot;
     * at : essentialoclcs::ExpCS[?] = arguments->at(1)
     *   ;
     * aOCLExpression : OCLExpression[1] = at.pivot.oclAsType(OCLExpression);
     *  |
     * aIteratorExp.ownedBody := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_arguments_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_2.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_2.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_2.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_2.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_2, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
            if (and_1) {
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
                if (not == null) {
                    throw throwNull(lNameExpCS_2, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                if (not) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_2.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_3 = isEmpty_3;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_2.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_3, CAUGHT_isEmpty_4);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_2.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_2.getReferredAssociation();
                        final /*@Thrown*/ boolean ne_1 = referredAssociation != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_0 == null) {
                        throw throwNull(lNameExpCS_2, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                    if (not_0) {
                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IteratorExp_0 = idResolver.getClass(CLSSid_IteratorExp, null);
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_2.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IteratorExp aIteratorExp = ClassUtil.nonNullState((IteratorExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IteratorExp_0));
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ExpCS> arguments = lNameExpCS_2.getArguments();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_2.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_arguments = idResolver.createOrderedSetOfAll(ORD_CLSSid_ExpCS, arguments);
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS at = (ExpCS)OrderedCollectionAtOperation.INSTANCE.evaluate(BOXED_arguments, INT_1);
                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                        if (at == null) {
                            throw throwNull(lNameExpCS_2, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                        }
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = at.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                        // property assignments
                        aIteratorExp.setOwnedBody(aOCLExpression);
                        boolean m_NameExpCS_arguments_pivot_1 = ValueUtil.TRUE_VALUE;
                        symbol_1 = m_NameExpCS_arguments_pivot_1;
                    }
                    else {
                        symbol_1 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_2 = symbol_1;
                }
                else {
                    symbol_2 = ValueUtil.FALSE_VALUE;
                }
                symbol_3 = symbol_2;
            }
            else {
                symbol_3 = ValueUtil.FALSE_VALUE;
            }
            return symbol_3;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_arguments_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_isPre_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isAssociationClassExp()
     *   )
     * {aAssociationClassCallExp : AssociationClassCallExp[1] = lNameExpCS.pivot.oclAsType(AssociationClassCallExp);
     * isPre : Boolean[?] = lNameExpCS.isPre;
     * pivot : Element[?] = lNameExpCS.pivot;
     *  |
     * aAssociationClassCallExp.isPre := isPre;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_isPre_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_3) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_3.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_3.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_3.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_3.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_3, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (and_1) {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_AssociationClassCallExp_0 = idResolver.getClass(CLSSid_AssociationClassCallExp, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_3.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull AssociationClassCallExp aAssociationClassCallExp = ClassUtil.nonNullState((AssociationClassCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_AssociationClassCallExp_0));
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean isPre = lNameExpCS_3.isIsPre();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_3.getPivot();
                // property assignments
                if (isPre == null) {
                    throw throwNull(lNameExpCS_3, "Null value");
                }
                aAssociationClassCallExp.setIsPre(isPre);
                boolean m_NameExpCS_isPre_pivot = ValueUtil.TRUE_VALUE;
                symbol_1 = m_NameExpCS_isPre_pivot;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_isPre_pivot", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_isPre_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIteratorExp()
     *   lNameExpCS.isPropertyCallExp()
     *   not lNameExpCS.isIterateExp()
     *   )
     * {aPropertyCallExp : PropertyCallExp[1] = lNameExpCS.pivot.oclAsType(PropertyCallExp);
     * isPre : Boolean[?] = lNameExpCS.isPre;
     * pivot : Element[?] = lNameExpCS.pivot;
     *  |
     * aPropertyCallExp.isPre := isPre;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_isPre_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_4) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_4.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_4.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_4.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_4.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_4, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_4.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_4.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_4.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_4.getReferredOperation();
                    final /*@Thrown*/ boolean ne_0 = referredOperation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_4, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                if (not_0) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_4.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_4.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_notEmpty_0 = notEmpty_0;
                            }
                            catch (Exception e) {
                                CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_4, CAUGHT_notEmpty_0);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_4.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_4.getReferredIteration();
                        final /*@Thrown*/ boolean ne_1 = referredIteration != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_1 == null) {
                        throw throwNull(lNameExpCS_4, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                    if (not_1) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_9;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_8;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_4.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_6 = isEmpty_6;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_4.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_isEmpty_7 = isEmpty_7;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_6, CAUGHT_isEmpty_7);
                                CAUGHT_and_8 = and_8;
                            }
                            catch (Exception e) {
                                CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_4.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_8 = isEmpty_8;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_isEmpty_8);
                            CAUGHT_and_9 = and_9;
                        }
                        catch (Exception e) {
                            CAUGHT_and_9 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_4.getReferredProperty();
                            final /*@Thrown*/ boolean ne_2 = referredProperty != null;
                            CAUGHT_ne_2 = ne_2;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_9, CAUGHT_ne_2);
                        if (and_10 == null) {
                            throw throwNull(lNameExpCS_4, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                        if (and_10) {
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                            if (not_1) {
                                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_PropertyCallExp_0 = idResolver.getClass(CLSSid_PropertyCallExp, null);
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_4.getPivot();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull PropertyCallExp aPropertyCallExp = ClassUtil.nonNullState((PropertyCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_PropertyCallExp_0));
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean isPre = lNameExpCS_4.isIsPre();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_4.getPivot();
                                // property assignments
                                if (isPre == null) {
                                    throw throwNull(lNameExpCS_4, "Null value");
                                }
                                aPropertyCallExp.setIsPre(isPre);
                                boolean m_NameExpCS_isPre_pivot_1 = ValueUtil.TRUE_VALUE;
                                symbol_1 = m_NameExpCS_isPre_pivot_1;
                            }
                            else {
                                symbol_1 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_2 = symbol_1;
                        }
                        else {
                            symbol_2 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_3 = symbol_2;
                    }
                    else {
                        symbol_3 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_4 = symbol_3;
                }
                else {
                    symbol_4 = ValueUtil.FALSE_VALUE;
                }
                symbol_5 = symbol_4;
            }
            else {
                symbol_5 = ValueUtil.FALSE_VALUE;
            }
            return symbol_5;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_isPre_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_iterators_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isIterateExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   )
     * {aIterateExp : IterateExp[1] = lNameExpCS.pivot.oclAsType(IterateExp)
     *   ;
     * iterators : OrderedSet(essentialoclcs::VariableCS) = lNameExpCS.iterators;
     * pivot : Element[?] = lNameExpCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Variable) = iterators->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Variable));
     *  |
     * aIterateExp.ownedIterators := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_iterators_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_5) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_5.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_5.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_5.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_5.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_5, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (and_1) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_5.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_5.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_isEmpty_2);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_5.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_5.getReferredAssociation();
                    final /*@Thrown*/ boolean ne_0 = referredAssociation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not == null) {
                    throw throwNull(lNameExpCS_5, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (not) {
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IterateExp_0 = idResolver.getClass(CLSSid_IterateExp, null);
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_5.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IterateExp aIterateExp = ClassUtil.nonNullState((IterateExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IterateExp_0));
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<VariableCS> iterators = lNameExpCS_5.getIterators();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_5.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_iterators = idResolver.createOrderedSetOfAll(ORD_CLSSid_VariableCS, iterators);
                    /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Variable);
                    @Nullable Iterator<Object> ITERATOR__1 = BOXED_iterators.iterator();
                    /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
                    while (true) {
                        if (!ITERATOR__1.hasNext()) {
                            _171_collect_187 = accumulator;
                            break;
                        }
                        /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable VariableCS _1 = (VariableCS)ITERATOR__1.next();
                        /**
                         * _'1_'.pivot.oclAsType(Variable)
                         */
                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Variable_0 = idResolver.getClass(CLSSid_Variable, null);
                        if (_1 == null) {
                            throw throwNull(lNameExpCS_5, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                        }
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Variable oclAsType = ClassUtil.nonNullState((Variable)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Variable_0));
                        //
                        accumulator.add(oclAsType);
                    }
                    // property assignments
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Variable> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Variable.class, _171_collect_187);
                    aIterateExp.getOwnedIterators().addAll(ECORE__171_collect_187);
                    boolean m_NameExpCS_iterators_pivot = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_NameExpCS_iterators_pivot;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_iterators_pivot", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_iterators_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   )
     * {aIteratorExp : IteratorExp[1] = lNameExpCS.pivot.oclAsType(IteratorExp)
     *   ;
     * iterators : OrderedSet(essentialoclcs::VariableCS) = lNameExpCS.iterators;
     * pivot : Element[?] = lNameExpCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Variable) = iterators->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Variable));
     *  |
     * aIteratorExp.ownedIterators := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_iterators_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_6) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_6.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_6.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_6.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_6.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_6, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
            if (and_1) {
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
                if (not == null) {
                    throw throwNull(lNameExpCS_6, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                if (not) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_6.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_3 = isEmpty_3;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_6.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_3, CAUGHT_isEmpty_4);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_6.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_6.getReferredAssociation();
                        final /*@Thrown*/ boolean ne_1 = referredAssociation != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_0 == null) {
                        throw throwNull(lNameExpCS_6, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                    if (not_0) {
                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IteratorExp_0 = idResolver.getClass(CLSSid_IteratorExp, null);
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_6.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IteratorExp aIteratorExp = ClassUtil.nonNullState((IteratorExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IteratorExp_0));
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<VariableCS> iterators = lNameExpCS_6.getIterators();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_6.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_iterators = idResolver.createOrderedSetOfAll(ORD_CLSSid_VariableCS, iterators);
                        /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Variable);
                        @Nullable Iterator<Object> ITERATOR__1 = BOXED_iterators.iterator();
                        /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
                        while (true) {
                            if (!ITERATOR__1.hasNext()) {
                                _171_collect_187 = accumulator;
                                break;
                            }
                            /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable VariableCS _1 = (VariableCS)ITERATOR__1.next();
                            /**
                             * _'1_'.pivot.oclAsType(Variable)
                             */
                            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Variable_0 = idResolver.getClass(CLSSid_Variable, null);
                            if (_1 == null) {
                                throw throwNull(lNameExpCS_6, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                            }
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Variable oclAsType = ClassUtil.nonNullState((Variable)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Variable_0));
                            //
                            accumulator.add(oclAsType);
                        }
                        // property assignments
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Variable> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Variable.class, _171_collect_187);
                        aIteratorExp.getOwnedIterators().addAll(ECORE__171_collect_187);
                        boolean m_NameExpCS_iterators_pivot_1 = ValueUtil.TRUE_VALUE;
                        symbol_1 = m_NameExpCS_iterators_pivot_1;
                    }
                    else {
                        symbol_1 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_2 = symbol_1;
                }
                else {
                    symbol_2 = ValueUtil.FALSE_VALUE;
                }
                symbol_3 = symbol_2;
            }
            else {
                symbol_3 = ValueUtil.FALSE_VALUE;
            }
            return symbol_3;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_iterators_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_parts_pivot_value in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIteratorExp()
     *   lNameExpCS.isShadowExp()
     *   lNameExpCS.isShadowExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isPropertyCallExp()
     *   not lNameExpCS.isPropertyCallExp()
     *   )
     * {aShadowExp : ShadowExp[1] = lNameExpCS.pivot.oclAsType(ShadowExp)
     *   ;
     * parts : OrderedSet(essentialoclcs::ShadowPartCS) = lNameExpCS.parts;
     * pivot : Element[?] = lNameExpCS.pivot;
     * value : String[?] = lNameExpCS.value;
     * _'\u00ABcollect\u00BB' : Sequence(ShadowPart) = parts->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(ShadowPart));
     *  |
     * aShadowExp.ownedParts := _'\u00ABcollect\u00BB';
     * aShadowExp.value := value;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_parts_pivot_value(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_7) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_7.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_7.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_7.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_7.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_7, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_13;
            if (not) {
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_12;
                if (not) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_7.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_5 = isEmpty_5;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_7.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_notEmpty = notEmpty;
                            }
                            catch (Exception e) {
                                CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_5, CAUGHT_notEmpty);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_7.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_6 = isEmpty_6;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_6);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_7.getReferredIteration();
                        final /*@Thrown*/ boolean ne_1 = referredIteration != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_1 == null) {
                        throw throwNull(lNameExpCS_7, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_11;
                    if (not_1) {
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_10;
                        if (not_1) {
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_9;
                            if (not_1) {
                                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_8;
                                if (not_1) {
                                    /*@Caught*/ @Nullable Object CAUGHT_and_17;
                                    try {
                                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty_3;
                                        try {
                                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_5 = lNameExpCS_7.getOwnedCurlyBracketedClause();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_11 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_5);
                                            final /*@Thrown*/ boolean notEmpty_3 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_11).booleanValue();
                                            CAUGHT_notEmpty_3 = notEmpty_3;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_notEmpty_3 = ValueUtil.createInvalidValue(e);
                                        }
                                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_13;
                                        try {
                                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_5 = lNameExpCS_7.getOwnedRoundBracketedClause();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_12 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_5);
                                            final /*@Thrown*/ boolean isEmpty_13 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_12).booleanValue();
                                            CAUGHT_isEmpty_13 = isEmpty_13;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_isEmpty_13 = ValueUtil.createInvalidValue(e);
                                        }
                                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_17 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_notEmpty_3, CAUGHT_isEmpty_13);
                                        CAUGHT_and_17 = and_17;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_and_17 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_14;
                                    try {
                                        @SuppressWarnings("null")
                                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_5 = lNameExpCS_7.getOwnedSquareBracketedClauses();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_5 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_5);
                                        final /*@Thrown*/ boolean isEmpty_14 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_5).booleanValue();
                                        CAUGHT_isEmpty_14 = isEmpty_14;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_14 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_18 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_17, CAUGHT_isEmpty_14);
                                    if (and_18 == null) {
                                        throw throwNull(lNameExpCS_7, "Null if condition");
                                    }
                                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_7;
                                    if (and_18) {
                                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_6;
                                        if (and_18) {
                                            /*@Caught*/ @Nullable Object CAUGHT_and_22;
                                            try {
                                                /*@Caught*/ @Nullable Object CAUGHT_and_21;
                                                try {
                                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_17;
                                                    try {
                                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_7 = lNameExpCS_7.getOwnedCurlyBracketedClause();
                                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_15 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_7);
                                                        final /*@Thrown*/ boolean isEmpty_17 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_15).booleanValue();
                                                        CAUGHT_isEmpty_17 = isEmpty_17;
                                                    }
                                                    catch (Exception e) {
                                                        CAUGHT_isEmpty_17 = ValueUtil.createInvalidValue(e);
                                                    }
                                                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty_5;
                                                    try {
                                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_7 = lNameExpCS_7.getOwnedRoundBracketedClause();
                                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_16 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_7);
                                                        final /*@Thrown*/ boolean notEmpty_5 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_16).booleanValue();
                                                        CAUGHT_notEmpty_5 = notEmpty_5;
                                                    }
                                                    catch (Exception e) {
                                                        CAUGHT_notEmpty_5 = ValueUtil.createInvalidValue(e);
                                                    }
                                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_21 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_17, CAUGHT_notEmpty_5);
                                                    CAUGHT_and_21 = and_21;
                                                }
                                                catch (Exception e) {
                                                    CAUGHT_and_21 = ValueUtil.createInvalidValue(e);
                                                }
                                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_18;
                                                try {
                                                    @SuppressWarnings("null")
                                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_7 = lNameExpCS_7.getOwnedSquareBracketedClauses();
                                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_7 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_7);
                                                    final /*@Thrown*/ boolean isEmpty_18 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_7).booleanValue();
                                                    CAUGHT_isEmpty_18 = isEmpty_18;
                                                }
                                                catch (Exception e) {
                                                    CAUGHT_isEmpty_18 = ValueUtil.createInvalidValue(e);
                                                }
                                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_22 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_21, CAUGHT_isEmpty_18);
                                                CAUGHT_and_22 = and_22;
                                            }
                                            catch (Exception e) {
                                                CAUGHT_and_22 = ValueUtil.createInvalidValue(e);
                                            }
                                            /*@Caught*/ @NonNull Object CAUGHT_ne_5;
                                            try {
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_7.getReferredOperation();
                                                final /*@Thrown*/ boolean ne_5 = referredOperation != null;
                                                CAUGHT_ne_5 = ne_5;
                                            }
                                            catch (Exception e) {
                                                CAUGHT_ne_5 = ValueUtil.createInvalidValue(e);
                                            }
                                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_23 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_22, CAUGHT_ne_5);
                                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_5 = BooleanNotOperation.INSTANCE.evaluate(and_23);
                                            if (not_5 == null) {
                                                throw throwNull(lNameExpCS_7, "Null if condition");
                                            }
                                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
                                            if (not_5) {
                                                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                                                if (not_5) {
                                                    /*@Caught*/ @Nullable Object CAUGHT_and_28;
                                                    try {
                                                        /*@Caught*/ @Nullable Object CAUGHT_and_27;
                                                        try {
                                                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_21;
                                                            try {
                                                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_9 = lNameExpCS_7.getOwnedCurlyBracketedClause();
                                                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_19 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_9);
                                                                final /*@Thrown*/ boolean isEmpty_21 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_19).booleanValue();
                                                                CAUGHT_isEmpty_21 = isEmpty_21;
                                                            }
                                                            catch (Exception e) {
                                                                CAUGHT_isEmpty_21 = ValueUtil.createInvalidValue(e);
                                                            }
                                                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_22;
                                                            try {
                                                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_9 = lNameExpCS_7.getOwnedRoundBracketedClause();
                                                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_20 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_9);
                                                                final /*@Thrown*/ boolean isEmpty_22 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_20).booleanValue();
                                                                CAUGHT_isEmpty_22 = isEmpty_22;
                                                            }
                                                            catch (Exception e) {
                                                                CAUGHT_isEmpty_22 = ValueUtil.createInvalidValue(e);
                                                            }
                                                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_27 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_21, CAUGHT_isEmpty_22);
                                                            CAUGHT_and_27 = and_27;
                                                        }
                                                        catch (Exception e) {
                                                            CAUGHT_and_27 = ValueUtil.createInvalidValue(e);
                                                        }
                                                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_23;
                                                        try {
                                                            @SuppressWarnings("null")
                                                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_9 = lNameExpCS_7.getOwnedSquareBracketedClauses();
                                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_9 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_9);
                                                            final /*@Thrown*/ boolean isEmpty_23 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_9).booleanValue();
                                                            CAUGHT_isEmpty_23 = isEmpty_23;
                                                        }
                                                        catch (Exception e) {
                                                            CAUGHT_isEmpty_23 = ValueUtil.createInvalidValue(e);
                                                        }
                                                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_28 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_27, CAUGHT_isEmpty_23);
                                                        CAUGHT_and_28 = and_28;
                                                    }
                                                    catch (Exception e) {
                                                        CAUGHT_and_28 = ValueUtil.createInvalidValue(e);
                                                    }
                                                    /*@Caught*/ @NonNull Object CAUGHT_ne_7;
                                                    try {
                                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_7.getReferredProperty();
                                                        final /*@Thrown*/ boolean ne_7 = referredProperty != null;
                                                        CAUGHT_ne_7 = ne_7;
                                                    }
                                                    catch (Exception e) {
                                                        CAUGHT_ne_7 = ValueUtil.createInvalidValue(e);
                                                    }
                                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_29 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_28, CAUGHT_ne_7);
                                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_7 = BooleanNotOperation.INSTANCE.evaluate(and_29);
                                                    if (not_7 == null) {
                                                        throw throwNull(lNameExpCS_7, "Null if condition");
                                                    }
                                                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                                                    if (not_7) {
                                                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                                                        if (not_7) {
                                                            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_ShadowExp_0 = idResolver.getClass(CLSSid_ShadowExp, null);
                                                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_7.getPivot();
                                                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull ShadowExp aShadowExp = ClassUtil.nonNullState((ShadowExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_ShadowExp_0));
                                                            @SuppressWarnings("null")
                                                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ShadowPartCS> parts = lNameExpCS_7.getParts();
                                                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_7.getPivot();
                                                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String value = lNameExpCS_7.getValue();
                                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_parts = idResolver.createOrderedSetOfAll(ORD_CLSSid_ShadowPartCS, parts);
                                                            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_ShadowPart);
                                                            @Nullable Iterator<Object> ITERATOR__1 = BOXED_parts.iterator();
                                                            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
                                                            while (true) {
                                                                if (!ITERATOR__1.hasNext()) {
                                                                    _171_collect_187 = accumulator;
                                                                    break;
                                                                }
                                                                /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ShadowPartCS _1 = (ShadowPartCS)ITERATOR__1.next();
                                                                /**
                                                                 * _'1_'.pivot.oclAsType(ShadowPart)
                                                                 */
                                                                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_ShadowPart_0 = idResolver.getClass(CLSSid_ShadowPart, null);
                                                                if (_1 == null) {
                                                                    throw throwNull(lNameExpCS_7, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                                                                }
                                                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                                                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull ShadowPart oclAsType = ClassUtil.nonNullState((ShadowPart)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_ShadowPart_0));
                                                                //
                                                                accumulator.add(oclAsType);
                                                            }
                                                            // property assignments
                                                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ShadowPart> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(ShadowPart.class, _171_collect_187);
                                                            aShadowExp.getOwnedParts().addAll(ECORE__171_collect_187);
                                                            aShadowExp.setValue(value);
                                                            boolean m_NameExpCS_parts_pivot_value = ValueUtil.TRUE_VALUE;
                                                            symbol_2 = m_NameExpCS_parts_pivot_value;
                                                        }
                                                        else {
                                                            symbol_2 = ValueUtil.FALSE_VALUE;
                                                        }
                                                        symbol_3 = symbol_2;
                                                    }
                                                    else {
                                                        symbol_3 = ValueUtil.FALSE_VALUE;
                                                    }
                                                    symbol_4 = symbol_3;
                                                }
                                                else {
                                                    symbol_4 = ValueUtil.FALSE_VALUE;
                                                }
                                                symbol_5 = symbol_4;
                                            }
                                            else {
                                                symbol_5 = ValueUtil.FALSE_VALUE;
                                            }
                                            symbol_6 = symbol_5;
                                        }
                                        else {
                                            symbol_6 = ValueUtil.FALSE_VALUE;
                                        }
                                        symbol_7 = symbol_6;
                                    }
                                    else {
                                        symbol_7 = ValueUtil.FALSE_VALUE;
                                    }
                                    symbol_8 = symbol_7;
                                }
                                else {
                                    symbol_8 = ValueUtil.FALSE_VALUE;
                                }
                                symbol_9 = symbol_8;
                            }
                            else {
                                symbol_9 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_10 = symbol_9;
                        }
                        else {
                            symbol_10 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_11 = symbol_10;
                    }
                    else {
                        symbol_11 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_12 = symbol_11;
                }
                else {
                    symbol_12 = ValueUtil.FALSE_VALUE;
                }
                symbol_13 = symbol_12;
            }
            else {
                symbol_13 = ValueUtil.FALSE_VALUE;
            }
            return symbol_13;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_parts_pivot_value", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rAssociationClassCallExp : AssociationClassCallExp[1];
     *  |}
     * where ( |
     * lNameExpCS.isAssociationClassExp())
     * { |
     * lNameExpCS.pivot := rAssociationClassCallExp;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_8) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_8.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_8.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_8.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_8.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_8, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (and_1) {
                // creations
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClassCallExp rAssociationClassCallExp = PivotFactory.eINSTANCE.createAssociationClassCallExp();
                assert rAssociationClassCallExp != null;
                models[1/*rightAS*/].add(rAssociationClassCallExp);
                // property assignments
                lNameExpCS_8.setPivot(rAssociationClassCallExp);
                boolean m_NameExpCS_pivot = ValueUtil.TRUE_VALUE;
                symbol_1 = m_NameExpCS_pivot;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rIterateExp : IterateExp[1];
     *  |}
     * where ( |
     * lNameExpCS.isIterateExp()
     *   not lNameExpCS.isAssociationClassExp())
     * { |
     * lNameExpCS.pivot := rIterateExp;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_9) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_9.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_9.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_9.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_9.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_9, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (and_1) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_9.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_9.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_isEmpty_2);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_9.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_9.getReferredAssociation();
                    final /*@Thrown*/ boolean ne_0 = referredAssociation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not == null) {
                    throw throwNull(lNameExpCS_9, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (not) {
                    // creations
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable IterateExp rIterateExp = PivotFactory.eINSTANCE.createIterateExp();
                    assert rIterateExp != null;
                    models[1/*rightAS*/].add(rIterateExp);
                    // property assignments
                    lNameExpCS_9.setPivot(rIterateExp);
                    boolean m_NameExpCS_pivot_1 = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_NameExpCS_pivot_1;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_2 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rIteratorExp : IteratorExp[1];
     *  |}
     * where ( |
     * lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isIterateExp())
     * { |
     * lNameExpCS.pivot := rIteratorExp;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_2(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_10) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_10.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_10.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_10.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_10.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_10, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
            if (and_1) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_10.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_10.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_isEmpty_2);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_10.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_10.getReferredAssociation();
                    final /*@Thrown*/ boolean ne_0 = referredAssociation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not == null) {
                    throw throwNull(lNameExpCS_10, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                if (not) {
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_1);
                    if (not_0 == null) {
                        throw throwNull(lNameExpCS_10, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                    if (not_0) {
                        // creations
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable IteratorExp rIteratorExp = PivotFactory.eINSTANCE.createIteratorExp();
                        assert rIteratorExp != null;
                        models[1/*rightAS*/].add(rIteratorExp);
                        // property assignments
                        lNameExpCS_10.setPivot(rIteratorExp);
                        boolean m_NameExpCS_pivot_2 = ValueUtil.TRUE_VALUE;
                        symbol_1 = m_NameExpCS_pivot_2;
                    }
                    else {
                        symbol_1 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_2 = symbol_1;
                }
                else {
                    symbol_2 = ValueUtil.FALSE_VALUE;
                }
                symbol_3 = symbol_2;
            }
            else {
                symbol_3 = ValueUtil.FALSE_VALUE;
            }
            return symbol_3;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_2", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_3 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rOperationCallExp : OperationCallExp[1];
     *  |}
     * where ( |
     * lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isIterateExp())
     * { |
     * lNameExpCS.pivot := rOperationCallExp;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_3(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_11) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_11.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_11.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_11.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_11.getReferredOperation();
                final /*@Thrown*/ boolean ne = referredOperation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_11, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
            if (and_1) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_11.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_11.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty_0 = notEmpty_0;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_notEmpty_0);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_11.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_2 = isEmpty_2;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_2);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_11.getReferredIteration();
                    final /*@Thrown*/ boolean ne_0 = referredIteration != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not == null) {
                    throw throwNull(lNameExpCS_11, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                if (not) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_11.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_3 = isEmpty_3;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_11.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_3, CAUGHT_isEmpty_4);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_11.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_11.getReferredAssociation();
                        final /*@Thrown*/ boolean ne_1 = referredAssociation != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_0 == null) {
                        throw throwNull(lNameExpCS_11, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                    if (not_0) {
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                        if (not) {
                            // creations
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable OperationCallExp rOperationCallExp = PivotFactory.eINSTANCE.createOperationCallExp();
                            assert rOperationCallExp != null;
                            models[1/*rightAS*/].add(rOperationCallExp);
                            // property assignments
                            lNameExpCS_11.setPivot(rOperationCallExp);
                            boolean m_NameExpCS_pivot_3 = ValueUtil.TRUE_VALUE;
                            symbol_1 = m_NameExpCS_pivot_3;
                        }
                        else {
                            symbol_1 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_2 = symbol_1;
                    }
                    else {
                        symbol_2 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_3 = symbol_2;
                }
                else {
                    symbol_3 = ValueUtil.FALSE_VALUE;
                }
                symbol_4 = symbol_3;
            }
            else {
                symbol_4 = ValueUtil.FALSE_VALUE;
            }
            return symbol_4;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_3", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_4 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rPropertyCallExp : PropertyCallExp[1];
     *  |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIteratorExp()
     *   lNameExpCS.isPropertyCallExp())
     * { |
     * lNameExpCS.pivot := rPropertyCallExp;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_4(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_12) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_12.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_12.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_12.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_12.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_12, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_12.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_12.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_12.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_12.getReferredIteration();
                    final /*@Thrown*/ boolean ne_0 = referredIteration != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_12, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                if (not_0) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_12.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_12.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_notEmpty_0 = notEmpty_0;
                            }
                            catch (Exception e) {
                                CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_4, CAUGHT_notEmpty_0);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_12.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_12.getReferredOperation();
                        final /*@Thrown*/ boolean ne_1 = referredOperation != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_1 == null) {
                        throw throwNull(lNameExpCS_12, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                    if (not_1) {
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                        if (not_0) {
                            /*@Caught*/ @Nullable Object CAUGHT_and_12;
                            try {
                                /*@Caught*/ @Nullable Object CAUGHT_and_11;
                                try {
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_3 = lNameExpCS_12.getOwnedCurlyBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_7 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_7).booleanValue();
                                        CAUGHT_isEmpty_8 = isEmpty_8;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_9;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_3 = lNameExpCS_12.getOwnedRoundBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_8 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_9 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_8).booleanValue();
                                        CAUGHT_isEmpty_9 = isEmpty_9;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_9 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_11 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_8, CAUGHT_isEmpty_9);
                                    CAUGHT_and_11 = and_11;
                                }
                                catch (Exception e) {
                                    CAUGHT_and_11 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_10;
                                try {
                                    @SuppressWarnings("null")
                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_3 = lNameExpCS_12.getOwnedSquareBracketedClauses();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_3 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_3);
                                    final /*@Thrown*/ boolean isEmpty_10 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_3).booleanValue();
                                    CAUGHT_isEmpty_10 = isEmpty_10;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_10 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_12 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_11, CAUGHT_isEmpty_10);
                                CAUGHT_and_12 = and_12;
                            }
                            catch (Exception e) {
                                CAUGHT_and_12 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_ne_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_12.getReferredProperty();
                                final /*@Thrown*/ boolean ne_3 = referredProperty != null;
                                CAUGHT_ne_3 = ne_3;
                            }
                            catch (Exception e) {
                                CAUGHT_ne_3 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_13 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_12, CAUGHT_ne_3);
                            if (and_13 == null) {
                                throw throwNull(lNameExpCS_12, "Null if condition");
                            }
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                            if (and_13) {
                                // creations
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable PropertyCallExp rPropertyCallExp = PivotFactory.eINSTANCE.createPropertyCallExp();
                                assert rPropertyCallExp != null;
                                models[1/*rightAS*/].add(rPropertyCallExp);
                                // property assignments
                                lNameExpCS_12.setPivot(rPropertyCallExp);
                                boolean m_NameExpCS_pivot_4 = ValueUtil.TRUE_VALUE;
                                symbol_1 = m_NameExpCS_pivot_4;
                            }
                            else {
                                symbol_1 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_2 = symbol_1;
                        }
                        else {
                            symbol_2 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_3 = symbol_2;
                    }
                    else {
                        symbol_3 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_4 = symbol_3;
                }
                else {
                    symbol_4 = ValueUtil.FALSE_VALUE;
                }
                symbol_5 = symbol_4;
            }
            else {
                symbol_5 = ValueUtil.FALSE_VALUE;
            }
            return symbol_5;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_4", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_5 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rShadowExp : ShadowExp[1];
     *  |}
     * where ( |
     * not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isPropertyCallExp()
     *   lNameExpCS.isShadowExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIterateExp())
     * { |
     * lNameExpCS.pivot := rShadowExp;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_5(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_13) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_13.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_13.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_13.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_13.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_13, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_6;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_13.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_13.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_isEmpty_2);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_13.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_13.getReferredProperty();
                    final /*@Thrown*/ boolean ne_0 = referredProperty != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_13, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
                if (not_0) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_5;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_13.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                            final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                            CAUGHT_notEmpty_0 = notEmpty_0;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_13.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                            final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                            CAUGHT_isEmpty_4 = isEmpty_4;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_notEmpty_0, CAUGHT_isEmpty_4);
                        CAUGHT_and_5 = and_5;
                    }
                    catch (Exception e) {
                        CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_13.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                        final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                        CAUGHT_isEmpty_5 = isEmpty_5;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                    if (and_6 == null) {
                        throw throwNull(lNameExpCS_13, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                    if (and_6) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_8;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_7;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_13.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_6 = isEmpty_6;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_13.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_isEmpty_7 = isEmpty_7;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_6, CAUGHT_isEmpty_7);
                                CAUGHT_and_7 = and_7;
                            }
                            catch (Exception e) {
                                CAUGHT_and_7 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_13.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_8 = isEmpty_8;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_7, CAUGHT_isEmpty_8);
                            CAUGHT_and_8 = and_8;
                        }
                        catch (Exception e) {
                            CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_13.getReferredAssociation();
                            final /*@Thrown*/ boolean ne_1 = referredAssociation != null;
                            CAUGHT_ne_1 = ne_1;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_ne_1);
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_9);
                        if (not_1 == null) {
                            throw throwNull(lNameExpCS_13, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                        if (not_1) {
                            /*@Caught*/ @Nullable Object CAUGHT_and_11;
                            try {
                                /*@Caught*/ @Nullable Object CAUGHT_and_10;
                                try {
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_9;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_3 = lNameExpCS_13.getOwnedCurlyBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_7 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_9 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_7).booleanValue();
                                        CAUGHT_isEmpty_9 = isEmpty_9;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_9 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty_1;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_3 = lNameExpCS_13.getOwnedRoundBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_8 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_3);
                                        final /*@Thrown*/ boolean notEmpty_1 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_8).booleanValue();
                                        CAUGHT_notEmpty_1 = notEmpty_1;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_notEmpty_1 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_9, CAUGHT_notEmpty_1);
                                    CAUGHT_and_10 = and_10;
                                }
                                catch (Exception e) {
                                    CAUGHT_and_10 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_10;
                                try {
                                    @SuppressWarnings("null")
                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_3 = lNameExpCS_13.getOwnedSquareBracketedClauses();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_3 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_3);
                                    final /*@Thrown*/ boolean isEmpty_10 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_3).booleanValue();
                                    CAUGHT_isEmpty_10 = isEmpty_10;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_10 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_11 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_10, CAUGHT_isEmpty_10);
                                CAUGHT_and_11 = and_11;
                            }
                            catch (Exception e) {
                                CAUGHT_and_11 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_13.getReferredOperation();
                                final /*@Thrown*/ boolean ne_2 = referredOperation != null;
                                CAUGHT_ne_2 = ne_2;
                            }
                            catch (Exception e) {
                                CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_12 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_11, CAUGHT_ne_2);
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_2 = BooleanNotOperation.INSTANCE.evaluate(and_12);
                            if (not_2 == null) {
                                throw throwNull(lNameExpCS_13, "Null if condition");
                            }
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                            if (not_2) {
                                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                                if (not) {
                                    // creations
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable ShadowExp rShadowExp = PivotFactory.eINSTANCE.createShadowExp();
                                    assert rShadowExp != null;
                                    models[1/*rightAS*/].add(rShadowExp);
                                    // property assignments
                                    lNameExpCS_13.setPivot(rShadowExp);
                                    boolean m_NameExpCS_pivot_5 = ValueUtil.TRUE_VALUE;
                                    symbol_1 = m_NameExpCS_pivot_5;
                                }
                                else {
                                    symbol_1 = ValueUtil.FALSE_VALUE;
                                }
                                symbol_2 = symbol_1;
                            }
                            else {
                                symbol_2 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_3 = symbol_2;
                        }
                        else {
                            symbol_3 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_4 = symbol_3;
                    }
                    else {
                        symbol_4 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_5 = symbol_4;
                }
                else {
                    symbol_5 = ValueUtil.FALSE_VALUE;
                }
                symbol_6 = symbol_5;
            }
            else {
                symbol_6 = ValueUtil.FALSE_VALUE;
            }
            return symbol_6;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_5", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_6 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rVariableExp : VariableExp[1];
     *  |}
     * where ( |
     * not lNameExpCS.isOperationCallExp()
     *   lNameExpCS.isVariableExp()
     *   not lNameExpCS.isShadowExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isPropertyCallExp())
     * { |
     * lNameExpCS.pivot := rVariableExp;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_6(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_14) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_14.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_14.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_14.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_14.getReferredOperation();
                final /*@Thrown*/ boolean ne = referredOperation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_14, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_7;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_14.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_14.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_isEmpty_2);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_14.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable referredVariable = lNameExpCS_14.getReferredVariable();
                    final /*@Thrown*/ boolean ne_0 = referredVariable != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                if (and_4 == null) {
                    throw throwNull(lNameExpCS_14, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_6;
                if (and_4) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_5;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_14.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                            final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                            CAUGHT_notEmpty_0 = notEmpty_0;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_14.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                            final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                            CAUGHT_isEmpty_4 = isEmpty_4;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_notEmpty_0, CAUGHT_isEmpty_4);
                        CAUGHT_and_5 = and_5;
                    }
                    catch (Exception e) {
                        CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_14.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                        final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                        CAUGHT_isEmpty_5 = isEmpty_5;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_6);
                    if (not_0 == null) {
                        throw throwNull(lNameExpCS_14, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
                    if (not_0) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_8;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_7;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_14.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_6 = isEmpty_6;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_14.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_isEmpty_7 = isEmpty_7;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_6, CAUGHT_isEmpty_7);
                                CAUGHT_and_7 = and_7;
                            }
                            catch (Exception e) {
                                CAUGHT_and_7 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_14.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_8 = isEmpty_8;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_7, CAUGHT_isEmpty_8);
                            CAUGHT_and_8 = and_8;
                        }
                        catch (Exception e) {
                            CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_14.getReferredAssociation();
                            final /*@Thrown*/ boolean ne_1 = referredAssociation != null;
                            CAUGHT_ne_1 = ne_1;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_ne_1);
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_9);
                        if (not_1 == null) {
                            throw throwNull(lNameExpCS_14, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                        if (not_1) {
                            /*@Caught*/ @Nullable Object CAUGHT_and_11;
                            try {
                                /*@Caught*/ @Nullable Object CAUGHT_and_10;
                                try {
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_9;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_3 = lNameExpCS_14.getOwnedCurlyBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_7 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_9 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_7).booleanValue();
                                        CAUGHT_isEmpty_9 = isEmpty_9;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_9 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty_1;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_3 = lNameExpCS_14.getOwnedRoundBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_8 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_3);
                                        final /*@Thrown*/ boolean notEmpty_1 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_8).booleanValue();
                                        CAUGHT_notEmpty_1 = notEmpty_1;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_notEmpty_1 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_9, CAUGHT_notEmpty_1);
                                    CAUGHT_and_10 = and_10;
                                }
                                catch (Exception e) {
                                    CAUGHT_and_10 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_10;
                                try {
                                    @SuppressWarnings("null")
                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_3 = lNameExpCS_14.getOwnedSquareBracketedClauses();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_3 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_3);
                                    final /*@Thrown*/ boolean isEmpty_10 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_3).booleanValue();
                                    CAUGHT_isEmpty_10 = isEmpty_10;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_10 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_11 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_10, CAUGHT_isEmpty_10);
                                CAUGHT_and_11 = and_11;
                            }
                            catch (Exception e) {
                                CAUGHT_and_11 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_14.getReferredIteration();
                                final /*@Thrown*/ boolean ne_2 = referredIteration != null;
                                CAUGHT_ne_2 = ne_2;
                            }
                            catch (Exception e) {
                                CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_12 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_11, CAUGHT_ne_2);
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_2 = BooleanNotOperation.INSTANCE.evaluate(and_12);
                            if (not_2 == null) {
                                throw throwNull(lNameExpCS_14, "Null if condition");
                            }
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                            if (not_2) {
                                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                                if (not_2) {
                                    /*@Caught*/ @Nullable Object CAUGHT_and_17;
                                    try {
                                        /*@Caught*/ @Nullable Object CAUGHT_and_16;
                                        try {
                                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_13;
                                            try {
                                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_5 = lNameExpCS_14.getOwnedCurlyBracketedClause();
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_11 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_5);
                                                final /*@Thrown*/ boolean isEmpty_13 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_11).booleanValue();
                                                CAUGHT_isEmpty_13 = isEmpty_13;
                                            }
                                            catch (Exception e) {
                                                CAUGHT_isEmpty_13 = ValueUtil.createInvalidValue(e);
                                            }
                                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_14;
                                            try {
                                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_5 = lNameExpCS_14.getOwnedRoundBracketedClause();
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_12 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_5);
                                                final /*@Thrown*/ boolean isEmpty_14 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_12).booleanValue();
                                                CAUGHT_isEmpty_14 = isEmpty_14;
                                            }
                                            catch (Exception e) {
                                                CAUGHT_isEmpty_14 = ValueUtil.createInvalidValue(e);
                                            }
                                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_16 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_13, CAUGHT_isEmpty_14);
                                            CAUGHT_and_16 = and_16;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_and_16 = ValueUtil.createInvalidValue(e);
                                        }
                                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_15;
                                        try {
                                            @SuppressWarnings("null")
                                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_5 = lNameExpCS_14.getOwnedSquareBracketedClauses();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_5 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_5);
                                            final /*@Thrown*/ boolean isEmpty_15 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_5).booleanValue();
                                            CAUGHT_isEmpty_15 = isEmpty_15;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_isEmpty_15 = ValueUtil.createInvalidValue(e);
                                        }
                                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_17 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_16, CAUGHT_isEmpty_15);
                                        CAUGHT_and_17 = and_17;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_and_17 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_ne_4;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_14.getReferredProperty();
                                        final /*@Thrown*/ boolean ne_4 = referredProperty != null;
                                        CAUGHT_ne_4 = ne_4;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_ne_4 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_18 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_17, CAUGHT_ne_4);
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_4 = BooleanNotOperation.INSTANCE.evaluate(and_18);
                                    if (not_4 == null) {
                                        throw throwNull(lNameExpCS_14, "Null if condition");
                                    }
                                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                                    if (not_4) {
                                        // creations
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable VariableExp rVariableExp = PivotFactory.eINSTANCE.createVariableExp();
                                        assert rVariableExp != null;
                                        models[1/*rightAS*/].add(rVariableExp);
                                        // property assignments
                                        lNameExpCS_14.setPivot(rVariableExp);
                                        boolean m_NameExpCS_pivot_6 = ValueUtil.TRUE_VALUE;
                                        symbol_1 = m_NameExpCS_pivot_6;
                                    }
                                    else {
                                        symbol_1 = ValueUtil.FALSE_VALUE;
                                    }
                                    symbol_2 = symbol_1;
                                }
                                else {
                                    symbol_2 = ValueUtil.FALSE_VALUE;
                                }
                                symbol_3 = symbol_2;
                            }
                            else {
                                symbol_3 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_4 = symbol_3;
                        }
                        else {
                            symbol_4 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_5 = symbol_4;
                    }
                    else {
                        symbol_5 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_6 = symbol_5;
                }
                else {
                    symbol_6 = ValueUtil.FALSE_VALUE;
                }
                symbol_7 = symbol_6;
            }
            else {
                symbol_7 = ValueUtil.FALSE_VALUE;
            }
            return symbol_7;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_6", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredAssociation in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isAssociationClassExp()
     *   )
     * {aAssociationClassCallExp : AssociationClassCallExp[1] = lNameExpCS.pivot.oclAsType(AssociationClassCallExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredAssociation : AssociationClass[?] = lNameExpCS.referredAssociation;
     * name : String[?] = referredAssociation.name;
     *  |
     * aAssociationClassCallExp.name := name;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredAssociation(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_15) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_15.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_15.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_15.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_15.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_15, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (and_1) {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_AssociationClassCallExp_0 = idResolver.getClass(CLSSid_AssociationClassCallExp, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_15.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull AssociationClassCallExp aAssociationClassCallExp = ClassUtil.nonNullState((AssociationClassCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_AssociationClassCallExp_0));
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_15.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation_0 = lNameExpCS_15.getReferredAssociation();
                if (referredAssociation_0 == null) {
                    throw throwNull(lNameExpCS_15, "Null source for \'NamedElement::name\'");
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = referredAssociation_0.getName();
                // property assignments
                aAssociationClassCallExp.setName(name);
                boolean m_NameExpCS_pivot_referredAssociation = ValueUtil.TRUE_VALUE;
                symbol_1 = m_NameExpCS_pivot_referredAssociation;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredAssociation", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredAssociation_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isAssociationClassExp()
     *   )
     * {aAssociationClassCallExp : AssociationClassCallExp[1] = lNameExpCS.pivot.oclAsType(AssociationClassCallExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredAssociation : AssociationClass[?] = lNameExpCS.referredAssociation;
     *  |
     * aAssociationClassCallExp.referredAssociationClass := referredAssociation;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredAssociation_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_16) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_16.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_16.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_16.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_16.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_16, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (and_1) {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_AssociationClassCallExp_0 = idResolver.getClass(CLSSid_AssociationClassCallExp, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_16.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull AssociationClassCallExp aAssociationClassCallExp = ClassUtil.nonNullState((AssociationClassCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_AssociationClassCallExp_0));
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_16.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation_0 = lNameExpCS_16.getReferredAssociation();
                // property assignments
                aAssociationClassCallExp.setReferredAssociationClass(referredAssociation_0);
                boolean m_NameExpCS_pivot_referredAssociation_1 = ValueUtil.TRUE_VALUE;
                symbol_1 = m_NameExpCS_pivot_referredAssociation_1;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredAssociation_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredIteration in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isIterateExp()
     *   )
     * {aIterateExp : IterateExp[1] = lNameExpCS.pivot.oclAsType(IterateExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredIteration : Iteration[?] = lNameExpCS.referredIteration;
     *  |
     * aIterateExp.referredIteration := referredIteration;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredIteration(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_17) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_17.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_17.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_17.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_17.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_17, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_17.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_17.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_17.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_17.getReferredIteration();
                    final /*@Thrown*/ boolean ne_0 = referredIteration != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                if (and_4 == null) {
                    throw throwNull(lNameExpCS_17, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (and_4) {
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IterateExp_0 = idResolver.getClass(CLSSid_IterateExp, null);
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_17.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IterateExp aIterateExp = ClassUtil.nonNullState((IterateExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IterateExp_0));
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_17.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration_0 = lNameExpCS_17.getReferredIteration();
                    // property assignments
                    aIterateExp.setReferredIteration(referredIteration_0);
                    boolean m_NameExpCS_pivot_referredIteration = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_NameExpCS_pivot_referredIteration;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredIteration", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredIteration_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isIteratorExp()
     *   )
     * {aIteratorExp : IteratorExp[1] = lNameExpCS.pivot.oclAsType(IteratorExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredIteration : Iteration[?] = lNameExpCS.referredIteration;
     *  |
     * aIteratorExp.referredIteration := referredIteration;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredIteration_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_18) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_18.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_18.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_18.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_18.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_18, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_18.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_18.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_isEmpty_2);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_18.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_18.getReferredAssociation();
                    final /*@Thrown*/ boolean ne_0 = referredAssociation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_18, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                if (not_0) {
                    if (and_1 == null) {
                        throw throwNull(lNameExpCS_18, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                    if (and_1) {
                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IteratorExp_0 = idResolver.getClass(CLSSid_IteratorExp, null);
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_18.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IteratorExp aIteratorExp = ClassUtil.nonNullState((IteratorExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IteratorExp_0));
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_18.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration_1 = lNameExpCS_18.getReferredIteration();
                        // property assignments
                        aIteratorExp.setReferredIteration(referredIteration_1);
                        boolean m_NameExpCS_pivot_referredIteration_1 = ValueUtil.TRUE_VALUE;
                        symbol_1 = m_NameExpCS_pivot_referredIteration_1;
                    }
                    else {
                        symbol_1 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_2 = symbol_1;
                }
                else {
                    symbol_2 = ValueUtil.FALSE_VALUE;
                }
                symbol_3 = symbol_2;
            }
            else {
                symbol_3 = ValueUtil.FALSE_VALUE;
            }
            return symbol_3;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredIteration_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredIteration_2 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isIterateExp()
     *   )
     * {aIterateExp : IterateExp[1] = lNameExpCS.pivot.oclAsType(IterateExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredIteration : Iteration[?] = lNameExpCS.referredIteration;
     * name : String[?] = referredIteration.name;
     *  |
     * aIterateExp.name := name;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredIteration_2(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_19) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_19.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_19.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_19.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_19.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_19, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_19.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_19.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_19.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_19.getReferredIteration();
                    final /*@Thrown*/ boolean ne_0 = referredIteration != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                if (and_4 == null) {
                    throw throwNull(lNameExpCS_19, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (and_4) {
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IterateExp_0 = idResolver.getClass(CLSSid_IterateExp, null);
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_19.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IterateExp aIterateExp = ClassUtil.nonNullState((IterateExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IterateExp_0));
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_19.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration_0 = lNameExpCS_19.getReferredIteration();
                    if (referredIteration_0 == null) {
                        throw throwNull(lNameExpCS_19, "Null source for \'NamedElement::name\'");
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = referredIteration_0.getName();
                    // property assignments
                    aIterateExp.setName(name);
                    boolean m_NameExpCS_pivot_referredIteration_2 = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_NameExpCS_pivot_referredIteration_2;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredIteration_2", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredIteration_3 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   )
     * {aIteratorExp : IteratorExp[1] = lNameExpCS.pivot.oclAsType(IteratorExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredIteration : Iteration[?] = lNameExpCS.referredIteration;
     * name : String[?] = referredIteration.name;
     *  |
     * aIteratorExp.name := name;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredIteration_3(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_20) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_20.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_20.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_20.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_20.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_20, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
            if (and_1) {
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
                if (not == null) {
                    throw throwNull(lNameExpCS_20, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                if (not) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_20.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_3 = isEmpty_3;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_20.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_3, CAUGHT_isEmpty_4);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_20.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_20.getReferredAssociation();
                        final /*@Thrown*/ boolean ne_1 = referredAssociation != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_0 == null) {
                        throw throwNull(lNameExpCS_20, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                    if (not_0) {
                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IteratorExp_0 = idResolver.getClass(CLSSid_IteratorExp, null);
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_20.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IteratorExp aIteratorExp = ClassUtil.nonNullState((IteratorExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IteratorExp_0));
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_20.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration_1 = lNameExpCS_20.getReferredIteration();
                        if (referredIteration_1 == null) {
                            throw throwNull(lNameExpCS_20, "Null source for \'NamedElement::name\'");
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = referredIteration_1.getName();
                        // property assignments
                        aIteratorExp.setName(name);
                        boolean m_NameExpCS_pivot_referredIteration_3 = ValueUtil.TRUE_VALUE;
                        symbol_1 = m_NameExpCS_pivot_referredIteration_3;
                    }
                    else {
                        symbol_1 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_2 = symbol_1;
                }
                else {
                    symbol_2 = ValueUtil.FALSE_VALUE;
                }
                symbol_3 = symbol_2;
            }
            else {
                symbol_3 = ValueUtil.FALSE_VALUE;
            }
            return symbol_3;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredIteration_3", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredOperation in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isOperationCallExp()
     *   )
     * {aOperationCallExp : OperationCallExp[1] = lNameExpCS.pivot.oclAsType(OperationCallExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredOperation : Operation[?] = lNameExpCS.referredOperation;
     *  |
     * aOperationCallExp.referredOperation := referredOperation;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredOperation(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_21) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_21.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_21.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_21.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_21.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_21, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
            if (not) {
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                if (not) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_21.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_3 = isEmpty_3;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_21.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_3, CAUGHT_isEmpty_4);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_21.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_21.getReferredAssociation();
                        final /*@Thrown*/ boolean ne_1 = referredAssociation != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_1 == null) {
                        throw throwNull(lNameExpCS_21, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                    if (not_1) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_9;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_8;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_21.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_6 = isEmpty_6;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_notEmpty_1;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_21.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean notEmpty_1 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_notEmpty_1 = notEmpty_1;
                                }
                                catch (Exception e) {
                                    CAUGHT_notEmpty_1 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_6, CAUGHT_notEmpty_1);
                                CAUGHT_and_8 = and_8;
                            }
                            catch (Exception e) {
                                CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_21.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_7 = isEmpty_7;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_isEmpty_7);
                            CAUGHT_and_9 = and_9;
                        }
                        catch (Exception e) {
                            CAUGHT_and_9 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_21.getReferredOperation();
                            final /*@Thrown*/ boolean ne_2 = referredOperation != null;
                            CAUGHT_ne_2 = ne_2;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_9, CAUGHT_ne_2);
                        if (and_10 == null) {
                            throw throwNull(lNameExpCS_21, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                        if (and_10) {
                            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OperationCallExp_0 = idResolver.getClass(CLSSid_OperationCallExp, null);
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_21.getPivot();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OperationCallExp aOperationCallExp = ClassUtil.nonNullState((OperationCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_OperationCallExp_0));
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_21.getPivot();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation_0 = lNameExpCS_21.getReferredOperation();
                            // property assignments
                            aOperationCallExp.setReferredOperation(referredOperation_0);
                            boolean m_NameExpCS_pivot_referredOperation = ValueUtil.TRUE_VALUE;
                            symbol_1 = m_NameExpCS_pivot_referredOperation;
                        }
                        else {
                            symbol_1 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_2 = symbol_1;
                    }
                    else {
                        symbol_2 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_3 = symbol_2;
                }
                else {
                    symbol_3 = ValueUtil.FALSE_VALUE;
                }
                symbol_4 = symbol_3;
            }
            else {
                symbol_4 = ValueUtil.FALSE_VALUE;
            }
            return symbol_4;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredOperation", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredOperation_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isIteratorExp()
     *   )
     * {aOperationCallExp : OperationCallExp[1] = lNameExpCS.pivot.oclAsType(OperationCallExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredOperation : Operation[?] = lNameExpCS.referredOperation;
     * name : String[?] = referredOperation.name;
     *  |
     * aOperationCallExp.name := name;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredOperation_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_22) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_22.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_22.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_22.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_22.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_22, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_22.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_22.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_22.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_22.getReferredOperation();
                    final /*@Thrown*/ boolean ne_0 = referredOperation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                if (and_4 == null) {
                    throw throwNull(lNameExpCS_22, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                if (and_4) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_22.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_22.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_notEmpty_0 = notEmpty_0;
                            }
                            catch (Exception e) {
                                CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_4, CAUGHT_notEmpty_0);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_22.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_22.getReferredIteration();
                        final /*@Thrown*/ boolean ne_1 = referredIteration != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_0 == null) {
                        throw throwNull(lNameExpCS_22, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                    if (not_0) {
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                        if (not_0) {
                            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OperationCallExp_0 = idResolver.getClass(CLSSid_OperationCallExp, null);
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_22.getPivot();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OperationCallExp aOperationCallExp = ClassUtil.nonNullState((OperationCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_OperationCallExp_0));
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_22.getPivot();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation_0 = lNameExpCS_22.getReferredOperation();
                            if (referredOperation_0 == null) {
                                throw throwNull(lNameExpCS_22, "Null source for \'NamedElement::name\'");
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = referredOperation_0.getName();
                            // property assignments
                            aOperationCallExp.setName(name);
                            boolean m_NameExpCS_pivot_referredOperation_1 = ValueUtil.TRUE_VALUE;
                            symbol_1 = m_NameExpCS_pivot_referredOperation_1;
                        }
                        else {
                            symbol_1 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_2 = symbol_1;
                    }
                    else {
                        symbol_2 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_3 = symbol_2;
                }
                else {
                    symbol_3 = ValueUtil.FALSE_VALUE;
                }
                symbol_4 = symbol_3;
            }
            else {
                symbol_4 = ValueUtil.FALSE_VALUE;
            }
            return symbol_4;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredOperation_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredProperty in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isPropertyCallExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isIteratorExp()
     *   )
     * {aPropertyCallExp : PropertyCallExp[1] = lNameExpCS.pivot.oclAsType(PropertyCallExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredProperty : Property[?] = lNameExpCS.referredProperty;
     *  |
     * aPropertyCallExp.referredProperty := referredProperty;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredProperty(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_23) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_23.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_23.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_23.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_23.getReferredOperation();
                final /*@Thrown*/ boolean ne = referredOperation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_23, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_23.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_23.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_isEmpty_2);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_23.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_23.getReferredAssociation();
                    final /*@Thrown*/ boolean ne_0 = referredAssociation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_23, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                if (not_0) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_23.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_23.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_5 = isEmpty_5;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_4, CAUGHT_isEmpty_5);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_23.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_6 = isEmpty_6;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_6);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_23.getReferredProperty();
                        final /*@Thrown*/ boolean ne_1 = referredProperty != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    if (and_7 == null) {
                        throw throwNull(lNameExpCS_23, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                    if (and_7) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_9;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_8;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_23.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_7 = isEmpty_7;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_23.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_notEmpty_0 = notEmpty_0;
                                }
                                catch (Exception e) {
                                    CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_7, CAUGHT_notEmpty_0);
                                CAUGHT_and_8 = and_8;
                            }
                            catch (Exception e) {
                                CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_23.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_8 = isEmpty_8;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_isEmpty_8);
                            CAUGHT_and_9 = and_9;
                        }
                        catch (Exception e) {
                            CAUGHT_and_9 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_23.getReferredIteration();
                            final /*@Thrown*/ boolean ne_2 = referredIteration != null;
                            CAUGHT_ne_2 = ne_2;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_9, CAUGHT_ne_2);
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_10);
                        if (not_1 == null) {
                            throw throwNull(lNameExpCS_23, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                        if (not_1) {
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                            if (not_1) {
                                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_PropertyCallExp_0 = idResolver.getClass(CLSSid_PropertyCallExp, null);
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_23.getPivot();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull PropertyCallExp aPropertyCallExp = ClassUtil.nonNullState((PropertyCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_PropertyCallExp_0));
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_23.getPivot();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty_0 = lNameExpCS_23.getReferredProperty();
                                // property assignments
                                aPropertyCallExp.setReferredProperty(referredProperty_0);
                                boolean m_NameExpCS_pivot_referredProperty = ValueUtil.TRUE_VALUE;
                                symbol_1 = m_NameExpCS_pivot_referredProperty;
                            }
                            else {
                                symbol_1 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_2 = symbol_1;
                        }
                        else {
                            symbol_2 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_3 = symbol_2;
                    }
                    else {
                        symbol_3 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_4 = symbol_3;
                }
                else {
                    symbol_4 = ValueUtil.FALSE_VALUE;
                }
                symbol_5 = symbol_4;
            }
            else {
                symbol_5 = ValueUtil.FALSE_VALUE;
            }
            return symbol_5;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredProperty", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredProperty_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isPropertyCallExp()
     *   )
     * {aPropertyCallExp : PropertyCallExp[1] = lNameExpCS.pivot.oclAsType(PropertyCallExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredProperty : Property[?] = lNameExpCS.referredProperty;
     * name : String[?] = referredProperty.name;
     *  |
     * aPropertyCallExp.name := name;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredProperty_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_24) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_24.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_24.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_24.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_24.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_24, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
            if (not) {
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                if (not) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_24.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_3 = isEmpty_3;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_notEmpty_1;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_24.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean notEmpty_1 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_notEmpty_1 = notEmpty_1;
                            }
                            catch (Exception e) {
                                CAUGHT_notEmpty_1 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_3, CAUGHT_notEmpty_1);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_24.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_4 = isEmpty_4;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_4);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_24.getReferredOperation();
                        final /*@Thrown*/ boolean ne_1 = referredOperation != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_1 == null) {
                        throw throwNull(lNameExpCS_24, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                    if (not_1) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_9;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_8;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_24.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_5 = isEmpty_5;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_24.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_isEmpty_6 = isEmpty_6;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_5, CAUGHT_isEmpty_6);
                                CAUGHT_and_8 = and_8;
                            }
                            catch (Exception e) {
                                CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_24.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_7 = isEmpty_7;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_isEmpty_7);
                            CAUGHT_and_9 = and_9;
                        }
                        catch (Exception e) {
                            CAUGHT_and_9 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_24.getReferredAssociation();
                            final /*@Thrown*/ boolean ne_2 = referredAssociation != null;
                            CAUGHT_ne_2 = ne_2;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_9, CAUGHT_ne_2);
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_2 = BooleanNotOperation.INSTANCE.evaluate(and_10);
                        if (not_2 == null) {
                            throw throwNull(lNameExpCS_24, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                        if (not_2) {
                            /*@Caught*/ @Nullable Object CAUGHT_and_12;
                            try {
                                /*@Caught*/ @Nullable Object CAUGHT_and_11;
                                try {
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_3 = lNameExpCS_24.getOwnedCurlyBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_7 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_7).booleanValue();
                                        CAUGHT_isEmpty_8 = isEmpty_8;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_9;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_3 = lNameExpCS_24.getOwnedRoundBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_8 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_9 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_8).booleanValue();
                                        CAUGHT_isEmpty_9 = isEmpty_9;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_9 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_11 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_8, CAUGHT_isEmpty_9);
                                    CAUGHT_and_11 = and_11;
                                }
                                catch (Exception e) {
                                    CAUGHT_and_11 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_10;
                                try {
                                    @SuppressWarnings("null")
                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_3 = lNameExpCS_24.getOwnedSquareBracketedClauses();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_3 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_3);
                                    final /*@Thrown*/ boolean isEmpty_10 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_3).booleanValue();
                                    CAUGHT_isEmpty_10 = isEmpty_10;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_10 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_12 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_11, CAUGHT_isEmpty_10);
                                CAUGHT_and_12 = and_12;
                            }
                            catch (Exception e) {
                                CAUGHT_and_12 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_ne_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_24.getReferredProperty();
                                final /*@Thrown*/ boolean ne_3 = referredProperty != null;
                                CAUGHT_ne_3 = ne_3;
                            }
                            catch (Exception e) {
                                CAUGHT_ne_3 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_13 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_12, CAUGHT_ne_3);
                            if (and_13 == null) {
                                throw throwNull(lNameExpCS_24, "Null if condition");
                            }
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                            if (and_13) {
                                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_PropertyCallExp_0 = idResolver.getClass(CLSSid_PropertyCallExp, null);
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_24.getPivot();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull PropertyCallExp aPropertyCallExp = ClassUtil.nonNullState((PropertyCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_PropertyCallExp_0));
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_24.getPivot();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty_0 = lNameExpCS_24.getReferredProperty();
                                if (referredProperty_0 == null) {
                                    throw throwNull(lNameExpCS_24, "Null source for \'NamedElement::name\'");
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = referredProperty_0.getName();
                                // property assignments
                                aPropertyCallExp.setName(name);
                                boolean m_NameExpCS_pivot_referredProperty_1 = ValueUtil.TRUE_VALUE;
                                symbol_1 = m_NameExpCS_pivot_referredProperty_1;
                            }
                            else {
                                symbol_1 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_2 = symbol_1;
                        }
                        else {
                            symbol_2 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_3 = symbol_2;
                    }
                    else {
                        symbol_3 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_4 = symbol_3;
                }
                else {
                    symbol_4 = ValueUtil.FALSE_VALUE;
                }
                symbol_5 = symbol_4;
            }
            else {
                symbol_5 = ValueUtil.FALSE_VALUE;
            }
            return symbol_5;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredProperty_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredVariable in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isPropertyCallExp()
     *   lNameExpCS.isVariableExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isShadowExp()
     *   )
     * {aVariableExp : VariableExp[1] = lNameExpCS.pivot.oclAsType(VariableExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredVariable : Variable[?] = lNameExpCS.referredVariable;
     *  |
     * aVariableExp.referredVariable := referredVariable;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredVariable(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_25) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_25.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_25.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_25.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_25.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_25, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_7;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_25.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_25.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_isEmpty_3 = isEmpty_3;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_isEmpty_3);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_25.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_4 = isEmpty_4;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_4);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_25.getReferredProperty();
                    final /*@Thrown*/ boolean ne_0 = referredProperty != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_25, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_6;
                if (not_0) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_25.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_5 = isEmpty_5;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_25.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_6 = isEmpty_6;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_5, CAUGHT_isEmpty_6);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_25.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_7 = isEmpty_7;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_7);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable referredVariable = lNameExpCS_25.getReferredVariable();
                        final /*@Thrown*/ boolean ne_1 = referredVariable != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    if (and_7 == null) {
                        throw throwNull(lNameExpCS_25, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
                    if (and_7) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_9;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_8;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_25.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_8 = isEmpty_8;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_25.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_notEmpty = notEmpty;
                                }
                                catch (Exception e) {
                                    CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_8, CAUGHT_notEmpty);
                                CAUGHT_and_8 = and_8;
                            }
                            catch (Exception e) {
                                CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_9;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_25.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_9 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_9 = isEmpty_9;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_9 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_isEmpty_9);
                            CAUGHT_and_9 = and_9;
                        }
                        catch (Exception e) {
                            CAUGHT_and_9 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_25.getReferredIteration();
                            final /*@Thrown*/ boolean ne_2 = referredIteration != null;
                            CAUGHT_ne_2 = ne_2;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_9, CAUGHT_ne_2);
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_10);
                        if (not_1 == null) {
                            throw throwNull(lNameExpCS_25, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                        if (not_1) {
                            /*@Caught*/ @Nullable Object CAUGHT_and_12;
                            try {
                                /*@Caught*/ @Nullable Object CAUGHT_and_11;
                                try {
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_10;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_3 = lNameExpCS_25.getOwnedCurlyBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_7 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_10 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_7).booleanValue();
                                        CAUGHT_isEmpty_10 = isEmpty_10;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_10 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_3 = lNameExpCS_25.getOwnedRoundBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_8 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_3);
                                        final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_8).booleanValue();
                                        CAUGHT_notEmpty_0 = notEmpty_0;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_11 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_10, CAUGHT_notEmpty_0);
                                    CAUGHT_and_11 = and_11;
                                }
                                catch (Exception e) {
                                    CAUGHT_and_11 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_11;
                                try {
                                    @SuppressWarnings("null")
                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_3 = lNameExpCS_25.getOwnedSquareBracketedClauses();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_3 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_3);
                                    final /*@Thrown*/ boolean isEmpty_11 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_3).booleanValue();
                                    CAUGHT_isEmpty_11 = isEmpty_11;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_11 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_12 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_11, CAUGHT_isEmpty_11);
                                CAUGHT_and_12 = and_12;
                            }
                            catch (Exception e) {
                                CAUGHT_and_12 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_ne_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_25.getReferredOperation();
                                final /*@Thrown*/ boolean ne_3 = referredOperation != null;
                                CAUGHT_ne_3 = ne_3;
                            }
                            catch (Exception e) {
                                CAUGHT_ne_3 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_13 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_12, CAUGHT_ne_3);
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_2 = BooleanNotOperation.INSTANCE.evaluate(and_13);
                            if (not_2 == null) {
                                throw throwNull(lNameExpCS_25, "Null if condition");
                            }
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                            if (not_2) {
                                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                                if (not_1) {
                                    /*@Caught*/ @Nullable Object CAUGHT_and_17;
                                    try {
                                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty_2;
                                        try {
                                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_5 = lNameExpCS_25.getOwnedCurlyBracketedClause();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_11 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_5);
                                            final /*@Thrown*/ boolean notEmpty_2 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_11).booleanValue();
                                            CAUGHT_notEmpty_2 = notEmpty_2;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_notEmpty_2 = ValueUtil.createInvalidValue(e);
                                        }
                                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_14;
                                        try {
                                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_5 = lNameExpCS_25.getOwnedRoundBracketedClause();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_12 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_5);
                                            final /*@Thrown*/ boolean isEmpty_14 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_12).booleanValue();
                                            CAUGHT_isEmpty_14 = isEmpty_14;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_isEmpty_14 = ValueUtil.createInvalidValue(e);
                                        }
                                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_17 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_notEmpty_2, CAUGHT_isEmpty_14);
                                        CAUGHT_and_17 = and_17;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_and_17 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_15;
                                    try {
                                        @SuppressWarnings("null")
                                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_5 = lNameExpCS_25.getOwnedSquareBracketedClauses();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_5 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_5);
                                        final /*@Thrown*/ boolean isEmpty_15 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_5).booleanValue();
                                        CAUGHT_isEmpty_15 = isEmpty_15;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_15 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_18 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_17, CAUGHT_isEmpty_15);
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_4 = BooleanNotOperation.INSTANCE.evaluate(and_18);
                                    if (not_4 == null) {
                                        throw throwNull(lNameExpCS_25, "Null if condition");
                                    }
                                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                                    if (not_4) {
                                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_VariableExp_0 = idResolver.getClass(CLSSid_VariableExp, null);
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_25.getPivot();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull VariableExp aVariableExp = ClassUtil.nonNullState((VariableExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_VariableExp_0));
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_25.getPivot();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable referredVariable_0 = lNameExpCS_25.getReferredVariable();
                                        // property assignments
                                        aVariableExp.setReferredVariable(referredVariable_0);
                                        objectManager.assigned(aVariableExp, PivotPackage.Literals.VARIABLE_EXP__REFERRED_VARIABLE, referredVariable_0, null);
                                        boolean m_NameExpCS_pivot_referredVariable = ValueUtil.TRUE_VALUE;
                                        symbol_1 = m_NameExpCS_pivot_referredVariable;
                                    }
                                    else {
                                        symbol_1 = ValueUtil.FALSE_VALUE;
                                    }
                                    symbol_2 = symbol_1;
                                }
                                else {
                                    symbol_2 = ValueUtil.FALSE_VALUE;
                                }
                                symbol_3 = symbol_2;
                            }
                            else {
                                symbol_3 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_4 = symbol_3;
                        }
                        else {
                            symbol_4 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_5 = symbol_4;
                    }
                    else {
                        symbol_5 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_6 = symbol_5;
                }
                else {
                    symbol_6 = ValueUtil.FALSE_VALUE;
                }
                symbol_7 = symbol_6;
            }
            else {
                symbol_7 = ValueUtil.FALSE_VALUE;
            }
            return symbol_7;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredVariable", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredVariable_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isPropertyCallExp()
     *   not lNameExpCS.isOperationCallExp()
     *   lNameExpCS.isVariableExp()
     *   not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isShadowExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   )
     * {aVariableExp : VariableExp[1] = lNameExpCS.pivot.oclAsType(VariableExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredVariable : Variable[?] = lNameExpCS.referredVariable;
     * name : String[?] = referredVariable.name;
     *  |
     * aVariableExp.name := name;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredVariable_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_26) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_26.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_26.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_26.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_26.getReferredProperty();
                final /*@Thrown*/ boolean ne = referredProperty != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_26, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_7;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_26.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_26.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_26.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_26.getReferredOperation();
                    final /*@Thrown*/ boolean ne_0 = referredOperation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_26, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_6;
                if (not_0) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_26.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_26.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_5 = isEmpty_5;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_4, CAUGHT_isEmpty_5);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_26.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_6 = isEmpty_6;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_6);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable referredVariable = lNameExpCS_26.getReferredVariable();
                        final /*@Thrown*/ boolean ne_1 = referredVariable != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    if (and_7 == null) {
                        throw throwNull(lNameExpCS_26, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
                    if (and_7) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_9;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_8;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_26.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_7 = isEmpty_7;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_26.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_notEmpty_0 = notEmpty_0;
                                }
                                catch (Exception e) {
                                    CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_7, CAUGHT_notEmpty_0);
                                CAUGHT_and_8 = and_8;
                            }
                            catch (Exception e) {
                                CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_26.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_8 = isEmpty_8;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_isEmpty_8);
                            CAUGHT_and_9 = and_9;
                        }
                        catch (Exception e) {
                            CAUGHT_and_9 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_26.getReferredIteration();
                            final /*@Thrown*/ boolean ne_2 = referredIteration != null;
                            CAUGHT_ne_2 = ne_2;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_9, CAUGHT_ne_2);
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_10);
                        if (not_1 == null) {
                            throw throwNull(lNameExpCS_26, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                        if (not_1) {
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                            if (not_1) {
                                /*@Caught*/ @Nullable Object CAUGHT_and_14;
                                try {
                                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty_2;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_4 = lNameExpCS_26.getOwnedCurlyBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_9 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_4);
                                        final /*@Thrown*/ boolean notEmpty_2 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_9).booleanValue();
                                        CAUGHT_notEmpty_2 = notEmpty_2;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_notEmpty_2 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_11;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_4 = lNameExpCS_26.getOwnedRoundBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_10 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_4);
                                        final /*@Thrown*/ boolean isEmpty_11 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_10).booleanValue();
                                        CAUGHT_isEmpty_11 = isEmpty_11;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_11 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_14 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_notEmpty_2, CAUGHT_isEmpty_11);
                                    CAUGHT_and_14 = and_14;
                                }
                                catch (Exception e) {
                                    CAUGHT_and_14 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_12;
                                try {
                                    @SuppressWarnings("null")
                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_4 = lNameExpCS_26.getOwnedSquareBracketedClauses();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_4 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_4);
                                    final /*@Thrown*/ boolean isEmpty_12 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_4).booleanValue();
                                    CAUGHT_isEmpty_12 = isEmpty_12;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_12 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_15 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_14, CAUGHT_isEmpty_12);
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_3 = BooleanNotOperation.INSTANCE.evaluate(and_15);
                                if (not_3 == null) {
                                    throw throwNull(lNameExpCS_26, "Null if condition");
                                }
                                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                                if (not_3) {
                                    /*@Caught*/ @Nullable Object CAUGHT_and_17;
                                    try {
                                        /*@Caught*/ @Nullable Object CAUGHT_and_16;
                                        try {
                                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_13;
                                            try {
                                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_5 = lNameExpCS_26.getOwnedCurlyBracketedClause();
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_11 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_5);
                                                final /*@Thrown*/ boolean isEmpty_13 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_11).booleanValue();
                                                CAUGHT_isEmpty_13 = isEmpty_13;
                                            }
                                            catch (Exception e) {
                                                CAUGHT_isEmpty_13 = ValueUtil.createInvalidValue(e);
                                            }
                                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_14;
                                            try {
                                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_5 = lNameExpCS_26.getOwnedRoundBracketedClause();
                                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_12 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_5);
                                                final /*@Thrown*/ boolean isEmpty_14 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_12).booleanValue();
                                                CAUGHT_isEmpty_14 = isEmpty_14;
                                            }
                                            catch (Exception e) {
                                                CAUGHT_isEmpty_14 = ValueUtil.createInvalidValue(e);
                                            }
                                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_16 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_13, CAUGHT_isEmpty_14);
                                            CAUGHT_and_16 = and_16;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_and_16 = ValueUtil.createInvalidValue(e);
                                        }
                                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_15;
                                        try {
                                            @SuppressWarnings("null")
                                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_5 = lNameExpCS_26.getOwnedSquareBracketedClauses();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_5 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_5);
                                            final /*@Thrown*/ boolean isEmpty_15 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_5).booleanValue();
                                            CAUGHT_isEmpty_15 = isEmpty_15;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_isEmpty_15 = ValueUtil.createInvalidValue(e);
                                        }
                                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_17 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_16, CAUGHT_isEmpty_15);
                                        CAUGHT_and_17 = and_17;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_and_17 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_ne_4;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_26.getReferredAssociation();
                                        final /*@Thrown*/ boolean ne_4 = referredAssociation != null;
                                        CAUGHT_ne_4 = ne_4;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_ne_4 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_18 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_17, CAUGHT_ne_4);
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_4 = BooleanNotOperation.INSTANCE.evaluate(and_18);
                                    if (not_4 == null) {
                                        throw throwNull(lNameExpCS_26, "Null if condition");
                                    }
                                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                                    if (not_4) {
                                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_VariableExp_0 = idResolver.getClass(CLSSid_VariableExp, null);
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_26.getPivot();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull VariableExp aVariableExp = ClassUtil.nonNullState((VariableExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_VariableExp_0));
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_26.getPivot();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable referredVariable_0 = lNameExpCS_26.getReferredVariable();
                                        if (referredVariable_0 == null) {
                                            throw throwNull(lNameExpCS_26, "Null source for \'NamedElement::name\'");
                                        }
                                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = referredVariable_0.getName();
                                        // property assignments
                                        aVariableExp.setName(name);
                                        boolean m_NameExpCS_pivot_referredVariable_1 = ValueUtil.TRUE_VALUE;
                                        symbol_1 = m_NameExpCS_pivot_referredVariable_1;
                                    }
                                    else {
                                        symbol_1 = ValueUtil.FALSE_VALUE;
                                    }
                                    symbol_2 = symbol_1;
                                }
                                else {
                                    symbol_2 = ValueUtil.FALSE_VALUE;
                                }
                                symbol_3 = symbol_2;
                            }
                            else {
                                symbol_3 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_4 = symbol_3;
                        }
                        else {
                            symbol_4 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_5 = symbol_4;
                    }
                    else {
                        symbol_5 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_6 = symbol_5;
                }
                else {
                    symbol_6 = ValueUtil.FALSE_VALUE;
                }
                symbol_7 = symbol_6;
            }
            else {
                symbol_7 = ValueUtil.FALSE_VALUE;
            }
            return symbol_7;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredVariable_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_referredVariable_2 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isPropertyCallExp()
     *   lNameExpCS.isVariableExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isShadowExp()
     *   )
     * {aVariableExp : VariableExp[1] = lNameExpCS.pivot.oclAsType(VariableExp);
     * pivot : Element[?] = lNameExpCS.pivot;
     * referredVariable : Variable[?] = lNameExpCS.referredVariable;
     * type : Type[?] = referredVariable.type;
     *  |
     * aVariableExp.type := type;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_referredVariable_2(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_27) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_27.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_27.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_27.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_27.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_27, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_7;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_27.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_27.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty_0 = notEmpty_0;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_notEmpty_0);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_27.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_2 = isEmpty_2;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_2);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_27.getReferredOperation();
                    final /*@Thrown*/ boolean ne_0 = referredOperation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_27, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_6;
                if (not_0) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_27.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_3 = isEmpty_3;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_27.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_3, CAUGHT_isEmpty_4);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_27.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_27.getReferredProperty();
                        final /*@Thrown*/ boolean ne_1 = referredProperty != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_1 = BooleanNotOperation.INSTANCE.evaluate(and_7);
                    if (not_1 == null) {
                        throw throwNull(lNameExpCS_27, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
                    if (not_1) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_9;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_8;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_27.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_6 = isEmpty_6;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_27.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_isEmpty_7 = isEmpty_7;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_6, CAUGHT_isEmpty_7);
                                CAUGHT_and_8 = and_8;
                            }
                            catch (Exception e) {
                                CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_27.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_8 = isEmpty_8;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_isEmpty_8);
                            CAUGHT_and_9 = and_9;
                        }
                        catch (Exception e) {
                            CAUGHT_and_9 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable referredVariable = lNameExpCS_27.getReferredVariable();
                            final /*@Thrown*/ boolean ne_2 = referredVariable != null;
                            CAUGHT_ne_2 = ne_2;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_9, CAUGHT_ne_2);
                        if (and_10 == null) {
                            throw throwNull(lNameExpCS_27, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                        if (and_10) {
                            /*@Caught*/ @Nullable Object CAUGHT_and_12;
                            try {
                                /*@Caught*/ @Nullable Object CAUGHT_and_11;
                                try {
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_9;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_3 = lNameExpCS_27.getOwnedCurlyBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_7 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_9 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_7).booleanValue();
                                        CAUGHT_isEmpty_9 = isEmpty_9;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_9 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_10;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_3 = lNameExpCS_27.getOwnedRoundBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_8 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_10 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_8).booleanValue();
                                        CAUGHT_isEmpty_10 = isEmpty_10;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_10 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_11 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_9, CAUGHT_isEmpty_10);
                                    CAUGHT_and_11 = and_11;
                                }
                                catch (Exception e) {
                                    CAUGHT_and_11 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_11;
                                try {
                                    @SuppressWarnings("null")
                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_3 = lNameExpCS_27.getOwnedSquareBracketedClauses();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_3 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_3);
                                    final /*@Thrown*/ boolean isEmpty_11 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_3).booleanValue();
                                    CAUGHT_isEmpty_11 = isEmpty_11;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_11 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_12 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_11, CAUGHT_isEmpty_11);
                                CAUGHT_and_12 = and_12;
                            }
                            catch (Exception e) {
                                CAUGHT_and_12 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_ne_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_27.getReferredAssociation();
                                final /*@Thrown*/ boolean ne_3 = referredAssociation != null;
                                CAUGHT_ne_3 = ne_3;
                            }
                            catch (Exception e) {
                                CAUGHT_ne_3 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_13 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_12, CAUGHT_ne_3);
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_2 = BooleanNotOperation.INSTANCE.evaluate(and_13);
                            if (not_2 == null) {
                                throw throwNull(lNameExpCS_27, "Null if condition");
                            }
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                            if (not_2) {
                                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                                if (not) {
                                    /*@Caught*/ @Nullable Object CAUGHT_and_17;
                                    try {
                                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty_2;
                                        try {
                                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_5 = lNameExpCS_27.getOwnedCurlyBracketedClause();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_11 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_5);
                                            final /*@Thrown*/ boolean notEmpty_2 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_11).booleanValue();
                                            CAUGHT_notEmpty_2 = notEmpty_2;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_notEmpty_2 = ValueUtil.createInvalidValue(e);
                                        }
                                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_14;
                                        try {
                                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_5 = lNameExpCS_27.getOwnedRoundBracketedClause();
                                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_12 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_5);
                                            final /*@Thrown*/ boolean isEmpty_14 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_12).booleanValue();
                                            CAUGHT_isEmpty_14 = isEmpty_14;
                                        }
                                        catch (Exception e) {
                                            CAUGHT_isEmpty_14 = ValueUtil.createInvalidValue(e);
                                        }
                                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_17 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_notEmpty_2, CAUGHT_isEmpty_14);
                                        CAUGHT_and_17 = and_17;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_and_17 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_15;
                                    try {
                                        @SuppressWarnings("null")
                                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_5 = lNameExpCS_27.getOwnedSquareBracketedClauses();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_5 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_5);
                                        final /*@Thrown*/ boolean isEmpty_15 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_5).booleanValue();
                                        CAUGHT_isEmpty_15 = isEmpty_15;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_15 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_18 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_17, CAUGHT_isEmpty_15);
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_4 = BooleanNotOperation.INSTANCE.evaluate(and_18);
                                    if (not_4 == null) {
                                        throw throwNull(lNameExpCS_27, "Null if condition");
                                    }
                                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                                    if (not_4) {
                                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_VariableExp_0 = idResolver.getClass(CLSSid_VariableExp, null);
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_27.getPivot();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull VariableExp aVariableExp = ClassUtil.nonNullState((VariableExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_VariableExp_0));
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_27.getPivot();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable referredVariable_0 = lNameExpCS_27.getReferredVariable();
                                        if (referredVariable_0 == null) {
                                            throw throwNull(lNameExpCS_27, "Null source for \'TypedElement::type\'");
                                        }
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Type type = referredVariable_0.getType();
                                        // property assignments
                                        aVariableExp.setType(type);
                                        boolean m_NameExpCS_pivot_referredVariable_2 = ValueUtil.TRUE_VALUE;
                                        symbol_1 = m_NameExpCS_pivot_referredVariable_2;
                                    }
                                    else {
                                        symbol_1 = ValueUtil.FALSE_VALUE;
                                    }
                                    symbol_2 = symbol_1;
                                }
                                else {
                                    symbol_2 = ValueUtil.FALSE_VALUE;
                                }
                                symbol_3 = symbol_2;
                            }
                            else {
                                symbol_3 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_4 = symbol_3;
                        }
                        else {
                            symbol_4 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_5 = symbol_4;
                    }
                    else {
                        symbol_5 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_6 = symbol_5;
                }
                else {
                    symbol_6 = ValueUtil.FALSE_VALUE;
                }
                symbol_7 = symbol_6;
            }
            else {
                symbol_7 = ValueUtil.FALSE_VALUE;
            }
            return symbol_7;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_referredVariable_2", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_source in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * lNameExpCS.isAssociationClassExp()
     *   )
     * {aAssociationClassCallExp : AssociationClassCallExp[1] = lNameExpCS.pivot.oclAsType(AssociationClassCallExp)
     *   ;
     * pivot : Element[?] = lNameExpCS.pivot;
     * source : essentialoclcs::ExpCS[?] = lNameExpCS.source;
     * aOCLExpression : OCLExpression[1] = source.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = source.pivot;
     *  |
     * aAssociationClassCallExp.ownedSource := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_source(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_28) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_28.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_28.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_28.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_28.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            if (and_1 == null) {
                throw throwNull(lNameExpCS_28, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (and_1) {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_AssociationClassCallExp_0 = idResolver.getClass(CLSSid_AssociationClassCallExp, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_28.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull AssociationClassCallExp aAssociationClassCallExp = ClassUtil.nonNullState((AssociationClassCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_AssociationClassCallExp_0));
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_28.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS source = lNameExpCS_28.getSource();
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                if (source == null) {
                    throw throwNull(lNameExpCS_28, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = source.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = source.getPivot();
                // property assignments
                aAssociationClassCallExp.setOwnedSource(aOCLExpression);
                boolean m_NameExpCS_pivot_source = ValueUtil.TRUE_VALUE;
                symbol_1 = m_NameExpCS_pivot_source;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_source", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_source_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isIterateExp()
     *   )
     * {aIterateExp : IterateExp[1] = lNameExpCS.pivot.oclAsType(IterateExp)
     *   ;
     * pivot : Element[?] = lNameExpCS.pivot;
     * source : essentialoclcs::ExpCS[?] = lNameExpCS.source;
     * aOCLExpression : OCLExpression[1] = source.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = source.pivot;
     *  |
     * aIterateExp.ownedSource := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_source_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_29) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_29.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_29.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_29.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_29.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_29, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_29.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_29.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_29.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_29.getReferredIteration();
                    final /*@Thrown*/ boolean ne_0 = referredIteration != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                if (and_4 == null) {
                    throw throwNull(lNameExpCS_29, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (and_4) {
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IterateExp_0 = idResolver.getClass(CLSSid_IterateExp, null);
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_29.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IterateExp aIterateExp = ClassUtil.nonNullState((IterateExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IterateExp_0));
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_29.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS source = lNameExpCS_29.getSource();
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                    if (source == null) {
                        throw throwNull(lNameExpCS_29, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                    }
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = source.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = source.getPivot();
                    // property assignments
                    aIterateExp.setOwnedSource(aOCLExpression);
                    boolean m_NameExpCS_pivot_source_1 = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_NameExpCS_pivot_source_1;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_source_1", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_source_2 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   lNameExpCS.isIteratorExp()
     *   not lNameExpCS.isIterateExp()
     *   )
     * {aIteratorExp : IteratorExp[1] = lNameExpCS.pivot.oclAsType(IteratorExp)
     *   ;
     * pivot : Element[?] = lNameExpCS.pivot;
     * source : essentialoclcs::ExpCS[?] = lNameExpCS.source;
     * aOCLExpression : OCLExpression[1] = source.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = source.pivot;
     *  |
     * aIteratorExp.ownedSource := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_source_2(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_30) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_30.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_30.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_30.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_30.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_30, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_30.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_30.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_30.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_30.getReferredIteration();
                    final /*@Thrown*/ boolean ne_0 = referredIteration != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                if (and_4 == null) {
                    throw throwNull(lNameExpCS_30, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                if (and_4) {
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                    if (not_0 == null) {
                        throw throwNull(lNameExpCS_30, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                    if (not_0) {
                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_IteratorExp_0 = idResolver.getClass(CLSSid_IteratorExp, null);
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_30.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull IteratorExp aIteratorExp = ClassUtil.nonNullState((IteratorExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_IteratorExp_0));
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_30.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS source = lNameExpCS_30.getSource();
                        final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                        if (source == null) {
                            throw throwNull(lNameExpCS_30, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                        }
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = source.getPivot();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = source.getPivot();
                        // property assignments
                        aIteratorExp.setOwnedSource(aOCLExpression);
                        boolean m_NameExpCS_pivot_source_2 = ValueUtil.TRUE_VALUE;
                        symbol_1 = m_NameExpCS_pivot_source_2;
                    }
                    else {
                        symbol_1 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_2 = symbol_1;
                }
                else {
                    symbol_2 = ValueUtil.FALSE_VALUE;
                }
                symbol_3 = symbol_2;
            }
            else {
                symbol_3 = ValueUtil.FALSE_VALUE;
            }
            return symbol_3;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_source_2", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_source_3 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isAssociationClassExp()
     *   not lNameExpCS.isIteratorExp()
     *   lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIterateExp()
     *   )
     * {aOperationCallExp : OperationCallExp[1] = lNameExpCS.pivot.oclAsType(OperationCallExp)
     *   ;
     * pivot : Element[?] = lNameExpCS.pivot;
     * source : essentialoclcs::ExpCS[?] = lNameExpCS.source;
     * aOCLExpression : OCLExpression[1] = source.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = source.pivot;
     *  |
     * aOperationCallExp.ownedSource := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_source_3(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_31) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_31.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_31.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_isEmpty_0 = isEmpty_0;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_isEmpty_0);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_31.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_1 = isEmpty_1;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_1);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_31.getReferredAssociation();
                final /*@Thrown*/ boolean ne = referredAssociation != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_31, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_31.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_2 = isEmpty_2;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_31.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty = notEmpty;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_2, CAUGHT_notEmpty);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_3;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_31.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_3 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_3 = isEmpty_3;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_3 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_3);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_31.getReferredIteration();
                    final /*@Thrown*/ boolean ne_0 = referredIteration != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_31, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                if (not_0) {
                    /*@Caught*/ @Nullable Object CAUGHT_and_6;
                    try {
                        /*@Caught*/ @Nullable Object CAUGHT_and_5;
                        try {
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_4;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_1 = lNameExpCS_31.getOwnedCurlyBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_3 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_1);
                                final /*@Thrown*/ boolean isEmpty_4 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_3).booleanValue();
                                CAUGHT_isEmpty_4 = isEmpty_4;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_4 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_1 = lNameExpCS_31.getOwnedRoundBracketedClause();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_4 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_1);
                                final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_4).booleanValue();
                                CAUGHT_notEmpty_0 = notEmpty_0;
                            }
                            catch (Exception e) {
                                CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_5 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_4, CAUGHT_notEmpty_0);
                            CAUGHT_and_5 = and_5;
                        }
                        catch (Exception e) {
                            CAUGHT_and_5 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                        try {
                            @SuppressWarnings("null")
                            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_1 = lNameExpCS_31.getOwnedSquareBracketedClauses();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_1 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_1);
                            final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_1).booleanValue();
                            CAUGHT_isEmpty_5 = isEmpty_5;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_6 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_5, CAUGHT_isEmpty_5);
                        CAUGHT_and_6 = and_6;
                    }
                    catch (Exception e) {
                        CAUGHT_and_6 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_ne_1;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_31.getReferredOperation();
                        final /*@Thrown*/ boolean ne_1 = referredOperation != null;
                        CAUGHT_ne_1 = ne_1;
                    }
                    catch (Exception e) {
                        CAUGHT_ne_1 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_7 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_6, CAUGHT_ne_1);
                    if (and_7 == null) {
                        throw throwNull(lNameExpCS_31, "Null if condition");
                    }
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                    if (and_7) {
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                        if (not_0) {
                            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OperationCallExp_0 = idResolver.getClass(CLSSid_OperationCallExp, null);
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_31.getPivot();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OperationCallExp aOperationCallExp = ClassUtil.nonNullState((OperationCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_OperationCallExp_0));
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_31.getPivot();
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS source = lNameExpCS_31.getSource();
                            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                            if (source == null) {
                                throw throwNull(lNameExpCS_31, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                            }
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = source.getPivot();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = source.getPivot();
                            // property assignments
                            aOperationCallExp.setOwnedSource(aOCLExpression);
                            boolean m_NameExpCS_pivot_source_3 = ValueUtil.TRUE_VALUE;
                            symbol_1 = m_NameExpCS_pivot_source_3;
                        }
                        else {
                            symbol_1 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_2 = symbol_1;
                    }
                    else {
                        symbol_2 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_3 = symbol_2;
                }
                else {
                    symbol_3 = ValueUtil.FALSE_VALUE;
                }
                symbol_4 = symbol_3;
            }
            else {
                symbol_4 = ValueUtil.FALSE_VALUE;
            }
            return symbol_4;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_source_3", e);
        }
    }
    
    /**
     * 
     * map m_NameExpCS_pivot_source_4 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNameExpCS : essentialoclcs::NameExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lNameExpCS.isIterateExp()
     *   not lNameExpCS.isOperationCallExp()
     *   not lNameExpCS.isIteratorExp()
     *   lNameExpCS.isPropertyCallExp()
     *   not lNameExpCS.isAssociationClassExp()
     *   )
     * {aPropertyCallExp : PropertyCallExp[1] = lNameExpCS.pivot.oclAsType(PropertyCallExp)
     *   ;
     * pivot : Element[?] = lNameExpCS.pivot;
     * source : essentialoclcs::ExpCS[?] = lNameExpCS.source;
     * aOCLExpression : OCLExpression[1] = source.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = source.pivot;
     *  |
     * aPropertyCallExp.ownedSource := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_NameExpCS_pivot_source_4(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NameExpCS lNameExpCS_32) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            /*@Caught*/ @Nullable Object CAUGHT_and_0;
            try {
                /*@Caught*/ @Nullable Object CAUGHT_and;
                try {
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause = lNameExpCS_32.getOwnedCurlyBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause);
                        final /*@Thrown*/ boolean isEmpty = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet).booleanValue();
                        CAUGHT_isEmpty = isEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_notEmpty;
                    try {
                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause = lNameExpCS_32.getOwnedRoundBracketedClause();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_0 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause);
                        final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_0).booleanValue();
                        CAUGHT_notEmpty = notEmpty;
                    }
                    catch (Exception e) {
                        CAUGHT_notEmpty = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty, CAUGHT_notEmpty);
                    CAUGHT_and = and;
                }
                catch (Exception e) {
                    CAUGHT_and = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_0;
                try {
                    @SuppressWarnings("null")
                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses = lNameExpCS_32.getOwnedSquareBracketedClauses();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses);
                    final /*@Thrown*/ boolean isEmpty_0 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses).booleanValue();
                    CAUGHT_isEmpty_0 = isEmpty_0;
                }
                catch (Exception e) {
                    CAUGHT_isEmpty_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_0 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and, CAUGHT_isEmpty_0);
                CAUGHT_and_0 = and_0;
            }
            catch (Exception e) {
                CAUGHT_and_0 = ValueUtil.createInvalidValue(e);
            }
            /*@Caught*/ @NonNull Object CAUGHT_ne;
            try {
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Iteration referredIteration = lNameExpCS_32.getReferredIteration();
                final /*@Thrown*/ boolean ne = referredIteration != null;
                CAUGHT_ne = ne;
            }
            catch (Exception e) {
                CAUGHT_ne = ValueUtil.createInvalidValue(e);
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_1 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_0, CAUGHT_ne);
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(and_1);
            if (not == null) {
                throw throwNull(lNameExpCS_32, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_5;
            if (not) {
                /*@Caught*/ @Nullable Object CAUGHT_and_3;
                try {
                    /*@Caught*/ @Nullable Object CAUGHT_and_2;
                    try {
                        /*@Caught*/ @NonNull Object CAUGHT_isEmpty_1;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_0 = lNameExpCS_32.getOwnedCurlyBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_1 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_0);
                            final /*@Thrown*/ boolean isEmpty_1 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_1).booleanValue();
                            CAUGHT_isEmpty_1 = isEmpty_1;
                        }
                        catch (Exception e) {
                            CAUGHT_isEmpty_1 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_notEmpty_0;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_0 = lNameExpCS_32.getOwnedRoundBracketedClause();
                            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_2 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_0);
                            final /*@Thrown*/ boolean notEmpty_0 = CollectionNotEmptyOperation.INSTANCE.evaluate(oclAsSet_2).booleanValue();
                            CAUGHT_notEmpty_0 = notEmpty_0;
                        }
                        catch (Exception e) {
                            CAUGHT_notEmpty_0 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_2 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_1, CAUGHT_notEmpty_0);
                        CAUGHT_and_2 = and_2;
                    }
                    catch (Exception e) {
                        CAUGHT_and_2 = ValueUtil.createInvalidValue(e);
                    }
                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_2;
                    try {
                        @SuppressWarnings("null")
                        final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_0 = lNameExpCS_32.getOwnedSquareBracketedClauses();
                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_0 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_0);
                        final /*@Thrown*/ boolean isEmpty_2 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_0).booleanValue();
                        CAUGHT_isEmpty_2 = isEmpty_2;
                    }
                    catch (Exception e) {
                        CAUGHT_isEmpty_2 = ValueUtil.createInvalidValue(e);
                    }
                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_3 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_2, CAUGHT_isEmpty_2);
                    CAUGHT_and_3 = and_3;
                }
                catch (Exception e) {
                    CAUGHT_and_3 = ValueUtil.createInvalidValue(e);
                }
                /*@Caught*/ @NonNull Object CAUGHT_ne_0;
                try {
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation referredOperation = lNameExpCS_32.getReferredOperation();
                    final /*@Thrown*/ boolean ne_0 = referredOperation != null;
                    CAUGHT_ne_0 = ne_0;
                }
                catch (Exception e) {
                    CAUGHT_ne_0 = ValueUtil.createInvalidValue(e);
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_4 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_3, CAUGHT_ne_0);
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_0 = BooleanNotOperation.INSTANCE.evaluate(and_4);
                if (not_0 == null) {
                    throw throwNull(lNameExpCS_32, "Null if condition");
                }
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_4;
                if (not_0) {
                    /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_3;
                    if (not) {
                        /*@Caught*/ @Nullable Object CAUGHT_and_9;
                        try {
                            /*@Caught*/ @Nullable Object CAUGHT_and_8;
                            try {
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_5;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_2 = lNameExpCS_32.getOwnedCurlyBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_5 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_5 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_5).booleanValue();
                                    CAUGHT_isEmpty_5 = isEmpty_5;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_5 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_6;
                                try {
                                    final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_2 = lNameExpCS_32.getOwnedRoundBracketedClause();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_6 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_2);
                                    final /*@Thrown*/ boolean isEmpty_6 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_6).booleanValue();
                                    CAUGHT_isEmpty_6 = isEmpty_6;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_6 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_8 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_5, CAUGHT_isEmpty_6);
                                CAUGHT_and_8 = and_8;
                            }
                            catch (Exception e) {
                                CAUGHT_and_8 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_isEmpty_7;
                            try {
                                @SuppressWarnings("null")
                                final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_2 = lNameExpCS_32.getOwnedSquareBracketedClauses();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_2 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_2);
                                final /*@Thrown*/ boolean isEmpty_7 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_2).booleanValue();
                                CAUGHT_isEmpty_7 = isEmpty_7;
                            }
                            catch (Exception e) {
                                CAUGHT_isEmpty_7 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_9 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_8, CAUGHT_isEmpty_7);
                            CAUGHT_and_9 = and_9;
                        }
                        catch (Exception e) {
                            CAUGHT_and_9 = ValueUtil.createInvalidValue(e);
                        }
                        /*@Caught*/ @NonNull Object CAUGHT_ne_2;
                        try {
                            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredProperty = lNameExpCS_32.getReferredProperty();
                            final /*@Thrown*/ boolean ne_2 = referredProperty != null;
                            CAUGHT_ne_2 = ne_2;
                        }
                        catch (Exception e) {
                            CAUGHT_ne_2 = ValueUtil.createInvalidValue(e);
                        }
                        final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_10 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_9, CAUGHT_ne_2);
                        if (and_10 == null) {
                            throw throwNull(lNameExpCS_32, "Null if condition");
                        }
                        /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
                        if (and_10) {
                            /*@Caught*/ @Nullable Object CAUGHT_and_12;
                            try {
                                /*@Caught*/ @Nullable Object CAUGHT_and_11;
                                try {
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_8;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable CurlyBracketedClauseCS ownedCurlyBracketedClause_3 = lNameExpCS_32.getOwnedCurlyBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_7 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_CurlyBracketedClauseCS, ownedCurlyBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_8 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_7).booleanValue();
                                        CAUGHT_isEmpty_8 = isEmpty_8;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_8 = ValueUtil.createInvalidValue(e);
                                    }
                                    /*@Caught*/ @NonNull Object CAUGHT_isEmpty_9;
                                    try {
                                        final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable RoundBracketedClauseCS ownedRoundBracketedClause_3 = lNameExpCS_32.getOwnedRoundBracketedClause();
                                        final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SetValue oclAsSet_8 = OclAnyOclAsSetOperation.INSTANCE.evaluate(executor, SET_CLSSid_RoundBracketedClauseCS, ownedRoundBracketedClause_3);
                                        final /*@Thrown*/ boolean isEmpty_9 = CollectionIsEmptyOperation.INSTANCE.evaluate(oclAsSet_8).booleanValue();
                                        CAUGHT_isEmpty_9 = isEmpty_9;
                                    }
                                    catch (Exception e) {
                                        CAUGHT_isEmpty_9 = ValueUtil.createInvalidValue(e);
                                    }
                                    final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_11 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_isEmpty_8, CAUGHT_isEmpty_9);
                                    CAUGHT_and_11 = and_11;
                                }
                                catch (Exception e) {
                                    CAUGHT_and_11 = ValueUtil.createInvalidValue(e);
                                }
                                /*@Caught*/ @NonNull Object CAUGHT_isEmpty_10;
                                try {
                                    @SuppressWarnings("null")
                                    final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SquareBracketedClauseCS> ownedSquareBracketedClauses_3 = lNameExpCS_32.getOwnedSquareBracketedClauses();
                                    final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSquareBracketedClauses_3 = idResolver.createOrderedSetOfAll(ORD_CLSSid_SquareBracketedClauseCS, ownedSquareBracketedClauses_3);
                                    final /*@Thrown*/ boolean isEmpty_10 = CollectionIsEmptyOperation.INSTANCE.evaluate(BOXED_ownedSquareBracketedClauses_3).booleanValue();
                                    CAUGHT_isEmpty_10 = isEmpty_10;
                                }
                                catch (Exception e) {
                                    CAUGHT_isEmpty_10 = ValueUtil.createInvalidValue(e);
                                }
                                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_12 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_11, CAUGHT_isEmpty_10);
                                CAUGHT_and_12 = and_12;
                            }
                            catch (Exception e) {
                                CAUGHT_and_12 = ValueUtil.createInvalidValue(e);
                            }
                            /*@Caught*/ @NonNull Object CAUGHT_ne_3;
                            try {
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable AssociationClass referredAssociation = lNameExpCS_32.getReferredAssociation();
                                final /*@Thrown*/ boolean ne_3 = referredAssociation != null;
                                CAUGHT_ne_3 = ne_3;
                            }
                            catch (Exception e) {
                                CAUGHT_ne_3 = ValueUtil.createInvalidValue(e);
                            }
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean and_13 = BooleanAndOperation.INSTANCE.evaluate(CAUGHT_and_12, CAUGHT_ne_3);
                            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not_2 = BooleanNotOperation.INSTANCE.evaluate(and_13);
                            if (not_2 == null) {
                                throw throwNull(lNameExpCS_32, "Null if condition");
                            }
                            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                            if (not_2) {
                                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_PropertyCallExp_0 = idResolver.getClass(CLSSid_PropertyCallExp, null);
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNameExpCS_32.getPivot();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull PropertyCallExp aPropertyCallExp = ClassUtil.nonNullState((PropertyCallExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_PropertyCallExp_0));
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNameExpCS_32.getPivot();
                                final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS source = lNameExpCS_32.getSource();
                                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
                                if (source == null) {
                                    throw throwNull(lNameExpCS_32, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                                }
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = source.getPivot();
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
                                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = source.getPivot();
                                // property assignments
                                aPropertyCallExp.setOwnedSource(aOCLExpression);
                                boolean m_NameExpCS_pivot_source_4 = ValueUtil.TRUE_VALUE;
                                symbol_1 = m_NameExpCS_pivot_source_4;
                            }
                            else {
                                symbol_1 = ValueUtil.FALSE_VALUE;
                            }
                            symbol_2 = symbol_1;
                        }
                        else {
                            symbol_2 = ValueUtil.FALSE_VALUE;
                        }
                        symbol_3 = symbol_2;
                    }
                    else {
                        symbol_3 = ValueUtil.FALSE_VALUE;
                    }
                    symbol_4 = symbol_3;
                }
                else {
                    symbol_4 = ValueUtil.FALSE_VALUE;
                }
                symbol_5 = symbol_4;
            }
            else {
                symbol_5 = ValueUtil.FALSE_VALUE;
            }
            return symbol_5;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NameExpCS_pivot_source_4", e);
        }
    }
    
    /**
     * 
     * map m_NullLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lNullLiteralExpCS : essentialoclcs::NullLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rNullLiteralExp : NullLiteralExp[1];
     *  |}
     * where ( |)
     * { |
     * lNullLiteralExpCS.pivot := rNullLiteralExp;
     * }
     * 
     */
    protected boolean MAP_m_NullLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NullLiteralExpCS lNullLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable NullLiteralExp rNullLiteralExp = PivotFactory.eINSTANCE.createNullLiteralExp();
            assert rNullLiteralExp != null;
            models[1/*rightAS*/].add(rNullLiteralExp);
            // property assignments
            lNullLiteralExpCS.setPivot(rNullLiteralExp);
            boolean m_NullLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_NullLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NullLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_NullLiteralExpCS_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lNullLiteralExpCS : essentialoclcs::NullLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aNullLiteralExp : NullLiteralExp[1] = lNullLiteralExpCS.pivot.oclAsType(NullLiteralExp);
     * pivot : Element[?] = lNullLiteralExpCS.pivot;
     * type : Type[1] = OclVoid;
     *  |
     * aNullLiteralExp.type := type;
     * }
     * 
     */
    protected boolean MAP_m_NullLiteralExpCS_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NullLiteralExpCS lNullLiteralExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_NullLiteralExp_0 = idResolver.getClass(CLSSid_NullLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lNullLiteralExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull NullLiteralExp aNullLiteralExp = ClassUtil.nonNullState((NullLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_NullLiteralExp_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lNullLiteralExpCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OclVoid_0 = idResolver.getClass(TypeId.OCL_VOID, null);
            // property assignments
            aNullLiteralExp.setType(TYP_OclVoid_0);
            boolean m_NullLiteralExpCS_pivot_1 = ValueUtil.TRUE_VALUE;
            return m_NullLiteralExpCS_pivot_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NullLiteralExpCS_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_NumberLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lNumberLiteralExpCS : essentialoclcs::NumberLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rIntegerLiteralExp : IntegerLiteralExp[1];
     *  |}
     * where ( |)
     * { |
     * lNumberLiteralExpCS.pivot := rIntegerLiteralExp;
     * }
     * 
     */
    protected boolean MAP_m_NumberLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull NumberLiteralExpCS lNumberLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable IntegerLiteralExp rIntegerLiteralExp = PivotFactory.eINSTANCE.createIntegerLiteralExp();
            assert rIntegerLiteralExp != null;
            models[1/*rightAS*/].add(rIntegerLiteralExp);
            // property assignments
            lNumberLiteralExpCS.setPivot(rIntegerLiteralExp);
            boolean m_NumberLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_NumberLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_NumberLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_OperationCS_name_ownedAnnotations_ownedException in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lOperationCS : basecs::OperationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aOperation : Operation[1] = lOperationCS.pivot.oclAsType(Operation)
     *   ;
     * name : String[?] = lOperationCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lOperationCS.ownedAnnotations;
     * ownedExceptions : OrderedSet(basecs::TypedRefCS) = lOperationCS.ownedExceptions;
     * ownedParameters : OrderedSet(basecs::ParameterCS) = lOperationCS.ownedParameters;
     * ownedPostconditions : OrderedSet(basecs::ConstraintCS) = lOperationCS.ownedPostconditions;
     * ownedPreconditions : OrderedSet(basecs::ConstraintCS) = lOperationCS.ownedPreconditions;
     * pivot : Element[?] = lOperationCS.pivot;
     * qualifiers : OrderedSet(String) = lOperationCS.qualifiers;
     * includes : Boolean[1] = qualifiers->includes('static')
     *   ;
     * _'\u00ABcollect\u00BB' : Sequence(Class) = ownedExceptions->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Class))
     *   ;
     * _'\u00ABcollect\u00BB1' : Sequence(Constraint) = ownedPreconditions->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Constraint))
     *   ;
     * _'\u00ABcollect\u00BB2' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot)
     *   ;
     * _'\u00ABcollect\u00BB3' : Sequence(Constraint) = ownedPostconditions->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Constraint))
     *   ;
     * _'\u00ABcollect\u00BB4' : Sequence(Parameter) = ownedParameters->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Parameter));
     *  |
     * aOperation.isStatic := includes;
     * aOperation.name := name;
     * aOperation.ownedAnnotations := _'\u00ABcollect\u00BB2';
     * aOperation.ownedParameters := _'\u00ABcollect\u00BB4';
     * aOperation.ownedPostconditions := _'\u00ABcollect\u00BB3';
     * aOperation.ownedPreconditions := _'\u00ABcollect\u00BB1';
     * aOperation.raisedExceptions := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_OperationCS_name_ownedAnnotations_ownedException(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS lOperationCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Operation_0 = idResolver.getClass(CLSSid_Operation, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lOperationCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Operation aOperation = ClassUtil.nonNullState((Operation)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Operation_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lOperationCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lOperationCS.getOwnedAnnotations();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TypedRefCS> ownedExceptions = lOperationCS.getOwnedExceptions();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ParameterCS> ownedParameters = lOperationCS.getOwnedParameters();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ConstraintCS> ownedPostconditions = lOperationCS.getOwnedPostconditions();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ConstraintCS> ownedPreconditions = lOperationCS.getOwnedPreconditions();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lOperationCS.getPivot();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<String> qualifiers = lOperationCS.getQualifiers();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_qualifiers = idResolver.createOrderedSetOfAll(ORD_PRIMid_String, qualifiers);
            final /*@Thrown*/ boolean includes = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_static).booleanValue();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedExceptions = idResolver.createOrderedSetOfAll(ORD_CLSSid_TypedRefCS, ownedExceptions);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Class);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedExceptions.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS _1 = (TypedRefCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(Class)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
                if (_1 == null) {
                    throw throwNull(lOperationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class oclAsType = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
                //
                accumulator.add(oclAsType);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedPreconditions = idResolver.createOrderedSetOfAll(ORD_CLSSid_ConstraintCS, ownedPreconditions);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_0 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Constraint);
            @Nullable Iterator<Object> ITERATOR__1_0 = BOXED_ownedPreconditions.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_1;
            while (true) {
                if (!ITERATOR__1_0.hasNext()) {
                    _171_collect_187_1 = accumulator_0;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ConstraintCS _1_0 = (ConstraintCS)ITERATOR__1_0.next();
                /**
                 * _'1_'.pivot.oclAsType(Constraint)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Constraint_0 = idResolver.getClass(CLSSid_Constraint, null);
                if (_1_0 == null) {
                    throw throwNull(lOperationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_2 = _1_0.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Constraint oclAsType_0 = ClassUtil.nonNullState((Constraint)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_2, TYP_Constraint_0));
                //
                accumulator_0.add(oclAsType_0);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_1 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1_1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_2;
            while (true) {
                if (!ITERATOR__1_1.hasNext()) {
                    _171_collect_187_2 = accumulator_1;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1_1 = (AnnotationElementCS)ITERATOR__1_1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1_1 == null) {
                    throw throwNull(lOperationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_3 = _1_1.getPivot();
                //
                accumulator_1.add(pivot_3);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedPostconditions = idResolver.createOrderedSetOfAll(ORD_CLSSid_ConstraintCS, ownedPostconditions);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_2 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Constraint);
            @Nullable Iterator<Object> ITERATOR__1_2 = BOXED_ownedPostconditions.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_3;
            while (true) {
                if (!ITERATOR__1_2.hasNext()) {
                    _171_collect_187_3 = accumulator_2;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ConstraintCS _1_2 = (ConstraintCS)ITERATOR__1_2.next();
                /**
                 * _'1_'.pivot.oclAsType(Constraint)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Constraint_1 = idResolver.getClass(CLSSid_Constraint, null);
                if (_1_2 == null) {
                    throw throwNull(lOperationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_4 = _1_2.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Constraint oclAsType_1 = ClassUtil.nonNullState((Constraint)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_4, TYP_Constraint_1));
                //
                accumulator_2.add(oclAsType_1);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedParameters = idResolver.createOrderedSetOfAll(ORD_CLSSid_ParameterCS, ownedParameters);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_3 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Parameter);
            @Nullable Iterator<Object> ITERATOR__1_3 = BOXED_ownedParameters.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_4;
            while (true) {
                if (!ITERATOR__1_3.hasNext()) {
                    _171_collect_187_4 = accumulator_3;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ParameterCS _1_3 = (ParameterCS)ITERATOR__1_3.next();
                /**
                 * _'1_'.pivot.oclAsType(Parameter)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Parameter_0 = idResolver.getClass(CLSSid_Parameter, null);
                if (_1_3 == null) {
                    throw throwNull(lOperationCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_5 = _1_3.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Parameter oclAsType_2 = ClassUtil.nonNullState((Parameter)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_5, TYP_Parameter_0));
                //
                accumulator_3.add(oclAsType_2);
            }
            // property assignments
            aOperation.setIsStatic(includes);
            aOperation.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187_2 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187_2);
            aOperation.getOwnedAnnotations().addAll(ECORE__171_collect_187_2);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Parameter> ECORE__171_collect_187_4 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Parameter.class, _171_collect_187_4);
            aOperation.getOwnedParameters().addAll(ECORE__171_collect_187_4);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Constraint> ECORE__171_collect_187_3 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Constraint.class, _171_collect_187_3);
            aOperation.getOwnedPostconditions().addAll(ECORE__171_collect_187_3);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Constraint> ECORE__171_collect_187_1 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Constraint.class, _171_collect_187_1);
            aOperation.getOwnedPreconditions().addAll(ECORE__171_collect_187_1);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Class> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Class.class, _171_collect_187);
            aOperation.getRaisedExceptions().addAll(ECORE__171_collect_187);
            boolean m_OperationCS_name_ownedAnnotations_ownedException = ValueUtil.TRUE_VALUE;
            return m_OperationCS_name_ownedAnnotations_ownedException;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_OperationCS_name_ownedAnnotations_ownedException", e);
        }
    }
    
    /**
     * 
     * map m_OperationCS_ownedBodyExpressions_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lOperationCS : basecs::OperationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aOperation : Operation[1] = lOperationCS.pivot.oclAsType(Operation)
     *   ;
     * ownedBodyExpressions : OrderedSet(basecs::SpecificationCS) = lOperationCS.ownedBodyExpressions;
     * pivot : Element[?] = lOperationCS.pivot;
     * bodyExpression : LanguageExpression[1] = ownedBodyExpressions->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(LanguageExpression))
     *   ->oclAsType(LanguageExpression);
     *  |
     * aOperation.bodyExpression := bodyExpression;
     * }
     * 
     */
    protected boolean MAP_m_OperationCS_ownedBodyExpressions_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS lOperationCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Operation_0 = idResolver.getClass(CLSSid_Operation, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lOperationCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Operation aOperation = ClassUtil.nonNullState((Operation)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Operation_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SpecificationCS> ownedBodyExpressions = lOperationCS_0.getOwnedBodyExpressions();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lOperationCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LanguageExpression_1 = idResolver.getClass(CLSSid_LanguageExpression, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedBodyExpressions = idResolver.createOrderedSetOfAll(ORD_CLSSid_SpecificationCS, ownedBodyExpressions);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_LanguageExpression);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedBodyExpressions.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue collect;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    collect = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable SpecificationCS _1 = (SpecificationCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(LanguageExpression)
                 */
                if (_1 == null) {
                    throw throwNull(lOperationCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LanguageExpression oclAsType = ClassUtil.nonNullState((LanguageExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_LanguageExpression_1));
                //
                accumulator.add(oclAsType);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LanguageExpression bodyExpression = ClassUtil.nonNullState((LanguageExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, collect, TYP_LanguageExpression_1));
            // property assignments
            aOperation.setBodyExpression(bodyExpression);
            boolean m_OperationCS_ownedBodyExpressions_pivot = ValueUtil.TRUE_VALUE;
            return m_OperationCS_ownedBodyExpressions_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_OperationCS_ownedBodyExpressions_pivot", e);
        }
    }
    
    /**
     * 
     * map m_OperationCS_ownedSignature_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lOperationCS : basecs::OperationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aOperation : Operation[1] = lOperationCS.pivot.oclAsType(Operation)
     *   ;
     * ownedSignature : basecs::TemplateSignatureCS[?] = lOperationCS.ownedSignature;
     * pivot : Element[?] = lOperationCS.pivot;
     * aTemplateSignature : TemplateSignature[1] = ownedSignature.pivot.oclAsType(TemplateSignature);
     * pivot1 : Element[?] = ownedSignature.pivot;
     *  |
     * aTemplateSignature.owningElement := aOperation;
     * }
     * 
     */
    protected boolean MAP_m_OperationCS_ownedSignature_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS lOperationCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Operation_0 = idResolver.getClass(CLSSid_Operation, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lOperationCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Operation aOperation = ClassUtil.nonNullState((Operation)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Operation_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TemplateSignatureCS ownedSignature = lOperationCS_1.getOwnedSignature();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lOperationCS_1.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateSignature_0 = idResolver.getClass(CLSSid_TemplateSignature, null);
            if (ownedSignature == null) {
                throw throwNull(lOperationCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedSignature.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateSignature aTemplateSignature = ClassUtil.nonNullState((TemplateSignature)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_TemplateSignature_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedSignature.getPivot();
            // property assignments
            aTemplateSignature.setOwningElement(aOperation);
            boolean m_OperationCS_ownedSignature_pivot = ValueUtil.TRUE_VALUE;
            return m_OperationCS_ownedSignature_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_OperationCS_ownedSignature_pivot", e);
        }
    }
    
    /**
     * 
     * map m_OperationCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lOperationCS : basecs::OperationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aOperation : Operation[1] = lOperationCS.pivot.oclAsType(Operation)
     *   ;
     * ownedType : basecs::TypedRefCS[?] = lOperationCS.ownedType;
     * pivot : Element[?] = lOperationCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aOperation.type := aClass;
     * }
     * 
     */
    protected boolean MAP_m_OperationCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS lOperationCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Operation_0 = idResolver.getClass(CLSSid_Operation, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lOperationCS_2.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Operation aOperation = ClassUtil.nonNullState((Operation)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Operation_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lOperationCS_2.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lOperationCS_2.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedType == null) {
                throw throwNull(lOperationCS_2, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aOperation.setType(aClass);
            boolean m_OperationCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_OperationCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_OperationCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_OperationCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lOperationCS : basecs::OperationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rOperation : Operation[1];
     *  |}
     * where ( |)
     * { |
     * lOperationCS.pivot := rOperation;
     * }
     * 
     */
    protected boolean MAP_m_OperationCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull OperationCS lOperationCS_3) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Operation rOperation = PivotFactory.eINSTANCE.createOperation();
            assert rOperation != null;
            models[1/*rightAS*/].add(rOperation);
            // property assignments
            lOperationCS_3.setPivot(rOperation);
            boolean m_OperationCS_pivot = ValueUtil.TRUE_VALUE;
            return m_OperationCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_OperationCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_PackageCS_name_nsPrefix_nsURI_ownedAnnotations_o in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lPackageCS : basecs::PackageCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aPackage : Package[1] = lPackageCS.pivot.oclAsType(Package)
     *   ;
     * name : String[?] = lPackageCS.name;
     * nsPrefix : String[?] = lPackageCS.nsPrefix;
     * nsURI : String[?] = lPackageCS.nsURI;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lPackageCS.ownedAnnotations;
     * ownedClasses : OrderedSet(basecs::ClassCS) = lPackageCS.ownedClasses;
     * ownedPackages : OrderedSet(basecs::PackageCS) = lPackageCS.ownedPackages;
     * pivot : Element[?] = lPackageCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Package) = ownedPackages->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Package))
     *   ;
     * _'\u00ABcollect\u00BB1' : Sequence(Class) = ownedClasses->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Class))
     *   ;
     * _'\u00ABcollect\u00BB2' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot);
     *  |
     * aPackage.URI := nsURI;
     * aPackage.name := name;
     * aPackage.nsPrefix := nsPrefix;
     * aPackage.ownedAnnotations := _'\u00ABcollect\u00BB2';
     * aPackage.ownedClasses := _'\u00ABcollect\u00BB1';
     * aPackage.ownedPackages := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_PackageCS_name_nsPrefix_nsURI_ownedAnnotations_o(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PackageCS lPackageCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Package_0 = idResolver.getClass(CLSSid_Package, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lPackageCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Package aPackage = ClassUtil.nonNullState((Package)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Package_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lPackageCS.getName();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String nsPrefix = lPackageCS.getNsPrefix();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String nsURI = lPackageCS.getNsURI();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lPackageCS.getOwnedAnnotations();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ClassCS> ownedClasses = lPackageCS.getOwnedClasses();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<PackageCS> ownedPackages = lPackageCS.getOwnedPackages();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lPackageCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedPackages = idResolver.createOrderedSetOfAll(ORD_CLSSid_PackageCS, ownedPackages);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Package);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedPackages.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable PackageCS _1 = (PackageCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(Package)
                 */
                if (_1 == null) {
                    throw throwNull(lPackageCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Package oclAsType = ClassUtil.nonNullState((Package)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Package_0));
                //
                accumulator.add(oclAsType);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedClasses = idResolver.createOrderedSetOfAll(ORD_CLSSid_ClassCS, ownedClasses);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_0 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Class);
            @Nullable Iterator<Object> ITERATOR__1_0 = BOXED_ownedClasses.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_1;
            while (true) {
                if (!ITERATOR__1_0.hasNext()) {
                    _171_collect_187_1 = accumulator_0;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ClassCS _1_0 = (ClassCS)ITERATOR__1_0.next();
                /**
                 * _'1_'.pivot.oclAsType(Class)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
                if (_1_0 == null) {
                    throw throwNull(lPackageCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_2 = _1_0.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class oclAsType_0 = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_2, TYP_Class_0));
                //
                accumulator_0.add(oclAsType_0);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_1 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1_1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_2;
            while (true) {
                if (!ITERATOR__1_1.hasNext()) {
                    _171_collect_187_2 = accumulator_1;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1_1 = (AnnotationElementCS)ITERATOR__1_1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1_1 == null) {
                    throw throwNull(lPackageCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_3 = _1_1.getPivot();
                //
                accumulator_1.add(pivot_3);
            }
            // property assignments
            aPackage.setURI(nsURI);
            aPackage.setName(name);
            aPackage.setNsPrefix(nsPrefix);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187_2 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187_2);
            aPackage.getOwnedAnnotations().addAll(ECORE__171_collect_187_2);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Class> ECORE__171_collect_187_1 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Class.class, _171_collect_187_1);
            aPackage.getOwnedClasses().addAll(ECORE__171_collect_187_1);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Package> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Package.class, _171_collect_187);
            aPackage.getOwnedPackages().addAll(ECORE__171_collect_187);
            boolean m_PackageCS_name_nsPrefix_nsURI_ownedAnnotations_o = ValueUtil.TRUE_VALUE;
            return m_PackageCS_name_nsPrefix_nsURI_ownedAnnotations_o;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_PackageCS_name_nsPrefix_nsURI_ownedAnnotations_o", e);
        }
    }
    
    /**
     * 
     * map m_PackageCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lPackageCS : basecs::PackageCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rPackage : Package[1];
     *  |}
     * where ( |)
     * { |
     * lPackageCS.pivot := rPackage;
     * }
     * 
     */
    protected boolean MAP_m_PackageCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PackageCS lPackageCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Package rPackage = PivotFactory.eINSTANCE.createPackage();
            assert rPackage != null;
            models[1/*rightAS*/].add(rPackage);
            // property assignments
            lPackageCS_0.setPivot(rPackage);
            boolean m_PackageCS_pivot = ValueUtil.TRUE_VALUE;
            return m_PackageCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_PackageCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ParameterCS_name_ownedAnnotations_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lParameterCS : basecs::ParameterCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aParameter : Parameter[1] = lParameterCS.pivot.oclAsType(Parameter)
     *   ;
     * name : String[?] = lParameterCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lParameterCS.ownedAnnotations;
     * pivot : Element[?] = lParameterCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot);
     *  |
     * aParameter.name := name;
     * aParameter.ownedAnnotations := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_ParameterCS_name_ownedAnnotations_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ParameterCS lParameterCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Parameter_0 = idResolver.getClass(CLSSid_Parameter, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lParameterCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Parameter aParameter = ClassUtil.nonNullState((Parameter)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Parameter_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lParameterCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lParameterCS.getOwnedAnnotations();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lParameterCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1 = (AnnotationElementCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1 == null) {
                    throw throwNull(lParameterCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                //
                accumulator.add(pivot_1);
            }
            // property assignments
            aParameter.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187);
            aParameter.getOwnedAnnotations().addAll(ECORE__171_collect_187);
            boolean m_ParameterCS_name_ownedAnnotations_pivot = ValueUtil.TRUE_VALUE;
            return m_ParameterCS_name_ownedAnnotations_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ParameterCS_name_ownedAnnotations_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ParameterCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lParameterCS : basecs::ParameterCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aParameter : Parameter[1] = lParameterCS.pivot.oclAsType(Parameter)
     *   ;
     * ownedType : basecs::TypedRefCS[?] = lParameterCS.ownedType;
     * pivot : Element[?] = lParameterCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aParameter.type := aClass;
     * }
     * 
     */
    protected boolean MAP_m_ParameterCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ParameterCS lParameterCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Parameter_0 = idResolver.getClass(CLSSid_Parameter, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lParameterCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Parameter aParameter = ClassUtil.nonNullState((Parameter)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Parameter_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lParameterCS_0.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lParameterCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedType == null) {
                throw throwNull(lParameterCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aParameter.setType(aClass);
            objectManager.assigned(aParameter, PivotPackage.Literals.TYPED_ELEMENT__TYPE, aClass, null);
            boolean m_ParameterCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_ParameterCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ParameterCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ParameterCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lParameterCS : basecs::ParameterCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rParameter : Parameter[1];
     *  |}
     * where ( |)
     * { |
     * lParameterCS.pivot := rParameter;
     * }
     * 
     */
    protected boolean MAP_m_ParameterCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ParameterCS lParameterCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Parameter rParameter = PivotFactory.eINSTANCE.createParameter();
            assert rParameter != null;
            models[1/*rightAS*/].add(rParameter);
            // property assignments
            lParameterCS_1.setPivot(rParameter);
            boolean m_ParameterCS_pivot = ValueUtil.TRUE_VALUE;
            return m_ParameterCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ParameterCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_PrimitiveTypeRefCS_name_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lPrimitiveTypeRefCS : basecs::PrimitiveTypeRefCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aPrimitiveType : PrimitiveType[1] = lPrimitiveTypeRefCS.pivot.oclAsType(PrimitiveType);
     * name : String[?] = lPrimitiveTypeRefCS.name;
     * pivot : Element[?] = lPrimitiveTypeRefCS.pivot;
     *  |
     * aPrimitiveType.name := name;
     * }
     * 
     */
    protected boolean MAP_m_PrimitiveTypeRefCS_name_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PrimitiveTypeRefCS lPrimitiveTypeRefCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_PrimitiveType_0 = idResolver.getClass(CLSSid_PrimitiveType, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lPrimitiveTypeRefCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull PrimitiveType aPrimitiveType = ClassUtil.nonNullState((PrimitiveType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_PrimitiveType_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lPrimitiveTypeRefCS.getName();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lPrimitiveTypeRefCS.getPivot();
            // property assignments
            aPrimitiveType.setName(name);
            boolean m_PrimitiveTypeRefCS_name_pivot = ValueUtil.TRUE_VALUE;
            return m_PrimitiveTypeRefCS_name_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_PrimitiveTypeRefCS_name_pivot", e);
        }
    }
    
    /**
     * 
     * map m_PrimitiveTypeRefCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lPrimitiveTypeRefCS : basecs::PrimitiveTypeRefCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rPrimitiveType : PrimitiveType[1];
     *  |}
     * where ( |)
     * { |
     * lPrimitiveTypeRefCS.pivot := rPrimitiveType;
     * }
     * 
     */
    protected boolean MAP_m_PrimitiveTypeRefCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull PrimitiveTypeRefCS lPrimitiveTypeRefCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable PrimitiveType rPrimitiveType = PivotFactory.eINSTANCE.createPrimitiveType();
            assert rPrimitiveType != null;
            models[1/*rightAS*/].add(rPrimitiveType);
            // property assignments
            lPrimitiveTypeRefCS_0.setPivot(rPrimitiveType);
            boolean m_PrimitiveTypeRefCS_pivot = ValueUtil.TRUE_VALUE;
            return m_PrimitiveTypeRefCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_PrimitiveTypeRefCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ReferenceCS_default_name_ownedAnnotations_pivot_ in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lReferenceCS : basecs::ReferenceCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lReferenceCS.pivot.oclAsType(Property)
     *   ;
     * default : String[?] = lReferenceCS.default;
     * name : String[?] = lReferenceCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lReferenceCS.ownedAnnotations;
     * pivot : Element[?] = lReferenceCS.pivot;
     * qualifiers : OrderedSet(String) = lReferenceCS.qualifiers;
     * referredKeys : OrderedSet(Property) = lReferenceCS.referredKeys;
     * includes : Boolean[1] = qualifiers->includes('transient')
     *   ;
     * includes1 : Boolean[1] = qualifiers->includes('compososes')
     *   ;
     * includes2 : Boolean[1] = qualifiers->includes('static')
     *   ;
     * includes3 : Boolean[1] = qualifiers->includes('volatile')
     *   ;
     * includes4 : Boolean[1] = qualifiers->includes('unsettable')
     *   ;
     * includes5 : Boolean[1] = qualifiers->includes('derived')
     *   ;
     * includes6 : Boolean[1] = qualifiers->includes('readonly')
     *   ;
     * _'\u00ABcollect\u00BB' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot)
     *   ;
     * _'\u00ABexists\u00BB' : Boolean[?] = qualifiers->exists(x | x = '!resolve');
     * _'not' : Boolean[?] = not _'\u00ABexists\u00BB';
     *  |
     * aProperty.defaultValueString := default;
     * aProperty.isComposite := includes1;
     * aProperty.isDerived := includes5;
     * aProperty.isReadOnly := includes6;
     * aProperty.isResolveProxies := _'not';
     * aProperty.isStatic := includes2;
     * aProperty.isTransient := includes;
     * aProperty.isUnsettable := includes4;
     * aProperty.isVolatile := includes3;
     * aProperty.keys := referredKeys;
     * aProperty.name := name;
     * aProperty.ownedAnnotations := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_ReferenceCS_default_name_ownedAnnotations_pivot_(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS lReferenceCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lReferenceCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String symbol_0 = lReferenceCS.getDefault();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lReferenceCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lReferenceCS.getOwnedAnnotations();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lReferenceCS.getPivot();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<String> qualifiers = lReferenceCS.getQualifiers();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Property> referredKeys = lReferenceCS.getReferredKeys();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_qualifiers = idResolver.createOrderedSetOfAll(ORD_PRIMid_String, qualifiers);
            final /*@Thrown*/ boolean includes = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_transient).booleanValue();
            final /*@Thrown*/ boolean includes1 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_compososes).booleanValue();
            final /*@Thrown*/ boolean includes2 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_static).booleanValue();
            final /*@Thrown*/ boolean includes3 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_volatile).booleanValue();
            final /*@Thrown*/ boolean includes4 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_unsettable).booleanValue();
            final /*@Thrown*/ boolean includes5 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_derived).booleanValue();
            final /*@Thrown*/ boolean includes6 = CollectionIncludesOperation.INSTANCE.evaluate(BOXED_qualifiers, STR_readonly).booleanValue();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1 = (AnnotationElementCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1 == null) {
                    throw throwNull(lReferenceCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                //
                accumulator.add(pivot_1);
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Object accumulator_0 = ValueUtil.FALSE_VALUE;
            @Nullable Iterator<Object> ITERATOR_x = BOXED_qualifiers.iterator();
            /*@Thrown*/ boolean _171_exists_187;
            while (true) {
                if (!ITERATOR_x.hasNext()) {
                    if (accumulator_0 == ValueUtil.FALSE_VALUE) {
                        _171_exists_187 = ValueUtil.FALSE_VALUE;
                    }
                    else {
                        throw (InvalidValueException)accumulator_0;
                    }
                    break;
                }
                /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.Nullable String x = (String)ITERATOR_x.next();
                /**
                 * x = '!resolve'
                 */
                final /*@NonInvalid*/ boolean symbol_1 = STR__33_resolve.equals(x);
                //
                if (symbol_1 == ValueUtil.TRUE_VALUE) {					// Normal successful body evaluation result
                    _171_exists_187 = ValueUtil.TRUE_VALUE;
                    break;														// Stop immediately 
                }
                else if (symbol_1 == ValueUtil.FALSE_VALUE) {				// Normal unsuccessful body evaluation result
                    ;															// Carry on
                }
                else {															// Impossible badly typed result
                    accumulator_0 = new InvalidValueException(PivotMessages.NonBooleanBody, "exists");
                }
            }
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(_171_exists_187);
            // property assignments
            aProperty.setDefaultValueString(symbol_0);
            aProperty.setIsComposite(includes1);
            aProperty.setIsDerived(includes5);
            aProperty.setIsReadOnly(includes6);
            if (not == null) {
                throw throwNull(lReferenceCS, "Null value");
            }
            aProperty.setIsResolveProxies(not);
            aProperty.setIsStatic(includes2);
            aProperty.setIsTransient(includes);
            aProperty.setIsUnsettable(includes4);
            aProperty.setIsVolatile(includes3);
            aProperty.getKeys().addAll(referredKeys);
            aProperty.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187);
            aProperty.getOwnedAnnotations().addAll(ECORE__171_collect_187);
            boolean m_ReferenceCS_default_name_ownedAnnotations_pivot_ = ValueUtil.TRUE_VALUE;
            return m_ReferenceCS_default_name_ownedAnnotations_pivot_;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ReferenceCS_default_name_ownedAnnotations_pivot_", e);
        }
    }
    
    /**
     * 
     * map m_ReferenceCS_ownedDefaultExpressions_ownedDefault in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lReferenceCS : basecs::ReferenceCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lReferenceCS.pivot.oclAsType(Property)
     *   ;
     * ownedDefaultExpressions : OrderedSet(basecs::SpecificationCS) = lReferenceCS.ownedDefaultExpressions;
     * pivot : Element[?] = lReferenceCS.pivot;
     * notEmpty : Boolean[1] = ownedDefaultExpressions->notEmpty()
     *   ;
     * ownedExpression : LanguageExpression[?] = if notEmpty
     *   then
     *     ownedDefaultExpressions->collect(_'1_' |
     *       _'1_'.pivot.oclAsType(LanguageExpression))
     *     ->first()
     *   else null
     *   endif;
     *  |
     * aProperty.ownedExpression := ownedExpression;
     * }
     * 
     */
    protected boolean MAP_m_ReferenceCS_ownedDefaultExpressions_ownedDefault(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS lReferenceCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lReferenceCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<SpecificationCS> ownedDefaultExpressions = lReferenceCS_0.getOwnedDefaultExpressions();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lReferenceCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedDefaultExpressions = idResolver.createOrderedSetOfAll(ORD_CLSSid_SpecificationCS, ownedDefaultExpressions);
            final /*@Thrown*/ boolean notEmpty = CollectionNotEmptyOperation.INSTANCE.evaluate(BOXED_ownedDefaultExpressions).booleanValue();
            /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable LanguageExpression ownedExpression;
            if (notEmpty) {
                /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_LanguageExpression);
                @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedDefaultExpressions.iterator();
                /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue collect;
                while (true) {
                    if (!ITERATOR__1.hasNext()) {
                        collect = accumulator;
                        break;
                    }
                    /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable SpecificationCS _1 = (SpecificationCS)ITERATOR__1.next();
                    /**
                     * _'1_'.pivot.oclAsType(LanguageExpression)
                     */
                    final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_LanguageExpression_0 = idResolver.getClass(CLSSid_LanguageExpression, null);
                    if (_1 == null) {
                        throw throwNull(lReferenceCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                    }
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull LanguageExpression oclAsType = ClassUtil.nonNullState((LanguageExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_LanguageExpression_0));
                    //
                    accumulator.add(oclAsType);
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable LanguageExpression first = (LanguageExpression)OrderedCollectionFirstOperation.INSTANCE.evaluate(collect);
                ownedExpression = first;
            }
            else {
                ownedExpression = null;
            }
            // property assignments
            aProperty.setOwnedExpression(ownedExpression);
            boolean m_ReferenceCS_ownedDefaultExpressions_ownedDefault = ValueUtil.TRUE_VALUE;
            return m_ReferenceCS_ownedDefaultExpressions_ownedDefault;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ReferenceCS_ownedDefaultExpressions_ownedDefault", e);
        }
    }
    
    /**
     * 
     * map m_ReferenceCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lReferenceCS : basecs::ReferenceCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lReferenceCS.pivot.oclAsType(Property)
     *   ;
     * ownedType : basecs::TypedRefCS[?] = lReferenceCS.ownedType;
     * pivot : Element[?] = lReferenceCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aProperty.type := aClass;
     * }
     * 
     */
    protected boolean MAP_m_ReferenceCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS lReferenceCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lReferenceCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lReferenceCS_1.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lReferenceCS_1.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedType == null) {
                throw throwNull(lReferenceCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aProperty.setType(aClass);
            boolean m_ReferenceCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_ReferenceCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ReferenceCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ReferenceCS_ownedType_pivot_referredOpposite in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lReferenceCS : basecs::ReferenceCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lReferenceCS.pivot.oclAsType(Property);
     * pivot : Element[?] = lReferenceCS.pivot;
     * referredOpposite : Property[?] = lReferenceCS.referredOpposite;
     * _'<>' : Boolean[1] = referredOpposite <>
     *   null;
     * opposite : Property[?] = if _'<>'
     *   then referredOpposite
     *   else
     *     Property{
     *       name = aProperty.owningClass.name, isImplicit = true, isRequired = false, owningClass = lReferenceCS.ownedType.pivot.oclAsType(Class)
     *     }
     *   endif;
     *  |
     * aProperty.opposite := opposite;
     * }
     * 
     */
    protected boolean MAP_m_ReferenceCS_ownedType_pivot_referredOpposite(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS lReferenceCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lReferenceCS_2.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lReferenceCS_2.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property referredOpposite = lReferenceCS_2.getReferredOpposite();
            final /*@Thrown*/ boolean ne = referredOpposite != null;
            /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property opposite;
            if (ne) {
                opposite = referredOpposite;
            }
            else {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property CTORid_isImplicit = idResolver.getProperty(PROPid_isImplicit);
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property CTORid_isRequired = idResolver.getProperty(PROPid_isRequired);
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property CTORid_name = idResolver.getProperty(PROPid_name);
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property CTORid_owningClass = idResolver.getProperty(PROPid_owningClass);
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property symbol_4 = (Property)TYP_Property_0.createInstance();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Class owningClass = aProperty.getOwningClass();
                if (owningClass == null) {
                    throw throwNull(lReferenceCS_2, "Null source for \'NamedElement::name\'");
                }
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = owningClass.getName();
                CTORid_name.initValue(symbol_4, name);
                CTORid_isImplicit.initValue(symbol_4, ValueUtil.TRUE_VALUE);
                CTORid_isRequired.initValue(symbol_4, ValueUtil.FALSE_VALUE);
                final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lReferenceCS_2.getOwnedType();
                if (ownedType == null) {
                    throw throwNull(lReferenceCS_2, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class oclAsType = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
                CTORid_owningClass.initValue(symbol_4, oclAsType);
                opposite = symbol_4;
            }
            // property assignments
            aProperty.setOpposite(opposite);
            boolean m_ReferenceCS_ownedType_pivot_referredOpposite = ValueUtil.TRUE_VALUE;
            return m_ReferenceCS_ownedType_pivot_referredOpposite;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ReferenceCS_ownedType_pivot_referredOpposite", e);
        }
    }
    
    /**
     * 
     * map m_ReferenceCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lReferenceCS : basecs::ReferenceCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rProperty : Property[1];
     *  |}
     * where ( |)
     * { |
     * lReferenceCS.pivot := rProperty;
     * }
     * 
     */
    protected boolean MAP_m_ReferenceCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull ReferenceCS lReferenceCS_3) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property rProperty = PivotFactory.eINSTANCE.createProperty();
            assert rProperty != null;
            models[1/*rightAS*/].add(rProperty);
            // property assignments
            lReferenceCS_3.setPivot(rProperty);
            boolean m_ReferenceCS_pivot = ValueUtil.TRUE_VALUE;
            return m_ReferenceCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ReferenceCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_RootPackageCS_ownedImports_ownedPackages_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lRootPackageCS : basecs::RootPackageCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aModel : Model[1] = lRootPackageCS.pivot.oclAsType(Model)
     *   ;
     * ownedImports : OrderedSet(basecs::ImportCS) = lRootPackageCS.ownedImports;
     * ownedPackages : OrderedSet(basecs::PackageCS) = lRootPackageCS.ownedPackages;
     * pivot : Element[?] = lRootPackageCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Import) = ownedImports->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Import))
     *   ;
     * _'\u00ABcollect\u00BB1' : Sequence(Package) = ownedPackages->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Package));
     *  |
     * aModel.ownedImports := _'\u00ABcollect\u00BB';
     * aModel.ownedPackages := _'\u00ABcollect\u00BB1';
     * }
     * 
     */
    protected boolean MAP_m_RootPackageCS_ownedImports_ownedPackages_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull RootPackageCS lRootPackageCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Model_0 = idResolver.getClass(CLSSid_Model_0, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lRootPackageCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Model aModel = ClassUtil.nonNullState((org.eclipse.ocl.pivot.Model)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Model_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ImportCS> ownedImports = lRootPackageCS.getOwnedImports();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<PackageCS> ownedPackages = lRootPackageCS.getOwnedPackages();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lRootPackageCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedImports = idResolver.createOrderedSetOfAll(ORD_CLSSid_ImportCS, ownedImports);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Import);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedImports.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ImportCS _1 = (ImportCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(Import)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Import_0 = idResolver.getClass(CLSSid_Import, null);
                if (_1 == null) {
                    throw throwNull(lRootPackageCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Import oclAsType = ClassUtil.nonNullState((Import)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Import_0));
                //
                accumulator.add(oclAsType);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedPackages = idResolver.createOrderedSetOfAll(ORD_CLSSid_PackageCS, ownedPackages);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_0 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Package);
            @Nullable Iterator<Object> ITERATOR__1_0 = BOXED_ownedPackages.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_1;
            while (true) {
                if (!ITERATOR__1_0.hasNext()) {
                    _171_collect_187_1 = accumulator_0;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable PackageCS _1_0 = (PackageCS)ITERATOR__1_0.next();
                /**
                 * _'1_'.pivot.oclAsType(Package)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Package_0 = idResolver.getClass(CLSSid_Package, null);
                if (_1_0 == null) {
                    throw throwNull(lRootPackageCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_2 = _1_0.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Package oclAsType_0 = ClassUtil.nonNullState((Package)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_2, TYP_Package_0));
                //
                accumulator_0.add(oclAsType_0);
            }
            // property assignments
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Import> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Import.class, _171_collect_187);
            aModel.getOwnedImports().addAll(ECORE__171_collect_187);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Package> ECORE__171_collect_187_1 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Package.class, _171_collect_187_1);
            aModel.getOwnedPackages().addAll(ECORE__171_collect_187_1);
            boolean m_RootPackageCS_ownedImports_ownedPackages_pivot = ValueUtil.TRUE_VALUE;
            return m_RootPackageCS_ownedImports_ownedPackages_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_RootPackageCS_ownedImports_ownedPackages_pivot", e);
        }
    }
    
    /**
     * 
     * map m_RootPackageCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lRootPackageCS : basecs::RootPackageCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rModel : Model[1];
     *  |}
     * where ( |)
     * { |
     * lRootPackageCS.pivot := rModel;
     * }
     * 
     */
    protected boolean MAP_m_RootPackageCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull RootPackageCS lRootPackageCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Model rModel = PivotFactory.eINSTANCE.createModel();
            assert rModel != null;
            models[1/*rightAS*/].add(rModel);
            // property assignments
            lRootPackageCS_0.setPivot(rModel);
            boolean m_RootPackageCS_pivot = ValueUtil.TRUE_VALUE;
            return m_RootPackageCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_RootPackageCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_SelfExpCS_name_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lSelfExpCS : essentialoclcs::SelfExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aVariableExp : VariableExp[1] = lSelfExpCS.pivot.oclAsType(VariableExp)
     *   ;
     * name : String[?] = lSelfExpCS.name;
     * pivot : Element[?] = lSelfExpCS.pivot;
     * referredVariable : VariableDeclaration[?] = aVariableExp.lookupVariable(name);
     *  |
     * aVariableExp.referredVariable := referredVariable;
     * }
     * 
     */
    protected boolean MAP_m_SelfExpCS_name_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull SelfExpCS lSelfExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_VariableExp_0 = idResolver.getClass(CLSSid_VariableExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lSelfExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull VariableExp aVariableExp = ClassUtil.nonNullState((VariableExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_VariableExp_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lSelfExpCS.getName();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lSelfExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable referredVariable = this.lookupVariable(aVariableExp, name);
            // property assignments
            aVariableExp.setReferredVariable(referredVariable);
            objectManager.assigned(aVariableExp, PivotPackage.Literals.VARIABLE_EXP__REFERRED_VARIABLE, referredVariable, null);
            boolean m_SelfExpCS_name_pivot = ValueUtil.TRUE_VALUE;
            return m_SelfExpCS_name_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_SelfExpCS_name_pivot", e);
        }
    }
    
    /**
     * 
     * map m_SelfExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lSelfExpCS : essentialoclcs::SelfExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rVariableExp : VariableExp[1];
     *  |}
     * where ( |)
     * { |
     * lSelfExpCS.pivot := rVariableExp;
     * }
     * 
     */
    protected boolean MAP_m_SelfExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull SelfExpCS lSelfExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable VariableExp rVariableExp = PivotFactory.eINSTANCE.createVariableExp();
            assert rVariableExp != null;
            models[1/*rightAS*/].add(rVariableExp);
            // property assignments
            lSelfExpCS_0.setPivot(rVariableExp);
            boolean m_SelfExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_SelfExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_SelfExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_SelfExpCS_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lSelfExpCS : essentialoclcs::SelfExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aVariableExp : VariableExp[1] = lSelfExpCS.pivot.oclAsType(VariableExp);
     * pivot : Element[?] = lSelfExpCS.pivot;
     * referredVariable : VariableDeclaration[?] = aVariableExp.referredVariable;
     * type : Type[?] = referredVariable.type;
     *  |
     * aVariableExp.type := type;
     * }
     * 
     */
    protected boolean MAP_m_SelfExpCS_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull SelfExpCS lSelfExpCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_VariableExp_0 = idResolver.getClass(CLSSid_VariableExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lSelfExpCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull VariableExp aVariableExp = ClassUtil.nonNullState((VariableExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_VariableExp_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lSelfExpCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable VariableDeclaration referredVariable = aVariableExp.getReferredVariable();
            if (referredVariable == null) {
                throw throwNull(lSelfExpCS_1, "Null source for \'TypedElement::type\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Type type = referredVariable.getType();
            // property assignments
            aVariableExp.setType(type);
            boolean m_SelfExpCS_pivot_1 = ValueUtil.TRUE_VALUE;
            return m_SelfExpCS_pivot_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_SelfExpCS_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_ShadowPartCS_ownedInitExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lShadowPartCS : essentialoclcs::ShadowPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aShadowPart : ShadowPart[1] = lShadowPartCS.pivot.oclAsType(ShadowPart)
     *   ;
     * ownedInitExpression : essentialoclcs::ExpCS[1] = lShadowPartCS.ownedInitExpression;
     * pivot : Element[?] = lShadowPartCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedInitExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedInitExpression.pivot;
     *  |
     * aShadowPart.ownedInit := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_ShadowPartCS_ownedInitExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ShadowPartCS lShadowPartCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_ShadowPart_0 = idResolver.getClass(CLSSid_ShadowPart, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lShadowPartCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull ShadowPart aShadowPart = ClassUtil.nonNullState((ShadowPart)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_ShadowPart_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ExpCS ownedInitExpression = lShadowPartCS.getOwnedInitExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lShadowPartCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedInitExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedInitExpression.getPivot();
            // property assignments
            aShadowPart.setOwnedInit(aOCLExpression);
            boolean m_ShadowPartCS_ownedInitExpression_pivot = ValueUtil.TRUE_VALUE;
            return m_ShadowPartCS_ownedInitExpression_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ShadowPartCS_ownedInitExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ShadowPartCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lShadowPartCS : essentialoclcs::ShadowPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rShadowPart : ShadowPart[1];
     *  |}
     * where ( |)
     * { |
     * lShadowPartCS.pivot := rShadowPart;
     * }
     * 
     */
    protected boolean MAP_m_ShadowPartCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ShadowPartCS lShadowPartCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable ShadowPart rShadowPart = PivotFactory.eINSTANCE.createShadowPart();
            assert rShadowPart != null;
            models[1/*rightAS*/].add(rShadowPart);
            // property assignments
            lShadowPartCS_0.setPivot(rShadowPart);
            boolean m_ShadowPartCS_pivot = ValueUtil.TRUE_VALUE;
            return m_ShadowPartCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ShadowPartCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_ShadowPartCS_pivot_referredProperty in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lShadowPartCS : essentialoclcs::ShadowPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aShadowPart : ShadowPart[1] = lShadowPartCS.pivot.oclAsType(ShadowPart);
     * pivot : Element[?] = lShadowPartCS.pivot;
     * referredProperty : Property[1] = lShadowPartCS.referredProperty;
     *  |
     * aShadowPart.referredProperty := referredProperty;
     * }
     * 
     */
    protected boolean MAP_m_ShadowPartCS_pivot_referredProperty(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull ShadowPartCS lShadowPartCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_ShadowPart_0 = idResolver.getClass(CLSSid_ShadowPart, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lShadowPartCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull ShadowPart aShadowPart = ClassUtil.nonNullState((ShadowPart)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_ShadowPart_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lShadowPartCS_1.getPivot();
            @SuppressWarnings("null")
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property referredProperty = lShadowPartCS_1.getReferredProperty();
            // property assignments
            aShadowPart.setReferredProperty(referredProperty);
            boolean m_ShadowPartCS_pivot_referredProperty = ValueUtil.TRUE_VALUE;
            return m_ShadowPartCS_pivot_referredProperty;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_ShadowPartCS_pivot_referredProperty", e);
        }
    }
    
    /**
     * 
     * map m_SpecificationCS_exprString_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lSpecificationCS : basecs::SpecificationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |
     * not lSpecificationCS.oclIsKindOf(essentialoclcs::ExpSpecificationCS)
     *   )
     * {aExpressionInOCL : ExpressionInOCL[1] = lSpecificationCS.pivot.oclAsType(ExpressionInOCL);
     * exprString : String[?] = lSpecificationCS.exprString;
     * pivot : Element[?] = lSpecificationCS.pivot;
     *  |
     * aExpressionInOCL.body := exprString;
     * }
     * 
     */
    protected boolean MAP_m_SpecificationCS_exprString_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull SpecificationCS lSpecificationCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_ExpSpecificationCS_0 = idResolver.getClass(CLSSid_ExpSpecificationCS, null);
            final /*@NonInvalid*/ boolean oclIsKindOf = OclAnyOclIsKindOfOperation.INSTANCE.evaluate(executor, lSpecificationCS, TYP_essentialoclcs_c_c_ExpSpecificationCS_0).booleanValue();
            final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(oclIsKindOf);
            if (not == null) {
                throw throwNull(lSpecificationCS, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
            if (not) {
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_ExpressionInOCL_0 = idResolver.getClass(CLSSid_ExpressionInOCL, null);
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lSpecificationCS.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull ExpressionInOCL aExpressionInOCL = ClassUtil.nonNullState((ExpressionInOCL)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_ExpressionInOCL_0));
                final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String exprString = lSpecificationCS.getExprString();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lSpecificationCS.getPivot();
                // property assignments
                aExpressionInOCL.setBody(exprString);
                boolean m_SpecificationCS_exprString_pivot = ValueUtil.TRUE_VALUE;
                symbol_1 = m_SpecificationCS_exprString_pivot;
            }
            else {
                symbol_1 = ValueUtil.FALSE_VALUE;
            }
            return symbol_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_SpecificationCS_exprString_pivot", e);
        }
    }
    
    /**
     * 
     * map m_SpecificationCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lSpecificationCS : basecs::SpecificationCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rExpressionInOCL : ExpressionInOCL[1];
     *  |}
     * where ( |
     * not lSpecificationCS.oclIsKindOf(essentialoclcs::ExpSpecificationCS)
     *   not lSpecificationCS.oclIsKindOf(essentialoclcs::ExpSpecificationCS))
     * { |
     * lSpecificationCS.pivot := rExpressionInOCL;
     * }
     * 
     */
    protected boolean MAP_m_SpecificationCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull SpecificationCS lSpecificationCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_essentialoclcs_c_c_ExpSpecificationCS_0 = idResolver.getClass(CLSSid_ExpSpecificationCS, null);
            final /*@NonInvalid*/ boolean oclIsKindOf = OclAnyOclIsKindOfOperation.INSTANCE.evaluate(executor, lSpecificationCS_0, TYP_essentialoclcs_c_c_ExpSpecificationCS_0).booleanValue();
            final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean not = BooleanNotOperation.INSTANCE.evaluate(oclIsKindOf);
            if (not == null) {
                throw throwNull(lSpecificationCS_0, "Null if condition");
            }
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_2;
            if (not) {
                /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean symbol_1;
                if (not) {
                    // creations
                    final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable ExpressionInOCL rExpressionInOCL = PivotFactory.eINSTANCE.createExpressionInOCL();
                    assert rExpressionInOCL != null;
                    models[1/*rightAS*/].add(rExpressionInOCL);
                    // property assignments
                    lSpecificationCS_0.setPivot(rExpressionInOCL);
                    boolean m_SpecificationCS_pivot = ValueUtil.TRUE_VALUE;
                    symbol_1 = m_SpecificationCS_pivot;
                }
                else {
                    symbol_1 = ValueUtil.FALSE_VALUE;
                }
                symbol_2 = symbol_1;
            }
            else {
                symbol_2 = ValueUtil.FALSE_VALUE;
            }
            return symbol_2;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_SpecificationCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_StringLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lStringLiteralExpCS : essentialoclcs::StringLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rStringLiteralExp : StringLiteralExp[1];
     *  |}
     * where ( |)
     * { |
     * lStringLiteralExpCS.pivot := rStringLiteralExp;
     * }
     * 
     */
    protected boolean MAP_m_StringLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull StringLiteralExpCS lStringLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable StringLiteralExp rStringLiteralExp = PivotFactory.eINSTANCE.createStringLiteralExp();
            assert rStringLiteralExp != null;
            models[1/*rightAS*/].add(rStringLiteralExp);
            // property assignments
            lStringLiteralExpCS.setPivot(rStringLiteralExp);
            boolean m_StringLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_StringLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_StringLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_StringLiteralExpCS_pivot_segments in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lStringLiteralExpCS : essentialoclcs::StringLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aStringLiteralExp : StringLiteralExp[1] = lStringLiteralExpCS.pivot.oclAsType(StringLiteralExp)
     *   ;
     * pivot : Element[?] = lStringLiteralExpCS.pivot;
     * segments : Sequence(String) = lStringLiteralExpCS.segments;
     * _'\u00ABiterate\u00BB' : String[?] = segments->iterate(x; result : String[?] = '';
     *  |
     *     result.concat(x));
     *  |
     * aStringLiteralExp.stringSymbol := _'\u00ABiterate\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_StringLiteralExpCS_pivot_segments(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull StringLiteralExpCS lStringLiteralExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_StringLiteralExp_0 = idResolver.getClass(CLSSid_StringLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lStringLiteralExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull StringLiteralExp aStringLiteralExp = ClassUtil.nonNullState((StringLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_StringLiteralExp_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lStringLiteralExpCS_0.getPivot();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<String> segments_0 = lStringLiteralExpCS_0.getSegments();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue BOXED_segments_0 = idResolver.createSequenceOfAll(SEQ_PRIMid_String, segments_0);
            /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String result = STR_;
            @Nullable Iterator<Object> ITERATOR_x = BOXED_segments_0.iterator();
            /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String _171_iterate_187;
            while (true) {
                if (!ITERATOR_x.hasNext()) {
                    _171_iterate_187 = result;
                    break;
                }
                /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.Nullable String x = (String)ITERATOR_x.next();
                /**
                 * result.concat(x)
                 */
                final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull String concat = StringConcatOperation.INSTANCE.evaluate(result, x);
                //
                result = concat;
            }
            // property assignments
            if (_171_iterate_187 == null) {
                throw throwNull(lStringLiteralExpCS_0, "Null value");
            }
            aStringLiteralExp.setStringSymbol(_171_iterate_187);
            boolean m_StringLiteralExpCS_pivot_segments = ValueUtil.TRUE_VALUE;
            return m_StringLiteralExpCS_pivot_segments;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_StringLiteralExpCS_pivot_segments", e);
        }
    }
    
    /**
     * 
     * map m_StructuredClassCS_instanceClassName_isAbstract_i in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lStructuredClassCS : basecs::StructuredClassCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aClass : Class[1] = lStructuredClassCS.pivot.oclAsType(Class);
     * instanceClassName : String[?] = lStructuredClassCS.instanceClassName;
     * isAbstract : Boolean[?] = lStructuredClassCS.isAbstract;
     * isInterface : Boolean[?] = lStructuredClassCS.isInterface;
     * name : String[?] = lStructuredClassCS.name;
     * ownedAnnotations : OrderedSet(basecs::AnnotationElementCS) = lStructuredClassCS.ownedAnnotations;
     * ownedConstraints : OrderedSet(basecs::ConstraintCS) = lStructuredClassCS.ownedConstraints;
     * ownedOperations : OrderedSet(basecs::OperationCS) = lStructuredClassCS.ownedOperations;
     * ownedProperties : OrderedSet(basecs::StructuralFeatureCS) = lStructuredClassCS.ownedProperties;
     * ownedSuperTypes : OrderedSet(basecs::TypedRefCS) = lStructuredClassCS.ownedSuperTypes;
     * pivot : Element[?] = lStructuredClassCS.pivot;
     * _'=' : Boolean[1] = ownedSuperTypes =
     *   null;
     * _'\u00ABcollect\u00BB' : Sequence(Operation) = ownedOperations->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Operation))
     *   ;
     * _'\u00ABcollect\u00BB1' : Sequence(Constraint) = ownedConstraints->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Constraint))
     *   ;
     * _'\u00ABcollect\u00BB2' : Sequence(Property) = ownedProperties->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Property))
     *   ;
     * _'\u00ABcollect\u00BB3' : Sequence(Element) = ownedAnnotations->collect(_'1_' | _'1_'.pivot)
     *   ;
     * _'if' : Collection(Class) = if _'='
     *   then Set{OclElement}
     *   else
     *     ownedSuperTypes->collect(_'1_' | _'1_'.pivot.oclAsType(Class))
     *   endif;
     *  |
     * aClass.instanceClassName := instanceClassName;
     * aClass.isAbstract := isAbstract;
     * aClass.isInterface := isInterface;
     * aClass.name := name;
     * aClass.ownedAnnotations := _'\u00ABcollect\u00BB3';
     * aClass.ownedInvariants := _'\u00ABcollect\u00BB1';
     * aClass.ownedOperations := _'\u00ABcollect\u00BB';
     * aClass.ownedProperties := _'\u00ABcollect\u00BB2';
     * aClass.superClasses := _'if';
     * }
     * 
     */
    protected boolean MAP_m_StructuredClassCS_instanceClassName_isAbstract_i(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull StructuredClassCS lStructuredClassCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lStructuredClassCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Class_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String instanceClassName = lStructuredClassCS.getInstanceClassName();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean isAbstract = lStructuredClassCS.isIsAbstract();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable Boolean isInterface = lStructuredClassCS.isIsInterface();
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lStructuredClassCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<AnnotationElementCS> ownedAnnotations = lStructuredClassCS.getOwnedAnnotations();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<ConstraintCS> ownedConstraints = lStructuredClassCS.getOwnedConstraints();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<OperationCS> ownedOperations = lStructuredClassCS.getOwnedOperations();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<StructuralFeatureCS> ownedProperties = lStructuredClassCS.getOwnedProperties();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TypedRefCS> ownedSuperTypes = lStructuredClassCS.getOwnedSuperTypes();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lStructuredClassCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedOperations = idResolver.createOrderedSetOfAll(ORD_CLSSid_OperationCS, ownedOperations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Operation);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedOperations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable OperationCS _1 = (OperationCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(Operation)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Operation_0 = idResolver.getClass(CLSSid_Operation, null);
                if (_1 == null) {
                    throw throwNull(lStructuredClassCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Operation oclAsType = ClassUtil.nonNullState((Operation)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Operation_0));
                //
                accumulator.add(oclAsType);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedConstraints = idResolver.createOrderedSetOfAll(ORD_CLSSid_ConstraintCS, ownedConstraints);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_0 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Constraint);
            @Nullable Iterator<Object> ITERATOR__1_0 = BOXED_ownedConstraints.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_1;
            while (true) {
                if (!ITERATOR__1_0.hasNext()) {
                    _171_collect_187_1 = accumulator_0;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable ConstraintCS _1_0 = (ConstraintCS)ITERATOR__1_0.next();
                /**
                 * _'1_'.pivot.oclAsType(Constraint)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Constraint_0 = idResolver.getClass(CLSSid_Constraint, null);
                if (_1_0 == null) {
                    throw throwNull(lStructuredClassCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_2 = _1_0.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Constraint oclAsType_0 = ClassUtil.nonNullState((Constraint)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_2, TYP_Constraint_0));
                //
                accumulator_0.add(oclAsType_0);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedProperties = idResolver.createOrderedSetOfAll(ORD_CLSSid_StructuralFeatureCS, ownedProperties);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_1 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Property);
            @Nullable Iterator<Object> ITERATOR__1_1 = BOXED_ownedProperties.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_2;
            while (true) {
                if (!ITERATOR__1_1.hasNext()) {
                    _171_collect_187_2 = accumulator_1;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable StructuralFeatureCS _1_1 = (StructuralFeatureCS)ITERATOR__1_1.next();
                /**
                 * _'1_'.pivot.oclAsType(Property)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
                if (_1_1 == null) {
                    throw throwNull(lStructuredClassCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_3 = _1_1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property oclAsType_1 = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_3, TYP_Property_0));
                //
                accumulator_1.add(oclAsType_1);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedAnnotations = idResolver.createOrderedSetOfAll(ORD_CLSSid_AnnotationElementCS, ownedAnnotations);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_2 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Element);
            @Nullable Iterator<Object> ITERATOR__1_2 = BOXED_ownedAnnotations.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187_3;
            while (true) {
                if (!ITERATOR__1_2.hasNext()) {
                    _171_collect_187_3 = accumulator_2;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable AnnotationElementCS _1_2 = (AnnotationElementCS)ITERATOR__1_2.next();
                /**
                 * _'1_'.pivot
                 */
                if (_1_2 == null) {
                    throw throwNull(lStructuredClassCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_4 = _1_2.getPivot();
                //
                accumulator_2.add(pivot_4);
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSuperTypes = idResolver.createOrderedSetOfAll(ORD_CLSSid_TypedRefCS, ownedSuperTypes);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator_3 = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Class);
            @Nullable Iterator<Object> ITERATOR__1_3 = BOXED_ownedSuperTypes.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue collect;
            while (true) {
                if (!ITERATOR__1_3.hasNext()) {
                    collect = accumulator_3;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS _1_3 = (TypedRefCS)ITERATOR__1_3.next();
                /**
                 * _'1_'.pivot.oclAsType(Class)
                 */
                if (_1_3 == null) {
                    throw throwNull(lStructuredClassCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_5 = _1_3.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class oclAsType_2 = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_5, TYP_Class_0));
                //
                accumulator_3.add(oclAsType_2);
            }
            // property assignments
            aClass.setInstanceClassName(instanceClassName);
            if (isAbstract == null) {
                throw throwNull(lStructuredClassCS, "Null value");
            }
            aClass.setIsAbstract(isAbstract);
            if (isInterface == null) {
                throw throwNull(lStructuredClassCS, "Null value");
            }
            aClass.setIsInterface(isInterface);
            aClass.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Element> ECORE__171_collect_187_3 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Element.class, _171_collect_187_3);
            aClass.getOwnedAnnotations().addAll(ECORE__171_collect_187_3);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Constraint> ECORE__171_collect_187_1 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Constraint.class, _171_collect_187_1);
            aClass.getOwnedInvariants().addAll(ECORE__171_collect_187_1);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Operation> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Operation.class, _171_collect_187);
            aClass.getOwnedOperations().addAll(ECORE__171_collect_187);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Property> ECORE__171_collect_187_2 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Property.class, _171_collect_187_2);
            aClass.getOwnedProperties().addAll(ECORE__171_collect_187_2);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Class> ECORE_collect = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Class.class, collect);
            aClass.getSuperClasses().addAll(ECORE_collect);
            boolean m_StructuredClassCS_instanceClassName_isAbstract_i = ValueUtil.TRUE_VALUE;
            return m_StructuredClassCS_instanceClassName_isAbstract_i;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_StructuredClassCS_instanceClassName_isAbstract_i", e);
        }
    }
    
    /**
     * 
     * map m_StructuredClassCS_ownedSignature_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lStructuredClassCS : basecs::StructuredClassCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aClass : Class[1] = lStructuredClassCS.pivot.oclAsType(Class)
     *   ;
     * ownedSignature : basecs::TemplateSignatureCS[?] = lStructuredClassCS.ownedSignature;
     * pivot : Element[?] = lStructuredClassCS.pivot;
     * aTemplateSignature : TemplateSignature[1] = ownedSignature.pivot.oclAsType(TemplateSignature);
     * pivot1 : Element[?] = ownedSignature.pivot;
     *  |
     * aTemplateSignature.owningElement := aClass;
     * }
     * 
     */
    protected boolean MAP_m_StructuredClassCS_ownedSignature_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull StructuredClassCS lStructuredClassCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lStructuredClassCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TemplateSignatureCS ownedSignature = lStructuredClassCS_0.getOwnedSignature();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lStructuredClassCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateSignature_0 = idResolver.getClass(CLSSid_TemplateSignature, null);
            if (ownedSignature == null) {
                throw throwNull(lStructuredClassCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedSignature.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateSignature aTemplateSignature = ClassUtil.nonNullState((TemplateSignature)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_TemplateSignature_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedSignature.getPivot();
            // property assignments
            aTemplateSignature.setOwningElement(aClass);
            objectManager.assigned(aTemplateSignature, PivotPackage.Literals.TEMPLATE_SIGNATURE__OWNING_ELEMENT, aClass, null);
            boolean m_StructuredClassCS_ownedSignature_pivot = ValueUtil.TRUE_VALUE;
            return m_StructuredClassCS_ownedSignature_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_StructuredClassCS_ownedSignature_pivot", e);
        }
    }
    
    /**
     * 
     * map m_StructuredClassCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lStructuredClassCS : basecs::StructuredClassCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rClass : Class[1];
     *  |}
     * where ( |)
     * { |
     * lStructuredClassCS.pivot := rClass;
     * }
     * 
     */
    protected boolean MAP_m_StructuredClassCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull StructuredClassCS lStructuredClassCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Class rClass = PivotFactory.eINSTANCE.createClass();
            assert rClass != null;
            models[1/*rightAS*/].add(rClass);
            // property assignments
            lStructuredClassCS_1.setPivot(rClass);
            boolean m_StructuredClassCS_pivot = ValueUtil.TRUE_VALUE;
            return m_StructuredClassCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_StructuredClassCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TemplateBindingCS_ownedSubstitutions_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTemplateBindingCS : basecs::TemplateBindingCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTemplateBinding : TemplateBinding[1] = lTemplateBindingCS.pivot.oclAsType(TemplateBinding)
     *   ;
     * ownedSubstitutions : OrderedSet(basecs::TemplateParameterSubstitutionCS) = lTemplateBindingCS.ownedSubstitutions;
     * pivot : Element[?] = lTemplateBindingCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(TemplateParameterSubstitution) = ownedSubstitutions->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(TemplateParameterSubstitution));
     *  |
     * aTemplateBinding.ownedSubstitutions := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_TemplateBindingCS_ownedSubstitutions_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateBindingCS lTemplateBindingCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateBinding_0 = idResolver.getClass(CLSSid_TemplateBinding, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTemplateBindingCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateBinding aTemplateBinding = ClassUtil.nonNullState((TemplateBinding)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TemplateBinding_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TemplateParameterSubstitutionCS> ownedSubstitutions = lTemplateBindingCS.getOwnedSubstitutions();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTemplateBindingCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSubstitutions = idResolver.createOrderedSetOfAll(ORD_CLSSid_TemplateParameterSubstitutionCS, ownedSubstitutions);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_TemplateParameterSubstitution);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedSubstitutions.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TemplateParameterSubstitutionCS _1 = (TemplateParameterSubstitutionCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(TemplateParameterSubstitution)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateParameterSubstitution_0 = idResolver.getClass(CLSSid_TemplateParameterSubstitution, null);
                if (_1 == null) {
                    throw throwNull(lTemplateBindingCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitution oclAsType = ClassUtil.nonNullState((TemplateParameterSubstitution)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_TemplateParameterSubstitution_0));
                //
                accumulator.add(oclAsType);
            }
            // property assignments
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TemplateParameterSubstitution> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(TemplateParameterSubstitution.class, _171_collect_187);
            aTemplateBinding.getOwnedSubstitutions().addAll(ECORE__171_collect_187);
            boolean m_TemplateBindingCS_ownedSubstitutions_pivot = ValueUtil.TRUE_VALUE;
            return m_TemplateBindingCS_ownedSubstitutions_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TemplateBindingCS_ownedSubstitutions_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TemplateBindingCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTemplateBindingCS : basecs::TemplateBindingCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rTemplateBinding : TemplateBinding[1];
     *  |}
     * where ( |)
     * { |
     * lTemplateBindingCS.pivot := rTemplateBinding;
     * }
     * 
     */
    protected boolean MAP_m_TemplateBindingCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateBindingCS lTemplateBindingCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TemplateBinding rTemplateBinding = PivotFactory.eINSTANCE.createTemplateBinding();
            assert rTemplateBinding != null;
            models[1/*rightAS*/].add(rTemplateBinding);
            // property assignments
            lTemplateBindingCS_0.setPivot(rTemplateBinding);
            boolean m_TemplateBindingCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TemplateBindingCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TemplateBindingCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TemplateParameterSubstitutionCS_ownedActualParam in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTemplateParameterSubstitutionCS : basecs::TemplateParameterSubstitutionCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTemplateParameterSubstitution : TemplateParameterSubstitution[1] = lTemplateParameterSubstitutionCS.pivot.oclAsType(TemplateParameterSubstitution)
     *   ;
     * ownedActualParameter : basecs::TypeRefCS[?] = lTemplateParameterSubstitutionCS.ownedActualParameter;
     * pivot : Element[?] = lTemplateParameterSubstitutionCS.pivot;
     * aClass : Class[1] = ownedActualParameter.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedActualParameter.pivot;
     *  |
     * aTemplateParameterSubstitution.actual := aClass;
     * }
     * 
     */
    protected boolean MAP_m_TemplateParameterSubstitutionCS_ownedActualParam(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS lTemplateParameterSubstitutionCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateParameterSubstitution_0 = idResolver.getClass(CLSSid_TemplateParameterSubstitution, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTemplateParameterSubstitutionCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitution aTemplateParameterSubstitution = ClassUtil.nonNullState((TemplateParameterSubstitution)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TemplateParameterSubstitution_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypeRefCS ownedActualParameter = lTemplateParameterSubstitutionCS.getOwnedActualParameter();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTemplateParameterSubstitutionCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedActualParameter == null) {
                throw throwNull(lTemplateParameterSubstitutionCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedActualParameter.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedActualParameter.getPivot();
            // property assignments
            aTemplateParameterSubstitution.setActual(aClass);
            boolean m_TemplateParameterSubstitutionCS_ownedActualParam = ValueUtil.TRUE_VALUE;
            return m_TemplateParameterSubstitutionCS_ownedActualParam;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TemplateParameterSubstitutionCS_ownedActualParam", e);
        }
    }
    
    /**
     * 
     * map m_TemplateParameterSubstitutionCS_owningBinding_pi in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTemplateParameterSubstitutionCS : basecs::TemplateParameterSubstitutionCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTemplateParameterSubstitution : TemplateParameterSubstitution[1] = lTemplateParameterSubstitutionCS.pivot.oclAsType(TemplateParameterSubstitution)
     *   ;
     * owningBinding : basecs::TemplateBindingCS[?] = lTemplateParameterSubstitutionCS.owningBinding;
     * pivot : Element[?] = lTemplateParameterSubstitutionCS.pivot;
     * ownedSubstitutions : OrderedSet(basecs::TemplateParameterSubstitutionCS) = owningBinding.ownedSubstitutions;
     * owningElement : basecs::TypedTypeRefCS[?] = owningBinding.owningElement;
     * aClass : Class[1] = owningElement.pivot.oclAsType(Class)
     *   ;
     * indexOf : Integer[1] = ownedSubstitutions->indexOf(lTemplateParameterSubstitutionCS)
     *   ;
     * pivot1 : Element[?] = owningElement.pivot;
     * ownedSignature : TemplateSignature[?] = aClass.ownedSignature;
     * ownedParameters : OrderedSet(TemplateParameter) = ownedSignature.ownedParameters;
     * formal : TemplateParameter[?] = ownedParameters->at(indexOf);
     *  |
     * aTemplateParameterSubstitution.formal := formal;
     * }
     * 
     */
    protected boolean MAP_m_TemplateParameterSubstitutionCS_owningBinding_pi(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS lTemplateParameterSubstitutionCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateParameterSubstitution_0 = idResolver.getClass(CLSSid_TemplateParameterSubstitution, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTemplateParameterSubstitutionCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitution aTemplateParameterSubstitution = ClassUtil.nonNullState((TemplateParameterSubstitution)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TemplateParameterSubstitution_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TemplateBindingCS owningBinding = lTemplateParameterSubstitutionCS_0.getOwningBinding();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTemplateParameterSubstitutionCS_0.getPivot();
            if (owningBinding == null) {
                throw throwNull(lTemplateParameterSubstitutionCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::TemplateBindingCS::ownedSubstitutions\'");
            }
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TemplateParameterSubstitutionCS> ownedSubstitutions = owningBinding.getOwnedSubstitutions();
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedTypeRefCS owningElement = owningBinding.getOwningElement();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (owningElement == null) {
                throw throwNull(lTemplateParameterSubstitutionCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = owningElement.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedSubstitutions = idResolver.createOrderedSetOfAll(ORD_CLSSid_TemplateParameterSubstitutionCS, ownedSubstitutions);
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull IntegerValue indexOf = OrderedCollectionIndexOfOperation.INSTANCE.evaluate(BOXED_ownedSubstitutions, lTemplateParameterSubstitutionCS_0);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = owningElement.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TemplateSignature ownedSignature = aClass.getOwnedSignature();
            if (ownedSignature == null) {
                throw throwNull(lTemplateParameterSubstitutionCS_0, "Null source for \'TemplateSignature::ownedParameters\'");
            }
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TemplateParameter> ownedParameters = ownedSignature.getOwnedParameters();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedParameters = idResolver.createOrderedSetOfAll(ORD_CLSSid_TemplateParameter, ownedParameters);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TemplateParameter formal = (TemplateParameter)OrderedCollectionAtOperation.INSTANCE.evaluate(BOXED_ownedParameters, indexOf);
            // property assignments
            if (formal == null) {
                throw throwNull(lTemplateParameterSubstitutionCS_0, "Null value");
            }
            aTemplateParameterSubstitution.setFormal(formal);
            boolean m_TemplateParameterSubstitutionCS_owningBinding_pi = ValueUtil.TRUE_VALUE;
            return m_TemplateParameterSubstitutionCS_owningBinding_pi;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TemplateParameterSubstitutionCS_owningBinding_pi", e);
        }
    }
    
    /**
     * 
     * map m_TemplateParameterSubstitutionCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTemplateParameterSubstitutionCS : basecs::TemplateParameterSubstitutionCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rTemplateParameterSubstitution : TemplateParameterSubstitution[1];
     *  |}
     * where ( |)
     * { |
     * lTemplateParameterSubstitutionCS.pivot := rTemplateParameterSubstitution;
     * }
     * 
     */
    protected boolean MAP_m_TemplateParameterSubstitutionCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateParameterSubstitutionCS lTemplateParameterSubstitutionCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TemplateParameterSubstitution rTemplateParameterSubstitution = PivotFactory.eINSTANCE.createTemplateParameterSubstitution();
            assert rTemplateParameterSubstitution != null;
            models[1/*rightAS*/].add(rTemplateParameterSubstitution);
            // property assignments
            lTemplateParameterSubstitutionCS_1.setPivot(rTemplateParameterSubstitution);
            boolean m_TemplateParameterSubstitutionCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TemplateParameterSubstitutionCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TemplateParameterSubstitutionCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TemplateSignatureCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTemplateSignatureCS : basecs::TemplateSignatureCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rTemplateSignature : TemplateSignature[1];
     *  |}
     * where ( |)
     * { |
     * lTemplateSignatureCS.pivot := rTemplateSignature;
     * }
     * 
     */
    protected boolean MAP_m_TemplateSignatureCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TemplateSignatureCS lTemplateSignatureCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TemplateSignature rTemplateSignature = PivotFactory.eINSTANCE.createTemplateSignature();
            assert rTemplateSignature != null;
            models[1/*rightAS*/].add(rTemplateSignature);
            // property assignments
            lTemplateSignatureCS.setPivot(rTemplateSignature);
            boolean m_TemplateSignatureCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TemplateSignatureCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TemplateSignatureCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TupleLiteralExpCS_ownedParts_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTupleLiteralExpCS : essentialoclcs::TupleLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTupleLiteralExp : TupleLiteralExp[1] = lTupleLiteralExpCS.pivot.oclAsType(TupleLiteralExp)
     *   ;
     * ownedParts : OrderedSet(essentialoclcs::TupleLiteralPartCS) = lTupleLiteralExpCS.ownedParts;
     * pivot : Element[?] = lTupleLiteralExpCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(TupleLiteralPart) = ownedParts->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(TupleLiteralPart));
     *  |
     * aTupleLiteralExp.ownedParts := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_TupleLiteralExpCS_ownedParts_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralExpCS lTupleLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TupleLiteralExp_0 = idResolver.getClass(CLSSid_TupleLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTupleLiteralExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TupleLiteralExp aTupleLiteralExp = ClassUtil.nonNullState((TupleLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TupleLiteralExp_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TupleLiteralPartCS> ownedParts = lTupleLiteralExpCS.getOwnedParts();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTupleLiteralExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedParts = idResolver.createOrderedSetOfAll(ORD_CLSSid_TupleLiteralPartCS, ownedParts);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_TupleLiteralPart);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedParts.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable TupleLiteralPartCS _1 = (TupleLiteralPartCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(TupleLiteralPart)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TupleLiteralPart_0 = idResolver.getClass(CLSSid_TupleLiteralPart, null);
                if (_1 == null) {
                    throw throwNull(lTupleLiteralExpCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TupleLiteralPart oclAsType = ClassUtil.nonNullState((TupleLiteralPart)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_TupleLiteralPart_0));
                //
                accumulator.add(oclAsType);
            }
            // property assignments
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TupleLiteralPart> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(TupleLiteralPart.class, _171_collect_187);
            aTupleLiteralExp.getOwnedParts().addAll(ECORE__171_collect_187);
            boolean m_TupleLiteralExpCS_ownedParts_pivot = ValueUtil.TRUE_VALUE;
            return m_TupleLiteralExpCS_ownedParts_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TupleLiteralExpCS_ownedParts_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TupleLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTupleLiteralExpCS : essentialoclcs::TupleLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rTupleLiteralExp : TupleLiteralExp[1];
     *  |}
     * where ( |)
     * { |
     * lTupleLiteralExpCS.pivot := rTupleLiteralExp;
     * }
     * 
     */
    protected boolean MAP_m_TupleLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralExpCS lTupleLiteralExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TupleLiteralExp rTupleLiteralExp = PivotFactory.eINSTANCE.createTupleLiteralExp();
            assert rTupleLiteralExp != null;
            models[1/*rightAS*/].add(rTupleLiteralExp);
            // property assignments
            lTupleLiteralExpCS_0.setPivot(rTupleLiteralExp);
            boolean m_TupleLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TupleLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TupleLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TupleLiteralPartCS_name_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTupleLiteralPartCS : essentialoclcs::TupleLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTupleLiteralPart : TupleLiteralPart[1] = lTupleLiteralPartCS.pivot.oclAsType(TupleLiteralPart);
     * name : String[?] = lTupleLiteralPartCS.name;
     * pivot : Element[?] = lTupleLiteralPartCS.pivot;
     *  |
     * aTupleLiteralPart.name := name;
     * }
     * 
     */
    protected boolean MAP_m_TupleLiteralPartCS_name_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS lTupleLiteralPartCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TupleLiteralPart_0 = idResolver.getClass(CLSSid_TupleLiteralPart, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTupleLiteralPartCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TupleLiteralPart aTupleLiteralPart = ClassUtil.nonNullState((TupleLiteralPart)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TupleLiteralPart_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lTupleLiteralPartCS.getName();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTupleLiteralPartCS.getPivot();
            // property assignments
            aTupleLiteralPart.setName(name);
            boolean m_TupleLiteralPartCS_name_pivot = ValueUtil.TRUE_VALUE;
            return m_TupleLiteralPartCS_name_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TupleLiteralPartCS_name_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TupleLiteralPartCS_ownedInitExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTupleLiteralPartCS : essentialoclcs::TupleLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTupleLiteralPart : TupleLiteralPart[1] = lTupleLiteralPartCS.pivot.oclAsType(TupleLiteralPart)
     *   ;
     * ownedInitExpression : essentialoclcs::ExpCS[?] = lTupleLiteralPartCS.ownedInitExpression;
     * pivot : Element[?] = lTupleLiteralPartCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedInitExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedInitExpression.pivot;
     *  |
     * aTupleLiteralPart.ownedInit := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_TupleLiteralPartCS_ownedInitExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS lTupleLiteralPartCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TupleLiteralPart_0 = idResolver.getClass(CLSSid_TupleLiteralPart, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTupleLiteralPartCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TupleLiteralPart aTupleLiteralPart = ClassUtil.nonNullState((TupleLiteralPart)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TupleLiteralPart_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedInitExpression = lTupleLiteralPartCS_0.getOwnedInitExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTupleLiteralPartCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedInitExpression == null) {
                throw throwNull(lTupleLiteralPartCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedInitExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedInitExpression.getPivot();
            // property assignments
            aTupleLiteralPart.setOwnedInit(aOCLExpression);
            boolean m_TupleLiteralPartCS_ownedInitExpression_pivot = ValueUtil.TRUE_VALUE;
            return m_TupleLiteralPartCS_ownedInitExpression_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TupleLiteralPartCS_ownedInitExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TupleLiteralPartCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTupleLiteralPartCS : essentialoclcs::TupleLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTupleLiteralPart : TupleLiteralPart[1] = lTupleLiteralPartCS.pivot.oclAsType(TupleLiteralPart)
     *   ;
     * ownedType : basecs::TypedRefCS[?] = lTupleLiteralPartCS.ownedType;
     * pivot : Element[?] = lTupleLiteralPartCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aTupleLiteralPart.type := aClass;
     * }
     * 
     */
    protected boolean MAP_m_TupleLiteralPartCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS lTupleLiteralPartCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TupleLiteralPart_0 = idResolver.getClass(CLSSid_TupleLiteralPart, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTupleLiteralPartCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TupleLiteralPart aTupleLiteralPart = ClassUtil.nonNullState((TupleLiteralPart)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TupleLiteralPart_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lTupleLiteralPartCS_1.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTupleLiteralPartCS_1.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedType == null) {
                throw throwNull(lTupleLiteralPartCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aTupleLiteralPart.setType(aClass);
            objectManager.assigned(aTupleLiteralPart, PivotPackage.Literals.TYPED_ELEMENT__TYPE, aClass, null);
            boolean m_TupleLiteralPartCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_TupleLiteralPartCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TupleLiteralPartCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TupleLiteralPartCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTupleLiteralPartCS : essentialoclcs::TupleLiteralPartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rTupleLiteralPart : TupleLiteralPart[1];
     *  |}
     * where ( |)
     * { |
     * lTupleLiteralPartCS.pivot := rTupleLiteralPart;
     * }
     * 
     */
    protected boolean MAP_m_TupleLiteralPartCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TupleLiteralPartCS lTupleLiteralPartCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TupleLiteralPart rTupleLiteralPart = PivotFactory.eINSTANCE.createTupleLiteralPart();
            assert rTupleLiteralPart != null;
            models[1/*rightAS*/].add(rTupleLiteralPart);
            // property assignments
            lTupleLiteralPartCS_2.setPivot(rTupleLiteralPart);
            boolean m_TupleLiteralPartCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TupleLiteralPartCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TupleLiteralPartCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TuplePartCS_name_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTuplePartCS : basecs::TuplePartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lTuplePartCS.pivot.oclAsType(Property);
     * name : String[?] = lTuplePartCS.name;
     * pivot : Element[?] = lTuplePartCS.pivot;
     *  |
     * aProperty.name := name;
     * }
     * 
     */
    protected boolean MAP_m_TuplePartCS_name_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TuplePartCS lTuplePartCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTuplePartCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lTuplePartCS.getName();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTuplePartCS.getPivot();
            // property assignments
            aProperty.setName(name);
            boolean m_TuplePartCS_name_pivot = ValueUtil.TRUE_VALUE;
            return m_TuplePartCS_name_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TuplePartCS_name_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TuplePartCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTuplePartCS : basecs::TuplePartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aProperty : Property[1] = lTuplePartCS.pivot.oclAsType(Property)
     *   ;
     * ownedType : basecs::TypedRefCS[?] = lTuplePartCS.ownedType;
     * pivot : Element[?] = lTuplePartCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aProperty.type := aClass;
     * }
     * 
     */
    protected boolean MAP_m_TuplePartCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TuplePartCS lTuplePartCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTuplePartCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property aProperty = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Property_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lTuplePartCS_0.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTuplePartCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedType == null) {
                throw throwNull(lTuplePartCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aProperty.setType(aClass);
            boolean m_TuplePartCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_TuplePartCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TuplePartCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TuplePartCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTuplePartCS : basecs::TuplePartCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rProperty : Property[1];
     *  |}
     * where ( |)
     * { |
     * lTuplePartCS.pivot := rProperty;
     * }
     * 
     */
    protected boolean MAP_m_TuplePartCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TuplePartCS lTuplePartCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Property rProperty = PivotFactory.eINSTANCE.createProperty();
            assert rProperty != null;
            models[1/*rightAS*/].add(rProperty);
            // property assignments
            lTuplePartCS_1.setPivot(rProperty);
            boolean m_TuplePartCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TuplePartCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TuplePartCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TupleTypeCS_name_ownedParts_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTupleTypeCS : basecs::TupleTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTupleType : TupleType[1] = lTupleTypeCS.pivot.oclAsType(TupleType)
     *   ;
     * name : String[?] = lTupleTypeCS.name;
     * ownedParts : OrderedSet(basecs::TuplePartCS) = lTupleTypeCS.ownedParts;
     * pivot : Element[?] = lTupleTypeCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Property) = ownedParts->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Property));
     *  |
     * aTupleType.name := name;
     * aTupleType.ownedProperties := _'\u00ABcollect\u00BB';
     * }
     * 
     */
    protected boolean MAP_m_TupleTypeCS_name_ownedParts_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TupleTypeCS lTupleTypeCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TupleType_0 = idResolver.getClass(CLSSid_TupleType, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTupleTypeCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TupleType aTupleType = ClassUtil.nonNullState((TupleType)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TupleType_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lTupleTypeCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TuplePartCS> ownedParts = lTupleTypeCS.getOwnedParts();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTupleTypeCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedParts = idResolver.createOrderedSetOfAll(ORD_CLSSid_TuplePartCS, ownedParts);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Property);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedParts.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TuplePartCS _1 = (TuplePartCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(Property)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Property_0 = idResolver.getClass(CLSSid_Property, null);
                if (_1 == null) {
                    throw throwNull(lTupleTypeCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Property oclAsType = ClassUtil.nonNullState((Property)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Property_0));
                //
                accumulator.add(oclAsType);
            }
            // property assignments
            aTupleType.setName(name);
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Property> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Property.class, _171_collect_187);
            aTupleType.getOwnedProperties().addAll(ECORE__171_collect_187);
            boolean m_TupleTypeCS_name_ownedParts_pivot = ValueUtil.TRUE_VALUE;
            return m_TupleTypeCS_name_ownedParts_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TupleTypeCS_name_ownedParts_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TupleTypeCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTupleTypeCS : basecs::TupleTypeCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rTupleType : TupleType[1];
     *  |}
     * where ( |)
     * { |
     * lTupleTypeCS.pivot := rTupleType;
     * }
     * 
     */
    protected boolean MAP_m_TupleTypeCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TupleTypeCS lTupleTypeCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TupleType rTupleType = PivotFactory.eINSTANCE.createTupleType();
            assert rTupleType != null;
            models[1/*rightAS*/].add(rTupleType);
            // property assignments
            lTupleTypeCS_0.setPivot(rTupleType);
            boolean m_TupleTypeCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TupleTypeCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TupleTypeCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TypeLiteralExpCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTypeLiteralExpCS : essentialoclcs::TypeLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTypeExp : TypeExp[1] = lTypeLiteralExpCS.pivot.oclAsType(TypeExp)
     *   ;
     * ownedType : basecs::TypedRefCS[1] = lTypeLiteralExpCS.ownedType;
     * pivot : Element[?] = lTypeLiteralExpCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aTypeExp.referredType := aClass;
     * }
     * 
     */
    protected boolean MAP_m_TypeLiteralExpCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TypeLiteralExpCS lTypeLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TypeExp_0 = idResolver.getClass(CLSSid_TypeExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTypeLiteralExpCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TypeExp aTypeExp = ClassUtil.nonNullState((TypeExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TypeExp_0));
            @SuppressWarnings("null")
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TypedRefCS ownedType = lTypeLiteralExpCS.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTypeLiteralExpCS.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aTypeExp.setReferredType(aClass);
            objectManager.assigned(aTypeExp, PivotPackage.Literals.TYPE_EXP__REFERRED_TYPE, aClass, null);
            boolean m_TypeLiteralExpCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_TypeLiteralExpCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TypeLiteralExpCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TypeLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTypeLiteralExpCS : essentialoclcs::TypeLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rTypeExp : TypeExp[1];
     *  |}
     * where ( |)
     * { |
     * lTypeLiteralExpCS.pivot := rTypeExp;
     * }
     * 
     */
    protected boolean MAP_m_TypeLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TypeLiteralExpCS lTypeLiteralExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TypeExp rTypeExp = PivotFactory.eINSTANCE.createTypeExp();
            assert rTypeExp != null;
            models[1/*rightAS*/].add(rTypeExp);
            // property assignments
            lTypeLiteralExpCS_0.setPivot(rTypeExp);
            boolean m_TypeLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TypeLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TypeLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TypeLiteralExpCS_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTypeLiteralExpCS : essentialoclcs::TypeLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTypeExp : TypeExp[1] = lTypeLiteralExpCS.pivot.oclAsType(TypeExp);
     * pivot : Element[?] = lTypeLiteralExpCS.pivot;
     * referredType : Type[?] = aTypeExp.referredType;
     *  |
     * aTypeExp.type := referredType;
     * }
     * 
     */
    protected boolean MAP_m_TypeLiteralExpCS_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull TypeLiteralExpCS lTypeLiteralExpCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TypeExp_0 = idResolver.getClass(CLSSid_TypeExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTypeLiteralExpCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TypeExp aTypeExp = ClassUtil.nonNullState((TypeExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TypeExp_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTypeLiteralExpCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Type referredType = aTypeExp.getReferredType();
            // property assignments
            aTypeExp.setType(referredType);
            boolean m_TypeLiteralExpCS_pivot_1 = ValueUtil.TRUE_VALUE;
            return m_TypeLiteralExpCS_pivot_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TypeLiteralExpCS_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_TypeParameterCS_name_ownedExtends_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lTypeParameterCS : basecs::TypeParameterCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aTemplateParameter : TemplateParameter[1] = lTypeParameterCS.pivot.oclAsType(TemplateParameter)
     *   ;
     * name : String[?] = lTypeParameterCS.name;
     * ownedExtends : OrderedSet(basecs::TypedRefCS) = lTypeParameterCS.ownedExtends;
     * pivot : Element[?] = lTypeParameterCS.pivot;
     * _'\u00ABcollect\u00BB' : Sequence(Class) = ownedExtends->collect(_'1_' |
     *     _'1_'.pivot.oclAsType(Class));
     *  |
     * aTemplateParameter.constrainingClasses := _'\u00ABcollect\u00BB';
     * aTemplateParameter.name := name;
     * }
     * 
     */
    protected boolean MAP_m_TypeParameterCS_name_ownedExtends_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TypeParameterCS lTypeParameterCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_TemplateParameter_0 = idResolver.getClass(CLSSid_TemplateParameter, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lTypeParameterCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull TemplateParameter aTemplateParameter = ClassUtil.nonNullState((TemplateParameter)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_TemplateParameter_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lTypeParameterCS.getName();
            @SuppressWarnings("null")
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<TypedRefCS> ownedExtends = lTypeParameterCS.getOwnedExtends();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lTypeParameterCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull OrderedSetValue BOXED_ownedExtends = idResolver.createOrderedSetOfAll(ORD_CLSSid_TypedRefCS, ownedExtends);
            /*@Thrown*/ SequenceValue.@org.eclipse.jdt.annotation.NonNull Accumulator accumulator = ValueUtil.createSequenceAccumulatorValue(SEQ_CLSSid_Class);
            @Nullable Iterator<Object> ITERATOR__1 = BOXED_ownedExtends.iterator();
            /*@Thrown*/ org.eclipse.ocl.pivot.values.@org.eclipse.jdt.annotation.NonNull SequenceValue _171_collect_187;
            while (true) {
                if (!ITERATOR__1.hasNext()) {
                    _171_collect_187 = accumulator;
                    break;
                }
                /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS _1 = (TypedRefCS)ITERATOR__1.next();
                /**
                 * _'1_'.pivot.oclAsType(Class)
                 */
                final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
                if (_1 == null) {
                    throw throwNull(lTypeParameterCS, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
                }
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = _1.getPivot();
                final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class oclAsType = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
                //
                accumulator.add(oclAsType);
            }
            // property assignments
            final /*@Thrown*/ java.util.@org.eclipse.jdt.annotation.NonNull List<Class> ECORE__171_collect_187 = ((IdResolver.IdResolverExtension)idResolver).ecoreValueOfAll(Class.class, _171_collect_187);
            aTemplateParameter.getConstrainingClasses().addAll(ECORE__171_collect_187);
            aTemplateParameter.setName(name);
            boolean m_TypeParameterCS_name_ownedExtends_pivot = ValueUtil.TRUE_VALUE;
            return m_TypeParameterCS_name_ownedExtends_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TypeParameterCS_name_ownedExtends_pivot", e);
        }
    }
    
    /**
     * 
     * map m_TypeParameterCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lTypeParameterCS : basecs::TypeParameterCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rTemplateParameter : TemplateParameter[1];
     *  |}
     * where ( |)
     * { |
     * lTypeParameterCS.pivot := rTemplateParameter;
     * }
     * 
     */
    protected boolean MAP_m_TypeParameterCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.NonNull TypeParameterCS lTypeParameterCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable TemplateParameter rTemplateParameter = PivotFactory.eINSTANCE.createTemplateParameter();
            assert rTemplateParameter != null;
            models[1/*rightAS*/].add(rTemplateParameter);
            // property assignments
            lTypeParameterCS_0.setPivot(rTemplateParameter);
            boolean m_TypeParameterCS_pivot = ValueUtil.TRUE_VALUE;
            return m_TypeParameterCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_TypeParameterCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_UnlimitedNaturalLiteralExpCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lUnlimitedNaturalLiteralExpCS : essentialoclcs::UnlimitedNaturalLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rUnlimitedNaturalLiteralExp : UnlimitedNaturalLiteralExp[1];
     *  |}
     * where ( |)
     * { |
     * lUnlimitedNaturalLiteralExpCS.pivot := rUnlimitedNaturalLiteralExp;
     * }
     * 
     */
    protected boolean MAP_m_UnlimitedNaturalLiteralExpCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull UnlimitedNaturalLiteralExpCS lUnlimitedNaturalLiteralExpCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable UnlimitedNaturalLiteralExp rUnlimitedNaturalLiteralExp = PivotFactory.eINSTANCE.createUnlimitedNaturalLiteralExp();
            assert rUnlimitedNaturalLiteralExp != null;
            models[1/*rightAS*/].add(rUnlimitedNaturalLiteralExp);
            // property assignments
            lUnlimitedNaturalLiteralExpCS.setPivot(rUnlimitedNaturalLiteralExp);
            boolean m_UnlimitedNaturalLiteralExpCS_pivot = ValueUtil.TRUE_VALUE;
            return m_UnlimitedNaturalLiteralExpCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_UnlimitedNaturalLiteralExpCS_pivot", e);
        }
    }
    
    /**
     * 
     * map m_UnlimitedNaturalLiteralExpCS_pivot_1 in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lUnlimitedNaturalLiteralExpCS : essentialoclcs::UnlimitedNaturalLiteralExpCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {UnlimitedNatural : UnlimitedNatural[1] = UnlimitedNatural{
     *   }
     *   ;
     * aUnlimitedNaturalLiteralExp : UnlimitedNaturalLiteralExp[1] = lUnlimitedNaturalLiteralExpCS.pivot.oclAsType(UnlimitedNaturalLiteralExp);
     * pivot : Element[?] = lUnlimitedNaturalLiteralExpCS.pivot;
     *  |
     * aUnlimitedNaturalLiteralExp.name := '*';
     * aUnlimitedNaturalLiteralExp.unlimitedNaturalSymbol := UnlimitedNatural;
     * }
     * 
     */
    protected boolean MAP_m_UnlimitedNaturalLiteralExpCS_pivot_1(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull UnlimitedNaturalLiteralExpCS lUnlimitedNaturalLiteralExpCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_UnlimitedNatural_0 = idResolver.getClass(TypeId.UNLIMITED_NATURAL, null);
            final /*@NonInvalid*/ java.lang.@org.eclipse.jdt.annotation.NonNull Number UnlimitedNatural = (Number)PivotFactory.eINSTANCE.createFromString(PivotPackage.Literals.UNLIMITED_NATURAL, "");
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_UnlimitedNaturalLiteralExp_0 = idResolver.getClass(CLSSid_UnlimitedNaturalLiteralExp, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lUnlimitedNaturalLiteralExpCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull UnlimitedNaturalLiteralExp aUnlimitedNaturalLiteralExp = ClassUtil.nonNullState((UnlimitedNaturalLiteralExp)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_UnlimitedNaturalLiteralExp_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lUnlimitedNaturalLiteralExpCS_0.getPivot();
            // property assignments
            aUnlimitedNaturalLiteralExp.setName(STR_prod);
            aUnlimitedNaturalLiteralExp.setUnlimitedNaturalSymbol(UnlimitedNatural);
            boolean m_UnlimitedNaturalLiteralExpCS_pivot_1 = ValueUtil.TRUE_VALUE;
            return m_UnlimitedNaturalLiteralExpCS_pivot_1;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_UnlimitedNaturalLiteralExpCS_pivot_1", e);
        }
    }
    
    /**
     * 
     * map m_VariableCS_name_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lVariableCS : essentialoclcs::VariableCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aVariable : Variable[1] = lVariableCS.pivot.oclAsType(Variable);
     * name : String[?] = lVariableCS.name;
     * pivot : Element[?] = lVariableCS.pivot;
     *  |
     * aVariable.name := name;
     * }
     * 
     */
    protected boolean MAP_m_VariableCS_name_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS lVariableCS) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Variable_0 = idResolver.getClass(CLSSid_Variable, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lVariableCS.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Variable aVariable = ClassUtil.nonNullState((Variable)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Variable_0));
            final /*@Thrown*/ java.lang.@org.eclipse.jdt.annotation.Nullable String name = lVariableCS.getName();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lVariableCS.getPivot();
            // property assignments
            aVariable.setName(name);
            boolean m_VariableCS_name_pivot = ValueUtil.TRUE_VALUE;
            return m_VariableCS_name_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_VariableCS_name_pivot", e);
        }
    }
    
    /**
     * 
     * map m_VariableCS_ownedInitExpression_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lVariableCS : essentialoclcs::VariableCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aVariable : Variable[1] = lVariableCS.pivot.oclAsType(Variable)
     *   ;
     * ownedInitExpression : essentialoclcs::ExpCS[?] = lVariableCS.ownedInitExpression;
     * pivot : Element[?] = lVariableCS.pivot;
     * aOCLExpression : OCLExpression[1] = ownedInitExpression.pivot.oclAsType(OCLExpression);
     * pivot1 : Element[?] = ownedInitExpression.pivot;
     *  |
     * aVariable.ownedInit := aOCLExpression;
     * }
     * 
     */
    protected boolean MAP_m_VariableCS_ownedInitExpression_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS lVariableCS_0) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Variable_0 = idResolver.getClass(CLSSid_Variable, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lVariableCS_0.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Variable aVariable = ClassUtil.nonNullState((Variable)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Variable_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.Nullable ExpCS ownedInitExpression = lVariableCS_0.getOwnedInitExpression();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lVariableCS_0.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_OCLExpression_0 = idResolver.getClass(CLSSid_OCLExpression, null);
            if (ownedInitExpression == null) {
                throw throwNull(lVariableCS_0, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedInitExpression.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull OCLExpression aOCLExpression = ClassUtil.nonNullState((OCLExpression)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_OCLExpression_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedInitExpression.getPivot();
            // property assignments
            aVariable.setOwnedInit(aOCLExpression);
            boolean m_VariableCS_ownedInitExpression_pivot = ValueUtil.TRUE_VALUE;
            return m_VariableCS_ownedInitExpression_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_VariableCS_ownedInitExpression_pivot", e);
        }
    }
    
    /**
     * 
     * map m_VariableCS_ownedType_pivot in EssentialOCLCS2AS_qvtp_qvtcas {
     *   leftCS (lVariableCS : essentialoclcs::VariableCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * { |}
     * where ( |)
     * {aVariable : Variable[1] = lVariableCS.pivot.oclAsType(Variable)
     *   ;
     * ownedType : basecs::TypedRefCS[?] = lVariableCS.ownedType;
     * pivot : Element[?] = lVariableCS.pivot;
     * aClass : Class[1] = ownedType.pivot.oclAsType(Class);
     * pivot1 : Element[?] = ownedType.pivot;
     *  |
     * aVariable.type := aClass;
     * }
     * 
     */
    protected boolean MAP_m_VariableCS_ownedType_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS lVariableCS_1) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.ids.@org.eclipse.jdt.annotation.NonNull IdResolver idResolver = executor.getIdResolver();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Variable_0 = idResolver.getClass(CLSSid_Variable, null);
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot = lVariableCS_1.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Variable aVariable = ClassUtil.nonNullState((Variable)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot, TYP_Variable_0));
            final /*@Thrown*/ org.eclipse.ocl.xtext.basecs.@org.eclipse.jdt.annotation.Nullable TypedRefCS ownedType = lVariableCS_1.getOwnedType();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_0 = lVariableCS_1.getPivot();
            final /*@NonInvalid*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class TYP_Class_0 = idResolver.getClass(CLSSid_Class, null);
            if (ownedType == null) {
                throw throwNull(lVariableCS_1, "Null source for \'\'http://www.eclipse.org/ocl/2015/BaseCS\'::PivotableElementCS::pivot\'");
            }
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot_1 = ownedType.getPivot();
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.NonNull Class aClass = ClassUtil.nonNullState((Class)OclAnyOclAsTypeOperation.INSTANCE.evaluate(executor, pivot_1, TYP_Class_0));
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Element pivot1 = ownedType.getPivot();
            // property assignments
            aVariable.setType(aClass);
            objectManager.assigned(aVariable, PivotPackage.Literals.TYPED_ELEMENT__TYPE, aClass, null);
            boolean m_VariableCS_ownedType_pivot = ValueUtil.TRUE_VALUE;
            return m_VariableCS_ownedType_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_VariableCS_ownedType_pivot", e);
        }
    }
    
    /**
     * 
     * map m_VariableCS_pivot in EssentialOCLCS2AS_qvtp_qvtcas {leftCS (lVariableCS : essentialoclcs::VariableCS[?];
     *  |)
     * { |}
     * rightAS ( |)
     * {realize rVariable : Variable[1];
     *  |}
     * where ( |)
     * { |
     * lVariableCS.pivot := rVariable;
     * }
     * 
     */
    protected boolean MAP_m_VariableCS_pivot(final /*@NonInvalid*/ org.eclipse.ocl.xtext.essentialoclcs.@org.eclipse.jdt.annotation.NonNull VariableCS lVariableCS_2) throws ReflectiveOperationException {
        try {
            // predicates and unrealized variables
            // creations
            final /*@Thrown*/ org.eclipse.ocl.pivot.@org.eclipse.jdt.annotation.Nullable Variable rVariable = PivotFactory.eINSTANCE.createVariable();
            assert rVariable != null;
            models[1/*rightAS*/].add(rVariable);
            // property assignments
            lVariableCS_2.setPivot(rVariable);
            boolean m_VariableCS_pivot = ValueUtil.TRUE_VALUE;
            return m_VariableCS_pivot;
        } catch (Throwable e) {
            return handleExecutionFailure("MAP_m_VariableCS_pivot", e);
        }
    }
}
