/*******************************************************************************
 * Copyright (c) 2015, 2021 Willink Transformations and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 *   E.D.Willink - Initial API and implementation
 *******************************************************************************/
package org.eclipse.ocl.pivot.evaluation;

import java.util.regex.Pattern;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.ocl.pivot.NamedElement;
import org.eclipse.ocl.pivot.OCLExpression;
import org.eclipse.ocl.pivot.StandardLibrary;
import org.eclipse.ocl.pivot.TypedElement;
import org.eclipse.ocl.pivot.ids.IdResolver;
import org.eclipse.ocl.pivot.internal.evaluation.ExecutorInternal;
import org.eclipse.ocl.pivot.utilities.EnvironmentFactory;
import org.eclipse.ocl.pivot.utilities.MetamodelManager;

/**
 * @since 1.1
 */
public interface Executor
{
	void add(@NonNull TypedElement referredVariable, @Nullable Object value);

	/**
	 * Return an executor suitable for iterpreted execution. May return this if already suitable for
	 * interpretation execution, or a delegate if an interpreted executor has already been configured
	 * for this lightweight executor,
	 *
	 * @since 1.18
	 */
	default @Nullable ExecutorInternal basicGetInterpretedExecutor() {
		return null;
	}
	void dispose();
	@Nullable Object evaluate(@NonNull OCLExpression body);
	@NonNull EnvironmentFactory getEnvironmentFactory();
	@NonNull EvaluationEnvironment getEvaluationEnvironment();
	@NonNull IdResolver getIdResolver();
	@Nullable EvaluationLogger getLogger();
	@NonNull MetamodelManager getMetamodelManager();
	@NonNull ModelManager getModelManager();
	@NonNull Pattern getRegexPattern(@NonNull String regex);

	/**
	 * Return the StatusCodes severity with which the validation identified by validationKey is reported.
	 * The validationKey is typically a string such as "ClassName::ConstraintName" for which static literals are
	 * available in an autogenerated *Table file as STR_Classname_c_c_ConstraintName.
	 * <p>
	 * StatusCodes.OK severity suppresses the validation altogether.
	 * <br>
	 * StatusCodes.Warning is returned for any null or unknown key.
	 */
	int getSeverity(@Nullable Object validationKey);
	@NonNull StandardLibrary getStandardLibrary();
	/**
	 * @since 7.0
	 */
	org.eclipse.ocl.pivot.@NonNull Class getStaticClassOf(@Nullable Object value);

	void popEvaluationEnvironment();
	/**
	 * @since 7.0
	 */
	@NonNull EvaluationEnvironment pushEvaluationEnvironment(@NonNull NamedElement executableObject, @Nullable Object caller);
	void replace(@NonNull TypedElement referredVariable, @Nullable Object value);
	/**
	 * @since 7.0
	 */
	void resetCaches();

	/**
	 * @since 1.18
	 */
	default void setInterpretedExecutor(@Nullable ExecutorInternal interpretedExecutor) {
		return;
	}

	/**
	 * Specify the logger to handle oclLog() invocations or null for none.
	 */
	void setLogger(@Nullable EvaluationLogger logger);
}
