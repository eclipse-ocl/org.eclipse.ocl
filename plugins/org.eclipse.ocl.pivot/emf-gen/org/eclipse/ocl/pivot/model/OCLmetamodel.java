/*******************************************************************************
 * Copyright (c) 2010, 2023 Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 *   E.D.Willink - initial API and implementation
 *******************************************************************************
 * This code is 100% auto-generated
 * from: /org.eclipse.ocl.pivot/model/Pivot.ecore
 * by: org.eclipse.ocl.examples.build.xtend.GenerateOCLmetamodel.xtend
 * and: org.eclipse.ocl.examples.build.GeneratePivotMetamodel.mwe2
 *
 * Do not edit it.
 *******************************************************************************/
package	org.eclipse.ocl.pivot.model;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.ocl.pivot.Class;
import org.eclipse.ocl.pivot.CollectionType;
import org.eclipse.ocl.pivot.Enumeration;
import org.eclipse.ocl.pivot.EnumerationLiteral;
import org.eclipse.ocl.pivot.Model;
import org.eclipse.ocl.pivot.Operation;
import org.eclipse.ocl.pivot.Package;
import org.eclipse.ocl.pivot.Parameter;
import org.eclipse.ocl.pivot.PivotPackage;
import org.eclipse.ocl.pivot.Property;
import org.eclipse.ocl.pivot.StandardLibrary;
import org.eclipse.ocl.pivot.TemplateParameter;
import org.eclipse.ocl.pivot.ids.IdManager;
import org.eclipse.ocl.pivot.internal.library.StandardLibraryContribution;
import org.eclipse.ocl.pivot.internal.resource.ASResourceImpl;
import org.eclipse.ocl.pivot.internal.resource.OCLASResourceFactory;
import org.eclipse.ocl.pivot.internal.utilities.AbstractContents;
import org.eclipse.ocl.pivot.utilities.PivotConstants;

/**
 * This is the pivot representation of the http://www.eclipse.org/ocl/2015/Pivot metamodel
 * auto-generated from /org.eclipse.ocl.pivot/model/Pivot.ecore.
 * It facilitates efficient model loading without the overheads of model reading.
 */
@SuppressWarnings("unused")
public class OCLmetamodel extends ASResourceImpl
{
	/**
	 *	The static package-of-types pivot model of the Pivot Metamodel.
	 */
	private static OCLmetamodel INSTANCE = null;

	/**
	 *	The URI of this Metamodel.
	 */
	public static final @NonNull String PIVOT_URI = "http://www.eclipse.org/ocl/2015/Pivot";

	/**
	 *	The URI of the AS representation of this Metamodel.
	 */
	public static final @NonNull URI PIVOT_AS_URI = URI.createURI("http://www.eclipse.org/ocl/2015/Pivot" + PivotConstants.DOT_OCL_AS_FILE_EXTENSION);

	public static @NonNull Package create(@NonNull StandardLibrary standardLibrary, @NonNull String name, @Nullable String nsPrefix, @NonNull String nsURI) {
		OCLmetamodel metamodelResource = new ReadOnly(PIVOT_AS_URI);
		Package standardLibraryPackage = standardLibrary.getOclAnyType().getOwningPackage();
		assert standardLibraryPackage != null;
		Contents contents = new Contents(metamodelResource, standardLibraryPackage, name, nsPrefix, nsURI);
		Model model = contents.getModel();
		@SuppressWarnings("null")@NonNull Package pkge = model.getOwnedPackages().get(0);
		return pkge;
	}

	/**
	 * Return the default http://www.eclipse.org/ocl/2015/Pivot metamodel Resource using the default OCL Standard Library.
	 *  This static definition auto-generated from /org.eclipse.ocl.pivot/model/Pivot.ecore
	 *  is used as the default when no overriding copy is registered.
	 */
	public static @NonNull OCLmetamodel getDefault() {
		OCLmetamodel metamodelResource = INSTANCE;
		if (metamodelResource == null) {
			metamodelResource = INSTANCE = new ReadOnly(PIVOT_AS_URI);
			Contents contents = new Contents(metamodelResource, OCLstdlib.getDefaultPackage(), "pivot", "pivot", PIVOT_URI);
			metamodelResource.setSaveable(false);
		}
		return metamodelResource;
	}

	/**
	 * Return the default http://www.eclipse.org/ocl/2015/Pivot metamodel Model using the default OCL Standard Library.
	 *  This static definition auto-generated from /org.eclipse.ocl.pivot/model/Pivot.ecore
	 *  is used as the default when no overriding copy is registered.
	 */
	public static @NonNull Model getDefaultModel() {
		Model model = (Model)(getDefault().getContents().get(0));
		assert model != null;
		return model;
	}

	/**
	 * Return the default http://www.eclipse.org/ocl/2015/Pivot metamodel Package using the default OCL Standard Library.
	 *  This static definition auto-generated from /org.eclipse.ocl.pivot/model/Pivot.ecore
	 *  is used as the default when no overriding copy is registered.
	 */
	public static @NonNull Package getDefaultPackage() {
		Package pkge = getDefaultModel().getOwnedPackages().get(0);
		assert pkge != null;
		return pkge;
	}

	/**
	 * Install this metamodel in the {@link OCLASResourceFactory#REGISTRY}.
	 * This method may be invoked by standalone applications to replicate
	 * the registration that should appear as a standard_library plugin
	 * extension when running within Eclipse.
	 */
	public static void install() {
		Loader contribution = new Loader();
		OCLASResourceFactory.REGISTRY.put(PIVOT_AS_URI, contribution);
	}

	/**
	 * Install this metamodel in the {@link OCLASResourceFactory#REGISTRY}
	 * unless some other metamodel contribution has already been installed.
	 */
	public static void lazyInstall() {
		if (OCLASResourceFactory.REGISTRY.get(PIVOT_AS_URI) == null) {
			install();
		}
	}

	/**
	 * Uninstall this metamodel from the {@link OCLASResourceFactory#REGISTRY}.
	 * This method may be invoked by standalone applications to release the library
	 * resources for garbage collection and memory leakage detection.
	 */
	public static void uninstall() {
		OCLASResourceFactory.REGISTRY.remove(PIVOT_AS_URI);
		INSTANCE = null;
	}

	protected OCLmetamodel(@NonNull URI uri) {
		super(uri, OCLASResourceFactory.getInstance());
	}

	protected static class LibraryContents extends AbstractContents
	{
		protected final @NonNull Package libraryPackage;

		protected LibraryContents(@NonNull Package libraryPackage) {
			this.libraryPackage = libraryPackage;
		}
	}

	/**
	 * The Loader shares the metamodel instance whenever this default metamodel
	 * is loaded from the registry of known pivot metamodels.
	 */
	public static class Loader implements StandardLibraryContribution
	{
		@Override
		public @NonNull StandardLibraryContribution getContribution() {
			return this;
		}

		@Override
		public @NonNull Resource getResource() {
			return getDefault();
		}
	}

	/**
	 * A ReadOnly OCLmetamodel overrides inherited functionality to impose immutable shared behaviour.
	 */
	protected static class ReadOnly extends OCLmetamodel implements ImmutableResource
	{
		protected ReadOnly(@NonNull URI uri) {
			super(uri);
		}

		/**
		 * Overridden to inhibit entry of the shared instance in any ResourceSet.
		 */
		@Override
		public NotificationChain basicSetResourceSet(ResourceSet resourceSet, NotificationChain notifications) {
			return notifications;
		}

		/**
		 * Overridden to inhibit unloading of the shared instance.
		 */
		@Override
		protected void doUnload() {}

		@Override
		public boolean isCompatibleWith(@NonNull String metamodelURI) {
			return org.eclipse.ocl.pivot.model.OCLmetamodel.PIVOT_URI.equals(metamodelURI);
		}

		/**
		 * Overridden to trivialise loading of the shared instance.
		 */
		@Override
		public void load(Map<?, ?> options) throws IOException {
			if (this != INSTANCE) {
				super.load(options);
			}
			else {
				setLoaded(true);
			}
		}

		/**
		 * Overridden to inhibit unloading of the shared instance.
		 */
		@Override
		protected Notification setLoaded(boolean isLoaded) {
			if (isLoaded) {
				return super.setLoaded(isLoaded);
			}
			else {
				return null;
			}
		}
	}

	private static class Contents extends LibraryContents
	{
		private final @NonNull Model root;
		private final @NonNull Package pivot;

		protected Contents(@NonNull OCLmetamodel metamodelResource, @NonNull Package libraryPackage, @NonNull String name, @Nullable String nsPrefix, @NonNull String nsURI) {
			super(libraryPackage);
			root = createModel("http://www.eclipse.org/ocl/2015/Pivot");
			metamodelResource.getContents().add(root);
			pivot = createPackage("pivot", "pivot", "http://www.eclipse.org/ocl/2015/Pivot", IdManager.METAMODEL, PivotPackage.eINSTANCE);
			installPackages();
			installClassTypes();
			installEnumerations();
			installGenericAggregateTypes();
			installOperationDeclarations();
			installSpecializedAggregateTypes0();
			installAggregateSuperTypes();
			installOperationBodies();
			installProperties();
		}

		public @NonNull Model getModel() {
			return root;
		}

		private final @NonNull Package _ocl = libraryPackage;
		private final @NonNull CollectionType _Bag = getCollectionType(_ocl, "Bag");
		private final @NonNull Class _Boolean = getClass(_ocl, "Boolean");
		private final @NonNull CollectionType _Collection = getCollectionType(_ocl, "Collection");
		private final @NonNull Class _Integer = getClass(_ocl, "Integer");
		private final @NonNull Class _OclAny = getClass(_ocl, "OclAny");
		private final @NonNull Class _OclElement = getClass(_ocl, "OclElement");
		private final @NonNull Class _OclEnumeration = getClass(_ocl, "OclEnumeration");
		private final @NonNull CollectionType _OrderedCollection = getCollectionType(_ocl, "OrderedCollection");
		private final @NonNull CollectionType _OrderedSet = getCollectionType(_ocl, "OrderedSet");
		private final @NonNull Class _Real = getClass(_ocl, "Real");
		private final @NonNull CollectionType _Sequence = getCollectionType(_ocl, "Sequence");
		private final @NonNull CollectionType _Set = getCollectionType(_ocl, "Set");
		private final @NonNull Class _String = getClass(_ocl, "String");
		private final @NonNull CollectionType _UniqueCollection = getCollectionType(_ocl, "UniqueCollection");
		private final @NonNull Class _UnlimitedNatural = getClass(_ocl, "UnlimitedNatural");
		private final @NonNull TemplateParameter _Bag_T = getTemplateParameter(_Bag, 0);
		private final @NonNull TemplateParameter _Collection_T = getTemplateParameter(_Collection, 0);
		private final @NonNull TemplateParameter _OrderedCollection_T = getTemplateParameter(_OrderedCollection, 0);
		private final @NonNull TemplateParameter _OrderedSet_T = getTemplateParameter(_OrderedSet, 0);
		private final @NonNull TemplateParameter _Sequence_T = getTemplateParameter(_Sequence, 0);
		private final @NonNull TemplateParameter _Set_T = getTemplateParameter(_Set, 0);
		private final @NonNull TemplateParameter _UniqueCollection_T = getTemplateParameter(_UniqueCollection, 0);

		private void installPackages() {
			root.getOwnedPackages().add(pivot);
			root.getOwnedPackages().add(orphanage.getPackage());
			root.getOwnedImports().add(createImport(null, _ocl));
		}

		private Class _Annotation;
		private Class _AnyType;
		private Class _AssociationClass;
		private Class _AssociationClassCallExp;
		private Class _BagType;
		private Class _Behavior;
		private Class _BooleanLiteralExp;
		private Class _BooleanType;
		private Class _CallExp;
		private Class _CallOperationAction;
		private Class _Class;
		private Class _CollectionItem;
		private Class _CollectionLiteralExp;
		private Class _CollectionLiteralPart;
		private Class _CollectionRange;
		private Class _CollectionType;
		private Class _Comment;
		private Class _CompleteClass;
		private Class _CompleteEnvironment;
		private Class _CompleteModel;
		private Class _CompletePackage;
		private Class _CompleteStandardLibrary;
		private Class _ConnectionPointReference;
		private Class _Constraint;
		private Class _DataType;
		private Class _Detail;
		private Class _DynamicBehavior;
		private Class _DynamicElement;
		private Class _DynamicProperty;
		private Class _DynamicType;
		private Class _DynamicValueSpecification;
		private Class _EBoolean;
		private Class _EInt;
		private Class _EcoreObject;
		private Class _Element;
		private Class _ElementExtension;
		private Class _ElementLiteralExp;
		private Class _EnumLiteralExp;
		private Class _Enumeration;
		private Class _EnumerationLiteral;
		private Class _ExpressionInOCL;
		private Class _Feature;
		private Class _FeatureCallExp;
		private Class _FinalState;
		private Class _IfExp;
		private Class _Import;
		private Class _InstanceSpecification;
		private Class _IntegerLiteralExp;
		private Class _InvalidLiteralExp;
		private Class _InvalidType;
		private Class _IterableType;
		private Class _IterateExp;
		private Class _Iteration;
		private Class _IteratorExp;
		private Class _IteratorVariable;
		private Class _JavaClass;
		private Class _JavaType;
		private Class _LambdaType;
		private Class _LanguageExpression;
		private Class _LetExp;
		private Class _LetVariable;
		private Class _Library;
		private Class _LibraryFeature;
		private Class _LiteralExp;
		private Class _LoopExp;
		private Class _MapLiteralExp;
		private Class _MapLiteralPart;
		private Class _MapType;
		private Class _MessageExp;
		private Class _MessageType;
		private Class _Model;
		private Class _MorePivotable;
		private Class _Nameable;
		private Class _NamedElement;
		private Class _Namespace;
		private Class _NavigationCallExp;
		private Class _NullLiteralExp;
		private Class _Number;
		private Class _NumericLiteralExp;
		private Class _OCLExpression;
		private Class _Object;
		private Class _Operation;
		private Class _OperationCallExp;
		private Class _OppositePropertyCallExp;
		private Class _OrderedSetType;
		private Class _OrphanCompletePackage;
		private Class _Package;
		private Class _Parameter;
		private Class _ParameterVariable;
		private Class _Pivotable;
		private Class _Precedence;
		private Class _PrimitiveCompletePackage;
		private Class _PrimitiveLiteralExp;
		private Class _PrimitiveType;
		private Class _Profile;
		private Class _ProfileApplication;
		private Class _Property;
		private Class _PropertyCallExp;
		private Class _Pseudostate;
		private Class _RealLiteralExp;
		private Class _ReferringElement;
		private Class _ReflectiveStandardLibrary;
		private Class _Region;
		private Class _ResultVariable;
		private Class _SelfType;
		private Class _SendSignalAction;
		private Class _SequenceType;
		private Class _SetType;
		private Class _ShadowExp;
		private Class _ShadowPart;
		private Class _Signal;
		private Class _Slot;
		private Class _StandardLibrary;
		private Class _State;
		private Class _StateExp;
		private Class _StateMachine;
		private Class _Stereotype;
		private Class _StereotypeExtender;
		private Class _StringLiteralExp;
		private Class _TemplateBinding;
		private Class _TemplateParameter;
		private Class _TemplateParameterSubstitution;
		private Class _TemplateSignature;
		private Class _TemplateableElement;
		private Class _Throwable;
		private Class _Transition;
		private Class _Trigger;
		private Class _TupleLiteralExp;
		private Class _TupleLiteralPart;
		private Class _TuplePart;
		private Class _TupleType;
		private Class _Type;
		private Class _TypeExp;
		private Class _TypedElement;
		private Class _UnlimitedNaturalLiteralExp;
		private Class _UnspecifiedValueExp;
		private Class _ValueSpecification;
		private Class _Variable;
		private Class _VariableDeclaration;
		private Class _VariableExp;
		private Class _Vertex;
		private Class _Visitable;
		private Class _VoidType;
		private Class _WildcardType;

		private void installClassTypes() {
			Class type;

			type = _Annotation = createClass(pivot, PivotPackage.Literals.ANNOTATION);
			type = _AnyType = createClass(pivot, PivotPackage.Literals.ANY_TYPE);
			type = _AssociationClass = createClass(pivot, PivotPackage.Literals.ASSOCIATION_CLASS);
			installComment(type, "A link is a tuple of values that refer to typed objects.  An Association classifies a set of links, each of which is an instance of the Association.  Each value in the link refers to an instance of the type of the corresponding end of the Association.\n\nA model element that has both Association and Class properties. An AssociationClass can be seen as an Association that also has Class properties, or as a Class that also has Association properties. It not only connects a set of Classifiers but also defines a set of Features that belong to the Association itself and not to any of the associated Classifiers.");
			type = _AssociationClassCallExp = createClass(pivot, PivotPackage.Literals.ASSOCIATION_CLASS_CALL_EXP);
			type = _BagType = createClass(pivot, PivotPackage.Literals.BAG_TYPE);
			type = _Behavior = createClass(pivot, PivotPackage.Literals.BEHAVIOR);
			type.setIsAbstract(true);
			installComment(type, "Behavior is a specification of how its context BehavioredClassifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution.");
			type = _BooleanLiteralExp = createClass(pivot, PivotPackage.Literals.BOOLEAN_LITERAL_EXP);
			type = _BooleanType = createClass(pivot, PivotPackage.Literals.BOOLEAN_TYPE);
			type = _CallExp = createClass(pivot, PivotPackage.Literals.CALL_EXP);
			type.setIsAbstract(true);
			type = _CallOperationAction = createClass(pivot, PivotPackage.Literals.CALL_OPERATION_ACTION);
			type = _Class = createClass(pivot, PivotPackage.Literals.CLASS);
			installComment(type, "A Class classifies a set of objects and specifies the features that characterize the structure and behavior of those objects.  A Class may have an internal structure and Ports.\n\nA Classifier represents a classification of instances according to their Features.\n\nStructuredClassifiers may contain an internal structure of connected elements each of which plays a role in the overall Behavior modeled by the StructuredClassifier.");
			type = _CollectionItem = createClass(pivot, PivotPackage.Literals.COLLECTION_ITEM);
			type = _CollectionLiteralExp = createClass(pivot, PivotPackage.Literals.COLLECTION_LITERAL_EXP);
			type = _CollectionLiteralPart = createClass(pivot, PivotPackage.Literals.COLLECTION_LITERAL_PART);
			type.setIsAbstract(true);
			type = _CollectionRange = createClass(pivot, PivotPackage.Literals.COLLECTION_RANGE);
			type = _CollectionType = createClass(pivot, PivotPackage.Literals.COLLECTION_TYPE);
			type = _Comment = createClass(pivot, PivotPackage.Literals.COMMENT);
			installComment(type, "A Comment is a textual annotation that can be attached to a set of Elements.");
			type = _CompleteClass = createClass(pivot, PivotPackage.Literals.COMPLETE_CLASS);
			type = _CompleteEnvironment = createClass(pivot, PivotPackage.Literals.COMPLETE_ENVIRONMENT);
			type = _CompleteModel = createClass(pivot, PivotPackage.Literals.COMPLETE_MODEL);
			type = _CompletePackage = createClass(pivot, PivotPackage.Literals.COMPLETE_PACKAGE);
			type = _CompleteStandardLibrary = createClass(pivot, PivotPackage.Literals.COMPLETE_STANDARD_LIBRARY);
			type = _ConnectionPointReference = createClass(pivot, PivotPackage.Literals.CONNECTION_POINT_REFERENCE);
			installComment(type, "A ConnectionPointReference represents a usage (as part of a submachine State) of an entry/exit point Pseudostate defined in the StateMachine referenced by the submachine State.");
			type = _Constraint = createClass(pivot, PivotPackage.Literals.CONSTRAINT);
			installComment(type, "A Constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an Element or set of Elements.");
			type = _DataType = createClass(pivot, PivotPackage.Literals.DATA_TYPE);
			installComment(type, "A DataType is a type whose instances are identified only by their value.");
			type = _Detail = createClass(pivot, PivotPackage.Literals.DETAIL);
			type = _DynamicBehavior = createClass(pivot, PivotPackage.Literals.DYNAMIC_BEHAVIOR);
			type = _DynamicElement = createClass(pivot, PivotPackage.Literals.DYNAMIC_ELEMENT);
			type = _DynamicProperty = createClass(pivot, PivotPackage.Literals.DYNAMIC_PROPERTY);
			type = _DynamicType = createClass(pivot, PivotPackage.Literals.DYNAMIC_TYPE);
			type = _DynamicValueSpecification = createClass(pivot, PivotPackage.Literals.DYNAMIC_VALUE_SPECIFICATION);
			type = _EBoolean = createClass(pivot, PivotPackage.Literals.EBOOLEAN);
			installComment(type, "EBoolean is used within the Pivot AS to support precisely non-null true/false values.");
			type = _EInt = createClass(pivot, PivotPackage.Literals.EINT);
			installComment(type, "EInt is used within the Pivot AS to support precisely non-null small integer values.");
			type = _EcoreObject = createClass(pivot, PivotPackage.Literals.ECORE_OBJECT);
			type = _Element = createClass(pivot, PivotPackage.Literals.ELEMENT);
			type.setIsAbstract(true);
			installComment(type, "An Element is a constituent of a model. As such, it has the capability of owning other Elements.");
			type = _ElementExtension = createClass(pivot, PivotPackage.Literals.ELEMENT_EXTENSION);
			type = _ElementLiteralExp = createClass(pivot, PivotPackage.Literals.ELEMENT_LITERAL_EXP);
			type = _EnumLiteralExp = createClass(pivot, PivotPackage.Literals.ENUM_LITERAL_EXP);
			type = _Enumeration = createClass(pivot, PivotPackage.Literals.ENUMERATION);
			installComment(type, "An Enumeration is a DataType whose values are enumerated in the model as EnumerationLiterals.");
			type = _EnumerationLiteral = createClass(pivot, PivotPackage.Literals.ENUMERATION_LITERAL);
			installComment(type, "An EnumerationLiteral is a user-defined data value for an Enumeration.");
			type = _ExpressionInOCL = createClass(pivot, PivotPackage.Literals.EXPRESSION_IN_OCL);
			type = _Feature = createClass(pivot, PivotPackage.Literals.FEATURE);
			type.setIsAbstract(true);
			installComment(type, "A Feature declares a behavioral or structural characteristic of Classifiers.");
			type = _FeatureCallExp = createClass(pivot, PivotPackage.Literals.FEATURE_CALL_EXP);
			type.setIsAbstract(true);
			type = _FinalState = createClass(pivot, PivotPackage.Literals.FINAL_STATE);
			installComment(type, "A special kind of State, which, when entered, signifies that the enclosing Region has completed. If the enclosing Region is directly contained in a StateMachine and all other Regions in that StateMachine also are completed, then it means that the entire StateMachine behavior is completed.");
			type = _IfExp = createClass(pivot, PivotPackage.Literals.IF_EXP);
			type = _Import = createClass(pivot, PivotPackage.Literals.IMPORT);
			type = _InstanceSpecification = createClass(pivot, PivotPackage.Literals.INSTANCE_SPECIFICATION);
			installComment(type, "An InstanceSpecification is a model element that represents an instance in a modeled system. An InstanceSpecification can act as a DeploymentTarget in a Deployment relationship, in the case that it represents an instance of a Node. It can also act as a DeployedArtifact, if it represents an instance of an Artifact.");
			type = _IntegerLiteralExp = createClass(pivot, PivotPackage.Literals.INTEGER_LITERAL_EXP);
			type = _InvalidLiteralExp = createClass(pivot, PivotPackage.Literals.INVALID_LITERAL_EXP);
			type = _InvalidType = createClass(pivot, PivotPackage.Literals.INVALID_TYPE);
			type = _IterableType = createClass(pivot, PivotPackage.Literals.ITERABLE_TYPE);
			type.setIsAbstract(true);
			type = _IterateExp = createClass(pivot, PivotPackage.Literals.ITERATE_EXP);
			type = _Iteration = createClass(pivot, PivotPackage.Literals.ITERATION);
			type = _IteratorExp = createClass(pivot, PivotPackage.Literals.ITERATOR_EXP);
			type = _IteratorVariable = createClass(pivot, PivotPackage.Literals.ITERATOR_VARIABLE);
			type = _JavaClass = createClass(pivot, PivotPackage.Literals.JAVA_CLASS);
			type = _JavaType = createClass(pivot, PivotPackage.Literals.JAVA_TYPE);
			installComment(type, "JavaType supports the use of a Java class as part of a foreign operation or property call.");
			type = _LambdaType = createClass(pivot, PivotPackage.Literals.LAMBDA_TYPE);
			type = _LanguageExpression = createClass(pivot, PivotPackage.Literals.LANGUAGE_EXPRESSION);
			type.setIsAbstract(true);
			type = _LetExp = createClass(pivot, PivotPackage.Literals.LET_EXP);
			type = _LetVariable = createClass(pivot, PivotPackage.Literals.LET_VARIABLE);
			type = _Library = createClass(pivot, PivotPackage.Literals.LIBRARY);
			type = _LibraryFeature = createClass(pivot, PivotPackage.Literals.LIBRARY_FEATURE);
			type = _LiteralExp = createClass(pivot, PivotPackage.Literals.LITERAL_EXP);
			type.setIsAbstract(true);
			type = _LoopExp = createClass(pivot, PivotPackage.Literals.LOOP_EXP);
			type.setIsAbstract(true);
			type = _MapLiteralExp = createClass(pivot, PivotPackage.Literals.MAP_LITERAL_EXP);
			type = _MapLiteralPart = createClass(pivot, PivotPackage.Literals.MAP_LITERAL_PART);
			type = _MapType = createClass(pivot, PivotPackage.Literals.MAP_TYPE);
			type = _MessageExp = createClass(pivot, PivotPackage.Literals.MESSAGE_EXP);
			type = _MessageType = createClass(pivot, PivotPackage.Literals.MESSAGE_TYPE);
			type = _Model = createClass(pivot, PivotPackage.Literals.MODEL);
			installComment(type, "A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail.");
			type = _MorePivotable = createClass(pivot, PivotPackage.Literals.MORE_PIVOTABLE);
			type.setIsAbstract(true);
			type = _Nameable = createClass(pivot, PivotPackage.Literals.NAMEABLE);
			type.setIsAbstract(true);
			type = _NamedElement = createClass(pivot, PivotPackage.Literals.NAMED_ELEMENT);
			type.setIsAbstract(true);
			installComment(type, "A NamedElement is an Element in a model that may have a name. The name may be given directly and/or via the use of a StringExpression.");
			type = _Namespace = createClass(pivot, PivotPackage.Literals.NAMESPACE);
			type.setIsAbstract(true);
			installComment(type, "A Namespace is an Element in a model that owns and/or imports a set of NamedElements that can be identified by name.");
			type = _NavigationCallExp = createClass(pivot, PivotPackage.Literals.NAVIGATION_CALL_EXP);
			type.setIsAbstract(true);
			type = _NullLiteralExp = createClass(pivot, PivotPackage.Literals.NULL_LITERAL_EXP);
			type = _Number = createClass(pivot, PivotPackage.Literals.NUMBER);
			installComment(type, "Boolean is used for logical expressions, consisting of the predefined values true and false.");
			type = _NumericLiteralExp = createClass(pivot, PivotPackage.Literals.NUMERIC_LITERAL_EXP);
			type.setIsAbstract(true);
			type = _OCLExpression = createClass(pivot, PivotPackage.Literals.OCL_EXPRESSION);
			type.setIsAbstract(true);
			type = _Object = createClass(pivot, PivotPackage.Literals.OBJECT);
			type = _Operation = createClass(pivot, PivotPackage.Literals.OPERATION);
			installComment(type, "An Operation is a BehavioralFeature of a Classifier that specifies the name, type, parameters, and constraints for invoking an associated Behavior. An Operation may invoke both the execution of method behaviors as well as other behavioral responses. Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.");
			type = _OperationCallExp = createClass(pivot, PivotPackage.Literals.OPERATION_CALL_EXP);
			type = _OppositePropertyCallExp = createClass(pivot, PivotPackage.Literals.OPPOSITE_PROPERTY_CALL_EXP);
			type = _OrderedSetType = createClass(pivot, PivotPackage.Literals.ORDERED_SET_TYPE);
			type = _OrphanCompletePackage = createClass(pivot, PivotPackage.Literals.ORPHAN_COMPLETE_PACKAGE);
			type = _Package = createClass(pivot, PivotPackage.Literals.PACKAGE);
			installComment(type, "A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.\nPackage specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.\nA package is used to group elements, and provides a namespace for the grouped elements.");
			type = _Parameter = createClass(pivot, PivotPackage.Literals.PARAMETER);
			installComment(type, "A Parameter is a specification of an argument used to pass information into or out of an invocation of a BehavioralFeature.  Parameters can be treated as ConnectableElements within Collaborations.");
			type = _ParameterVariable = createClass(pivot, PivotPackage.Literals.PARAMETER_VARIABLE);
			type = _Pivotable = createClass(pivot, PivotPackage.Literals.PIVOTABLE);
			type.setIsAbstract(true);
			type = _Precedence = createClass(pivot, PivotPackage.Literals.PRECEDENCE);
			type = _PrimitiveCompletePackage = createClass(pivot, PivotPackage.Literals.PRIMITIVE_COMPLETE_PACKAGE);
			type = _PrimitiveLiteralExp = createClass(pivot, PivotPackage.Literals.PRIMITIVE_LITERAL_EXP);
			type.setIsAbstract(true);
			type = _PrimitiveType = createClass(pivot, PivotPackage.Literals.PRIMITIVE_TYPE);
			installComment(type, "A PrimitiveType defines a predefined DataType, without any substructure. A PrimitiveType may have an algebra and operations defined outside of UML, for example, mathematically.");
			type = _Profile = createClass(pivot, PivotPackage.Literals.PROFILE);
			installComment(type, "A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain.");
			type = _ProfileApplication = createClass(pivot, PivotPackage.Literals.PROFILE_APPLICATION);
			installComment(type, "A profile application is used to show which profiles have been applied to a package.");
			type = _Property = createClass(pivot, PivotPackage.Literals.PROPERTY);
			installComment(type, "A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template.");
			type = _PropertyCallExp = createClass(pivot, PivotPackage.Literals.PROPERTY_CALL_EXP);
			type = _Pseudostate = createClass(pivot, PivotPackage.Literals.PSEUDOSTATE);
			installComment(type, "A Pseudostate is an abstraction that encompasses different types of transient Vertices in the StateMachine graph. A StateMachine instance never comes to rest in a Pseudostate, instead, it will exit and enter the Pseudostate within a single run-to-completion step.");
			type = _RealLiteralExp = createClass(pivot, PivotPackage.Literals.REAL_LITERAL_EXP);
			type = _ReferringElement = createClass(pivot, PivotPackage.Literals.REFERRING_ELEMENT);
			type.setIsAbstract(true);
			type = _ReflectiveStandardLibrary = createClass(pivot, PivotPackage.Literals.REFLECTIVE_STANDARD_LIBRARY);
			type.setIsAbstract(true);
			type = _Region = createClass(pivot, PivotPackage.Literals.REGION);
			installComment(type, "A Region is a top-level part of a StateMachine or a composite State, that serves as a container for the Vertices and Transitions of the StateMachine. A StateMachine or composite State may contain multiple Regions representing behaviors that may occur in parallel.");
			type = _ResultVariable = createClass(pivot, PivotPackage.Literals.RESULT_VARIABLE);
			type = _SelfType = createClass(pivot, PivotPackage.Literals.SELF_TYPE);
			type = _SendSignalAction = createClass(pivot, PivotPackage.Literals.SEND_SIGNAL_ACTION);
			type = _SequenceType = createClass(pivot, PivotPackage.Literals.SEQUENCE_TYPE);
			type = _SetType = createClass(pivot, PivotPackage.Literals.SET_TYPE);
			type = _ShadowExp = createClass(pivot, PivotPackage.Literals.SHADOW_EXP);
			type = _ShadowPart = createClass(pivot, PivotPackage.Literals.SHADOW_PART);
			type = _Signal = createClass(pivot, PivotPackage.Literals.SIGNAL);
			installComment(type, "A Signal is a specification of a kind of communication between objects in which a reaction is asynchronously triggered in the receiver without a reply.");
			type = _Slot = createClass(pivot, PivotPackage.Literals.SLOT);
			installComment(type, "A Slot designates that an entity modeled by an InstanceSpecification has a value or values for a specific StructuralFeature.");
			type = _StandardLibrary = createClass(pivot, PivotPackage.Literals.STANDARD_LIBRARY);
			type.setIsAbstract(true);
			type = _State = createClass(pivot, PivotPackage.Literals.STATE);
			installComment(type, "A State models a situation during which some (usually implicit) invariant condition holds.");
			type = _StateExp = createClass(pivot, PivotPackage.Literals.STATE_EXP);
			type = _StateMachine = createClass(pivot, PivotPackage.Literals.STATE_MACHINE);
			installComment(type, "StateMachines can be used to express event-driven behaviors of parts of a system. Behavior is modeled as a traversal of a graph of Vertices interconnected by one or more joined Transition arcs that are triggered by the dispatching of successive Event occurrences. During this traversal, the StateMachine may execute a sequence of Behaviors associated with various elements of the StateMachine.");
			type = _Stereotype = createClass(pivot, PivotPackage.Literals.STEREOTYPE);
			installComment(type, "A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.");
			type = _StereotypeExtender = createClass(pivot, PivotPackage.Literals.STEREOTYPE_EXTENDER);
			type = _StringLiteralExp = createClass(pivot, PivotPackage.Literals.STRING_LITERAL_EXP);
			type = _TemplateBinding = createClass(pivot, PivotPackage.Literals.TEMPLATE_BINDING);
			installComment(type, "A TemplateBinding is a DirectedRelationship between a TemplateableElement and a template. A TemplateBinding specifies the TemplateParameterSubstitutions of actual parameters for the formal parameters of the template.");
			type = _TemplateParameter = createClass(pivot, PivotPackage.Literals.TEMPLATE_PARAMETER);
			installComment(type, "A TemplateParameter exposes a ParameterableElement as a formal parameter of a template.");
			type = _TemplateParameterSubstitution = createClass(pivot, PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION);
			installComment(type, "A TemplateParameterSubstitution relates the actual parameter to a formal TemplateParameter as part of a template binding.");
			type = _TemplateSignature = createClass(pivot, PivotPackage.Literals.TEMPLATE_SIGNATURE);
			installComment(type, "A Template Signature bundles the set of formal TemplateParameters for a template.");
			type = _TemplateableElement = createClass(pivot, PivotPackage.Literals.TEMPLATEABLE_ELEMENT);
			type.setIsAbstract(true);
			installComment(type, "A TemplateableElement is an Element that can optionally be defined as a template and bound to other templates.");
			type = _Throwable = createClass(pivot, PivotPackage.Literals.THROWABLE);
			type = _Transition = createClass(pivot, PivotPackage.Literals.TRANSITION);
			installComment(type, "A Transition represents an arc between exactly one source Vertex and exactly one Target vertex (the source and targets may be the same Vertex). It may form part of a compound transition, which takes the StateMachine from one steady State configuration to another, representing the full response of the StateMachine to an occurrence of an Event that triggered it.");
			type = _Trigger = createClass(pivot, PivotPackage.Literals.TRIGGER);
			installComment(type, "A Trigger specifies a specific point  at which an Event occurrence may trigger an effect in a Behavior. A Trigger may be qualified by the Port on which the Event occurred.");
			type = _TupleLiteralExp = createClass(pivot, PivotPackage.Literals.TUPLE_LITERAL_EXP);
			type = _TupleLiteralPart = createClass(pivot, PivotPackage.Literals.TUPLE_LITERAL_PART);
			type = _TuplePart = createClass(pivot, PivotPackage.Literals.TUPLE_PART);
			type.setIsAbstract(true);
			type = _TupleType = createClass(pivot, PivotPackage.Literals.TUPLE_TYPE);
			type = _Type = createClass(pivot, PivotPackage.Literals.TYPE);
			type.setIsAbstract(true);
			installComment(type, "A Type constrains the values represented by a TypedElement.");
			type = _TypeExp = createClass(pivot, PivotPackage.Literals.TYPE_EXP);
			type = _TypedElement = createClass(pivot, PivotPackage.Literals.TYPED_ELEMENT);
			type.setIsAbstract(true);
			installComment(type, "A TypedElement is a NamedElement that may have a Type specified for it.");
			type = _UnlimitedNaturalLiteralExp = createClass(pivot, PivotPackage.Literals.UNLIMITED_NATURAL_LITERAL_EXP);
			type = _UnspecifiedValueExp = createClass(pivot, PivotPackage.Literals.UNSPECIFIED_VALUE_EXP);
			type = _ValueSpecification = createClass(pivot, PivotPackage.Literals.VALUE_SPECIFICATION);
			type.setIsAbstract(true);
			installComment(type, "A ValueSpecification is the specification of a (possibly empty) set of values. A ValueSpecification is a ParameterableElement that may be exposed as a formal TemplateParameter and provided as the actual parameter in the binding of a template.");
			type = _Variable = createClass(pivot, PivotPackage.Literals.VARIABLE);
			type = _VariableDeclaration = createClass(pivot, PivotPackage.Literals.VARIABLE_DECLARATION);
			type.setIsAbstract(true);
			type = _VariableExp = createClass(pivot, PivotPackage.Literals.VARIABLE_EXP);
			type = _Vertex = createClass(pivot, PivotPackage.Literals.VERTEX);
			type.setIsAbstract(true);
			installComment(type, "A Vertex is an abstraction of a node in a StateMachine graph. It can be the source or destination of any number of Transitions.");
			type = _Visitable = createClass(pivot, PivotPackage.Literals.VISITABLE);
			type.setIsAbstract(true);
			type = _VoidType = createClass(pivot, PivotPackage.Literals.VOID_TYPE);
			type = _WildcardType = createClass(pivot, PivotPackage.Literals.WILDCARD_TYPE);

			addSuperClass(_Annotation, _NamedElement);
			addSuperClass(_AnyType, _Class);
			addSuperClass(_AssociationClass, _Class);
			addSuperClass(_AssociationClassCallExp, _NavigationCallExp);
			addSuperClass(_BagType, _CollectionType);
			addSuperClass(_Behavior, _Class);
			addSuperClass(_BooleanLiteralExp, _PrimitiveLiteralExp);
			addSuperClass(_BooleanType, _PrimitiveType);
			addSuperClass(_CallExp, _OCLExpression);
			addSuperClass(_CallOperationAction, _NamedElement);
			addSuperClass(_Class, _Type);
			addSuperClass(_Class, _Namespace);
			addSuperClass(_Class, _TemplateableElement);
			addSuperClass(_CollectionItem, _CollectionLiteralPart);
			addSuperClass(_CollectionLiteralExp, _LiteralExp);
			addSuperClass(_CollectionLiteralPart, _TypedElement);
			addSuperClass(_CollectionRange, _CollectionLiteralPart);
			addSuperClass(_CollectionType, _IterableType);
			addSuperClass(_Comment, _Element);
			addSuperClass(_CompleteClass, _NamedElement);
			addSuperClass(_CompleteEnvironment, _Element);
			addSuperClass(_CompleteModel, _NamedElement);
			addSuperClass(_CompletePackage, _NamedElement);
			addSuperClass(_CompleteStandardLibrary, _ReflectiveStandardLibrary);
			addSuperClass(_ConnectionPointReference, _Vertex);
			addSuperClass(_Constraint, _NamedElement);
			addSuperClass(_DataType, _Class);
			addSuperClass(_Detail, _NamedElement);
			addSuperClass(_DynamicBehavior, _Behavior);
			addSuperClass(_DynamicBehavior, _DynamicType);
			addSuperClass(_DynamicElement, _Element);
			addSuperClass(_DynamicProperty, _Element);
			addSuperClass(_DynamicType, _Class);
			addSuperClass(_DynamicType, _DynamicElement);
			addSuperClass(_DynamicValueSpecification, _ValueSpecification);
			addSuperClass(_EBoolean, _Boolean);
			addSuperClass(_EInt, _Integer);
			addSuperClass(_EcoreObject, _OclAny);
			addSuperClass(_Element, _OclElement);
			addSuperClass(_ElementExtension, _Class);
			addSuperClass(_ElementLiteralExp, _LiteralExp);
			addSuperClass(_EnumLiteralExp, _LiteralExp);
			addSuperClass(_Enumeration, _DataType);
			addSuperClass(_EnumerationLiteral, _InstanceSpecification);
			addSuperClass(_ExpressionInOCL, _LanguageExpression);
			addSuperClass(_Feature, _TypedElement);
			addSuperClass(_FeatureCallExp, _CallExp);
			addSuperClass(_FinalState, _State);
			addSuperClass(_IfExp, _OCLExpression);
			addSuperClass(_Import, _NamedElement);
			addSuperClass(_InstanceSpecification, _NamedElement);
			addSuperClass(_IntegerLiteralExp, _NumericLiteralExp);
			addSuperClass(_InvalidLiteralExp, _LiteralExp);
			addSuperClass(_InvalidType, _Class);
			addSuperClass(_IterableType, _DataType);
			addSuperClass(_IterateExp, _LoopExp);
			addSuperClass(_IterateExp, _ReferringElement);
			addSuperClass(_Iteration, _Operation);
			addSuperClass(_IteratorExp, _LoopExp);
			addSuperClass(_IteratorExp, _ReferringElement);
			addSuperClass(_IteratorVariable, _Variable);
			addSuperClass(_JavaClass, _OclAny);
			addSuperClass(_JavaType, _Class);
			addSuperClass(_LambdaType, _DataType);
			addSuperClass(_LanguageExpression, _ValueSpecification);
			addSuperClass(_LetExp, _OCLExpression);
			addSuperClass(_LetVariable, _Variable);
			addSuperClass(_Library, _Package);
			addSuperClass(_LibraryFeature, _OclAny);
			addSuperClass(_LiteralExp, _OCLExpression);
			addSuperClass(_LoopExp, _CallExp);
			addSuperClass(_MapLiteralExp, _LiteralExp);
			addSuperClass(_MapLiteralPart, _Element);
			addSuperClass(_MapType, _IterableType);
			addSuperClass(_MessageExp, _OCLExpression);
			addSuperClass(_MessageType, _Class);
			addSuperClass(_Model, _Namespace);
			addSuperClass(_MorePivotable, _OclElement);
			addSuperClass(_Nameable, _OclElement);
			addSuperClass(_NamedElement, _Element);
			addSuperClass(_Namespace, _NamedElement);
			addSuperClass(_NavigationCallExp, _FeatureCallExp);
			addSuperClass(_NullLiteralExp, _PrimitiveLiteralExp);
			addSuperClass(_Number, _OclAny);
			addSuperClass(_NumericLiteralExp, _PrimitiveLiteralExp);
			addSuperClass(_OCLExpression, _TypedElement);
			addSuperClass(_Object, _OclAny);
			addSuperClass(_Operation, _Feature);
			addSuperClass(_Operation, _Namespace);
			addSuperClass(_Operation, _TemplateableElement);
			addSuperClass(_OperationCallExp, _FeatureCallExp);
			addSuperClass(_OperationCallExp, _ReferringElement);
			addSuperClass(_OppositePropertyCallExp, _NavigationCallExp);
			addSuperClass(_OrderedSetType, _CollectionType);
			addSuperClass(_OrphanCompletePackage, _CompletePackage);
			addSuperClass(_Package, _Namespace);
			addSuperClass(_Parameter, _VariableDeclaration);
			addSuperClass(_ParameterVariable, _Variable);
			addSuperClass(_Pivotable, _OclElement);
			addSuperClass(_Precedence, _NamedElement);
			addSuperClass(_PrimitiveCompletePackage, _CompletePackage);
			addSuperClass(_PrimitiveLiteralExp, _LiteralExp);
			addSuperClass(_PrimitiveType, _DataType);
			addSuperClass(_Profile, _Package);
			addSuperClass(_ProfileApplication, _Element);
			addSuperClass(_Property, _Feature);
			addSuperClass(_PropertyCallExp, _NavigationCallExp);
			addSuperClass(_PropertyCallExp, _ReferringElement);
			addSuperClass(_Pseudostate, _Vertex);
			addSuperClass(_RealLiteralExp, _NumericLiteralExp);
			addSuperClass(_ReferringElement, _OclElement);
			addSuperClass(_ReflectiveStandardLibrary, _StandardLibrary);
			addSuperClass(_Region, _Namespace);
			addSuperClass(_ResultVariable, _Variable);
			addSuperClass(_SelfType, _Class);
			addSuperClass(_SendSignalAction, _NamedElement);
			addSuperClass(_SequenceType, _CollectionType);
			addSuperClass(_SetType, _CollectionType);
			addSuperClass(_ShadowExp, _OCLExpression);
			addSuperClass(_ShadowPart, _TypedElement);
			addSuperClass(_Signal, _Class);
			addSuperClass(_Slot, _Element);
			addSuperClass(_StandardLibrary, _Element);
			addSuperClass(_State, _Namespace);
			addSuperClass(_State, _Vertex);
			addSuperClass(_StateExp, _OCLExpression);
			addSuperClass(_StateMachine, _Behavior);
			addSuperClass(_Stereotype, _Class);
			addSuperClass(_StereotypeExtender, _Element);
			addSuperClass(_StringLiteralExp, _PrimitiveLiteralExp);
			addSuperClass(_TemplateBinding, _Element);
			addSuperClass(_TemplateParameter, _Type);
			addSuperClass(_TemplateParameterSubstitution, _Element);
			addSuperClass(_TemplateSignature, _Element);
			addSuperClass(_TemplateableElement, _Element);
			addSuperClass(_Throwable, _OclAny);
			addSuperClass(_Transition, _Namespace);
			addSuperClass(_Trigger, _NamedElement);
			addSuperClass(_TupleLiteralExp, _LiteralExp);
			addSuperClass(_TupleLiteralPart, _VariableDeclaration);
			addSuperClass(_TuplePart, _OclElement);
			addSuperClass(_TupleType, _DataType);
			addSuperClass(_Type, _NamedElement);
			addSuperClass(_TypeExp, _OCLExpression);
			addSuperClass(_TypeExp, _ReferringElement);
			addSuperClass(_TypedElement, _NamedElement);
			addSuperClass(_TypedElement, _TuplePart);
			addSuperClass(_UnlimitedNaturalLiteralExp, _NumericLiteralExp);
			addSuperClass(_UnspecifiedValueExp, _OCLExpression);
			addSuperClass(_ValueSpecification, _TypedElement);
			addSuperClass(_Variable, _VariableDeclaration);
			addSuperClass(_VariableDeclaration, _TypedElement);
			addSuperClass(_VariableExp, _OCLExpression);
			addSuperClass(_VariableExp, _ReferringElement);
			addSuperClass(_Vertex, _NamedElement);
			addSuperClass(_Visitable, _OclElement);
			addSuperClass(_VoidType, _Class);
			addSuperClass(_WildcardType, _Class);
		}

		private Enumeration _AssociativityKind;
		private Enumeration _CollectionKind;
		private Enumeration _PseudostateKind;
		private Enumeration _TransitionKind;

		private void installEnumerations() {
			List<Class> ownedClasses;
			Enumeration type;
			List<EnumerationLiteral> enumerationLiterals;
			EnumerationLiteral enumerationLiteral;
			ownedClasses = pivot.getOwnedClasses();

			ownedClasses.add(type = _AssociativityKind = createEnumeration(PivotPackage.Literals.ASSOCIATIVITY_KIND));
			enumerationLiterals = type.getOwnedLiterals();
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.ASSOCIATIVITY_KIND.getEEnumLiteral("left")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.ASSOCIATIVITY_KIND.getEEnumLiteral("right")));
			addSuperClass(_AssociativityKind, _OclEnumeration);

			ownedClasses.add(type = _CollectionKind = createEnumeration(PivotPackage.Literals.COLLECTION_KIND));
			enumerationLiterals = type.getOwnedLiterals();
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("Collection")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("Set")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("OrderedSet")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("Bag")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("Sequence")));
			addSuperClass(_CollectionKind, _OclEnumeration);

			ownedClasses.add(type = _PseudostateKind = createEnumeration(PivotPackage.Literals.PSEUDOSTATE_KIND));
			enumerationLiterals = type.getOwnedLiterals();
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("initial")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("deepHistory")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("shallowHistory")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("join")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("fork")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("junction")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("choice")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("entryPoint")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("exitPoint")));
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("terminate")));
			addSuperClass(_PseudostateKind, _OclEnumeration);
			installComment(type, "PseudostateKind is an Enumeration type that is used to differentiate various kinds of Pseudostates.");

			ownedClasses.add(type = _TransitionKind = createEnumeration(PivotPackage.Literals.TRANSITION_KIND));
			enumerationLiterals = type.getOwnedLiterals();
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral("internal")));
			installComment(enumerationLiteral, "Implies that the Transition, if triggered, occurs without exiting or entering the source State (i.e., it does not cause a state change). This means that the entry or exit condition of the source State will not be invoked. An internal Transition can be taken even if the SateMachine is in one or more Regions nested within the associated State.");
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral("local")));
			installComment(enumerationLiteral, "Implies that the Transition, if triggered, will not exit the composite (source) State, but it will exit and re-enter any state within the composite State that is in the current state configuration.");
			enumerationLiterals.add(enumerationLiteral = createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral("external")));
			installComment(enumerationLiteral, "Implies that the Transition, if triggered, will exit the composite (source) State.");
			addSuperClass(_TransitionKind, _OclEnumeration);
			installComment(type, "TransitionKind is an Enumeration type used to differentiate the various kinds of Transitions.");
		}

		private CollectionType _Bag_Annotation_T;
		private CollectionType _Bag_AssociationClassCallExp_T;
		private CollectionType _Bag_CallOperationAction_T;
		private CollectionType _Bag_Class_T;
		private CollectionType _Bag_CollectionType_T;
		private CollectionType _Bag_CompleteClass_T;
		private CollectionType _Bag_CompleteModel_T;
		private CollectionType _Bag_CompletePackage_T;
		private CollectionType _Bag_ConnectionPointReference_T;
		private CollectionType _Bag_Constraint_T;
		private CollectionType _Bag_DataType_T;
		private CollectionType _Bag_DynamicElement_T;
		private CollectionType _Bag_DynamicProperty_T;
		private CollectionType _Bag_ElementExtension_T;
		private CollectionType _Bag_EnumLiteralExp_T;
		private CollectionType _Bag_Import_T;
		private CollectionType _Bag_InstanceSpecification_T;
		private CollectionType _Bag_LambdaType_T;
		private CollectionType _Bag_LoopExp_T;
		private CollectionType _Bag_MapType_T;
		private CollectionType _Bag_MessageType_T;
		private CollectionType _Bag_NavigationCallExp_T;
		private CollectionType _Bag_OCLExpression_T;
		private CollectionType _Bag_OperationCallExp_T;
		private CollectionType _Bag_Operation_T;
		private CollectionType _Bag_OppositePropertyCallExp_T;
		private CollectionType _Bag_Package_T;
		private CollectionType _Bag_PrimitiveType_T;
		private CollectionType _Bag_PropertyCallExp_T;
		private CollectionType _Bag_Property_T;
		private CollectionType _Bag_Region_T;
		private CollectionType _Bag_SendSignalAction_T;
		private CollectionType _Bag_ShadowPart_T;
		private CollectionType _Bag_Slot_T;
		private CollectionType _Bag_StateExp_T;
		private CollectionType _Bag_StateMachine_T;
		private CollectionType _Bag_State_T;
		private CollectionType _Bag_TemplateBinding_T;
		private CollectionType _Bag_TemplateParameterSubstitution_T;
		private CollectionType _Bag_TemplateParameter_T;
		private CollectionType _Bag_TemplateableElement_T;
		private CollectionType _Bag_TypeExp_T;
		private CollectionType _Bag_TypedElement_T;
		private CollectionType _Bag_VariableDeclaration_T;
		private CollectionType _Bag_VariableExp_T;
		private CollectionType _Bag_Variable_T;
		private CollectionType _Bag_WildcardType_T;
		private CollectionType _Collection_String_T;
		private CollectionType _Collection_Annotation_T;
		private CollectionType _Collection_AssociationClassCallExp_T;
		private CollectionType _Collection_Behavior_T;
		private CollectionType _Collection_CallOperationAction_T;
		private CollectionType _Collection_Class_T;
		private CollectionType _Collection_CollectionLiteralPart_T;
		private CollectionType _Collection_CollectionType_T;
		private CollectionType _Collection_Comment_T;
		private CollectionType _Collection_CompleteClass_T;
		private CollectionType _Collection_CompleteModel_T;
		private CollectionType _Collection_CompletePackage_T;
		private CollectionType _Collection_ConnectionPointReference_T;
		private CollectionType _Collection_Constraint_T;
		private CollectionType _Collection_DataType_T;
		private CollectionType _Collection_Detail_T;
		private CollectionType _Collection_DynamicElement_T;
		private CollectionType _Collection_DynamicProperty_T;
		private CollectionType _Collection_ElementExtension_T;
		private CollectionType _Collection_Element_T;
		private CollectionType _Collection_EnumLiteralExp_T;
		private CollectionType _Collection_EnumerationLiteral_T;
		private CollectionType _Collection_Import_T;
		private CollectionType _Collection_InstanceSpecification_T;
		private CollectionType _Collection_IteratorVariable_T;
		private CollectionType _Collection_LambdaType_T;
		private CollectionType _Collection_LoopExp_T;
		private CollectionType _Collection_MapLiteralPart_T;
		private CollectionType _Collection_MapType_T;
		private CollectionType _Collection_MessageType_T;
		private CollectionType _Collection_Model_T;
		private CollectionType _Collection_NavigationCallExp_T;
		private CollectionType _Collection_OCLExpression_T;
		private CollectionType _Collection_OperationCallExp_T;
		private CollectionType _Collection_Operation_T;
		private CollectionType _Collection_OppositePropertyCallExp_T;
		private CollectionType _Collection_Package_T;
		private CollectionType _Collection_Parameter_T;
		private CollectionType _Collection_Precedence_T;
		private CollectionType _Collection_PrimitiveType_T;
		private CollectionType _Collection_ProfileApplication_T;
		private CollectionType _Collection_PropertyCallExp_T;
		private CollectionType _Collection_Property_T;
		private CollectionType _Collection_Pseudostate_T;
		private CollectionType _Collection_Region_T;
		private CollectionType _Collection_SendSignalAction_T;
		private CollectionType _Collection_ShadowPart_T;
		private CollectionType _Collection_Slot_T;
		private CollectionType _Collection_StateExp_T;
		private CollectionType _Collection_StateMachine_T;
		private CollectionType _Collection_State_T;
		private CollectionType _Collection_StereotypeExtender_T;
		private CollectionType _Collection_TemplateBinding_T;
		private CollectionType _Collection_TemplateParameterSubstitution_T;
		private CollectionType _Collection_TemplateParameter_T;
		private CollectionType _Collection_TemplateableElement_T;
		private CollectionType _Collection_Transition_T;
		private CollectionType _Collection_Trigger_T;
		private CollectionType _Collection_TupleLiteralPart_T;
		private CollectionType _Collection_TypeExp_T;
		private CollectionType _Collection_Type_T;
		private CollectionType _Collection_TypedElement_T;
		private CollectionType _Collection_ValueSpecification_T;
		private CollectionType _Collection_VariableDeclaration_T;
		private CollectionType _Collection_VariableExp_T;
		private CollectionType _Collection_Variable_T;
		private CollectionType _Collection_Vertex_T;
		private CollectionType _Collection_WildcardType_T;
		private CollectionType _OrderedCollection_CollectionLiteralPart_T;
		private CollectionType _OrderedCollection_Detail_T;
		private CollectionType _OrderedCollection_Element_T;
		private CollectionType _OrderedCollection_EnumerationLiteral_T;
		private CollectionType _OrderedCollection_Import_T;
		private CollectionType _OrderedCollection_IteratorVariable_T;
		private CollectionType _OrderedCollection_MapLiteralPart_T;
		private CollectionType _OrderedCollection_OCLExpression_T;
		private CollectionType _OrderedCollection_Operation_T;
		private CollectionType _OrderedCollection_Parameter_T;
		private CollectionType _OrderedCollection_Precedence_T;
		private CollectionType _OrderedCollection_Property_T;
		private CollectionType _OrderedCollection_ShadowPart_T;
		private CollectionType _OrderedCollection_TemplateParameter_T;
		private CollectionType _OrderedCollection_TupleLiteralPart_T;
		private CollectionType _OrderedCollection_Type_T;
		private CollectionType _OrderedCollection_ValueSpecification_T;
		private CollectionType _OrderedCollection_Variable_T;
		private CollectionType _OrderedSet_CollectionLiteralPart_T;
		private CollectionType _OrderedSet_Detail_T;
		private CollectionType _OrderedSet_Element_T;
		private CollectionType _OrderedSet_EnumerationLiteral_T;
		private CollectionType _OrderedSet_Import_T;
		private CollectionType _OrderedSet_IteratorVariable_F;
		private CollectionType _OrderedSet_MapLiteralPart_T;
		private CollectionType _OrderedSet_OCLExpression_T;
		private CollectionType _OrderedSet_Operation_T;
		private CollectionType _OrderedSet_Parameter_T;
		private CollectionType _OrderedSet_Precedence_T;
		private CollectionType _OrderedSet_Property_T;
		private CollectionType _OrderedSet_ShadowPart_T;
		private CollectionType _OrderedSet_TemplateParameter_T_L1;
		private CollectionType _OrderedSet_TupleLiteralPart_T;
		private CollectionType _OrderedSet_ValueSpecification_T;
		private CollectionType _OrderedSet_Variable_T;
		private CollectionType _Sequence_Type_T;
		private CollectionType _Set_String_T_L1;
		private CollectionType _Set_Behavior_T;
		private CollectionType _Set_Class_T;
		private CollectionType _Set_Comment_T;
		private CollectionType _Set_CompleteClass_T;
		private CollectionType _Set_CompletePackage_T;
		private CollectionType _Set_ConnectionPointReference_T;
		private CollectionType _Set_Constraint_T;
		private CollectionType _Set_DynamicProperty_T;
		private CollectionType _Set_ElementExtension_T;
		private CollectionType _Set_Element_T;
		private CollectionType _Set_InstanceSpecification_T;
		private CollectionType _Set_Model_T;
		private CollectionType _Set_Operation_T;
		private CollectionType _Set_Package_T;
		private CollectionType _Set_ProfileApplication_T;
		private CollectionType _Set_Property_T;
		private CollectionType _Set_Pseudostate_T;
		private CollectionType _Set_Region_T;
		private CollectionType _Set_Region_T_L1;
		private CollectionType _Set_Slot_T;
		private CollectionType _Set_StateMachine_T;
		private CollectionType _Set_State_T;
		private CollectionType _Set_StereotypeExtender_T;
		private CollectionType _Set_TemplateBinding_T;
		private CollectionType _Set_TemplateParameterSubstitution_T_L1;
		private CollectionType _Set_Transition_T;
		private CollectionType _Set_Trigger_T;
		private CollectionType _Set_Type_T;
		private CollectionType _Set_Vertex_T;
		private CollectionType _UniqueCollection_String_T;
		private CollectionType _UniqueCollection_Behavior_T;
		private CollectionType _UniqueCollection_Class_T;
		private CollectionType _UniqueCollection_CollectionLiteralPart_T;
		private CollectionType _UniqueCollection_Comment_T;
		private CollectionType _UniqueCollection_CompleteClass_T;
		private CollectionType _UniqueCollection_CompletePackage_T;
		private CollectionType _UniqueCollection_ConnectionPointReference_T;
		private CollectionType _UniqueCollection_Constraint_T;
		private CollectionType _UniqueCollection_Detail_T;
		private CollectionType _UniqueCollection_DynamicProperty_T;
		private CollectionType _UniqueCollection_ElementExtension_T;
		private CollectionType _UniqueCollection_Element_T;
		private CollectionType _UniqueCollection_EnumerationLiteral_T;
		private CollectionType _UniqueCollection_Import_T;
		private CollectionType _UniqueCollection_InstanceSpecification_T;
		private CollectionType _UniqueCollection_IteratorVariable_T;
		private CollectionType _UniqueCollection_MapLiteralPart_T;
		private CollectionType _UniqueCollection_Model_T;
		private CollectionType _UniqueCollection_OCLExpression_T;
		private CollectionType _UniqueCollection_Operation_T;
		private CollectionType _UniqueCollection_Package_T;
		private CollectionType _UniqueCollection_Parameter_T;
		private CollectionType _UniqueCollection_Precedence_T;
		private CollectionType _UniqueCollection_ProfileApplication_T;
		private CollectionType _UniqueCollection_Property_T;
		private CollectionType _UniqueCollection_Pseudostate_T;
		private CollectionType _UniqueCollection_Region_T;
		private CollectionType _UniqueCollection_ShadowPart_T;
		private CollectionType _UniqueCollection_Slot_T;
		private CollectionType _UniqueCollection_StateMachine_T;
		private CollectionType _UniqueCollection_State_T;
		private CollectionType _UniqueCollection_StereotypeExtender_T;
		private CollectionType _UniqueCollection_TemplateBinding_T;
		private CollectionType _UniqueCollection_TemplateParameterSubstitution_T;
		private CollectionType _UniqueCollection_TemplateParameter_T;
		private CollectionType _UniqueCollection_Transition_T;
		private CollectionType _UniqueCollection_Trigger_T;
		private CollectionType _UniqueCollection_TupleLiteralPart_T;
		private CollectionType _UniqueCollection_Type_T;
		private CollectionType _UniqueCollection_ValueSpecification_T;
		private CollectionType _UniqueCollection_Variable_T;
		private CollectionType _UniqueCollection_Vertex_T;

		private void installGenericAggregateTypes() {
			Class type;

		}


		private void installSpecializedAggregateTypes0() {
			Class type;

			type = _Bag_Annotation_T = getCollectionType(_Bag, _Annotation, true, 0, -1);
			type = _Bag_AssociationClassCallExp_T = getCollectionType(_Bag, _AssociationClassCallExp, true, 0, -1);
			type = _Bag_CallOperationAction_T = getCollectionType(_Bag, _CallOperationAction, true, 0, -1);
			type = _Bag_Class_T = getCollectionType(_Bag, _Class, true, 0, -1);
			type = _Bag_CollectionType_T = getCollectionType(_Bag, _CollectionType, true, 0, -1);
			type = _Bag_CompleteClass_T = getCollectionType(_Bag, _CompleteClass, true, 0, -1);
			type = _Bag_CompleteModel_T = getCollectionType(_Bag, _CompleteModel, true, 0, -1);
			type = _Bag_CompletePackage_T = getCollectionType(_Bag, _CompletePackage, true, 0, -1);
			type = _Bag_ConnectionPointReference_T = getCollectionType(_Bag, _ConnectionPointReference, true, 0, -1);
			type = _Bag_Constraint_T = getCollectionType(_Bag, _Constraint, true, 0, -1);
			type = _Bag_DataType_T = getCollectionType(_Bag, _DataType, true, 0, -1);
			type = _Bag_DynamicElement_T = getCollectionType(_Bag, _DynamicElement, true, 0, -1);
			type = _Bag_DynamicProperty_T = getCollectionType(_Bag, _DynamicProperty, true, 0, -1);
			type = _Bag_ElementExtension_T = getCollectionType(_Bag, _ElementExtension, true, 0, -1);
			type = _Bag_EnumLiteralExp_T = getCollectionType(_Bag, _EnumLiteralExp, true, 0, -1);
			type = _Bag_Import_T = getCollectionType(_Bag, _Import, true, 0, -1);
			type = _Bag_InstanceSpecification_T = getCollectionType(_Bag, _InstanceSpecification, true, 0, -1);
			type = _Bag_LambdaType_T = getCollectionType(_Bag, _LambdaType, true, 0, -1);
			type = _Bag_LoopExp_T = getCollectionType(_Bag, _LoopExp, true, 0, -1);
			type = _Bag_MapType_T = getCollectionType(_Bag, _MapType, true, 0, -1);
			type = _Bag_MessageType_T = getCollectionType(_Bag, _MessageType, true, 0, -1);
			type = _Bag_NavigationCallExp_T = getCollectionType(_Bag, _NavigationCallExp, true, 0, -1);
			type = _Bag_OCLExpression_T = getCollectionType(_Bag, _OCLExpression, true, 0, -1);
			type = _Bag_OperationCallExp_T = getCollectionType(_Bag, _OperationCallExp, true, 0, -1);
			type = _Bag_Operation_T = getCollectionType(_Bag, _Operation, true, 0, -1);
			type = _Bag_OppositePropertyCallExp_T = getCollectionType(_Bag, _OppositePropertyCallExp, true, 0, -1);
			type = _Bag_Package_T = getCollectionType(_Bag, _Package, true, 0, -1);
			type = _Bag_PrimitiveType_T = getCollectionType(_Bag, _PrimitiveType, true, 0, -1);
			type = _Bag_PropertyCallExp_T = getCollectionType(_Bag, _PropertyCallExp, true, 0, -1);
			type = _Bag_Property_T = getCollectionType(_Bag, _Property, true, 0, -1);
			type = _Bag_Region_T = getCollectionType(_Bag, _Region, true, 0, -1);
			type = _Bag_SendSignalAction_T = getCollectionType(_Bag, _SendSignalAction, true, 0, -1);
			type = _Bag_ShadowPart_T = getCollectionType(_Bag, _ShadowPart, true, 0, -1);
			type = _Bag_Slot_T = getCollectionType(_Bag, _Slot, true, 0, -1);
			type = _Bag_StateExp_T = getCollectionType(_Bag, _StateExp, true, 0, -1);
			type = _Bag_StateMachine_T = getCollectionType(_Bag, _StateMachine, true, 0, -1);
			type = _Bag_State_T = getCollectionType(_Bag, _State, true, 0, -1);
			type = _Bag_TemplateBinding_T = getCollectionType(_Bag, _TemplateBinding, true, 0, -1);
			type = _Bag_TemplateParameterSubstitution_T = getCollectionType(_Bag, _TemplateParameterSubstitution, true, 0, -1);
			type = _Bag_TemplateParameter_T = getCollectionType(_Bag, _TemplateParameter, true, 0, -1);
			type = _Bag_TemplateableElement_T = getCollectionType(_Bag, _TemplateableElement, true, 0, -1);
			type = _Bag_TypeExp_T = getCollectionType(_Bag, _TypeExp, true, 0, -1);
			type = _Bag_TypedElement_T = getCollectionType(_Bag, _TypedElement, true, 0, -1);
			type = _Bag_VariableDeclaration_T = getCollectionType(_Bag, _VariableDeclaration, true, 0, -1);
			type = _Bag_VariableExp_T = getCollectionType(_Bag, _VariableExp, true, 0, -1);
			type = _Bag_Variable_T = getCollectionType(_Bag, _Variable, true, 0, -1);
			type = _Bag_WildcardType_T = getCollectionType(_Bag, _WildcardType, true, 0, -1);
			type = _Collection_String_T = getCollectionType(_Collection, _String, true, 0, -1);
			type = _Collection_Annotation_T = getCollectionType(_Collection, _Annotation, true, 0, -1);
			type = _Collection_AssociationClassCallExp_T = getCollectionType(_Collection, _AssociationClassCallExp, true, 0, -1);
			type = _Collection_Behavior_T = getCollectionType(_Collection, _Behavior, true, 0, -1);
			type = _Collection_CallOperationAction_T = getCollectionType(_Collection, _CallOperationAction, true, 0, -1);
			type = _Collection_Class_T = getCollectionType(_Collection, _Class, true, 0, -1);
			type = _Collection_CollectionLiteralPart_T = getCollectionType(_Collection, _CollectionLiteralPart, true, 0, -1);
			type = _Collection_CollectionType_T = getCollectionType(_Collection, _CollectionType, true, 0, -1);
			type = _Collection_Comment_T = getCollectionType(_Collection, _Comment, true, 0, -1);
			type = _Collection_CompleteClass_T = getCollectionType(_Collection, _CompleteClass, true, 0, -1);
			type = _Collection_CompleteModel_T = getCollectionType(_Collection, _CompleteModel, true, 0, -1);
			type = _Collection_CompletePackage_T = getCollectionType(_Collection, _CompletePackage, true, 0, -1);
			type = _Collection_ConnectionPointReference_T = getCollectionType(_Collection, _ConnectionPointReference, true, 0, -1);
			type = _Collection_Constraint_T = getCollectionType(_Collection, _Constraint, true, 0, -1);
			type = _Collection_DataType_T = getCollectionType(_Collection, _DataType, true, 0, -1);
			type = _Collection_Detail_T = getCollectionType(_Collection, _Detail, true, 0, -1);
			type = _Collection_DynamicElement_T = getCollectionType(_Collection, _DynamicElement, true, 0, -1);
			type = _Collection_DynamicProperty_T = getCollectionType(_Collection, _DynamicProperty, true, 0, -1);
			type = _Collection_ElementExtension_T = getCollectionType(_Collection, _ElementExtension, true, 0, -1);
			type = _Collection_Element_T = getCollectionType(_Collection, _Element, true, 0, -1);
			type = _Collection_EnumLiteralExp_T = getCollectionType(_Collection, _EnumLiteralExp, true, 0, -1);
			type = _Collection_EnumerationLiteral_T = getCollectionType(_Collection, _EnumerationLiteral, true, 0, -1);
			type = _Collection_Import_T = getCollectionType(_Collection, _Import, true, 0, -1);
			type = _Collection_InstanceSpecification_T = getCollectionType(_Collection, _InstanceSpecification, true, 0, -1);
			type = _Collection_IteratorVariable_T = getCollectionType(_Collection, _IteratorVariable, true, 0, -1);
			type = _Collection_LambdaType_T = getCollectionType(_Collection, _LambdaType, true, 0, -1);
			type = _Collection_LoopExp_T = getCollectionType(_Collection, _LoopExp, true, 0, -1);
			type = _Collection_MapLiteralPart_T = getCollectionType(_Collection, _MapLiteralPart, true, 0, -1);
			type = _Collection_MapType_T = getCollectionType(_Collection, _MapType, true, 0, -1);
			type = _Collection_MessageType_T = getCollectionType(_Collection, _MessageType, true, 0, -1);
			type = _Collection_Model_T = getCollectionType(_Collection, _Model, true, 0, -1);
			type = _Collection_NavigationCallExp_T = getCollectionType(_Collection, _NavigationCallExp, true, 0, -1);
			type = _Collection_OCLExpression_T = getCollectionType(_Collection, _OCLExpression, true, 0, -1);
			type = _Collection_OperationCallExp_T = getCollectionType(_Collection, _OperationCallExp, true, 0, -1);
			type = _Collection_Operation_T = getCollectionType(_Collection, _Operation, true, 0, -1);
			type = _Collection_OppositePropertyCallExp_T = getCollectionType(_Collection, _OppositePropertyCallExp, true, 0, -1);
			type = _Collection_Package_T = getCollectionType(_Collection, _Package, true, 0, -1);
			type = _Collection_Parameter_T = getCollectionType(_Collection, _Parameter, true, 0, -1);
			type = _Collection_Precedence_T = getCollectionType(_Collection, _Precedence, true, 0, -1);
			type = _Collection_PrimitiveType_T = getCollectionType(_Collection, _PrimitiveType, true, 0, -1);
			type = _Collection_ProfileApplication_T = getCollectionType(_Collection, _ProfileApplication, true, 0, -1);
			type = _Collection_PropertyCallExp_T = getCollectionType(_Collection, _PropertyCallExp, true, 0, -1);
			type = _Collection_Property_T = getCollectionType(_Collection, _Property, true, 0, -1);
			type = _Collection_Pseudostate_T = getCollectionType(_Collection, _Pseudostate, true, 0, -1);
			type = _Collection_Region_T = getCollectionType(_Collection, _Region, true, 0, -1);
			type = _Collection_SendSignalAction_T = getCollectionType(_Collection, _SendSignalAction, true, 0, -1);
			type = _Collection_ShadowPart_T = getCollectionType(_Collection, _ShadowPart, true, 0, -1);
			type = _Collection_Slot_T = getCollectionType(_Collection, _Slot, true, 0, -1);
			type = _Collection_StateExp_T = getCollectionType(_Collection, _StateExp, true, 0, -1);
			type = _Collection_StateMachine_T = getCollectionType(_Collection, _StateMachine, true, 0, -1);
			type = _Collection_State_T = getCollectionType(_Collection, _State, true, 0, -1);
			type = _Collection_StereotypeExtender_T = getCollectionType(_Collection, _StereotypeExtender, true, 0, -1);
			type = _Collection_TemplateBinding_T = getCollectionType(_Collection, _TemplateBinding, true, 0, -1);
			type = _Collection_TemplateParameterSubstitution_T = getCollectionType(_Collection, _TemplateParameterSubstitution, true, 0, -1);
			type = _Collection_TemplateParameter_T = getCollectionType(_Collection, _TemplateParameter, true, 0, -1);
			type = _Collection_TemplateableElement_T = getCollectionType(_Collection, _TemplateableElement, true, 0, -1);
			type = _Collection_Transition_T = getCollectionType(_Collection, _Transition, true, 0, -1);
			type = _Collection_Trigger_T = getCollectionType(_Collection, _Trigger, true, 0, -1);
			type = _Collection_TupleLiteralPart_T = getCollectionType(_Collection, _TupleLiteralPart, true, 0, -1);
			type = _Collection_TypeExp_T = getCollectionType(_Collection, _TypeExp, true, 0, -1);
			type = _Collection_Type_T = getCollectionType(_Collection, _Type, true, 0, -1);
			type = _Collection_TypedElement_T = getCollectionType(_Collection, _TypedElement, true, 0, -1);
			type = _Collection_ValueSpecification_T = getCollectionType(_Collection, _ValueSpecification, true, 0, -1);
			type = _Collection_VariableDeclaration_T = getCollectionType(_Collection, _VariableDeclaration, true, 0, -1);
			type = _Collection_VariableExp_T = getCollectionType(_Collection, _VariableExp, true, 0, -1);
			type = _Collection_Variable_T = getCollectionType(_Collection, _Variable, true, 0, -1);
			type = _Collection_Vertex_T = getCollectionType(_Collection, _Vertex, true, 0, -1);
			type = _Collection_WildcardType_T = getCollectionType(_Collection, _WildcardType, true, 0, -1);
			type = _OrderedCollection_CollectionLiteralPart_T = getCollectionType(_OrderedCollection, _CollectionLiteralPart, true, 0, -1);
			type = _OrderedCollection_Detail_T = getCollectionType(_OrderedCollection, _Detail, true, 0, -1);
			type = _OrderedCollection_Element_T = getCollectionType(_OrderedCollection, _Element, true, 0, -1);
			type = _OrderedCollection_EnumerationLiteral_T = getCollectionType(_OrderedCollection, _EnumerationLiteral, true, 0, -1);
			type = _OrderedCollection_Import_T = getCollectionType(_OrderedCollection, _Import, true, 0, -1);
			type = _OrderedCollection_IteratorVariable_T = getCollectionType(_OrderedCollection, _IteratorVariable, true, 0, -1);
			type = _OrderedCollection_MapLiteralPart_T = getCollectionType(_OrderedCollection, _MapLiteralPart, true, 0, -1);
			type = _OrderedCollection_OCLExpression_T = getCollectionType(_OrderedCollection, _OCLExpression, true, 0, -1);
			type = _OrderedCollection_Operation_T = getCollectionType(_OrderedCollection, _Operation, true, 0, -1);
			type = _OrderedCollection_Parameter_T = getCollectionType(_OrderedCollection, _Parameter, true, 0, -1);
			type = _OrderedCollection_Precedence_T = getCollectionType(_OrderedCollection, _Precedence, true, 0, -1);
			type = _OrderedCollection_Property_T = getCollectionType(_OrderedCollection, _Property, true, 0, -1);
			type = _OrderedCollection_ShadowPart_T = getCollectionType(_OrderedCollection, _ShadowPart, true, 0, -1);
			type = _OrderedCollection_TemplateParameter_T = getCollectionType(_OrderedCollection, _TemplateParameter, true, 0, -1);
			type = _OrderedCollection_TupleLiteralPart_T = getCollectionType(_OrderedCollection, _TupleLiteralPart, true, 0, -1);
			type = _OrderedCollection_Type_T = getCollectionType(_OrderedCollection, _Type, true, 0, -1);
			type = _OrderedCollection_ValueSpecification_T = getCollectionType(_OrderedCollection, _ValueSpecification, true, 0, -1);
			type = _OrderedCollection_Variable_T = getCollectionType(_OrderedCollection, _Variable, true, 0, -1);
			type = _OrderedSet_CollectionLiteralPart_T = getCollectionType(_OrderedSet, _CollectionLiteralPart, true, 0, -1);
			type = _OrderedSet_Detail_T = getCollectionType(_OrderedSet, _Detail, true, 0, -1);
			type = _OrderedSet_Element_T = getCollectionType(_OrderedSet, _Element, true, 0, -1);
			type = _OrderedSet_EnumerationLiteral_T = getCollectionType(_OrderedSet, _EnumerationLiteral, true, 0, -1);
			type = _OrderedSet_Import_T = getCollectionType(_OrderedSet, _Import, true, 0, -1);
			type = _OrderedSet_IteratorVariable_F = getCollectionType(_OrderedSet, _IteratorVariable, false, 0, -1);
			type = _OrderedSet_MapLiteralPart_T = getCollectionType(_OrderedSet, _MapLiteralPart, true, 0, -1);
			type = _OrderedSet_OCLExpression_T = getCollectionType(_OrderedSet, _OCLExpression, true, 0, -1);
			type = _OrderedSet_Operation_T = getCollectionType(_OrderedSet, _Operation, true, 0, -1);
			type = _OrderedSet_Parameter_T = getCollectionType(_OrderedSet, _Parameter, true, 0, -1);
			type = _OrderedSet_Precedence_T = getCollectionType(_OrderedSet, _Precedence, true, 0, -1);
			type = _OrderedSet_Property_T = getCollectionType(_OrderedSet, _Property, true, 0, -1);
			type = _OrderedSet_ShadowPart_T = getCollectionType(_OrderedSet, _ShadowPart, true, 0, -1);
			type = _OrderedSet_TemplateParameter_T_L1 = getCollectionType(_OrderedSet, _TemplateParameter, true, 1, -1);
			type = _OrderedSet_TupleLiteralPart_T = getCollectionType(_OrderedSet, _TupleLiteralPart, true, 0, -1);
			type = _OrderedSet_ValueSpecification_T = getCollectionType(_OrderedSet, _ValueSpecification, true, 0, -1);
			type = _OrderedSet_Variable_T = getCollectionType(_OrderedSet, _Variable, true, 0, -1);
			type = _Sequence_Type_T = getCollectionType(_Sequence, _Type, true, 0, -1);
			type = _Set_String_T_L1 = getCollectionType(_Set, _String, true, 1, -1);
			type = _Set_Behavior_T = getCollectionType(_Set, _Behavior, true, 0, -1);
			type = _Set_Class_T = getCollectionType(_Set, _Class, true, 0, -1);
			type = _Set_Comment_T = getCollectionType(_Set, _Comment, true, 0, -1);
			type = _Set_CompleteClass_T = getCollectionType(_Set, _CompleteClass, true, 0, -1);
			type = _Set_CompletePackage_T = getCollectionType(_Set, _CompletePackage, true, 0, -1);
			type = _Set_ConnectionPointReference_T = getCollectionType(_Set, _ConnectionPointReference, true, 0, -1);
			type = _Set_Constraint_T = getCollectionType(_Set, _Constraint, true, 0, -1);
			type = _Set_DynamicProperty_T = getCollectionType(_Set, _DynamicProperty, true, 0, -1);
			type = _Set_ElementExtension_T = getCollectionType(_Set, _ElementExtension, true, 0, -1);
			type = _Set_Element_T = getCollectionType(_Set, _Element, true, 0, -1);
			type = _Set_InstanceSpecification_T = getCollectionType(_Set, _InstanceSpecification, true, 0, -1);
			type = _Set_Model_T = getCollectionType(_Set, _Model, true, 0, -1);
			type = _Set_Operation_T = getCollectionType(_Set, _Operation, true, 0, -1);
			type = _Set_Package_T = getCollectionType(_Set, _Package, true, 0, -1);
			type = _Set_ProfileApplication_T = getCollectionType(_Set, _ProfileApplication, true, 0, -1);
			type = _Set_Property_T = getCollectionType(_Set, _Property, true, 0, -1);
			type = _Set_Pseudostate_T = getCollectionType(_Set, _Pseudostate, true, 0, -1);
			type = _Set_Region_T = getCollectionType(_Set, _Region, true, 0, -1);
			type = _Set_Region_T_L1 = getCollectionType(_Set, _Region, true, 1, -1);
			type = _Set_Slot_T = getCollectionType(_Set, _Slot, true, 0, -1);
			type = _Set_StateMachine_T = getCollectionType(_Set, _StateMachine, true, 0, -1);
			type = _Set_State_T = getCollectionType(_Set, _State, true, 0, -1);
			type = _Set_StereotypeExtender_T = getCollectionType(_Set, _StereotypeExtender, true, 0, -1);
			type = _Set_TemplateBinding_T = getCollectionType(_Set, _TemplateBinding, true, 0, -1);
			type = _Set_TemplateParameterSubstitution_T_L1 = getCollectionType(_Set, _TemplateParameterSubstitution, true, 1, -1);
			type = _Set_Transition_T = getCollectionType(_Set, _Transition, true, 0, -1);
			type = _Set_Trigger_T = getCollectionType(_Set, _Trigger, true, 0, -1);
			type = _Set_Type_T = getCollectionType(_Set, _Type, true, 0, -1);
			type = _Set_Vertex_T = getCollectionType(_Set, _Vertex, true, 0, -1);
			type = _UniqueCollection_String_T = getCollectionType(_UniqueCollection, _String, true, 0, -1);
			type = _UniqueCollection_Behavior_T = getCollectionType(_UniqueCollection, _Behavior, true, 0, -1);
			type = _UniqueCollection_Class_T = getCollectionType(_UniqueCollection, _Class, true, 0, -1);
			type = _UniqueCollection_CollectionLiteralPart_T = getCollectionType(_UniqueCollection, _CollectionLiteralPart, true, 0, -1);
			type = _UniqueCollection_Comment_T = getCollectionType(_UniqueCollection, _Comment, true, 0, -1);
			type = _UniqueCollection_CompleteClass_T = getCollectionType(_UniqueCollection, _CompleteClass, true, 0, -1);
			type = _UniqueCollection_CompletePackage_T = getCollectionType(_UniqueCollection, _CompletePackage, true, 0, -1);
			type = _UniqueCollection_ConnectionPointReference_T = getCollectionType(_UniqueCollection, _ConnectionPointReference, true, 0, -1);
			type = _UniqueCollection_Constraint_T = getCollectionType(_UniqueCollection, _Constraint, true, 0, -1);
			type = _UniqueCollection_Detail_T = getCollectionType(_UniqueCollection, _Detail, true, 0, -1);
			type = _UniqueCollection_DynamicProperty_T = getCollectionType(_UniqueCollection, _DynamicProperty, true, 0, -1);
			type = _UniqueCollection_ElementExtension_T = getCollectionType(_UniqueCollection, _ElementExtension, true, 0, -1);
			type = _UniqueCollection_Element_T = getCollectionType(_UniqueCollection, _Element, true, 0, -1);
			type = _UniqueCollection_EnumerationLiteral_T = getCollectionType(_UniqueCollection, _EnumerationLiteral, true, 0, -1);
			type = _UniqueCollection_Import_T = getCollectionType(_UniqueCollection, _Import, true, 0, -1);
			type = _UniqueCollection_InstanceSpecification_T = getCollectionType(_UniqueCollection, _InstanceSpecification, true, 0, -1);
			type = _UniqueCollection_IteratorVariable_T = getCollectionType(_UniqueCollection, _IteratorVariable, true, 0, -1);
			type = _UniqueCollection_MapLiteralPart_T = getCollectionType(_UniqueCollection, _MapLiteralPart, true, 0, -1);
			type = _UniqueCollection_Model_T = getCollectionType(_UniqueCollection, _Model, true, 0, -1);
			type = _UniqueCollection_OCLExpression_T = getCollectionType(_UniqueCollection, _OCLExpression, true, 0, -1);
			type = _UniqueCollection_Operation_T = getCollectionType(_UniqueCollection, _Operation, true, 0, -1);
			type = _UniqueCollection_Package_T = getCollectionType(_UniqueCollection, _Package, true, 0, -1);
			type = _UniqueCollection_Parameter_T = getCollectionType(_UniqueCollection, _Parameter, true, 0, -1);
			type = _UniqueCollection_Precedence_T = getCollectionType(_UniqueCollection, _Precedence, true, 0, -1);
			type = _UniqueCollection_ProfileApplication_T = getCollectionType(_UniqueCollection, _ProfileApplication, true, 0, -1);
			type = _UniqueCollection_Property_T = getCollectionType(_UniqueCollection, _Property, true, 0, -1);
			type = _UniqueCollection_Pseudostate_T = getCollectionType(_UniqueCollection, _Pseudostate, true, 0, -1);
			type = _UniqueCollection_Region_T = getCollectionType(_UniqueCollection, _Region, true, 0, -1);
			type = _UniqueCollection_ShadowPart_T = getCollectionType(_UniqueCollection, _ShadowPart, true, 0, -1);
			type = _UniqueCollection_Slot_T = getCollectionType(_UniqueCollection, _Slot, true, 0, -1);
			type = _UniqueCollection_StateMachine_T = getCollectionType(_UniqueCollection, _StateMachine, true, 0, -1);
			type = _UniqueCollection_State_T = getCollectionType(_UniqueCollection, _State, true, 0, -1);
			type = _UniqueCollection_StereotypeExtender_T = getCollectionType(_UniqueCollection, _StereotypeExtender, true, 0, -1);
			type = _UniqueCollection_TemplateBinding_T = getCollectionType(_UniqueCollection, _TemplateBinding, true, 0, -1);
			type = _UniqueCollection_TemplateParameterSubstitution_T = getCollectionType(_UniqueCollection, _TemplateParameterSubstitution, true, 0, -1);
			type = _UniqueCollection_TemplateParameter_T = getCollectionType(_UniqueCollection, _TemplateParameter, true, 0, -1);
			type = _UniqueCollection_Transition_T = getCollectionType(_UniqueCollection, _Transition, true, 0, -1);
			type = _UniqueCollection_Trigger_T = getCollectionType(_UniqueCollection, _Trigger, true, 0, -1);
			type = _UniqueCollection_TupleLiteralPart_T = getCollectionType(_UniqueCollection, _TupleLiteralPart, true, 0, -1);
			type = _UniqueCollection_Type_T = getCollectionType(_UniqueCollection, _Type, true, 0, -1);
			type = _UniqueCollection_ValueSpecification_T = getCollectionType(_UniqueCollection, _ValueSpecification, true, 0, -1);
			type = _UniqueCollection_Variable_T = getCollectionType(_UniqueCollection, _Variable, true, 0, -1);
			type = _UniqueCollection_Vertex_T = getCollectionType(_UniqueCollection, _Vertex, true, 0, -1);
		}

		private void installAggregateSuperTypes() {
			addSuperClass(_Bag_Annotation_T, _Collection_Annotation_T);
			addSuperClass(_Bag_AssociationClassCallExp_T, _Collection_AssociationClassCallExp_T);
			addSuperClass(_Bag_CallOperationAction_T, _Collection_CallOperationAction_T);
			addSuperClass(_Bag_Class_T, _Collection_Class_T);
			addSuperClass(_Bag_CollectionType_T, _Collection_CollectionType_T);
			addSuperClass(_Bag_CompleteClass_T, _Collection_CompleteClass_T);
			addSuperClass(_Bag_CompleteModel_T, _Collection_CompleteModel_T);
			addSuperClass(_Bag_CompletePackage_T, _Collection_CompletePackage_T);
			addSuperClass(_Bag_ConnectionPointReference_T, _Collection_ConnectionPointReference_T);
			addSuperClass(_Bag_Constraint_T, _Collection_Constraint_T);
			addSuperClass(_Bag_DataType_T, _Collection_DataType_T);
			addSuperClass(_Bag_DynamicElement_T, _Collection_DynamicElement_T);
			addSuperClass(_Bag_DynamicProperty_T, _Collection_DynamicProperty_T);
			addSuperClass(_Bag_ElementExtension_T, _Collection_ElementExtension_T);
			addSuperClass(_Bag_EnumLiteralExp_T, _Collection_EnumLiteralExp_T);
			addSuperClass(_Bag_Import_T, _Collection_Import_T);
			addSuperClass(_Bag_InstanceSpecification_T, _Collection_InstanceSpecification_T);
			addSuperClass(_Bag_LambdaType_T, _Collection_LambdaType_T);
			addSuperClass(_Bag_LoopExp_T, _Collection_LoopExp_T);
			addSuperClass(_Bag_MapType_T, _Collection_MapType_T);
			addSuperClass(_Bag_MessageType_T, _Collection_MessageType_T);
			addSuperClass(_Bag_NavigationCallExp_T, _Collection_NavigationCallExp_T);
			addSuperClass(_Bag_OCLExpression_T, _Collection_OCLExpression_T);
			addSuperClass(_Bag_OperationCallExp_T, _Collection_OperationCallExp_T);
			addSuperClass(_Bag_Operation_T, _Collection_Operation_T);
			addSuperClass(_Bag_OppositePropertyCallExp_T, _Collection_OppositePropertyCallExp_T);
			addSuperClass(_Bag_Package_T, _Collection_Package_T);
			addSuperClass(_Bag_PrimitiveType_T, _Collection_PrimitiveType_T);
			addSuperClass(_Bag_PropertyCallExp_T, _Collection_PropertyCallExp_T);
			addSuperClass(_Bag_Property_T, _Collection_Property_T);
			addSuperClass(_Bag_Region_T, _Collection_Region_T);
			addSuperClass(_Bag_SendSignalAction_T, _Collection_SendSignalAction_T);
			addSuperClass(_Bag_ShadowPart_T, _Collection_ShadowPart_T);
			addSuperClass(_Bag_Slot_T, _Collection_Slot_T);
			addSuperClass(_Bag_StateExp_T, _Collection_StateExp_T);
			addSuperClass(_Bag_StateMachine_T, _Collection_StateMachine_T);
			addSuperClass(_Bag_State_T, _Collection_State_T);
			addSuperClass(_Bag_TemplateBinding_T, _Collection_TemplateBinding_T);
			addSuperClass(_Bag_TemplateParameterSubstitution_T, _Collection_TemplateParameterSubstitution_T);
			addSuperClass(_Bag_TemplateParameter_T, _Collection_TemplateParameter_T);
			addSuperClass(_Bag_TemplateableElement_T, _Collection_TemplateableElement_T);
			addSuperClass(_Bag_TypeExp_T, _Collection_TypeExp_T);
			addSuperClass(_Bag_TypedElement_T, _Collection_TypedElement_T);
			addSuperClass(_Bag_VariableDeclaration_T, _Collection_VariableDeclaration_T);
			addSuperClass(_Bag_VariableExp_T, _Collection_VariableExp_T);
			addSuperClass(_Bag_Variable_T, _Collection_Variable_T);
			addSuperClass(_Bag_WildcardType_T, _Collection_WildcardType_T);
			addSuperClass(_Collection_String_T, _OclAny);
			addSuperClass(_Collection_Annotation_T, _OclAny);
			addSuperClass(_Collection_AssociationClassCallExp_T, _OclAny);
			addSuperClass(_Collection_Behavior_T, _OclAny);
			addSuperClass(_Collection_CallOperationAction_T, _OclAny);
			addSuperClass(_Collection_Class_T, _OclAny);
			addSuperClass(_Collection_CollectionLiteralPart_T, _OclAny);
			addSuperClass(_Collection_CollectionType_T, _OclAny);
			addSuperClass(_Collection_Comment_T, _OclAny);
			addSuperClass(_Collection_CompleteClass_T, _OclAny);
			addSuperClass(_Collection_CompleteModel_T, _OclAny);
			addSuperClass(_Collection_CompletePackage_T, _OclAny);
			addSuperClass(_Collection_ConnectionPointReference_T, _OclAny);
			addSuperClass(_Collection_Constraint_T, _OclAny);
			addSuperClass(_Collection_DataType_T, _OclAny);
			addSuperClass(_Collection_Detail_T, _OclAny);
			addSuperClass(_Collection_DynamicElement_T, _OclAny);
			addSuperClass(_Collection_DynamicProperty_T, _OclAny);
			addSuperClass(_Collection_ElementExtension_T, _OclAny);
			addSuperClass(_Collection_Element_T, _OclAny);
			addSuperClass(_Collection_EnumLiteralExp_T, _OclAny);
			addSuperClass(_Collection_EnumerationLiteral_T, _OclAny);
			addSuperClass(_Collection_Import_T, _OclAny);
			addSuperClass(_Collection_InstanceSpecification_T, _OclAny);
			addSuperClass(_Collection_IteratorVariable_T, _OclAny);
			addSuperClass(_Collection_LambdaType_T, _OclAny);
			addSuperClass(_Collection_LoopExp_T, _OclAny);
			addSuperClass(_Collection_MapLiteralPart_T, _OclAny);
			addSuperClass(_Collection_MapType_T, _OclAny);
			addSuperClass(_Collection_MessageType_T, _OclAny);
			addSuperClass(_Collection_Model_T, _OclAny);
			addSuperClass(_Collection_NavigationCallExp_T, _OclAny);
			addSuperClass(_Collection_OCLExpression_T, _OclAny);
			addSuperClass(_Collection_OperationCallExp_T, _OclAny);
			addSuperClass(_Collection_Operation_T, _OclAny);
			addSuperClass(_Collection_OppositePropertyCallExp_T, _OclAny);
			addSuperClass(_Collection_Package_T, _OclAny);
			addSuperClass(_Collection_Parameter_T, _OclAny);
			addSuperClass(_Collection_Precedence_T, _OclAny);
			addSuperClass(_Collection_PrimitiveType_T, _OclAny);
			addSuperClass(_Collection_ProfileApplication_T, _OclAny);
			addSuperClass(_Collection_PropertyCallExp_T, _OclAny);
			addSuperClass(_Collection_Property_T, _OclAny);
			addSuperClass(_Collection_Pseudostate_T, _OclAny);
			addSuperClass(_Collection_Region_T, _OclAny);
			addSuperClass(_Collection_SendSignalAction_T, _OclAny);
			addSuperClass(_Collection_ShadowPart_T, _OclAny);
			addSuperClass(_Collection_Slot_T, _OclAny);
			addSuperClass(_Collection_StateExp_T, _OclAny);
			addSuperClass(_Collection_StateMachine_T, _OclAny);
			addSuperClass(_Collection_State_T, _OclAny);
			addSuperClass(_Collection_StereotypeExtender_T, _OclAny);
			addSuperClass(_Collection_TemplateBinding_T, _OclAny);
			addSuperClass(_Collection_TemplateParameterSubstitution_T, _OclAny);
			addSuperClass(_Collection_TemplateParameter_T, _OclAny);
			addSuperClass(_Collection_TemplateableElement_T, _OclAny);
			addSuperClass(_Collection_Transition_T, _OclAny);
			addSuperClass(_Collection_Trigger_T, _OclAny);
			addSuperClass(_Collection_TupleLiteralPart_T, _OclAny);
			addSuperClass(_Collection_TypeExp_T, _OclAny);
			addSuperClass(_Collection_Type_T, _OclAny);
			addSuperClass(_Collection_TypedElement_T, _OclAny);
			addSuperClass(_Collection_ValueSpecification_T, _OclAny);
			addSuperClass(_Collection_VariableDeclaration_T, _OclAny);
			addSuperClass(_Collection_VariableExp_T, _OclAny);
			addSuperClass(_Collection_Variable_T, _OclAny);
			addSuperClass(_Collection_Vertex_T, _OclAny);
			addSuperClass(_Collection_WildcardType_T, _OclAny);
			addSuperClass(_OrderedCollection_CollectionLiteralPart_T, _Collection_CollectionLiteralPart_T);
			addSuperClass(_OrderedCollection_Detail_T, _Collection_Detail_T);
			addSuperClass(_OrderedCollection_Element_T, _Collection_Element_T);
			addSuperClass(_OrderedCollection_EnumerationLiteral_T, _Collection_EnumerationLiteral_T);
			addSuperClass(_OrderedCollection_Import_T, _Collection_Import_T);
			addSuperClass(_OrderedCollection_IteratorVariable_T, _Collection_IteratorVariable_T);
			addSuperClass(_OrderedCollection_MapLiteralPart_T, _Collection_MapLiteralPart_T);
			addSuperClass(_OrderedCollection_OCLExpression_T, _Collection_OCLExpression_T);
			addSuperClass(_OrderedCollection_Operation_T, _Collection_Operation_T);
			addSuperClass(_OrderedCollection_Parameter_T, _Collection_Parameter_T);
			addSuperClass(_OrderedCollection_Precedence_T, _Collection_Precedence_T);
			addSuperClass(_OrderedCollection_Property_T, _Collection_Property_T);
			addSuperClass(_OrderedCollection_ShadowPart_T, _Collection_ShadowPart_T);
			addSuperClass(_OrderedCollection_TemplateParameter_T, _Collection_TemplateParameter_T);
			addSuperClass(_OrderedCollection_TupleLiteralPart_T, _Collection_TupleLiteralPart_T);
			addSuperClass(_OrderedCollection_Type_T, _Collection_Type_T);
			addSuperClass(_OrderedCollection_ValueSpecification_T, _Collection_ValueSpecification_T);
			addSuperClass(_OrderedCollection_Variable_T, _Collection_Variable_T);
			addSuperClass(_OrderedSet_CollectionLiteralPart_T, _OrderedCollection_CollectionLiteralPart_T);
			addSuperClass(_OrderedSet_CollectionLiteralPart_T, _UniqueCollection_CollectionLiteralPart_T);
			addSuperClass(_OrderedSet_Detail_T, _OrderedCollection_Detail_T);
			addSuperClass(_OrderedSet_Detail_T, _UniqueCollection_Detail_T);
			addSuperClass(_OrderedSet_Element_T, _OrderedCollection_Element_T);
			addSuperClass(_OrderedSet_Element_T, _UniqueCollection_Element_T);
			addSuperClass(_OrderedSet_EnumerationLiteral_T, _OrderedCollection_EnumerationLiteral_T);
			addSuperClass(_OrderedSet_EnumerationLiteral_T, _UniqueCollection_EnumerationLiteral_T);
			addSuperClass(_OrderedSet_Import_T, _OrderedCollection_Import_T);
			addSuperClass(_OrderedSet_Import_T, _UniqueCollection_Import_T);
			addSuperClass(_OrderedSet_IteratorVariable_F, _OrderedCollection_IteratorVariable_T);
			addSuperClass(_OrderedSet_IteratorVariable_F, _UniqueCollection_IteratorVariable_T);
			addSuperClass(_OrderedSet_MapLiteralPart_T, _OrderedCollection_MapLiteralPart_T);
			addSuperClass(_OrderedSet_MapLiteralPart_T, _UniqueCollection_MapLiteralPart_T);
			addSuperClass(_OrderedSet_OCLExpression_T, _OrderedCollection_OCLExpression_T);
			addSuperClass(_OrderedSet_OCLExpression_T, _UniqueCollection_OCLExpression_T);
			addSuperClass(_OrderedSet_Operation_T, _OrderedCollection_Operation_T);
			addSuperClass(_OrderedSet_Operation_T, _UniqueCollection_Operation_T);
			addSuperClass(_OrderedSet_Parameter_T, _OrderedCollection_Parameter_T);
			addSuperClass(_OrderedSet_Parameter_T, _UniqueCollection_Parameter_T);
			addSuperClass(_OrderedSet_Precedence_T, _OrderedCollection_Precedence_T);
			addSuperClass(_OrderedSet_Precedence_T, _UniqueCollection_Precedence_T);
			addSuperClass(_OrderedSet_Property_T, _OrderedCollection_Property_T);
			addSuperClass(_OrderedSet_Property_T, _UniqueCollection_Property_T);
			addSuperClass(_OrderedSet_ShadowPart_T, _OrderedCollection_ShadowPart_T);
			addSuperClass(_OrderedSet_ShadowPart_T, _UniqueCollection_ShadowPart_T);
			addSuperClass(_OrderedSet_TemplateParameter_T_L1, _OrderedCollection_TemplateParameter_T);
			addSuperClass(_OrderedSet_TemplateParameter_T_L1, _UniqueCollection_TemplateParameter_T);
			addSuperClass(_OrderedSet_TupleLiteralPart_T, _OrderedCollection_TupleLiteralPart_T);
			addSuperClass(_OrderedSet_TupleLiteralPart_T, _UniqueCollection_TupleLiteralPart_T);
			addSuperClass(_OrderedSet_ValueSpecification_T, _OrderedCollection_ValueSpecification_T);
			addSuperClass(_OrderedSet_ValueSpecification_T, _UniqueCollection_ValueSpecification_T);
			addSuperClass(_OrderedSet_Variable_T, _OrderedCollection_Variable_T);
			addSuperClass(_OrderedSet_Variable_T, _UniqueCollection_Variable_T);
			addSuperClass(_Sequence_Type_T, _OrderedCollection_Type_T);
			addSuperClass(_Set_String_T_L1, _UniqueCollection_String_T);
			addSuperClass(_Set_Behavior_T, _UniqueCollection_Behavior_T);
			addSuperClass(_Set_Class_T, _UniqueCollection_Class_T);
			addSuperClass(_Set_Comment_T, _UniqueCollection_Comment_T);
			addSuperClass(_Set_CompleteClass_T, _UniqueCollection_CompleteClass_T);
			addSuperClass(_Set_CompletePackage_T, _UniqueCollection_CompletePackage_T);
			addSuperClass(_Set_ConnectionPointReference_T, _UniqueCollection_ConnectionPointReference_T);
			addSuperClass(_Set_Constraint_T, _UniqueCollection_Constraint_T);
			addSuperClass(_Set_DynamicProperty_T, _UniqueCollection_DynamicProperty_T);
			addSuperClass(_Set_ElementExtension_T, _UniqueCollection_ElementExtension_T);
			addSuperClass(_Set_Element_T, _UniqueCollection_Element_T);
			addSuperClass(_Set_InstanceSpecification_T, _UniqueCollection_InstanceSpecification_T);
			addSuperClass(_Set_Model_T, _UniqueCollection_Model_T);
			addSuperClass(_Set_Operation_T, _UniqueCollection_Operation_T);
			addSuperClass(_Set_Package_T, _UniqueCollection_Package_T);
			addSuperClass(_Set_ProfileApplication_T, _UniqueCollection_ProfileApplication_T);
			addSuperClass(_Set_Property_T, _UniqueCollection_Property_T);
			addSuperClass(_Set_Pseudostate_T, _UniqueCollection_Pseudostate_T);
			addSuperClass(_Set_Region_T, _UniqueCollection_Region_T);
			addSuperClass(_Set_Region_T_L1, _UniqueCollection_Region_T);
			addSuperClass(_Set_Slot_T, _UniqueCollection_Slot_T);
			addSuperClass(_Set_StateMachine_T, _UniqueCollection_StateMachine_T);
			addSuperClass(_Set_State_T, _UniqueCollection_State_T);
			addSuperClass(_Set_StereotypeExtender_T, _UniqueCollection_StereotypeExtender_T);
			addSuperClass(_Set_TemplateBinding_T, _UniqueCollection_TemplateBinding_T);
			addSuperClass(_Set_TemplateParameterSubstitution_T_L1, _UniqueCollection_TemplateParameterSubstitution_T);
			addSuperClass(_Set_Transition_T, _UniqueCollection_Transition_T);
			addSuperClass(_Set_Trigger_T, _UniqueCollection_Trigger_T);
			addSuperClass(_Set_Type_T, _UniqueCollection_Type_T);
			addSuperClass(_Set_Vertex_T, _UniqueCollection_Vertex_T);
			addSuperClass(_UniqueCollection_String_T, _Collection_String_T);
			addSuperClass(_UniqueCollection_Behavior_T, _Collection_Behavior_T);
			addSuperClass(_UniqueCollection_Class_T, _Collection_Class_T);
			addSuperClass(_UniqueCollection_CollectionLiteralPart_T, _Collection_CollectionLiteralPart_T);
			addSuperClass(_UniqueCollection_Comment_T, _Collection_Comment_T);
			addSuperClass(_UniqueCollection_CompleteClass_T, _Collection_CompleteClass_T);
			addSuperClass(_UniqueCollection_CompletePackage_T, _Collection_CompletePackage_T);
			addSuperClass(_UniqueCollection_ConnectionPointReference_T, _Collection_ConnectionPointReference_T);
			addSuperClass(_UniqueCollection_Constraint_T, _Collection_Constraint_T);
			addSuperClass(_UniqueCollection_Detail_T, _Collection_Detail_T);
			addSuperClass(_UniqueCollection_DynamicProperty_T, _Collection_DynamicProperty_T);
			addSuperClass(_UniqueCollection_ElementExtension_T, _Collection_ElementExtension_T);
			addSuperClass(_UniqueCollection_Element_T, _Collection_Element_T);
			addSuperClass(_UniqueCollection_EnumerationLiteral_T, _Collection_EnumerationLiteral_T);
			addSuperClass(_UniqueCollection_Import_T, _Collection_Import_T);
			addSuperClass(_UniqueCollection_InstanceSpecification_T, _Collection_InstanceSpecification_T);
			addSuperClass(_UniqueCollection_IteratorVariable_T, _Collection_IteratorVariable_T);
			addSuperClass(_UniqueCollection_MapLiteralPart_T, _Collection_MapLiteralPart_T);
			addSuperClass(_UniqueCollection_Model_T, _Collection_Model_T);
			addSuperClass(_UniqueCollection_OCLExpression_T, _Collection_OCLExpression_T);
			addSuperClass(_UniqueCollection_Operation_T, _Collection_Operation_T);
			addSuperClass(_UniqueCollection_Package_T, _Collection_Package_T);
			addSuperClass(_UniqueCollection_Parameter_T, _Collection_Parameter_T);
			addSuperClass(_UniqueCollection_Precedence_T, _Collection_Precedence_T);
			addSuperClass(_UniqueCollection_ProfileApplication_T, _Collection_ProfileApplication_T);
			addSuperClass(_UniqueCollection_Property_T, _Collection_Property_T);
			addSuperClass(_UniqueCollection_Pseudostate_T, _Collection_Pseudostate_T);
			addSuperClass(_UniqueCollection_Region_T, _Collection_Region_T);
			addSuperClass(_UniqueCollection_ShadowPart_T, _Collection_ShadowPart_T);
			addSuperClass(_UniqueCollection_Slot_T, _Collection_Slot_T);
			addSuperClass(_UniqueCollection_StateMachine_T, _Collection_StateMachine_T);
			addSuperClass(_UniqueCollection_State_T, _Collection_State_T);
			addSuperClass(_UniqueCollection_StereotypeExtender_T, _Collection_StereotypeExtender_T);
			addSuperClass(_UniqueCollection_TemplateBinding_T, _Collection_TemplateBinding_T);
			addSuperClass(_UniqueCollection_TemplateParameterSubstitution_T, _Collection_TemplateParameterSubstitution_T);
			addSuperClass(_UniqueCollection_TemplateParameter_T, _Collection_TemplateParameter_T);
			addSuperClass(_UniqueCollection_Transition_T, _Collection_Transition_T);
			addSuperClass(_UniqueCollection_Trigger_T, _Collection_Trigger_T);
			addSuperClass(_UniqueCollection_TupleLiteralPart_T, _Collection_TupleLiteralPart_T);
			addSuperClass(_UniqueCollection_Type_T, _Collection_Type_T);
			addSuperClass(_UniqueCollection_ValueSpecification_T, _Collection_ValueSpecification_T);
			addSuperClass(_UniqueCollection_Variable_T, _Collection_Variable_T);
			addSuperClass(_UniqueCollection_Vertex_T, _Collection_Vertex_T);
		}
		private Operation op_CompleteModel_getOwnedCompletePackage;
		private Operation op_CompletePackage_getOwnedCompleteClass;
		private Operation op_Element_allOwnedElements;
		private Operation op_Element_getValue;
		private Operation op_OCLExpression_isNonNull;
		private Operation op_OCLExpression_isNull;
		private Operation op_OperationCallExp_hasOclVoidOverload;
		private Operation op_Property_isAttribute;
		private Operation op_PropertyCallExp_getSpecializedReferredPropertyOwningType;
		private Operation op_PropertyCallExp_getSpecializedReferredPropertyType;
		private Operation op_ReferringElement_getReferredElement;
		private Operation op_SelfType_specializeIn;
		private Operation op_Type_flattenedType;
		private Operation op_Type_isClass;
		private Operation op_Type_isTemplateParameter;
		private Operation op_Type_specializeIn;
		private Operation op_TypedElement_CompatibleBody;
		private Operation op_ValueSpecification_booleanValue;
		private Operation op_ValueSpecification_integerValue;
		private Operation op_ValueSpecification_isComputable;
		private Operation op_ValueSpecification_isNull;
		private Operation op_ValueSpecification_stringValue;
		private Operation op_ValueSpecification_unlimitedValue;

		private void installOperationDeclarations() {
			op_CompleteModel_getOwnedCompletePackage = createOperation(_CompleteModel, PivotPackage.Literals.COMPLETE_MODEL___GET_OWNED_COMPLETE_PACKAGE__STRING, null, null);
			op_CompletePackage_getOwnedCompleteClass = createOperation(_CompletePackage, PivotPackage.Literals.COMPLETE_PACKAGE___GET_OWNED_COMPLETE_CLASS__STRING, null, null);
			op_Element_allOwnedElements = createOperation(_Element, PivotPackage.Literals.ELEMENT___ALL_OWNED_ELEMENTS, null, null);
			op_Element_getValue = createOperation(_Element, PivotPackage.Literals.ELEMENT___GET_VALUE__TYPE_STRING, null, null);
			op_OCLExpression_isNonNull = createOperation(_OCLExpression, PivotPackage.Literals.OCL_EXPRESSION___IS_NON_NULL, null, null);
			op_OCLExpression_isNull = createOperation(_OCLExpression, PivotPackage.Literals.OCL_EXPRESSION___IS_NULL, null, null);
			op_OperationCallExp_hasOclVoidOverload = createOperation(_OperationCallExp, PivotPackage.Literals.OPERATION_CALL_EXP___HAS_OCL_VOID_OVERLOAD, null, null);
			op_Property_isAttribute = createOperation(_Property, PivotPackage.Literals.PROPERTY___IS_ATTRIBUTE__PROPERTY, null, null);
			op_PropertyCallExp_getSpecializedReferredPropertyOwningType = createOperation(_PropertyCallExp, PivotPackage.Literals.PROPERTY_CALL_EXP___GET_SPECIALIZED_REFERRED_PROPERTY_OWNING_TYPE, null, null);
			op_PropertyCallExp_getSpecializedReferredPropertyType = createOperation(_PropertyCallExp, PivotPackage.Literals.PROPERTY_CALL_EXP___GET_SPECIALIZED_REFERRED_PROPERTY_TYPE, null, null);
			op_ReferringElement_getReferredElement = createOperation(_ReferringElement, PivotPackage.Literals.REFERRING_ELEMENT___GET_REFERRED_ELEMENT, null, null);
			op_SelfType_specializeIn = createOperation(_SelfType, PivotPackage.Literals.SELF_TYPE___SPECIALIZE_IN__CALLEXP_TYPE, null, null);
			op_Type_flattenedType = createOperation(_Type, PivotPackage.Literals.TYPE___FLATTENED_TYPE, null, null);
			op_Type_isClass = createOperation(_Type, PivotPackage.Literals.TYPE___IS_CLASS, null, null);
			op_Type_isTemplateParameter = createOperation(_Type, PivotPackage.Literals.TYPE___IS_TEMPLATE_PARAMETER, null, null);
			op_Type_specializeIn = createOperation(_Type, PivotPackage.Literals.TYPE___SPECIALIZE_IN__CALLEXP_TYPE, null, null);
			op_TypedElement_CompatibleBody = createOperation(_TypedElement, PivotPackage.Literals.TYPED_ELEMENT___COMPATIBLE_BODY__VALUESPECIFICATION, null, null);
			op_ValueSpecification_booleanValue = createOperation(_ValueSpecification, PivotPackage.Literals.VALUE_SPECIFICATION___BOOLEAN_VALUE, null, null);
			op_ValueSpecification_integerValue = createOperation(_ValueSpecification, PivotPackage.Literals.VALUE_SPECIFICATION___INTEGER_VALUE, null, null);
			op_ValueSpecification_isComputable = createOperation(_ValueSpecification, PivotPackage.Literals.VALUE_SPECIFICATION___IS_COMPUTABLE, null, null);
			op_ValueSpecification_isNull = createOperation(_ValueSpecification, PivotPackage.Literals.VALUE_SPECIFICATION___IS_NULL, null, null);
			op_ValueSpecification_stringValue = createOperation(_ValueSpecification, PivotPackage.Literals.VALUE_SPECIFICATION___STRING_VALUE, null, null);
			op_ValueSpecification_unlimitedValue = createOperation(_ValueSpecification, PivotPackage.Literals.VALUE_SPECIFICATION___UNLIMITED_VALUE, null, null);
		}

		private void installOperationBodies() {
			Operation operation;
			Parameter parameter;

			operation = op_CompleteModel_getOwnedCompletePackage;
			operation.setType(_CompletePackage);
			operation.setIsRequired(false);
			parameter = createParameter(operation, "name", _String, false);

			operation = op_CompletePackage_getOwnedCompleteClass;
			operation.setType(_CompleteClass);
			operation.setIsRequired(false);
			parameter = createParameter(operation, "name", _String, false);

			operation = op_Element_allOwnedElements;
			operation.setType(_Set_Element_T);
			createBodyExpression(operation, _Element, "self->closure(oclContents()->selectByKind(Element))", _Set_Element_T);
			installComment(operation, "The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.");

			operation = op_Element_getValue;
			operation.setType(_Element);
			operation.setIsRequired(false);
			createBodyExpression(operation, _Element, "null", _Element);
			parameter = createParameter(operation, "stereotype", _Type, true);
			parameter = createParameter(operation, "propertyName", _String, true);

			operation = op_OCLExpression_isNonNull;
			operation.setType(_EBoolean);

			operation = op_OCLExpression_isNull;
			operation.setType(_EBoolean);

			operation = op_OperationCallExp_hasOclVoidOverload;
			operation.setType(_EBoolean);

			operation = op_Property_isAttribute;
			operation.setType(_EBoolean);
			createBodyExpression(operation, _Property, "--Type.allInstances()->exists(c| c.ownedAttribute->includes(p))\nlet container : ocl::OclElement = oclContainer() in container.oclIsKindOf(Class) and container.oclAsType(Class).ownedProperties->includes(self)", _EBoolean);
			parameter = createParameter(operation, "p", _Property, true);

			operation = op_PropertyCallExp_getSpecializedReferredPropertyOwningType;
			operation.setType(_Type);
			createBodyExpression(operation, _PropertyCallExp, "referredProperty?.owningClass", _Type);

			operation = op_PropertyCallExp_getSpecializedReferredPropertyType;
			operation.setType(_Type);
			createBodyExpression(operation, _PropertyCallExp, "referredProperty?.type.oclAsType(Class)", _Type);

			operation = op_ReferringElement_getReferredElement;
			operation.setType(_Element);

			operation = op_SelfType_specializeIn;
			operation.setType(_Type);
			createBodyExpression(operation, _SelfType, "selfType", _Type);
			parameter = createParameter(operation, "expr", _CallExp, true);
			parameter = createParameter(operation, "selfType", _Type, true);

			operation = op_Type_flattenedType;
			operation.setType(_Type);
			operation.setIsRequired(false);
			createBodyExpression(operation, _Type, "self", _Type);
			installComment(operation, "Return the type to be used as the element type when this is flattened. For most types this is self.\nFor a CollectionType, it is the transitive element type.");

			operation = op_Type_isClass;
			operation.setType(_Class);
			operation.setIsRequired(false);

			operation = op_Type_isTemplateParameter;
			operation.setType(_TemplateParameter);
			operation.setIsRequired(false);

			operation = op_Type_specializeIn;
			operation.setType(_Type);
			createBodyExpression(operation, _Type, "self", _Type);
			parameter = createParameter(operation, "expr", _CallExp, true);
			parameter = createParameter(operation, "selfType", _Type, true);

			operation = op_TypedElement_CompatibleBody;
			operation.setType(_EBoolean);
			createBodyExpression(operation, _TypedElement, "bodySpecification.type?.conformsTo(self.type)", _EBoolean);
			parameter = createParameter(operation, "bodySpecification", _ValueSpecification, true);

			operation = op_ValueSpecification_booleanValue;
			operation.setType(_Boolean);
			operation.setIsRequired(false);
			installComment(operation, "The query booleanValue() gives a single Boolean value when one can be computed.");

			operation = op_ValueSpecification_integerValue;
			operation.setType(_Integer);
			operation.setIsRequired(false);
			installComment(operation, "The query integerValue() gives a single Integer value when one can be computed.");

			operation = op_ValueSpecification_isComputable;
			operation.setType(_EBoolean);
			installComment(operation, "The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all ValueSpecifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute at least the value of all LiteralSpecifications.");

			operation = op_ValueSpecification_isNull;
			operation.setType(_EBoolean);
			installComment(operation, "The query isNull() returns true when it can be computed that the value is null.");

			operation = op_ValueSpecification_stringValue;
			operation.setType(_String);
			operation.setIsRequired(false);
			installComment(operation, "The query stringValue() gives a single String value when one can be computed.");

			operation = op_ValueSpecification_unlimitedValue;
			operation.setType(_UnlimitedNatural);
			operation.setIsRequired(false);
			installComment(operation, "The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed.");
		}

		private void installProperties() {
			Property pr_Annotation_ownedContents;
			Property pr_Annotation_ownedDetails;
			Property pr_Annotation_references;
			Property pr_AssociationClass_unownedAttributes;
			Property pr_AssociationClass_AssociationClassCallExp_referredAssociationClass;
			Property pr_AssociationClassCallExp_referredAssociationClass;
			Property pr_Behavior_owningTransition;
			Property pr_Behavior_Class_ownedBehaviors;
			Property pr_Behavior_State_ownedDoActivity;
			Property pr_Behavior_State_ownedEntry;
			Property pr_Behavior_State_ownedExit;
			Property pr_CallExp_ownedSource;
			Property pr_CallOperationAction_operation;
			Property pr_CallOperationAction_MessageExp_ownedCalledOperation;
			Property pr_Class_extenders;
			Property pr_Class_ownedBehaviors;
			Property pr_Class_ownedInvariants;
			Property pr_Class_ownedOperations;
			Property pr_Class_ownedProperties;
			Property pr_Class_owningPackage;
			Property pr_Class_superClasses;
			Property pr_Class_Class_superClasses;
			Property pr_Class_CompleteClass_partialClasses;
			Property pr_Class_DataType_behavioralClass;
			Property pr_Class_InstanceSpecification_classes;
			Property pr_Class_MapType_entryClass;
			Property pr_Class_TemplateParameter_constrainingClasses;
			Property pr_CollectionItem_ownedItem;
			Property pr_CollectionLiteralExp_ownedParts;
			Property pr_CollectionLiteralPart_CollectionLiteralExp_ownedParts;
			Property pr_CollectionRange_ownedFirst;
			Property pr_CollectionRange_ownedLast;
			Property pr_CollectionType_elementType;
			Property pr_Comment_annotatedElements;
			Property pr_Comment_owningElement;
			Property pr_CompleteClass_owningCompletePackage;
			Property pr_CompleteClass_partialClasses;
			Property pr_CompleteEnvironment_ownedCompleteModel;
			Property pr_CompleteEnvironment_ownedStandardLibrary;
			Property pr_CompleteModel_orphanCompletePackage;
			Property pr_CompleteModel_ownedCompletePackages;
			Property pr_CompleteModel_owningCompleteEnvironment;
			Property pr_CompleteModel_partialModels;
			Property pr_CompleteModel_primitiveCompletePackage;
			Property pr_CompletePackage_ownedCompleteClasses;
			Property pr_CompletePackage_ownedCompletePackages;
			Property pr_CompletePackage_owningCompleteModel;
			Property pr_CompletePackage_owningCompletePackage;
			Property pr_CompletePackage_partialPackages;
			Property pr_CompleteStandardLibrary_owningCompleteEnvironment;
			Property pr_ConnectionPointReference_entries;
			Property pr_ConnectionPointReference_exits;
			Property pr_ConnectionPointReference_owningState;
			Property pr_Constraint_constrainedElements;
			Property pr_Constraint_context;
			Property pr_Constraint_ownedSpecification;
			Property pr_Constraint_owningPostContext;
			Property pr_Constraint_owningPreContext;
			Property pr_Constraint_owningState;
			Property pr_Constraint_owningTransition;
			Property pr_Constraint_redefinedConstraints;
			Property pr_Constraint_Class_ownedInvariants;
			Property pr_Constraint_Constraint_redefinedConstraints;
			Property pr_Constraint_Namespace_ownedConstraints;
			Property pr_DataType_behavioralClass;
			Property pr_Detail_Annotation_ownedDetails;
			Property pr_DynamicElement_metaType;
			Property pr_DynamicProperty_referredProperty;
			Property pr_DynamicProperty_DynamicType_ownedDynamicProperties;
			Property pr_DynamicType_ownedDynamicProperties;
			Property pr_Element_annotatingComments;
			Property pr_Element_ownedAnnotations;
			Property pr_Element_ownedComments;
			Property pr_Element_ownedExtensions;
			Property pr_Element_Annotation_ownedContents;
			Property pr_Element_Annotation_references;
			Property pr_Element_Constraint_constrainedElements;
			Property pr_Element_Element_ownedAnnotations;
			Property pr_ElementExtension_base;
			Property pr_ElementExtension_stereotype;
			Property pr_EnumLiteralExp_referredLiteral;
			Property pr_Enumeration_ownedLiterals;
			Property pr_EnumerationLiteral_owningEnumeration;
			Property pr_EnumerationLiteral_EnumLiteralExp_referredLiteral;
			Property pr_ExpressionInOCL_ownedBody;
			Property pr_ExpressionInOCL_ownedContext;
			Property pr_ExpressionInOCL_ownedParameters;
			Property pr_ExpressionInOCL_ownedResult;
			Property pr_IfExp_ownedCondition;
			Property pr_IfExp_ownedElse;
			Property pr_IfExp_ownedThen;
			Property pr_Import_importedNamespace;
			Property pr_Import_Model_ownedImports;
			Property pr_InstanceSpecification_classes;
			Property pr_InstanceSpecification_ownedSlots;
			Property pr_InstanceSpecification_ownedSpecification;
			Property pr_InstanceSpecification_owningPackage;
			Property pr_IterateExp_ownedResult;
			Property pr_Iteration_ownedAccumulators;
			Property pr_Iteration_ownedIterators;
			Property pr_Iteration_LoopExp_referredIteration;
			Property pr_IteratorVariable_LoopExp_ownedCoIterators;
			Property pr_LambdaType_contextType;
			Property pr_LambdaType_parameterType;
			Property pr_LambdaType_resultType;
			Property pr_LanguageExpression_owningConstraint;
			Property pr_LanguageExpression_InstanceSpecification_ownedSpecification;
			Property pr_LanguageExpression_Operation_bodyExpression;
			Property pr_LanguageExpression_Property_ownedExpression;
			Property pr_LetExp_ownedIn;
			Property pr_LetExp_ownedVariable;
			Property pr_Library_ownedPrecedences;
			Property pr_LoopExp_ownedBody;
			Property pr_LoopExp_ownedCoIterators;
			Property pr_LoopExp_ownedIterators;
			Property pr_LoopExp_referredIteration;
			Property pr_MapLiteralExp_ownedParts;
			Property pr_MapLiteralPart_ownedKey;
			Property pr_MapLiteralPart_ownedValue;
			Property pr_MapLiteralPart_MapLiteralExp_ownedParts;
			Property pr_MapType_entryClass;
			Property pr_MapType_keyType;
			Property pr_MapType_valueType;
			Property pr_MessageExp_ownedArguments;
			Property pr_MessageExp_ownedCalledOperation;
			Property pr_MessageExp_ownedSentSignal;
			Property pr_MessageExp_ownedTarget;
			Property pr_MessageType_referredOperation;
			Property pr_MessageType_referredSignal;
			Property pr_Model_ownedImports;
			Property pr_Model_ownedPackages;
			Property pr_Model_CompleteModel_partialModels;
			Property pr_Namespace_ownedConstraints;
			Property pr_Namespace_Constraint_context;
			Property pr_Namespace_Import_importedNamespace;
			Property pr_NavigationCallExp_navigationSource;
			Property pr_NavigationCallExp_qualifiers;
			Property pr_OCLExpression_typeValue;
			Property pr_OCLExpression_CallExp_ownedSource;
			Property pr_OCLExpression_CollectionItem_ownedItem;
			Property pr_OCLExpression_CollectionRange_ownedFirst;
			Property pr_OCLExpression_CollectionRange_ownedLast;
			Property pr_OCLExpression_ExpressionInOCL_ownedBody;
			Property pr_OCLExpression_IfExp_ownedCondition;
			Property pr_OCLExpression_IfExp_ownedElse;
			Property pr_OCLExpression_IfExp_ownedThen;
			Property pr_OCLExpression_LetExp_ownedIn;
			Property pr_OCLExpression_LoopExp_ownedBody;
			Property pr_OCLExpression_MapLiteralPart_ownedKey;
			Property pr_OCLExpression_MapLiteralPart_ownedValue;
			Property pr_OCLExpression_MessageExp_ownedArguments;
			Property pr_OCLExpression_MessageExp_ownedTarget;
			Property pr_OCLExpression_NavigationCallExp_qualifiers;
			Property pr_OCLExpression_OperationCallExp_ownedArguments;
			Property pr_OCLExpression_ShadowPart_ownedInit;
			Property pr_OCLExpression_TupleLiteralPart_ownedInit;
			Property pr_OCLExpression_Variable_ownedInit;
			Property pr_Operation_bodyExpression;
			Property pr_Operation_ownedParameters;
			Property pr_Operation_ownedPostconditions;
			Property pr_Operation_ownedPreconditions;
			Property pr_Operation_owningClass;
			Property pr_Operation_precedence;
			Property pr_Operation_raisedExceptions;
			Property pr_Operation_redefinedOperations;
			Property pr_Operation_CallOperationAction_operation;
			Property pr_Operation_MessageType_referredOperation;
			Property pr_Operation_Operation_redefinedOperations;
			Property pr_Operation_OperationCallExp_referredOperation;
			Property pr_Operation_PrimitiveType_coercions;
			Property pr_OperationCallExp_ownedArguments;
			Property pr_OperationCallExp_referredOperation;
			Property pr_OppositePropertyCallExp_referredProperty;
			Property pr_OrphanCompletePackage_CompleteModel_orphanCompletePackage;
			Property pr_Package_importedPackages;
			Property pr_Package_ownedClasses;
			Property pr_Package_ownedInstances;
			Property pr_Package_ownedPackages;
			Property pr_Package_ownedProfileApplications;
			Property pr_Package_owningPackage;
			Property pr_Package_CompletePackage_partialPackages;
			Property pr_Package_Model_ownedPackages;
			Property pr_Package_Package_importedPackages;
			Property pr_Parameter_owningOperation;
			Property pr_Parameter_Iteration_ownedAccumulators;
			Property pr_Parameter_Iteration_ownedIterators;
			Property pr_Parameter_Variable_representedParameter;
			Property pr_Precedence_Library_ownedPrecedences;
			Property pr_Precedence_Operation_precedence;
			Property pr_PrimitiveCompletePackage_CompleteModel_primitiveCompletePackage;
			Property pr_PrimitiveType_coercions;
			Property pr_Profile_profileApplications;
			Property pr_ProfileApplication_appliedProfile;
			Property pr_ProfileApplication_owningPackage;
			Property pr_Property_associationClass;
			Property pr_Property_keys;
			Property pr_Property_opposite;
			Property pr_Property_ownedExpression;
			Property pr_Property_owningClass;
			Property pr_Property_redefinedProperties;
			Property pr_Property_referredProperty;
			Property pr_Property_subsettedProperty;
			Property pr_Property_DynamicProperty_referredProperty;
			Property pr_Property_NavigationCallExp_navigationSource;
			Property pr_Property_OppositePropertyCallExp_referredProperty;
			Property pr_Property_Property_keys;
			Property pr_Property_Property_opposite;
			Property pr_Property_Property_redefinedProperties;
			Property pr_Property_Property_referredProperty;
			Property pr_Property_Property_subsettedProperty;
			Property pr_Property_PropertyCallExp_referredProperty;
			Property pr_Property_ShadowPart_referredProperty;
			Property pr_Property_Slot_definingProperty;
			Property pr_PropertyCallExp_referredProperty;
			Property pr_Pseudostate_owningState;
			Property pr_Pseudostate_owningStateMachine;
			Property pr_Pseudostate_ConnectionPointReference_entries;
			Property pr_Pseudostate_ConnectionPointReference_exits;
			Property pr_Region_extendedRegion;
			Property pr_Region_ownedSubvertexes;
			Property pr_Region_ownedTransitions;
			Property pr_Region_owningState;
			Property pr_Region_owningStateMachine;
			Property pr_Region_Region_extendedRegion;
			Property pr_SendSignalAction_signal;
			Property pr_SendSignalAction_MessageExp_ownedSentSignal;
			Property pr_ShadowExp_ownedParts;
			Property pr_ShadowPart_ownedInit;
			Property pr_ShadowPart_referredProperty;
			Property pr_ShadowPart_ShadowExp_ownedParts;
			Property pr_Signal_MessageType_referredSignal;
			Property pr_Signal_SendSignalAction_signal;
			Property pr_Slot_definingProperty;
			Property pr_Slot_ownedValues;
			Property pr_Slot_owningInstance;
			Property pr_State_ownedConnectionPoints;
			Property pr_State_ownedConnections;
			Property pr_State_ownedDeferrableTriggers;
			Property pr_State_ownedDoActivity;
			Property pr_State_ownedEntry;
			Property pr_State_ownedExit;
			Property pr_State_ownedRegions;
			Property pr_State_ownedStateInvariant;
			Property pr_State_redefinedState;
			Property pr_State_submachines;
			Property pr_State_State_redefinedState;
			Property pr_State_StateExp_referredState;
			Property pr_StateExp_referredState;
			Property pr_StateMachine_extendedStateMachines;
			Property pr_StateMachine_ownedConnectionPoints;
			Property pr_StateMachine_ownedRegions;
			Property pr_StateMachine_submachineStates;
			Property pr_StateMachine_StateMachine_extendedStateMachines;
			Property pr_Stereotype_ownedExtenders;
			Property pr_Stereotype_ElementExtension_stereotype;
			Property pr_StereotypeExtender_class;
			Property pr_StereotypeExtender_owningStereotype;
			Property pr_TemplateBinding_ownedSubstitutions;
			Property pr_TemplateBinding_owningElement;
			Property pr_TemplateBinding_templateSignature;
			Property pr_TemplateParameter_constrainingClasses;
			Property pr_TemplateParameter_owningSignature;
			Property pr_TemplateParameter_TemplateParameterSubstitution_formal;
			Property pr_TemplateParameterSubstitution_actual;
			Property pr_TemplateParameterSubstitution_formal;
			Property pr_TemplateParameterSubstitution_ownedWildcard;
			Property pr_TemplateParameterSubstitution_owningBinding;
			Property pr_TemplateSignature_ownedParameters;
			Property pr_TemplateSignature_owningElement;
			Property pr_TemplateSignature_TemplateBinding_templateSignature;
			Property pr_TemplateableElement_ownedBindings;
			Property pr_TemplateableElement_ownedSignature;
			Property pr_TemplateableElement_unspecializedElement;
			Property pr_TemplateableElement_TemplateableElement_unspecializedElement;
			Property pr_Transition_ownedEffect;
			Property pr_Transition_ownedGuard;
			Property pr_Transition_ownedTriggers;
			Property pr_Transition_owningRegion;
			Property pr_Transition_source;
			Property pr_Transition_target;
			Property pr_Trigger_owningState;
			Property pr_Trigger_owningTransition;
			Property pr_TupleLiteralExp_ownedParts;
			Property pr_TupleLiteralPart_ownedInit;
			Property pr_TupleLiteralPart_TupleLiteralExp_ownedParts;
			Property pr_Type_CollectionType_elementType;
			Property pr_Type_DynamicElement_metaType;
			Property pr_Type_LambdaType_contextType;
			Property pr_Type_LambdaType_parameterType;
			Property pr_Type_LambdaType_resultType;
			Property pr_Type_MapType_keyType;
			Property pr_Type_MapType_valueType;
			Property pr_Type_OCLExpression_typeValue;
			Property pr_Type_Operation_raisedExceptions;
			Property pr_Type_TemplateParameterSubstitution_actual;
			Property pr_Type_TypeExp_referredType;
			Property pr_Type_TypedElement_type;
			Property pr_Type_VariableDeclaration_typeValue;
			Property pr_Type_WildcardType_lowerBound;
			Property pr_Type_WildcardType_upperBound;
			Property pr_TypeExp_referredType;
			Property pr_TypedElement_type;
			Property pr_ValueSpecification_Slot_ownedValues;
			Property pr_Variable_ownedInit;
			Property pr_Variable_representedParameter;
			Property pr_Variable_ExpressionInOCL_ownedContext;
			Property pr_Variable_ExpressionInOCL_ownedParameters;
			Property pr_Variable_ExpressionInOCL_ownedResult;
			Property pr_Variable_IterateExp_ownedResult;
			Property pr_Variable_LetExp_ownedVariable;
			Property pr_Variable_LoopExp_ownedIterators;
			Property pr_VariableDeclaration_typeValue;
			Property pr_VariableDeclaration_VariableExp_referredVariable;
			Property pr_VariableExp_referredVariable;
			Property pr_Vertex_incomingTransitions;
			Property pr_Vertex_outgoingTransitions;
			Property pr_Vertex_owningRegion;
			Property pr_WildcardType_lowerBound;
			Property pr_WildcardType_upperBound;
			Property pr_WildcardType_TemplateParameterSubstitution_ownedWildcard;
			List<Property> ownedProperties;
			Property property;

			ownedProperties = _Annotation.getOwnedProperties();
			ownedProperties.add(property = pr_Annotation_ownedContents = createProperty(PivotPackage.Literals.ANNOTATION__OWNED_CONTENTS, _OrderedSet_Element_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Annotation_ownedDetails = createProperty(PivotPackage.Literals.ANNOTATION__OWNED_DETAILS, _OrderedSet_Detail_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Annotation_references = createProperty(PivotPackage.Literals.ANNOTATION__REFERENCES, _OrderedSet_Element_T));
			property.setIsResolveProxies(true);

			ownedProperties = _AssociationClass.getOwnedProperties();
			ownedProperties.add(property = pr_AssociationClass_unownedAttributes = createProperty(PivotPackage.Literals.ASSOCIATION_CLASS__UNOWNED_ATTRIBUTES, _Set_Property_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_AssociationClass_AssociationClassCallExp_referredAssociationClass = createProperty("AssociationClassCallExp", _Bag_AssociationClassCallExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _AssociationClassCallExp.getOwnedProperties();
			ownedProperties.add(property = pr_AssociationClassCallExp_referredAssociationClass = createProperty(PivotPackage.Literals.ASSOCIATION_CLASS_CALL_EXP__REFERRED_ASSOCIATION_CLASS, _AssociationClass));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Behavior.getOwnedProperties();
			ownedProperties.add(property = pr_Behavior_owningTransition = createProperty(PivotPackage.Literals.BEHAVIOR__OWNING_TRANSITION, _Transition));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Behavior_Class_ownedBehaviors = createProperty("Class", _Class));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Behavior_State_ownedDoActivity = createProperty("State", _State));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Behavior_State_ownedEntry = createProperty("State", _State));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Behavior_State_ownedExit = createProperty("State", _State));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _BooleanLiteralExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.BOOLEAN_LITERAL_EXP__BOOLEAN_SYMBOL, _EBoolean));
			property.setIsResolveProxies(true);
			property.setIsUnsettable(true);

			ownedProperties = _CallExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.CALL_EXP__IS_IMPLICIT, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.CALL_EXP__IS_SAFE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_CallExp_ownedSource = createProperty(PivotPackage.Literals.CALL_EXP__OWNED_SOURCE, _OCLExpression));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _CallOperationAction.getOwnedProperties();
			ownedProperties.add(property = pr_CallOperationAction_operation = createProperty(PivotPackage.Literals.CALL_OPERATION_ACTION__OPERATION, _Operation));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CallOperationAction_MessageExp_ownedCalledOperation = createProperty("MessageExp", _MessageExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Class.getOwnedProperties();
			ownedProperties.add(property = pr_Class_extenders = createProperty(PivotPackage.Literals.CLASS__EXTENDERS, _Set_StereotypeExtender_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.CLASS__INSTANCE_CLASS_NAME, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.CLASS__IS_ABSTRACT, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "If true, the Class does not provide a complete declaration and cannot be instantiated. An abstract Class is typically used as a target of Associations or Generalizations.\n\nIf true, the Classifier can only be instantiated by instantiating one of its specializations. An abstract Classifier is intended to be used by other Classifiers e.g., as the target of Associations or Generalizations.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.CLASS__IS_ACTIVE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "Determines whether an object specified by this Class is active or not. If true, then the owning Class is referred to as an active Class. If false, then such a Class is referred to as a passive Class.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.CLASS__IS_INTERFACE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_Class_ownedBehaviors = createProperty(PivotPackage.Literals.CLASS__OWNED_BEHAVIORS, _Set_Behavior_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "Behaviors owned by a BehavioredClassifier.");
			ownedProperties.add(property = pr_Class_ownedInvariants = createProperty(PivotPackage.Literals.CLASS__OWNED_INVARIANTS, _Set_Constraint_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_ownedOperations = createProperty(PivotPackage.Literals.CLASS__OWNED_OPERATIONS, _OrderedSet_Operation_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The Operations owned by the Class.");
			ownedProperties.add(property = pr_Class_ownedProperties = createProperty(PivotPackage.Literals.CLASS__OWNED_PROPERTIES, _OrderedSet_Property_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The Properties owned by the StructuredClassifier.\n\nThe attributes (i.e., the Properties) owned by the Class.");
			ownedProperties.add(property = pr_Class_owningPackage = createProperty(PivotPackage.Literals.CLASS__OWNING_PACKAGE, _Package));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_superClasses = createProperty(PivotPackage.Literals.CLASS__SUPER_CLASSES, _Set_Class_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_Class_superClasses = createProperty("Class", _Bag_Class_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_CompleteClass_partialClasses = createProperty("CompleteClass", _Bag_CompleteClass_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_DataType_behavioralClass = createProperty("DataType", _Bag_DataType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_InstanceSpecification_classes = createProperty("InstanceSpecification", _Bag_InstanceSpecification_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_MapType_entryClass = createProperty("MapType", _Bag_MapType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Class_TemplateParameter_constrainingClasses = createProperty("TemplateParameter", _Bag_TemplateParameter_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _CollectionItem.getOwnedProperties();
			ownedProperties.add(property = pr_CollectionItem_ownedItem = createProperty(PivotPackage.Literals.COLLECTION_ITEM__OWNED_ITEM, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _CollectionLiteralExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.COLLECTION_LITERAL_EXP__KIND, _CollectionKind));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CollectionLiteralExp_ownedParts = createProperty(PivotPackage.Literals.COLLECTION_LITERAL_EXP__OWNED_PARTS, _OrderedSet_CollectionLiteralPart_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _CollectionLiteralPart.getOwnedProperties();
			ownedProperties.add(property = pr_CollectionLiteralPart_CollectionLiteralExp_ownedParts = createProperty("CollectionLiteralExp", _CollectionLiteralExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _CollectionRange.getOwnedProperties();
			ownedProperties.add(property = pr_CollectionRange_ownedFirst = createProperty(PivotPackage.Literals.COLLECTION_RANGE__OWNED_FIRST, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CollectionRange_ownedLast = createProperty(PivotPackage.Literals.COLLECTION_RANGE__OWNED_LAST, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _CollectionType.getOwnedProperties();
			ownedProperties.add(property = pr_CollectionType_elementType = createProperty(PivotPackage.Literals.COLLECTION_TYPE__ELEMENT_TYPE, _Type));
			property.setIsDerived(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.COLLECTION_TYPE__IS_NULL_FREE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.COLLECTION_TYPE__LOWER, _Integer));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("0");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.COLLECTION_TYPE__UPPER, _UnlimitedNatural));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("*");

			ownedProperties = _Comment.getOwnedProperties();
			ownedProperties.add(property = pr_Comment_annotatedElements = createProperty(PivotPackage.Literals.COMMENT__ANNOTATED_ELEMENTS, _Set_Element_T));
			property.setIsResolveProxies(true);
			installComment(property, "References the Element(s) being commented.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.COMMENT__BODY, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "Specifies a string that is the comment.");
			ownedProperties.add(property = pr_Comment_owningElement = createProperty(PivotPackage.Literals.COMMENT__OWNING_ELEMENT, _Element));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _CompleteClass.getOwnedProperties();
			ownedProperties.add(property = pr_CompleteClass_owningCompletePackage = createProperty(PivotPackage.Literals.COMPLETE_CLASS__OWNING_COMPLETE_PACKAGE, _CompletePackage));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompleteClass_partialClasses = createProperty(PivotPackage.Literals.COMPLETE_CLASS__PARTIAL_CLASSES, _Set_Class_T));
			property.setIsResolveProxies(true);

			ownedProperties = _CompleteEnvironment.getOwnedProperties();
			ownedProperties.add(property = pr_CompleteEnvironment_ownedCompleteModel = createProperty(PivotPackage.Literals.COMPLETE_ENVIRONMENT__OWNED_COMPLETE_MODEL, _CompleteModel));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompleteEnvironment_ownedStandardLibrary = createProperty(PivotPackage.Literals.COMPLETE_ENVIRONMENT__OWNED_STANDARD_LIBRARY, _CompleteStandardLibrary));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _CompleteModel.getOwnedProperties();
			ownedProperties.add(property = pr_CompleteModel_orphanCompletePackage = createProperty(PivotPackage.Literals.COMPLETE_MODEL__ORPHAN_COMPLETE_PACKAGE, _OrphanCompletePackage));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsRequired(false);
			property.setIsTransient(true);
			ownedProperties.add(property = pr_CompleteModel_ownedCompletePackages = createProperty(PivotPackage.Literals.COMPLETE_MODEL__OWNED_COMPLETE_PACKAGES, _Set_CompletePackage_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompleteModel_owningCompleteEnvironment = createProperty(PivotPackage.Literals.COMPLETE_MODEL__OWNING_COMPLETE_ENVIRONMENT, _CompleteEnvironment));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompleteModel_partialModels = createProperty(PivotPackage.Literals.COMPLETE_MODEL__PARTIAL_MODELS, _Set_Model_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompleteModel_primitiveCompletePackage = createProperty(PivotPackage.Literals.COMPLETE_MODEL__PRIMITIVE_COMPLETE_PACKAGE, _PrimitiveCompletePackage));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsRequired(false);
			property.setIsTransient(true);

			ownedProperties = _CompletePackage.getOwnedProperties();
			ownedProperties.add(property = pr_CompletePackage_ownedCompleteClasses = createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__OWNED_COMPLETE_CLASSES, _Set_CompleteClass_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompletePackage_ownedCompletePackages = createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__OWNED_COMPLETE_PACKAGES, _Set_CompletePackage_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompletePackage_owningCompleteModel = createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__OWNING_COMPLETE_MODEL, _CompleteModel));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompletePackage_owningCompletePackage = createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__OWNING_COMPLETE_PACKAGE, _CompletePackage));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_CompletePackage_partialPackages = createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__PARTIAL_PACKAGES, _Set_Package_T));
			property.setIsResolveProxies(true);

			ownedProperties = _CompleteStandardLibrary.getOwnedProperties();
			ownedProperties.add(property = pr_CompleteStandardLibrary_owningCompleteEnvironment = createProperty(PivotPackage.Literals.COMPLETE_STANDARD_LIBRARY__OWNING_COMPLETE_ENVIRONMENT, _CompleteEnvironment));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _ConnectionPointReference.getOwnedProperties();
			ownedProperties.add(property = pr_ConnectionPointReference_entries = createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__ENTRIES, _Set_Pseudostate_T));
			property.setIsResolveProxies(true);
			installComment(property, "The entryPoint Pseudostates corresponding to this connection point.");
			ownedProperties.add(property = pr_ConnectionPointReference_exits = createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__EXITS, _Set_Pseudostate_T));
			property.setIsResolveProxies(true);
			installComment(property, "The exitPoints kind Pseudostates corresponding to this connection point.");
			ownedProperties.add(property = pr_ConnectionPointReference_owningState = createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__OWNING_STATE, _State));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The State in which the ConnectionPointReference is defined.");

			ownedProperties = _Constraint.getOwnedProperties();
			ownedProperties.add(property = pr_Constraint_constrainedElements = createProperty(PivotPackage.Literals.CONSTRAINT__CONSTRAINED_ELEMENTS, _OrderedSet_Element_T));
			property.setIsResolveProxies(true);
			installComment(property, "The ordered set of Elements referenced by this Constraint.");
			ownedProperties.add(property = pr_Constraint_context = createProperty(PivotPackage.Literals.CONSTRAINT__CONTEXT, _Namespace));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsRequired(false);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.CONSTRAINT__IS_CALLABLE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_Constraint_ownedSpecification = createProperty(PivotPackage.Literals.CONSTRAINT__OWNED_SPECIFICATION, _LanguageExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "A condition that must be true when evaluated in order for the Constraint to be satisfied.");
			ownedProperties.add(property = pr_Constraint_owningPostContext = createProperty(PivotPackage.Literals.CONSTRAINT__OWNING_POST_CONTEXT, _Operation));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_owningPreContext = createProperty(PivotPackage.Literals.CONSTRAINT__OWNING_PRE_CONTEXT, _Operation));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_owningState = createProperty(PivotPackage.Literals.CONSTRAINT__OWNING_STATE, _State));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_owningTransition = createProperty(PivotPackage.Literals.CONSTRAINT__OWNING_TRANSITION, _Transition));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_redefinedConstraints = createProperty(PivotPackage.Literals.CONSTRAINT__REDEFINED_CONSTRAINTS, _Set_Constraint_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_Class_ownedInvariants = createProperty("Class", _Class));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_Constraint_redefinedConstraints = createProperty("Constraint", _Bag_Constraint_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Constraint_Namespace_ownedConstraints = createProperty("Namespace", _Namespace));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _DataType.getOwnedProperties();
			ownedProperties.add(property = pr_DataType_behavioralClass = createProperty(PivotPackage.Literals.DATA_TYPE__BEHAVIORAL_CLASS, _Class));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "An equivalent type, such as a PrimitiveType, that defines the conformance and evaluation behavior.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.DATA_TYPE__IS_SERIALIZABLE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("true");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.DATA_TYPE__VALUE, _String));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			property.setDefaultValueString("");
			installComment(property, "The value pseudo-property accesses a String-valued representation of the DataType.");

			ownedProperties = _Detail.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.DETAIL__VALUES, _Set_String_T_L1));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Detail_Annotation_ownedDetails = createProperty("Annotation", _Annotation));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _DynamicElement.getOwnedProperties();
			ownedProperties.add(property = pr_DynamicElement_metaType = createProperty(PivotPackage.Literals.DYNAMIC_ELEMENT__META_TYPE, _Type));
			property.setIsResolveProxies(true);

			ownedProperties = _DynamicProperty.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.DYNAMIC_PROPERTY__DEFAULT, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_DynamicProperty_referredProperty = createProperty(PivotPackage.Literals.DYNAMIC_PROPERTY__REFERRED_PROPERTY, _Property));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_DynamicProperty_DynamicType_ownedDynamicProperties = createProperty("DynamicType", _DynamicType));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _DynamicType.getOwnedProperties();
			ownedProperties.add(property = pr_DynamicType_ownedDynamicProperties = createProperty(PivotPackage.Literals.DYNAMIC_TYPE__OWNED_DYNAMIC_PROPERTIES, _Set_DynamicProperty_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Element.getOwnedProperties();
			ownedProperties.add(property = pr_Element_annotatingComments = createProperty(PivotPackage.Literals.ELEMENT__ANNOTATING_COMMENTS, _Set_Comment_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Element_ownedAnnotations = createProperty(PivotPackage.Literals.ELEMENT__OWNED_ANNOTATIONS, _OrderedSet_Element_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Element_ownedComments = createProperty(PivotPackage.Literals.ELEMENT__OWNED_COMMENTS, _Set_Comment_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The Comments owned by this Element.");
			ownedProperties.add(property = pr_Element_ownedExtensions = createProperty(PivotPackage.Literals.ELEMENT__OWNED_EXTENSIONS, _Set_ElementExtension_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Element_Annotation_ownedContents = createProperty("Annotation", _Annotation));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Element_Annotation_references = createProperty("Annotation", _Bag_Annotation_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Element_Constraint_constrainedElements = createProperty("Constraint", _Bag_Constraint_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Element_Element_ownedAnnotations = createProperty("Element", _Element));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _ElementExtension.getOwnedProperties();
			ownedProperties.add(property = pr_ElementExtension_base = createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__BASE, _Element));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__IS_APPLIED, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__IS_REQUIRED, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_ElementExtension_stereotype = createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__STEREOTYPE, _Stereotype));
			property.setIsResolveProxies(true);

			ownedProperties = _ElementLiteralExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.ELEMENT_LITERAL_EXP__REFERRED_ELEMENT, _EcoreObject));
			property.setIsResolveProxies(true);
			installComment(property, "This is an Object to avoid injecting a confusing opposite into EObject");

			ownedProperties = _EnumLiteralExp.getOwnedProperties();
			ownedProperties.add(property = pr_EnumLiteralExp_referredLiteral = createProperty(PivotPackage.Literals.ENUM_LITERAL_EXP__REFERRED_LITERAL, _EnumerationLiteral));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Enumeration.getOwnedProperties();
			ownedProperties.add(property = pr_Enumeration_ownedLiterals = createProperty(PivotPackage.Literals.ENUMERATION__OWNED_LITERALS, _OrderedSet_EnumerationLiteral_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The ordered set of literals owned by this Enumeration.");

			ownedProperties = _EnumerationLiteral.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.ENUMERATION_LITERAL__LITERAL, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setDefaultValueString("0");
			ownedProperties.add(property = pr_EnumerationLiteral_owningEnumeration = createProperty(PivotPackage.Literals.ENUMERATION_LITERAL__OWNING_ENUMERATION, _Enumeration));
			property.setIsResolveProxies(true);
			installComment(property, "The Enumeration that this EnumerationLiteral is a member of.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.ENUMERATION_LITERAL__VALUE, _Integer));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setDefaultValueString("0");
			ownedProperties.add(property = pr_EnumerationLiteral_EnumLiteralExp_referredLiteral = createProperty("EnumLiteralExp", _Bag_EnumLiteralExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _ExpressionInOCL.getOwnedProperties();
			ownedProperties.add(property = pr_ExpressionInOCL_ownedBody = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_BODY, _OCLExpression));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_ownedContext = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_CONTEXT, _Variable));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_ownedParameters = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_PARAMETERS, _OrderedSet_Variable_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ExpressionInOCL_ownedResult = createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_RESULT, _Variable));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Feature.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.FEATURE__IMPLEMENTATION, _LibraryFeature));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.FEATURE__IMPLEMENTATION_CLASS, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.FEATURE__IS_STATIC, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "Specifies whether this Feature characterizes individual instances classified by the Classifier (false) or the Classifier itself (true).");

			ownedProperties = _FeatureCallExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.FEATURE_CALL_EXP__IS_PRE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");

			ownedProperties = _IfExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.IF_EXP__IS_ELSE_IF, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "True if this IfExp corresponds to an \'elseif\' in the OCL source, false if it corresponds to an \'if\'. This attribute has no semantic significance; it merely supports more faithful reconstruction of the OCL source by a pretty printer.");
			ownedProperties.add(property = pr_IfExp_ownedCondition = createProperty(PivotPackage.Literals.IF_EXP__OWNED_CONDITION, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_IfExp_ownedElse = createProperty(PivotPackage.Literals.IF_EXP__OWNED_ELSE, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_IfExp_ownedThen = createProperty(PivotPackage.Literals.IF_EXP__OWNED_THEN, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Import.getOwnedProperties();
			ownedProperties.add(property = pr_Import_importedNamespace = createProperty(PivotPackage.Literals.IMPORT__IMPORTED_NAMESPACE, _Namespace));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.IMPORT__XMIID_VERSION, _EInt));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("0");
			ownedProperties.add(property = pr_Import_Model_ownedImports = createProperty("Model", _Model));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _InstanceSpecification.getOwnedProperties();
			ownedProperties.add(property = pr_InstanceSpecification_classes = createProperty(PivotPackage.Literals.INSTANCE_SPECIFICATION__CLASSES, _Set_Class_T));
			property.setIsResolveProxies(true);
			installComment(property, "The Classifier or Classifiers of the represented instance. If multiple Classifiers are specified, the instance is classified by all of them.");
			ownedProperties.add(property = pr_InstanceSpecification_ownedSlots = createProperty(PivotPackage.Literals.INSTANCE_SPECIFICATION__OWNED_SLOTS, _Set_Slot_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "A Slot giving the value or values of a StructuralFeature of the instance. An InstanceSpecification can have one Slot per StructuralFeature of its Classifiers, including inherited features. It is not necessary to model a Slot for every StructuralFeature, in which case the InstanceSpecification is a partial description.");
			ownedProperties.add(property = pr_InstanceSpecification_ownedSpecification = createProperty(PivotPackage.Literals.INSTANCE_SPECIFICATION__OWNED_SPECIFICATION, _LanguageExpression));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "A specification of how to compute, derive, or construct the instance.");
			ownedProperties.add(property = pr_InstanceSpecification_owningPackage = createProperty(PivotPackage.Literals.INSTANCE_SPECIFICATION__OWNING_PACKAGE, _Package));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _IntegerLiteralExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.INTEGER_LITERAL_EXP__INTEGER_SYMBOL, _Integer));
			property.setIsResolveProxies(true);

			ownedProperties = _IterateExp.getOwnedProperties();
			ownedProperties.add(property = pr_IterateExp_ownedResult = createProperty(PivotPackage.Literals.ITERATE_EXP__OWNED_RESULT, _Variable));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Iteration.getOwnedProperties();
			ownedProperties.add(property = pr_Iteration_ownedAccumulators = createProperty(PivotPackage.Literals.ITERATION__OWNED_ACCUMULATORS, _OrderedSet_Parameter_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Iteration_ownedIterators = createProperty(PivotPackage.Literals.ITERATION__OWNED_ITERATORS, _OrderedSet_Parameter_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Iteration_LoopExp_referredIteration = createProperty("LoopExp", _Bag_LoopExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _IteratorVariable.getOwnedProperties();
			ownedProperties.add(property = pr_IteratorVariable_LoopExp_ownedCoIterators = createProperty("LoopExp", _LoopExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _JavaType.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.JAVA_TYPE__JAVA_CLASS, _JavaClass));
			property.setIsResolveProxies(true);

			ownedProperties = _LambdaType.getOwnedProperties();
			ownedProperties.add(property = pr_LambdaType_contextType = createProperty(PivotPackage.Literals.LAMBDA_TYPE__CONTEXT_TYPE, _Type));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LambdaType_parameterType = createProperty(PivotPackage.Literals.LAMBDA_TYPE__PARAMETER_TYPE, _Sequence_Type_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LambdaType_resultType = createProperty(PivotPackage.Literals.LAMBDA_TYPE__RESULT_TYPE, _Type));
			property.setIsResolveProxies(true);

			ownedProperties = _LanguageExpression.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.LANGUAGE_EXPRESSION__BODY, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.LANGUAGE_EXPRESSION__LANGUAGE, _String));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = pr_LanguageExpression_owningConstraint = createProperty(PivotPackage.Literals.LANGUAGE_EXPRESSION__OWNING_CONSTRAINT, _Constraint));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LanguageExpression_InstanceSpecification_ownedSpecification = createProperty("InstanceSpecification", _InstanceSpecification));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LanguageExpression_Operation_bodyExpression = createProperty("Operation", _Operation));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LanguageExpression_Property_ownedExpression = createProperty("Property", _Property));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _LetExp.getOwnedProperties();
			ownedProperties.add(property = pr_LetExp_ownedIn = createProperty(PivotPackage.Literals.LET_EXP__OWNED_IN, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LetExp_ownedVariable = createProperty(PivotPackage.Literals.LET_EXP__OWNED_VARIABLE, _Variable));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Library.getOwnedProperties();
			ownedProperties.add(property = pr_Library_ownedPrecedences = createProperty(PivotPackage.Literals.LIBRARY__OWNED_PRECEDENCES, _OrderedSet_Precedence_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _LoopExp.getOwnedProperties();
			ownedProperties.add(property = pr_LoopExp_ownedBody = createProperty(PivotPackage.Literals.LOOP_EXP__OWNED_BODY, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LoopExp_ownedCoIterators = createProperty(PivotPackage.Literals.LOOP_EXP__OWNED_CO_ITERATORS, _OrderedSet_IteratorVariable_F));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LoopExp_ownedIterators = createProperty(PivotPackage.Literals.LOOP_EXP__OWNED_ITERATORS, _OrderedSet_Variable_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_LoopExp_referredIteration = createProperty(PivotPackage.Literals.LOOP_EXP__REFERRED_ITERATION, _Iteration));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _MapLiteralExp.getOwnedProperties();
			ownedProperties.add(property = pr_MapLiteralExp_ownedParts = createProperty(PivotPackage.Literals.MAP_LITERAL_EXP__OWNED_PARTS, _OrderedSet_MapLiteralPart_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _MapLiteralPart.getOwnedProperties();
			ownedProperties.add(property = pr_MapLiteralPart_ownedKey = createProperty(PivotPackage.Literals.MAP_LITERAL_PART__OWNED_KEY, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MapLiteralPart_ownedValue = createProperty(PivotPackage.Literals.MAP_LITERAL_PART__OWNED_VALUE, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MapLiteralPart_MapLiteralExp_ownedParts = createProperty("MapLiteralExp", _MapLiteralExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _MapType.getOwnedProperties();
			ownedProperties.add(property = pr_MapType_entryClass = createProperty(PivotPackage.Literals.MAP_TYPE__ENTRY_CLASS, _Class));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "A type for an entry that may allow an external syntax serialization as a set-of-entryClass.");
			ownedProperties.add(property = pr_MapType_keyType = createProperty(PivotPackage.Literals.MAP_TYPE__KEY_TYPE, _Type));
			property.setIsDerived(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.MAP_TYPE__KEYS_ARE_NULL_FREE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("true");
			ownedProperties.add(property = pr_MapType_valueType = createProperty(PivotPackage.Literals.MAP_TYPE__VALUE_TYPE, _Type));
			property.setIsDerived(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.MAP_TYPE__VALUES_ARE_NULL_FREE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("true");

			ownedProperties = _MessageExp.getOwnedProperties();
			ownedProperties.add(property = pr_MessageExp_ownedArguments = createProperty(PivotPackage.Literals.MESSAGE_EXP__OWNED_ARGUMENTS, _OrderedSet_OCLExpression_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MessageExp_ownedCalledOperation = createProperty(PivotPackage.Literals.MESSAGE_EXP__OWNED_CALLED_OPERATION, _CallOperationAction));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MessageExp_ownedSentSignal = createProperty(PivotPackage.Literals.MESSAGE_EXP__OWNED_SENT_SIGNAL, _SendSignalAction));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MessageExp_ownedTarget = createProperty(PivotPackage.Literals.MESSAGE_EXP__OWNED_TARGET, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _MessageType.getOwnedProperties();
			ownedProperties.add(property = pr_MessageType_referredOperation = createProperty(PivotPackage.Literals.MESSAGE_TYPE__REFERRED_OPERATION, _Operation));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_MessageType_referredSignal = createProperty(PivotPackage.Literals.MESSAGE_TYPE__REFERRED_SIGNAL, _Signal));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Model.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.MODEL__EXTERNAL_URI, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Model_ownedImports = createProperty(PivotPackage.Literals.MODEL__OWNED_IMPORTS, _OrderedSet_Import_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Model_ownedPackages = createProperty(PivotPackage.Literals.MODEL__OWNED_PACKAGES, _Set_Package_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.MODEL__XMIID_VERSION, _Integer));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("0");
			ownedProperties.add(property = pr_Model_CompleteModel_partialModels = createProperty("CompleteModel", _Bag_CompleteModel_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _NamedElement.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.NAMED_ELEMENT__NAME, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The name of the NamedElement.");

			ownedProperties = _Namespace.getOwnedProperties();
			ownedProperties.add(property = pr_Namespace_ownedConstraints = createProperty(PivotPackage.Literals.NAMESPACE__OWNED_CONSTRAINTS, _Set_Constraint_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "Specifies a set of Constraints owned by this Namespace.");
			ownedProperties.add(property = pr_Namespace_Constraint_context = createProperty("Constraint", _Bag_Constraint_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Namespace_Import_importedNamespace = createProperty("Import", _Bag_Import_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _NavigationCallExp.getOwnedProperties();
			ownedProperties.add(property = pr_NavigationCallExp_navigationSource = createProperty(PivotPackage.Literals.NAVIGATION_CALL_EXP__NAVIGATION_SOURCE, _Property));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_NavigationCallExp_qualifiers = createProperty(PivotPackage.Literals.NAVIGATION_CALL_EXP__QUALIFIERS, _OrderedSet_OCLExpression_T));
			property.setIsResolveProxies(true);

			ownedProperties = _OCLExpression.getOwnedProperties();
			ownedProperties.add(property = pr_OCLExpression_typeValue = createProperty(PivotPackage.Literals.OCL_EXPRESSION__TYPE_VALUE, _Type));
			property.setIsRequired(false);
			property.setIsTransient(true);
			installComment(property, "When oclType() returns a Class value with a known actual type, the typeValue propagates the known type.");
			ownedProperties.add(property = pr_OCLExpression_CallExp_ownedSource = createProperty("CallExp", _CallExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_CollectionItem_ownedItem = createProperty("CollectionItem", _CollectionItem));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_CollectionRange_ownedFirst = createProperty("CollectionRange", _CollectionRange));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_CollectionRange_ownedLast = createProperty("CollectionRange", _CollectionRange));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_ExpressionInOCL_ownedBody = createProperty("ExpressionInOCL", _ExpressionInOCL));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_IfExp_ownedCondition = createProperty("IfExp", _IfExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_IfExp_ownedElse = createProperty("IfExp", _IfExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_IfExp_ownedThen = createProperty("IfExp", _IfExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_LetExp_ownedIn = createProperty("LetExp", _LetExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_LoopExp_ownedBody = createProperty("LoopExp", _LoopExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_MapLiteralPart_ownedKey = createProperty("MapLiteralPart", _MapLiteralPart));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_MapLiteralPart_ownedValue = createProperty("MapLiteralPart", _MapLiteralPart));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_MessageExp_ownedArguments = createProperty("MessageExp", _MessageExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_MessageExp_ownedTarget = createProperty("MessageExp", _MessageExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_NavigationCallExp_qualifiers = createProperty("NavigationCallExp", _Bag_NavigationCallExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_OperationCallExp_ownedArguments = createProperty("OperationCallExp", _OperationCallExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_ShadowPart_ownedInit = createProperty("ShadowPart", _ShadowPart));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_TupleLiteralPart_ownedInit = createProperty("TupleLiteralPart", _TupleLiteralPart));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OCLExpression_Variable_ownedInit = createProperty("Variable", _Variable));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Operation.getOwnedProperties();
			ownedProperties.add(property = pr_Operation_bodyExpression = createProperty(PivotPackage.Literals.OPERATION__BODY_EXPRESSION, _LanguageExpression));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.OPERATION__IS_INVALIDATING, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "Whether this operation may return an invalid result for non-invalid (or invalid if also validating) inputs.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.OPERATION__IS_TRANSIENT, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.OPERATION__IS_TYPEOF, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.OPERATION__IS_VALIDATING, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "Whether this operation may return a non-invalid result for invalid inputs.");
			ownedProperties.add(property = pr_Operation_ownedParameters = createProperty(PivotPackage.Literals.OPERATION__OWNED_PARAMETERS, _OrderedSet_Parameter_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The ordered set of formal Parameters of this BehavioralFeature.\n\nThe parameters owned by this Operation.");
			ownedProperties.add(property = pr_Operation_ownedPostconditions = createProperty(PivotPackage.Literals.OPERATION__OWNED_POSTCONDITIONS, _Set_Constraint_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "An optional set of Constraints specifying the state of the system when the Operation is completed.");
			ownedProperties.add(property = pr_Operation_ownedPreconditions = createProperty(PivotPackage.Literals.OPERATION__OWNED_PRECONDITIONS, _Set_Constraint_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "An optional set of Constraints on the state of the system when the Operation is invoked.");
			ownedProperties.add(property = pr_Operation_owningClass = createProperty(PivotPackage.Literals.OPERATION__OWNING_CLASS, _Class));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The Class that owns this operation, if any.");
			ownedProperties.add(property = pr_Operation_precedence = createProperty(PivotPackage.Literals.OPERATION__PRECEDENCE, _Precedence));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_raisedExceptions = createProperty(PivotPackage.Literals.OPERATION__RAISED_EXCEPTIONS, _Set_Type_T));
			property.setIsResolveProxies(true);
			installComment(property, "The Types representing exceptions that may be raised during an invocation of this BehavioralFeature.\n\nThe Types representing exceptions that may be raised during an invocation of this operation.");
			ownedProperties.add(property = pr_Operation_redefinedOperations = createProperty(PivotPackage.Literals.OPERATION__REDEFINED_OPERATIONS, _Set_Operation_T));
			property.setIsResolveProxies(true);
			installComment(property, "The Operations that are redefined by this Operation.");
			ownedProperties.add(property = pr_Operation_CallOperationAction_operation = createProperty("CallOperationAction", _Bag_CallOperationAction_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_MessageType_referredOperation = createProperty("MessageType", _Bag_MessageType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_Operation_redefinedOperations = createProperty("Operation", _Bag_Operation_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_OperationCallExp_referredOperation = createProperty("OperationCallExp", _Bag_OperationCallExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Operation_PrimitiveType_coercions = createProperty("PrimitiveType", _Bag_PrimitiveType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _OperationCallExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.OPERATION_CALL_EXP__IS_VIRTUAL, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("true");
			ownedProperties.add(property = pr_OperationCallExp_ownedArguments = createProperty(PivotPackage.Literals.OPERATION_CALL_EXP__OWNED_ARGUMENTS, _OrderedSet_OCLExpression_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_OperationCallExp_referredOperation = createProperty(PivotPackage.Literals.OPERATION_CALL_EXP__REFERRED_OPERATION, _Operation));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _OppositePropertyCallExp.getOwnedProperties();
			ownedProperties.add(property = pr_OppositePropertyCallExp_referredProperty = createProperty(PivotPackage.Literals.OPPOSITE_PROPERTY_CALL_EXP__REFERRED_PROPERTY, _Property));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _OrphanCompletePackage.getOwnedProperties();
			ownedProperties.add(property = pr_OrphanCompletePackage_CompleteModel_orphanCompletePackage = createProperty("CompleteModel", _Bag_CompleteModel_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Package.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PACKAGE__URI, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules.");
			ownedProperties.add(property = pr_Package_importedPackages = createProperty(PivotPackage.Literals.PACKAGE__IMPORTED_PACKAGES, _Set_Package_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PACKAGE__NS_PREFIX, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Package_ownedClasses = createProperty(PivotPackage.Literals.PACKAGE__OWNED_CLASSES, _Set_Class_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "References the packaged elements that are Types.");
			ownedProperties.add(property = pr_Package_ownedInstances = createProperty(PivotPackage.Literals.PACKAGE__OWNED_INSTANCES, _Set_InstanceSpecification_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The instance specification that owns this slot.");
			ownedProperties.add(property = pr_Package_ownedPackages = createProperty(PivotPackage.Literals.PACKAGE__OWNED_PACKAGES, _Set_Package_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "References the packaged elements that are Packages.");
			ownedProperties.add(property = pr_Package_ownedProfileApplications = createProperty(PivotPackage.Literals.PACKAGE__OWNED_PROFILE_APPLICATIONS, _Set_ProfileApplication_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "References the ProfileApplications that indicate which profiles have been applied to the Package.");
			ownedProperties.add(property = pr_Package_owningPackage = createProperty(PivotPackage.Literals.PACKAGE__OWNING_PACKAGE, _Package));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "References the Package that owns this Package.");
			ownedProperties.add(property = pr_Package_CompletePackage_partialPackages = createProperty("CompletePackage", _Bag_CompletePackage_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Package_Model_ownedPackages = createProperty("Model", _Model));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Package_Package_importedPackages = createProperty("Package", _Bag_Package_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Parameter.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PARAMETER__IS_TYPEOF, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_Parameter_owningOperation = createProperty(PivotPackage.Literals.PARAMETER__OWNING_OPERATION, _Operation));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The Operation owning this parameter.");
			ownedProperties.add(property = pr_Parameter_Iteration_ownedAccumulators = createProperty("Iteration", _Iteration));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Parameter_Iteration_ownedIterators = createProperty("Iteration", _Iteration));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Parameter_Variable_representedParameter = createProperty("Variable", _Bag_Variable_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Precedence.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PRECEDENCE__ASSOCIATIVITY, _AssociativityKind));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setDefaultValueString("left");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PRECEDENCE__ORDER, _Integer));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("0");
			ownedProperties.add(property = pr_Precedence_Library_ownedPrecedences = createProperty("Library", _Library));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Precedence_Operation_precedence = createProperty("Operation", _Bag_Operation_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _PrimitiveCompletePackage.getOwnedProperties();
			ownedProperties.add(property = pr_PrimitiveCompletePackage_CompleteModel_primitiveCompletePackage = createProperty("CompleteModel", _Bag_CompleteModel_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _PrimitiveType.getOwnedProperties();
			ownedProperties.add(property = pr_PrimitiveType_coercions = createProperty(PivotPackage.Literals.PRIMITIVE_TYPE__COERCIONS, _OrderedSet_Operation_T));
			property.setIsResolveProxies(true);

			ownedProperties = _Profile.getOwnedProperties();
			ownedProperties.add(property = pr_Profile_profileApplications = createProperty(PivotPackage.Literals.PROFILE__PROFILE_APPLICATIONS, _Set_ProfileApplication_T));
			property.setIsResolveProxies(true);

			ownedProperties = _ProfileApplication.getOwnedProperties();
			ownedProperties.add(property = pr_ProfileApplication_appliedProfile = createProperty(PivotPackage.Literals.PROFILE_APPLICATION__APPLIED_PROFILE, _Profile));
			property.setIsResolveProxies(true);
			installComment(property, "References the Profiles that are applied to a Package through this ProfileApplication.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROFILE_APPLICATION__IS_STRICT, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.");
			ownedProperties.add(property = pr_ProfileApplication_owningPackage = createProperty(PivotPackage.Literals.PROFILE_APPLICATION__OWNING_PACKAGE, _Package));
			property.setIsResolveProxies(true);
			installComment(property, "The package that owns the profile application.");

			ownedProperties = _Property.getOwnedProperties();
			ownedProperties.add(property = pr_Property_associationClass = createProperty(PivotPackage.Literals.PROPERTY__ASSOCIATION_CLASS, _AssociationClass));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__DEFAULT_VALUE, _Object));
			property.setIsDerived(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__DEFAULT_VALUE_STRING, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_COMPOSITE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_DERIVED, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_ID, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "True indicates this property can be used to uniquely identify an instance of the containing Class.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_IMPLICIT, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_READ_ONLY, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			installComment(property, "If isReadOnly is true, the StructuralFeature may not be written to after initialization.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_RESOLVE_PROXIES, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("true");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_TRANSIENT, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_UNSETTABLE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PROPERTY__IS_VOLATILE, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_Property_keys = createProperty(PivotPackage.Literals.PROPERTY__KEYS, _Set_Property_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_opposite = createProperty(PivotPackage.Literals.PROPERTY__OPPOSITE, _Property));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "In the case where the Property is one end of a binary association this gives the other end.");
			ownedProperties.add(property = pr_Property_ownedExpression = createProperty(PivotPackage.Literals.PROPERTY__OWNED_EXPRESSION, _LanguageExpression));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_owningClass = createProperty(PivotPackage.Literals.PROPERTY__OWNING_CLASS, _Class));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The Class that owns this Property, if any.");
			ownedProperties.add(property = pr_Property_redefinedProperties = createProperty(PivotPackage.Literals.PROPERTY__REDEFINED_PROPERTIES, _Set_Property_T));
			property.setIsResolveProxies(true);
			installComment(property, "The properties that are redefined by this property, if any.");
			ownedProperties.add(property = pr_Property_referredProperty = createProperty(PivotPackage.Literals.PROPERTY__REFERRED_PROPERTY, _Property));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_subsettedProperty = createProperty(PivotPackage.Literals.PROPERTY__SUBSETTED_PROPERTY, _Set_Property_T));
			property.setIsResolveProxies(true);
			installComment(property, "The properties of which this Property is constrained to be a subset, if any.");
			ownedProperties.add(property = pr_Property_DynamicProperty_referredProperty = createProperty("DynamicProperty", _Bag_DynamicProperty_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_NavigationCallExp_navigationSource = createProperty("NavigationCallExp", _Bag_NavigationCallExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_OppositePropertyCallExp_referredProperty = createProperty("OppositePropertyCallExp", _Bag_OppositePropertyCallExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_Property_keys = createProperty("Property", _Bag_Property_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_Property_opposite = createProperty("Property", _Bag_Property_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_Property_redefinedProperties = createProperty("Property", _Bag_Property_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_Property_referredProperty = createProperty("Property", _Bag_Property_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_Property_subsettedProperty = createProperty("Property", _Bag_Property_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_PropertyCallExp_referredProperty = createProperty("PropertyCallExp", _Bag_PropertyCallExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_ShadowPart_referredProperty = createProperty("ShadowPart", _Bag_ShadowPart_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Property_Slot_definingProperty = createProperty("Slot", _Bag_Slot_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _PropertyCallExp.getOwnedProperties();
			ownedProperties.add(property = pr_PropertyCallExp_referredProperty = createProperty(PivotPackage.Literals.PROPERTY_CALL_EXP__REFERRED_PROPERTY, _Property));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Pseudostate.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.PSEUDOSTATE__KIND, _PseudostateKind));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("initial");
			installComment(property, "Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice.");
			ownedProperties.add(property = pr_Pseudostate_owningState = createProperty(PivotPackage.Literals.PSEUDOSTATE__OWNING_STATE, _State));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The State that owns this Pseudostate and in which it appears.");
			ownedProperties.add(property = pr_Pseudostate_owningStateMachine = createProperty(PivotPackage.Literals.PSEUDOSTATE__OWNING_STATE_MACHINE, _StateMachine));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint.");
			ownedProperties.add(property = pr_Pseudostate_ConnectionPointReference_entries = createProperty("ConnectionPointReference", _Bag_ConnectionPointReference_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Pseudostate_ConnectionPointReference_exits = createProperty("ConnectionPointReference", _Bag_ConnectionPointReference_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _RealLiteralExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.REAL_LITERAL_EXP__REAL_SYMBOL, _Real));
			property.setIsResolveProxies(true);

			ownedProperties = _Region.getOwnedProperties();
			ownedProperties.add(property = pr_Region_extendedRegion = createProperty(PivotPackage.Literals.REGION__EXTENDED_REGION, _Region));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The region of which this region is an extension.");
			ownedProperties.add(property = pr_Region_ownedSubvertexes = createProperty(PivotPackage.Literals.REGION__OWNED_SUBVERTEXES, _Set_Vertex_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The set of Vertices that are owned by this Region.");
			ownedProperties.add(property = pr_Region_ownedTransitions = createProperty(PivotPackage.Literals.REGION__OWNED_TRANSITIONS, _Set_Transition_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The set of Transitions owned by the Region.");
			ownedProperties.add(property = pr_Region_owningState = createProperty(PivotPackage.Literals.REGION__OWNING_STATE, _State));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.");
			ownedProperties.add(property = pr_Region_owningStateMachine = createProperty(PivotPackage.Literals.REGION__OWNING_STATE_MACHINE, _StateMachine));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.");
			ownedProperties.add(property = pr_Region_Region_extendedRegion = createProperty("Region", _Bag_Region_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _SendSignalAction.getOwnedProperties();
			ownedProperties.add(property = pr_SendSignalAction_signal = createProperty(PivotPackage.Literals.SEND_SIGNAL_ACTION__SIGNAL, _Signal));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_SendSignalAction_MessageExp_ownedSentSignal = createProperty("MessageExp", _MessageExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _ShadowExp.getOwnedProperties();
			ownedProperties.add(property = pr_ShadowExp_ownedParts = createProperty(PivotPackage.Literals.SHADOW_EXP__OWNED_PARTS, _OrderedSet_ShadowPart_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.SHADOW_EXP__VALUE, _String));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _ShadowPart.getOwnedProperties();
			ownedProperties.add(property = pr_ShadowPart_ownedInit = createProperty(PivotPackage.Literals.SHADOW_PART__OWNED_INIT, _OCLExpression));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ShadowPart_referredProperty = createProperty(PivotPackage.Literals.SHADOW_PART__REFERRED_PROPERTY, _Property));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_ShadowPart_ShadowExp_ownedParts = createProperty("ShadowExp", _ShadowExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Signal.getOwnedProperties();
			ownedProperties.add(property = pr_Signal_MessageType_referredSignal = createProperty("MessageType", _Bag_MessageType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Signal_SendSignalAction_signal = createProperty("SendSignalAction", _Bag_SendSignalAction_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Slot.getOwnedProperties();
			ownedProperties.add(property = pr_Slot_definingProperty = createProperty(PivotPackage.Literals.SLOT__DEFINING_PROPERTY, _Property));
			property.setIsResolveProxies(true);
			installComment(property, "The StructuralFeature that specifies the values that may be held by the Slot.");
			ownedProperties.add(property = pr_Slot_ownedValues = createProperty(PivotPackage.Literals.SLOT__OWNED_VALUES, _OrderedSet_ValueSpecification_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The value or values held by the Slot.");
			ownedProperties.add(property = pr_Slot_owningInstance = createProperty(PivotPackage.Literals.SLOT__OWNING_INSTANCE, _InstanceSpecification));
			property.setIsResolveProxies(true);
			installComment(property, "The InstanceSpecification that owns this Slot.");

			ownedProperties = _State.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.STATE__IS_COMPOSITE, _EBoolean));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			installComment(property, "A state with isComposite=true is said to be a composite State. A composite State is a State that contains at least one Region.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.STATE__IS_ORTHOGONAL, _EBoolean));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			installComment(property, "A State with isOrthogonal=true is said to be an orthogonal composite State An orthogonal composite State contains two or more Regions.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.STATE__IS_SIMPLE, _EBoolean));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			installComment(property, "A State with isSimple=true is said to be a simple State A simple State does not have any Regions and it does not refer to any submachine StateMachine.");
			ownedProperties.add(property = createProperty(PivotPackage.Literals.STATE__IS_SUBMACHINE_STATE, _EBoolean));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			installComment(property, "A State with isSubmachineState=true is said to be a submachine State Such a State refers to another StateMachine(submachine).");
			ownedProperties.add(property = pr_State_ownedConnectionPoints = createProperty(PivotPackage.Literals.STATE__OWNED_CONNECTION_POINTS, _Set_Pseudostate_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States.");
			ownedProperties.add(property = pr_State_ownedConnections = createProperty(PivotPackage.Literals.STATE__OWNED_CONNECTIONS, _Set_ConnectionPointReference_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The entry and exit connection points used in conjunction with this (submachine) State, i.e., as targets and sources, respectively, in the Region with the submachine State. A connection point reference references the corresponding definition of a connection point Pseudostate in the StateMachine referenced by the submachine State.");
			ownedProperties.add(property = pr_State_ownedDeferrableTriggers = createProperty(PivotPackage.Literals.STATE__OWNED_DEFERRABLE_TRIGGERS, _Set_Trigger_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "A list of Triggers that are candidates to be retained by the StateMachine if they trigger no Transitions out of the State (not consumed). A deferred Trigger is retained until the StateMachine reaches a State configuration where it is no longer deferred.");
			ownedProperties.add(property = pr_State_ownedDoActivity = createProperty(PivotPackage.Literals.STATE__OWNED_DO_ACTIVITY, _Behavior));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "An optional Behavior that is executed while being in the State. The execution starts when this State is entered, and ceases either by itself when done, or when the State is exited, whichever comes first.");
			ownedProperties.add(property = pr_State_ownedEntry = createProperty(PivotPackage.Literals.STATE__OWNED_ENTRY, _Behavior));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "An optional Behavior that is executed whenever this State is entered regardless of the Transition taken to reach the State. If defined, entry Behaviors are always executed to completion prior to any internal Behavior or Transitions performed within the State.");
			ownedProperties.add(property = pr_State_ownedExit = createProperty(PivotPackage.Literals.STATE__OWNED_EXIT, _Behavior));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "An optional Behavior that is executed whenever this State is exited regardless of which Transition was taken out of the State. If defined, exit Behaviors are always executed to completion only after all internal and transition Behaviors have completed execution.");
			ownedProperties.add(property = pr_State_ownedRegions = createProperty(PivotPackage.Literals.STATE__OWNED_REGIONS, _Set_Region_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The Regions owned directly by the State.");
			ownedProperties.add(property = pr_State_ownedStateInvariant = createProperty(PivotPackage.Literals.STATE__OWNED_STATE_INVARIANT, _Constraint));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "Specifies conditions that are always true when this State is the current State. In ProtocolStateMachines state invariants are additional conditions to the preconditions of the outgoing Transitions, and to the postcondition of the incoming Transitions.");
			ownedProperties.add(property = pr_State_redefinedState = createProperty(PivotPackage.Literals.STATE__REDEFINED_STATE, _State));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The State of which this State is a redefinition.");
			ownedProperties.add(property = pr_State_submachines = createProperty(PivotPackage.Literals.STATE__SUBMACHINES, _StateMachine));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The StateMachine that is to be inserted in place of the (submachine) State.");
			ownedProperties.add(property = pr_State_State_redefinedState = createProperty("State", _Bag_State_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_State_StateExp_referredState = createProperty("StateExp", _Bag_StateExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _StateExp.getOwnedProperties();
			ownedProperties.add(property = pr_StateExp_referredState = createProperty(PivotPackage.Literals.STATE_EXP__REFERRED_STATE, _State));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _StateMachine.getOwnedProperties();
			ownedProperties.add(property = pr_StateMachine_extendedStateMachines = createProperty(PivotPackage.Literals.STATE_MACHINE__EXTENDED_STATE_MACHINES, _Set_StateMachine_T));
			property.setIsResolveProxies(true);
			installComment(property, "The StateMachines of which this is an extension.");
			ownedProperties.add(property = pr_StateMachine_ownedConnectionPoints = createProperty(PivotPackage.Literals.STATE_MACHINE__OWNED_CONNECTION_POINTS, _Set_Pseudostate_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The connection points defined for this StateMachine. They represent the interface of the StateMachine when used as part of submachine State");
			ownedProperties.add(property = pr_StateMachine_ownedRegions = createProperty(PivotPackage.Literals.STATE_MACHINE__OWNED_REGIONS, _Set_Region_T_L1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The Regions owned directly by the StateMachine.");
			ownedProperties.add(property = pr_StateMachine_submachineStates = createProperty(PivotPackage.Literals.STATE_MACHINE__SUBMACHINE_STATES, _Set_State_T));
			property.setIsResolveProxies(true);
			installComment(property, "References the submachine(s) in case of a submachine State. Multiple machines are referenced in case of a concurrent State.");
			ownedProperties.add(property = pr_StateMachine_StateMachine_extendedStateMachines = createProperty("StateMachine", _Bag_StateMachine_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Stereotype.getOwnedProperties();
			ownedProperties.add(property = pr_Stereotype_ownedExtenders = createProperty(PivotPackage.Literals.STEREOTYPE__OWNED_EXTENDERS, _Set_StereotypeExtender_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Stereotype_ElementExtension_stereotype = createProperty("ElementExtension", _Bag_ElementExtension_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _StereotypeExtender.getOwnedProperties();
			ownedProperties.add(property = pr_StereotypeExtender_class = createProperty(PivotPackage.Literals.STEREOTYPE_EXTENDER__CLASS, _Class));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.STEREOTYPE_EXTENDER__IS_REQUIRED, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_StereotypeExtender_owningStereotype = createProperty(PivotPackage.Literals.STEREOTYPE_EXTENDER__OWNING_STEREOTYPE, _Stereotype));
			property.setIsResolveProxies(true);

			ownedProperties = _StringLiteralExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.STRING_LITERAL_EXP__STRING_SYMBOL, _String));
			property.setIsResolveProxies(true);

			ownedProperties = _TemplateBinding.getOwnedProperties();
			ownedProperties.add(property = pr_TemplateBinding_ownedSubstitutions = createProperty(PivotPackage.Literals.TEMPLATE_BINDING__OWNED_SUBSTITUTIONS, _Set_TemplateParameterSubstitution_T_L1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The TemplateParameterSubstitutions owned by this TemplateBinding.");
			ownedProperties.add(property = pr_TemplateBinding_owningElement = createProperty(PivotPackage.Literals.TEMPLATE_BINDING__OWNING_ELEMENT, _TemplateableElement));
			property.setIsResolveProxies(true);
			installComment(property, "The TemplateableElement that is bound by this TemplateBinding.");
			ownedProperties.add(property = pr_TemplateBinding_templateSignature = createProperty(PivotPackage.Literals.TEMPLATE_BINDING__TEMPLATE_SIGNATURE, _TemplateSignature));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			installComment(property, "The TemplateSignature for the template that is the target of this TemplateBinding.");

			ownedProperties = _TemplateParameter.getOwnedProperties();
			ownedProperties.add(property = pr_TemplateParameter_constrainingClasses = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__CONSTRAINING_CLASSES, _Set_Class_T));
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameter_owningSignature = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__OWNING_SIGNATURE, _TemplateSignature));
			property.setIsResolveProxies(true);
			installComment(property, "The TemplateSignature that owns this TemplateParameter.");
			ownedProperties.add(property = pr_TemplateParameter_TemplateParameterSubstitution_formal = createProperty("TemplateParameterSubstitution", _Bag_TemplateParameterSubstitution_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _TemplateParameterSubstitution.getOwnedProperties();
			ownedProperties.add(property = pr_TemplateParameterSubstitution_actual = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__ACTUAL, _Type));
			property.setIsResolveProxies(true);
			installComment(property, "The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.");
			ownedProperties.add(property = pr_TemplateParameterSubstitution_formal = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__FORMAL, _TemplateParameter));
			property.setIsResolveProxies(true);
			installComment(property, "The formal TemplateParameter that is associated with this TemplateParameterSubstitution.");
			ownedProperties.add(property = pr_TemplateParameterSubstitution_ownedWildcard = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__OWNED_WILDCARD, _WildcardType));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TemplateParameterSubstitution_owningBinding = createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__OWNING_BINDING, _TemplateBinding));
			property.setIsResolveProxies(true);
			installComment(property, "The TemplateBinding that owns this TemplateParameterSubstitution.");

			ownedProperties = _TemplateSignature.getOwnedProperties();
			ownedProperties.add(property = pr_TemplateSignature_ownedParameters = createProperty(PivotPackage.Literals.TEMPLATE_SIGNATURE__OWNED_PARAMETERS, _OrderedSet_TemplateParameter_T_L1));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The formal parameters that are owned by this TemplateSignature.");
			ownedProperties.add(property = pr_TemplateSignature_owningElement = createProperty(PivotPackage.Literals.TEMPLATE_SIGNATURE__OWNING_ELEMENT, _TemplateableElement));
			property.setIsResolveProxies(true);
			installComment(property, "The TemplateableElement that owns this TemplateSignature.");
			ownedProperties.add(property = pr_TemplateSignature_TemplateBinding_templateSignature = createProperty("TemplateBinding", _Bag_TemplateBinding_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _TemplateableElement.getOwnedProperties();
			ownedProperties.add(property = pr_TemplateableElement_ownedBindings = createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__OWNED_BINDINGS, _Set_TemplateBinding_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "The optional TemplateBindings from this TemplateableElement to one or more templates.");
			ownedProperties.add(property = pr_TemplateableElement_ownedSignature = createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__OWNED_SIGNATURE, _TemplateSignature));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The optional TemplateSignature specifying the formal TemplateParameters for this TemplateableElement. If a TemplateableElement has a TemplateSignature, then it is a template.");
			ownedProperties.add(property = pr_TemplateableElement_unspecializedElement = createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__UNSPECIALIZED_ELEMENT, _TemplateableElement));
			property.setIsRequired(false);
			property.setIsTransient(true);
			ownedProperties.add(property = pr_TemplateableElement_TemplateableElement_unspecializedElement = createProperty("TemplateableElement", _Bag_TemplateableElement_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _Transition.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.TRANSITION__KIND, _TransitionKind));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("external");
			installComment(property, "Indicates the precise type of the Transition.");
			ownedProperties.add(property = pr_Transition_ownedEffect = createProperty(PivotPackage.Literals.TRANSITION__OWNED_EFFECT, _Behavior));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "Specifies an optional behavior to be performed when the Transition fires.");
			ownedProperties.add(property = pr_Transition_ownedGuard = createProperty(PivotPackage.Literals.TRANSITION__OWNED_GUARD, _Constraint));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "A guard is a Constraint that provides a fine-grained control over the firing of the Transition. The guard is evaluated when an Event occurrence is dispatched by the StateMachine. If the guard is true at that time, the Transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed.");
			ownedProperties.add(property = pr_Transition_ownedTriggers = createProperty(PivotPackage.Literals.TRANSITION__OWNED_TRIGGERS, _Set_Trigger_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);
			installComment(property, "Specifies the Triggers that may fire the transition.");
			ownedProperties.add(property = pr_Transition_owningRegion = createProperty(PivotPackage.Literals.TRANSITION__OWNING_REGION, _Region));
			property.setIsResolveProxies(true);
			installComment(property, "Designates the Region that owns this Transition.");
			ownedProperties.add(property = pr_Transition_source = createProperty(PivotPackage.Literals.TRANSITION__SOURCE, _Vertex));
			property.setIsResolveProxies(true);
			installComment(property, "Designates the originating Vertex (State or Pseudostate) of the Transition.");
			ownedProperties.add(property = pr_Transition_target = createProperty(PivotPackage.Literals.TRANSITION__TARGET, _Vertex));
			property.setIsResolveProxies(true);
			installComment(property, "Designates the target Vertex that is reached when the Transition is taken.");

			ownedProperties = _Trigger.getOwnedProperties();
			ownedProperties.add(property = pr_Trigger_owningState = createProperty(PivotPackage.Literals.TRIGGER__OWNING_STATE, _State));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Trigger_owningTransition = createProperty(PivotPackage.Literals.TRIGGER__OWNING_TRANSITION, _Transition));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _TupleLiteralExp.getOwnedProperties();
			ownedProperties.add(property = pr_TupleLiteralExp_ownedParts = createProperty(PivotPackage.Literals.TUPLE_LITERAL_EXP__OWNED_PARTS, _OrderedSet_TupleLiteralPart_T));
			property.setIsComposite(true);
			property.setIsResolveProxies(true);

			ownedProperties = _TupleLiteralPart.getOwnedProperties();
			ownedProperties.add(property = pr_TupleLiteralPart_ownedInit = createProperty(PivotPackage.Literals.TUPLE_LITERAL_PART__OWNED_INIT, _OCLExpression));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_TupleLiteralPart_TupleLiteralExp_ownedParts = createProperty("TupleLiteralExp", _TupleLiteralExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Type.getOwnedProperties();
			ownedProperties.add(property = pr_Type_CollectionType_elementType = createProperty("CollectionType", _Bag_CollectionType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_DynamicElement_metaType = createProperty("DynamicElement", _Bag_DynamicElement_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_LambdaType_contextType = createProperty("LambdaType", _Bag_LambdaType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_LambdaType_parameterType = createProperty("LambdaType", _Bag_LambdaType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_LambdaType_resultType = createProperty("LambdaType", _Bag_LambdaType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_MapType_keyType = createProperty("MapType", _Bag_MapType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_MapType_valueType = createProperty("MapType", _Bag_MapType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_OCLExpression_typeValue = createProperty("OCLExpression", _Bag_OCLExpression_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_Operation_raisedExceptions = createProperty("Operation", _Bag_Operation_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_TemplateParameterSubstitution_actual = createProperty("TemplateParameterSubstitution", _Bag_TemplateParameterSubstitution_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_TypeExp_referredType = createProperty("TypeExp", _Bag_TypeExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_TypedElement_type = createProperty("TypedElement", _Bag_TypedElement_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_VariableDeclaration_typeValue = createProperty("VariableDeclaration", _Bag_VariableDeclaration_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_WildcardType_lowerBound = createProperty("WildcardType", _Bag_WildcardType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Type_WildcardType_upperBound = createProperty("WildcardType", _Bag_WildcardType_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _TypeExp.getOwnedProperties();
			ownedProperties.add(property = pr_TypeExp_referredType = createProperty(PivotPackage.Literals.TYPE_EXP__REFERRED_TYPE, _Type));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _TypedElement.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.TYPED_ELEMENT__IS_MANY, _EBoolean));
			property.setIsDerived(true);
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			property.setIsTransient(true);
			property.setIsVolatile(true);
			ownedProperties.add(property = createProperty(PivotPackage.Literals.TYPED_ELEMENT__IS_REQUIRED, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("true");
			ownedProperties.add(property = pr_TypedElement_type = createProperty(PivotPackage.Literals.TYPED_ELEMENT__TYPE, _Type));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The type of the TypedElement.");

			ownedProperties = _UnlimitedNaturalLiteralExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.UNLIMITED_NATURAL_LITERAL_EXP__UNLIMITED_NATURAL_SYMBOL, _UnlimitedNatural));
			property.setIsResolveProxies(true);

			ownedProperties = _ValueSpecification.getOwnedProperties();
			ownedProperties.add(property = pr_ValueSpecification_Slot_ownedValues = createProperty("Slot", _Slot));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Variable.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.VARIABLE__IS_IMPLICIT, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_Variable_ownedInit = createProperty(PivotPackage.Literals.VARIABLE__OWNED_INIT, _OCLExpression));
			property.setIsComposite(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_representedParameter = createProperty(PivotPackage.Literals.VARIABLE__REPRESENTED_PARAMETER, _Parameter));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_ExpressionInOCL_ownedContext = createProperty("ExpressionInOCL", _ExpressionInOCL));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_ExpressionInOCL_ownedParameters = createProperty("ExpressionInOCL", _ExpressionInOCL));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_ExpressionInOCL_ownedResult = createProperty("ExpressionInOCL", _ExpressionInOCL));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_IterateExp_ownedResult = createProperty("IterateExp", _IterateExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_LetExp_ownedVariable = createProperty("LetExp", _LetExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_Variable_LoopExp_ownedIterators = createProperty("LoopExp", _LoopExp));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _VariableDeclaration.getOwnedProperties();
			ownedProperties.add(property = pr_VariableDeclaration_typeValue = createProperty(PivotPackage.Literals.VARIABLE_DECLARATION__TYPE_VALUE, _Type));
			property.setIsRequired(false);
			property.setIsTransient(true);
			ownedProperties.add(property = pr_VariableDeclaration_VariableExp_referredVariable = createProperty("VariableExp", _Bag_VariableExp_T));
			property.setIsImplicit(true);
			property.setIsResolveProxies(true);

			ownedProperties = _VariableExp.getOwnedProperties();
			ownedProperties.add(property = createProperty(PivotPackage.Literals.VARIABLE_EXP__IS_IMPLICIT, _EBoolean));
			property.setIsResolveProxies(true);
			property.setDefaultValueString("false");
			ownedProperties.add(property = pr_VariableExp_referredVariable = createProperty(PivotPackage.Literals.VARIABLE_EXP__REFERRED_VARIABLE, _VariableDeclaration));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			ownedProperties = _Vertex.getOwnedProperties();
			ownedProperties.add(property = pr_Vertex_incomingTransitions = createProperty(PivotPackage.Literals.VERTEX__INCOMING_TRANSITIONS, _Set_Transition_T));
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			installComment(property, "Specifies the Transitions entering this Vertex.");
			ownedProperties.add(property = pr_Vertex_outgoingTransitions = createProperty(PivotPackage.Literals.VERTEX__OUTGOING_TRANSITIONS, _Set_Transition_T));
			property.setIsReadOnly(true);
			property.setIsResolveProxies(true);
			installComment(property, "Specifies the Transitions departing from this Vertex.");
			ownedProperties.add(property = pr_Vertex_owningRegion = createProperty(PivotPackage.Literals.VERTEX__OWNING_REGION, _Region));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			installComment(property, "The Region that contains this Vertex.");

			ownedProperties = _WildcardType.getOwnedProperties();
			ownedProperties.add(property = pr_WildcardType_lowerBound = createProperty(PivotPackage.Literals.WILDCARD_TYPE__LOWER_BOUND, _Type));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_WildcardType_upperBound = createProperty(PivotPackage.Literals.WILDCARD_TYPE__UPPER_BOUND, _Type));
			property.setIsRequired(false);
			property.setIsResolveProxies(true);
			ownedProperties.add(property = pr_WildcardType_TemplateParameterSubstitution_ownedWildcard = createProperty("TemplateParameterSubstitution", _TemplateParameterSubstitution));
			property.setIsImplicit(true);
			property.setIsRequired(false);
			property.setIsResolveProxies(true);

			setOpposites(pr_Annotation_ownedContents, pr_Element_Annotation_ownedContents);
			setOpposites(pr_Annotation_ownedDetails, pr_Detail_Annotation_ownedDetails);
			setOpposites(pr_Annotation_references, pr_Element_Annotation_references);
			setOpposites(pr_AssociationClass_unownedAttributes, pr_Property_associationClass);
			setOpposites(pr_AssociationClass_AssociationClassCallExp_referredAssociationClass, pr_AssociationClassCallExp_referredAssociationClass);
			setOpposites(pr_Behavior_owningTransition, pr_Transition_ownedEffect);
			setOpposites(pr_Behavior_Class_ownedBehaviors, pr_Class_ownedBehaviors);
			setOpposites(pr_Behavior_State_ownedDoActivity, pr_State_ownedDoActivity);
			setOpposites(pr_Behavior_State_ownedEntry, pr_State_ownedEntry);
			setOpposites(pr_Behavior_State_ownedExit, pr_State_ownedExit);
			setOpposites(pr_CallExp_ownedSource, pr_OCLExpression_CallExp_ownedSource);
			setOpposites(pr_CallOperationAction_operation, pr_Operation_CallOperationAction_operation);
			setOpposites(pr_CallOperationAction_MessageExp_ownedCalledOperation, pr_MessageExp_ownedCalledOperation);
			setOpposites(pr_Class_extenders, pr_StereotypeExtender_class);
			setOpposites(pr_Class_ownedInvariants, pr_Constraint_Class_ownedInvariants);
			setOpposites(pr_Class_ownedOperations, pr_Operation_owningClass);
			setOpposites(pr_Class_ownedProperties, pr_Property_owningClass);
			setOpposites(pr_Class_owningPackage, pr_Package_ownedClasses);
			setOpposites(pr_Class_superClasses, pr_Class_Class_superClasses);
			setOpposites(pr_Class_CompleteClass_partialClasses, pr_CompleteClass_partialClasses);
			setOpposites(pr_Class_DataType_behavioralClass, pr_DataType_behavioralClass);
			setOpposites(pr_Class_InstanceSpecification_classes, pr_InstanceSpecification_classes);
			setOpposites(pr_Class_MapType_entryClass, pr_MapType_entryClass);
			setOpposites(pr_Class_TemplateParameter_constrainingClasses, pr_TemplateParameter_constrainingClasses);
			setOpposites(pr_CollectionItem_ownedItem, pr_OCLExpression_CollectionItem_ownedItem);
			setOpposites(pr_CollectionLiteralExp_ownedParts, pr_CollectionLiteralPart_CollectionLiteralExp_ownedParts);
			setOpposites(pr_CollectionRange_ownedFirst, pr_OCLExpression_CollectionRange_ownedFirst);
			setOpposites(pr_CollectionRange_ownedLast, pr_OCLExpression_CollectionRange_ownedLast);
			setOpposites(pr_CollectionType_elementType, pr_Type_CollectionType_elementType);
			setOpposites(pr_Comment_annotatedElements, pr_Element_annotatingComments);
			setOpposites(pr_Comment_owningElement, pr_Element_ownedComments);
			setOpposites(pr_CompleteClass_owningCompletePackage, pr_CompletePackage_ownedCompleteClasses);
			setOpposites(pr_CompleteEnvironment_ownedCompleteModel, pr_CompleteModel_owningCompleteEnvironment);
			setOpposites(pr_CompleteEnvironment_ownedStandardLibrary, pr_CompleteStandardLibrary_owningCompleteEnvironment);
			setOpposites(pr_CompleteModel_orphanCompletePackage, pr_OrphanCompletePackage_CompleteModel_orphanCompletePackage);
			setOpposites(pr_CompleteModel_ownedCompletePackages, pr_CompletePackage_owningCompleteModel);
			setOpposites(pr_CompleteModel_partialModels, pr_Model_CompleteModel_partialModels);
			setOpposites(pr_CompleteModel_primitiveCompletePackage, pr_PrimitiveCompletePackage_CompleteModel_primitiveCompletePackage);
			setOpposites(pr_CompletePackage_ownedCompletePackages, pr_CompletePackage_owningCompletePackage);
			setOpposites(pr_CompletePackage_partialPackages, pr_Package_CompletePackage_partialPackages);
			setOpposites(pr_ConnectionPointReference_entries, pr_Pseudostate_ConnectionPointReference_entries);
			setOpposites(pr_ConnectionPointReference_exits, pr_Pseudostate_ConnectionPointReference_exits);
			setOpposites(pr_ConnectionPointReference_owningState, pr_State_ownedConnections);
			setOpposites(pr_Constraint_constrainedElements, pr_Element_Constraint_constrainedElements);
			setOpposites(pr_Constraint_context, pr_Namespace_Constraint_context);
			setOpposites(pr_Constraint_ownedSpecification, pr_LanguageExpression_owningConstraint);
			setOpposites(pr_Constraint_owningPostContext, pr_Operation_ownedPostconditions);
			setOpposites(pr_Constraint_owningPreContext, pr_Operation_ownedPreconditions);
			setOpposites(pr_Constraint_owningState, pr_State_ownedStateInvariant);
			setOpposites(pr_Constraint_owningTransition, pr_Transition_ownedGuard);
			setOpposites(pr_Constraint_redefinedConstraints, pr_Constraint_Constraint_redefinedConstraints);
			setOpposites(pr_Constraint_Namespace_ownedConstraints, pr_Namespace_ownedConstraints);
			setOpposites(pr_DynamicElement_metaType, pr_Type_DynamicElement_metaType);
			setOpposites(pr_DynamicProperty_referredProperty, pr_Property_DynamicProperty_referredProperty);
			setOpposites(pr_DynamicProperty_DynamicType_ownedDynamicProperties, pr_DynamicType_ownedDynamicProperties);
			setOpposites(pr_Element_ownedAnnotations, pr_Element_Element_ownedAnnotations);
			setOpposites(pr_Element_ownedExtensions, pr_ElementExtension_base);
			setOpposites(pr_ElementExtension_stereotype, pr_Stereotype_ElementExtension_stereotype);
			setOpposites(pr_EnumLiteralExp_referredLiteral, pr_EnumerationLiteral_EnumLiteralExp_referredLiteral);
			setOpposites(pr_Enumeration_ownedLiterals, pr_EnumerationLiteral_owningEnumeration);
			setOpposites(pr_ExpressionInOCL_ownedBody, pr_OCLExpression_ExpressionInOCL_ownedBody);
			setOpposites(pr_ExpressionInOCL_ownedContext, pr_Variable_ExpressionInOCL_ownedContext);
			setOpposites(pr_ExpressionInOCL_ownedParameters, pr_Variable_ExpressionInOCL_ownedParameters);
			setOpposites(pr_ExpressionInOCL_ownedResult, pr_Variable_ExpressionInOCL_ownedResult);
			setOpposites(pr_IfExp_ownedCondition, pr_OCLExpression_IfExp_ownedCondition);
			setOpposites(pr_IfExp_ownedElse, pr_OCLExpression_IfExp_ownedElse);
			setOpposites(pr_IfExp_ownedThen, pr_OCLExpression_IfExp_ownedThen);
			setOpposites(pr_Import_importedNamespace, pr_Namespace_Import_importedNamespace);
			setOpposites(pr_Import_Model_ownedImports, pr_Model_ownedImports);
			setOpposites(pr_InstanceSpecification_ownedSlots, pr_Slot_owningInstance);
			setOpposites(pr_InstanceSpecification_ownedSpecification, pr_LanguageExpression_InstanceSpecification_ownedSpecification);
			setOpposites(pr_InstanceSpecification_owningPackage, pr_Package_ownedInstances);
			setOpposites(pr_IterateExp_ownedResult, pr_Variable_IterateExp_ownedResult);
			setOpposites(pr_Iteration_ownedAccumulators, pr_Parameter_Iteration_ownedAccumulators);
			setOpposites(pr_Iteration_ownedIterators, pr_Parameter_Iteration_ownedIterators);
			setOpposites(pr_Iteration_LoopExp_referredIteration, pr_LoopExp_referredIteration);
			setOpposites(pr_IteratorVariable_LoopExp_ownedCoIterators, pr_LoopExp_ownedCoIterators);
			setOpposites(pr_LambdaType_contextType, pr_Type_LambdaType_contextType);
			setOpposites(pr_LambdaType_parameterType, pr_Type_LambdaType_parameterType);
			setOpposites(pr_LambdaType_resultType, pr_Type_LambdaType_resultType);
			setOpposites(pr_LanguageExpression_Operation_bodyExpression, pr_Operation_bodyExpression);
			setOpposites(pr_LanguageExpression_Property_ownedExpression, pr_Property_ownedExpression);
			setOpposites(pr_LetExp_ownedIn, pr_OCLExpression_LetExp_ownedIn);
			setOpposites(pr_LetExp_ownedVariable, pr_Variable_LetExp_ownedVariable);
			setOpposites(pr_Library_ownedPrecedences, pr_Precedence_Library_ownedPrecedences);
			setOpposites(pr_LoopExp_ownedBody, pr_OCLExpression_LoopExp_ownedBody);
			setOpposites(pr_LoopExp_ownedIterators, pr_Variable_LoopExp_ownedIterators);
			setOpposites(pr_MapLiteralExp_ownedParts, pr_MapLiteralPart_MapLiteralExp_ownedParts);
			setOpposites(pr_MapLiteralPart_ownedKey, pr_OCLExpression_MapLiteralPart_ownedKey);
			setOpposites(pr_MapLiteralPart_ownedValue, pr_OCLExpression_MapLiteralPart_ownedValue);
			setOpposites(pr_MapType_keyType, pr_Type_MapType_keyType);
			setOpposites(pr_MapType_valueType, pr_Type_MapType_valueType);
			setOpposites(pr_MessageExp_ownedArguments, pr_OCLExpression_MessageExp_ownedArguments);
			setOpposites(pr_MessageExp_ownedSentSignal, pr_SendSignalAction_MessageExp_ownedSentSignal);
			setOpposites(pr_MessageExp_ownedTarget, pr_OCLExpression_MessageExp_ownedTarget);
			setOpposites(pr_MessageType_referredOperation, pr_Operation_MessageType_referredOperation);
			setOpposites(pr_MessageType_referredSignal, pr_Signal_MessageType_referredSignal);
			setOpposites(pr_Model_ownedPackages, pr_Package_Model_ownedPackages);
			setOpposites(pr_NavigationCallExp_navigationSource, pr_Property_NavigationCallExp_navigationSource);
			setOpposites(pr_NavigationCallExp_qualifiers, pr_OCLExpression_NavigationCallExp_qualifiers);
			setOpposites(pr_OCLExpression_typeValue, pr_Type_OCLExpression_typeValue);
			setOpposites(pr_OCLExpression_OperationCallExp_ownedArguments, pr_OperationCallExp_ownedArguments);
			setOpposites(pr_OCLExpression_ShadowPart_ownedInit, pr_ShadowPart_ownedInit);
			setOpposites(pr_OCLExpression_TupleLiteralPart_ownedInit, pr_TupleLiteralPart_ownedInit);
			setOpposites(pr_OCLExpression_Variable_ownedInit, pr_Variable_ownedInit);
			setOpposites(pr_Operation_ownedParameters, pr_Parameter_owningOperation);
			setOpposites(pr_Operation_precedence, pr_Precedence_Operation_precedence);
			setOpposites(pr_Operation_raisedExceptions, pr_Type_Operation_raisedExceptions);
			setOpposites(pr_Operation_redefinedOperations, pr_Operation_Operation_redefinedOperations);
			setOpposites(pr_Operation_OperationCallExp_referredOperation, pr_OperationCallExp_referredOperation);
			setOpposites(pr_Operation_PrimitiveType_coercions, pr_PrimitiveType_coercions);
			setOpposites(pr_OppositePropertyCallExp_referredProperty, pr_Property_OppositePropertyCallExp_referredProperty);
			setOpposites(pr_Package_importedPackages, pr_Package_Package_importedPackages);
			setOpposites(pr_Package_ownedPackages, pr_Package_owningPackage);
			setOpposites(pr_Package_ownedProfileApplications, pr_ProfileApplication_owningPackage);
			setOpposites(pr_Parameter_Variable_representedParameter, pr_Variable_representedParameter);
			setOpposites(pr_Profile_profileApplications, pr_ProfileApplication_appliedProfile);
			setOpposites(pr_Property_keys, pr_Property_Property_keys);
			setOpposites(pr_Property_opposite, pr_Property_Property_opposite);
			setOpposites(pr_Property_redefinedProperties, pr_Property_Property_redefinedProperties);
			setOpposites(pr_Property_referredProperty, pr_Property_Property_referredProperty);
			setOpposites(pr_Property_subsettedProperty, pr_Property_Property_subsettedProperty);
			setOpposites(pr_Property_PropertyCallExp_referredProperty, pr_PropertyCallExp_referredProperty);
			setOpposites(pr_Property_ShadowPart_referredProperty, pr_ShadowPart_referredProperty);
			setOpposites(pr_Property_Slot_definingProperty, pr_Slot_definingProperty);
			setOpposites(pr_Pseudostate_owningState, pr_State_ownedConnectionPoints);
			setOpposites(pr_Pseudostate_owningStateMachine, pr_StateMachine_ownedConnectionPoints);
			setOpposites(pr_Region_extendedRegion, pr_Region_Region_extendedRegion);
			setOpposites(pr_Region_ownedSubvertexes, pr_Vertex_owningRegion);
			setOpposites(pr_Region_ownedTransitions, pr_Transition_owningRegion);
			setOpposites(pr_Region_owningState, pr_State_ownedRegions);
			setOpposites(pr_Region_owningStateMachine, pr_StateMachine_ownedRegions);
			setOpposites(pr_SendSignalAction_signal, pr_Signal_SendSignalAction_signal);
			setOpposites(pr_ShadowExp_ownedParts, pr_ShadowPart_ShadowExp_ownedParts);
			setOpposites(pr_Slot_ownedValues, pr_ValueSpecification_Slot_ownedValues);
			setOpposites(pr_State_ownedDeferrableTriggers, pr_Trigger_owningState);
			setOpposites(pr_State_redefinedState, pr_State_State_redefinedState);
			setOpposites(pr_State_submachines, pr_StateMachine_submachineStates);
			setOpposites(pr_State_StateExp_referredState, pr_StateExp_referredState);
			setOpposites(pr_StateMachine_extendedStateMachines, pr_StateMachine_StateMachine_extendedStateMachines);
			setOpposites(pr_Stereotype_ownedExtenders, pr_StereotypeExtender_owningStereotype);
			setOpposites(pr_TemplateBinding_ownedSubstitutions, pr_TemplateParameterSubstitution_owningBinding);
			setOpposites(pr_TemplateBinding_owningElement, pr_TemplateableElement_ownedBindings);
			setOpposites(pr_TemplateBinding_templateSignature, pr_TemplateSignature_TemplateBinding_templateSignature);
			setOpposites(pr_TemplateParameter_owningSignature, pr_TemplateSignature_ownedParameters);
			setOpposites(pr_TemplateParameter_TemplateParameterSubstitution_formal, pr_TemplateParameterSubstitution_formal);
			setOpposites(pr_TemplateParameterSubstitution_actual, pr_Type_TemplateParameterSubstitution_actual);
			setOpposites(pr_TemplateParameterSubstitution_ownedWildcard, pr_WildcardType_TemplateParameterSubstitution_ownedWildcard);
			setOpposites(pr_TemplateSignature_owningElement, pr_TemplateableElement_ownedSignature);
			setOpposites(pr_TemplateableElement_unspecializedElement, pr_TemplateableElement_TemplateableElement_unspecializedElement);
			setOpposites(pr_Transition_ownedTriggers, pr_Trigger_owningTransition);
			setOpposites(pr_Transition_source, pr_Vertex_outgoingTransitions);
			setOpposites(pr_Transition_target, pr_Vertex_incomingTransitions);
			setOpposites(pr_TupleLiteralExp_ownedParts, pr_TupleLiteralPart_TupleLiteralExp_ownedParts);
			setOpposites(pr_Type_TypeExp_referredType, pr_TypeExp_referredType);
			setOpposites(pr_Type_TypedElement_type, pr_TypedElement_type);
			setOpposites(pr_Type_VariableDeclaration_typeValue, pr_VariableDeclaration_typeValue);
			setOpposites(pr_Type_WildcardType_lowerBound, pr_WildcardType_lowerBound);
			setOpposites(pr_Type_WildcardType_upperBound, pr_WildcardType_upperBound);
			setOpposites(pr_VariableDeclaration_VariableExp_referredVariable, pr_VariableExp_referredVariable);
		}
	}
}
