/*******************************************************************************
 * Copyright (c) 2010, 2022 Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 *   E.D.Willink - Initial API and implementation
 *************************************************************************
 * This code is 100% auto-generated
 * from:
 *   http://www.eclipse.org/ocl/2015/Library
 *   /org.eclipse.ocl.pivot/model/Pivot.ecore
 *   http://www.eclipse.org/ocl/2015/Library
 * using:
 *   /org.eclipse.ocl.pivot/model/Pivot.genmodel
 *   org.eclipse.ocl.examples.codegen.oclinecore.OCLinEcoreTables
 *
 * Do not edit it.
 *******************************************************************************/
package org.eclipse.ocl.pivot;

import java.lang.String;
import org.eclipse.jdt.annotation.NonNull;
// import org.eclipse.ocl.pivot.Enumeration;
// import org.eclipse.ocl.pivot.EnumerationLiteral;
// import org.eclipse.ocl.pivot.Operation;
// import org.eclipse.ocl.pivot.ParameterTypes;
// import org.eclipse.ocl.pivot.PivotTables;
// import org.eclipse.ocl.pivot.Property;
// import org.eclipse.ocl.pivot.TemplateParameters;
import org.eclipse.ocl.pivot.flat.FlatClass;
import org.eclipse.ocl.pivot.flat.FlatFragment;
import org.eclipse.ocl.pivot.ids.ClassId;
import org.eclipse.ocl.pivot.ids.CollectionTypeId;
import org.eclipse.ocl.pivot.ids.DataTypeId;
import org.eclipse.ocl.pivot.ids.EnumerationId;
import org.eclipse.ocl.pivot.ids.EnumerationLiteralId;
import org.eclipse.ocl.pivot.ids.IdManager;
import org.eclipse.ocl.pivot.ids.RootPackageId;
import org.eclipse.ocl.pivot.ids.TuplePartId;
import org.eclipse.ocl.pivot.ids.TupleTypeId;
import org.eclipse.ocl.pivot.ids.TypeId;
import org.eclipse.ocl.pivot.internal.library.executor.ExecutorStandardLibrary;
import org.eclipse.ocl.pivot.oclstdlib.OCLstdlibTables;
import org.eclipse.ocl.pivot.utilities.AbstractTables;
import org.eclipse.ocl.pivot.utilities.TypeUtil;
import org.eclipse.ocl.pivot.utilities.ValueUtil;
import org.eclipse.ocl.pivot.values.IntegerValue;

/**
 * PivotTables provides the dispatch tables for the pivot for use by the OCL dispatcher.
 *
 * In order to ensure correct static initialization, a top level class element must be accessed
 * before any nested class element. Therefore an access to PACKAGE.getClass() is recommended.
 */
public class PivotTables extends AbstractTables
{
	static {
		Init.initStart();
	}

	/**
	 *	The library of all packages and types.
	 */
	public static final @NonNull ExecutorStandardLibrary LIBRARY = OCLstdlibTables.LIBRARY;

	/**
	 *	The package descriptor for the package.
	 */
	public static final org.eclipse.ocl.pivot.@NonNull Package PACKAGE = LIBRARY.createPackage(PivotPackage.eINSTANCE, IdManager.METAMODEL);

	/**
	 *	Constants used by auto-generated code.
	 */
	public static final /*@NonInvalid*/ @NonNull RootPackageId PACKid_$metamodel$ = IdManager.getRootPackageId("$metamodel$");
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Annotation = PivotTables.PACKid_$metamodel$.getClassId("Annotation", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_AssociationClass = PivotTables.PACKid_$metamodel$.getClassId("AssociationClass", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_AssociationClassCallExp = PivotTables.PACKid_$metamodel$.getClassId("AssociationClassCallExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_BagType = PivotTables.PACKid_$metamodel$.getClassId("BagType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Behavior = PivotTables.PACKid_$metamodel$.getClassId("Behavior", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_BooleanLiteralExp = PivotTables.PACKid_$metamodel$.getClassId("BooleanLiteralExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_BooleanType = PivotTables.PACKid_$metamodel$.getClassId("BooleanType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CallExp = PivotTables.PACKid_$metamodel$.getClassId("CallExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CallOperationAction = PivotTables.PACKid_$metamodel$.getClassId("CallOperationAction", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Class = PivotTables.PACKid_$metamodel$.getClassId("Class", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CollectionItem = PivotTables.PACKid_$metamodel$.getClassId("CollectionItem", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CollectionLiteralExp = PivotTables.PACKid_$metamodel$.getClassId("CollectionLiteralExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CollectionLiteralPart = PivotTables.PACKid_$metamodel$.getClassId("CollectionLiteralPart", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CollectionRange = PivotTables.PACKid_$metamodel$.getClassId("CollectionRange", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CollectionType = PivotTables.PACKid_$metamodel$.getClassId("CollectionType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Comment = PivotTables.PACKid_$metamodel$.getClassId("Comment", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CompleteClass = PivotTables.PACKid_$metamodel$.getClassId("CompleteClass", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CompleteEnvironment = PivotTables.PACKid_$metamodel$.getClassId("CompleteEnvironment", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CompleteModel = PivotTables.PACKid_$metamodel$.getClassId("CompleteModel", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_CompletePackage = PivotTables.PACKid_$metamodel$.getClassId("CompletePackage", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ConnectionPointReference = PivotTables.PACKid_$metamodel$.getClassId("ConnectionPointReference", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Constraint = PivotTables.PACKid_$metamodel$.getClassId("Constraint", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_DataType = PivotTables.PACKid_$metamodel$.getClassId("DataType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Detail = PivotTables.PACKid_$metamodel$.getClassId("Detail", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_DynamicElement = PivotTables.PACKid_$metamodel$.getClassId("DynamicElement", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_DynamicProperty = PivotTables.PACKid_$metamodel$.getClassId("DynamicProperty", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_DynamicType = PivotTables.PACKid_$metamodel$.getClassId("DynamicType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Element = PivotTables.PACKid_$metamodel$.getClassId("Element", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ElementExtension = PivotTables.PACKid_$metamodel$.getClassId("ElementExtension", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_EnumLiteralExp = PivotTables.PACKid_$metamodel$.getClassId("EnumLiteralExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Enumeration = PivotTables.PACKid_$metamodel$.getClassId("Enumeration", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_EnumerationLiteral = PivotTables.PACKid_$metamodel$.getClassId("EnumerationLiteral", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ExpressionInOCL = PivotTables.PACKid_$metamodel$.getClassId("ExpressionInOCL", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Feature = PivotTables.PACKid_$metamodel$.getClassId("Feature", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_IfExp = PivotTables.PACKid_$metamodel$.getClassId("IfExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Import = PivotTables.PACKid_$metamodel$.getClassId("Import", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_InstanceSpecification = PivotTables.PACKid_$metamodel$.getClassId("InstanceSpecification", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_IntegerLiteralExp = PivotTables.PACKid_$metamodel$.getClassId("IntegerLiteralExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_InvalidType = PivotTables.PACKid_$metamodel$.getClassId("InvalidType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_IterableType = PivotTables.PACKid_$metamodel$.getClassId("IterableType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_IterateExp = PivotTables.PACKid_$metamodel$.getClassId("IterateExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Iteration = PivotTables.PACKid_$metamodel$.getClassId("Iteration", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_IteratorExp = PivotTables.PACKid_$metamodel$.getClassId("IteratorExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_IteratorVariable = PivotTables.PACKid_$metamodel$.getClassId("IteratorVariable", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_LambdaType = PivotTables.PACKid_$metamodel$.getClassId("LambdaType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_LanguageExpression = PivotTables.PACKid_$metamodel$.getClassId("LanguageExpression", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_LetExp = PivotTables.PACKid_$metamodel$.getClassId("LetExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_LetVariable = PivotTables.PACKid_$metamodel$.getClassId("LetVariable", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Library = PivotTables.PACKid_$metamodel$.getClassId("Library", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_LoopExp = PivotTables.PACKid_$metamodel$.getClassId("LoopExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_MapLiteralExp = PivotTables.PACKid_$metamodel$.getClassId("MapLiteralExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_MapLiteralPart = PivotTables.PACKid_$metamodel$.getClassId("MapLiteralPart", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_MapType = PivotTables.PACKid_$metamodel$.getClassId("MapType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_MessageExp = PivotTables.PACKid_$metamodel$.getClassId("MessageExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_MessageType = PivotTables.PACKid_$metamodel$.getClassId("MessageType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Model = PivotTables.PACKid_$metamodel$.getClassId("Model", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_NamedElement = PivotTables.PACKid_$metamodel$.getClassId("NamedElement", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Namespace = PivotTables.PACKid_$metamodel$.getClassId("Namespace", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_NavigationCallExp = PivotTables.PACKid_$metamodel$.getClassId("NavigationCallExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_OCLExpression = PivotTables.PACKid_$metamodel$.getClassId("OCLExpression", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_OclElement = PivotTables.PACKid_$metamodel$.getClassId("OclElement", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Operation = PivotTables.PACKid_$metamodel$.getClassId("Operation", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_OperationCallExp = PivotTables.PACKid_$metamodel$.getClassId("OperationCallExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_OppositePropertyCallExp = PivotTables.PACKid_$metamodel$.getClassId("OppositePropertyCallExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_OrderedSetType = PivotTables.PACKid_$metamodel$.getClassId("OrderedSetType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_OrphanCompletePackage = PivotTables.PACKid_$metamodel$.getClassId("OrphanCompletePackage", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Package = PivotTables.PACKid_$metamodel$.getClassId("Package", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Parameter = PivotTables.PACKid_$metamodel$.getClassId("Parameter", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ParameterVariable = PivotTables.PACKid_$metamodel$.getClassId("ParameterVariable", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Precedence = PivotTables.PACKid_$metamodel$.getClassId("Precedence", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_PrimitiveCompletePackage = PivotTables.PACKid_$metamodel$.getClassId("PrimitiveCompletePackage", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_PrimitiveType = PivotTables.PACKid_$metamodel$.getClassId("PrimitiveType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Profile = PivotTables.PACKid_$metamodel$.getClassId("Profile", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ProfileApplication = PivotTables.PACKid_$metamodel$.getClassId("ProfileApplication", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Property = PivotTables.PACKid_$metamodel$.getClassId("Property", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_PropertyCallExp = PivotTables.PACKid_$metamodel$.getClassId("PropertyCallExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Pseudostate = PivotTables.PACKid_$metamodel$.getClassId("Pseudostate", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Region = PivotTables.PACKid_$metamodel$.getClassId("Region", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ResultVariable = PivotTables.PACKid_$metamodel$.getClassId("ResultVariable", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_SelfType = PivotTables.PACKid_$metamodel$.getClassId("SelfType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_SendSignalAction = PivotTables.PACKid_$metamodel$.getClassId("SendSignalAction", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_SequenceType = PivotTables.PACKid_$metamodel$.getClassId("SequenceType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_SetType = PivotTables.PACKid_$metamodel$.getClassId("SetType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ShadowExp = PivotTables.PACKid_$metamodel$.getClassId("ShadowExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ShadowPart = PivotTables.PACKid_$metamodel$.getClassId("ShadowPart", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Signal = PivotTables.PACKid_$metamodel$.getClassId("Signal", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Slot = PivotTables.PACKid_$metamodel$.getClassId("Slot", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_StandardLibrary = PivotTables.PACKid_$metamodel$.getClassId("StandardLibrary", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_State = PivotTables.PACKid_$metamodel$.getClassId("State", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_StateExp = PivotTables.PACKid_$metamodel$.getClassId("StateExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_StateMachine = PivotTables.PACKid_$metamodel$.getClassId("StateMachine", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Stereotype = PivotTables.PACKid_$metamodel$.getClassId("Stereotype", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_StereotypeExtender = PivotTables.PACKid_$metamodel$.getClassId("StereotypeExtender", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TemplateBinding = PivotTables.PACKid_$metamodel$.getClassId("TemplateBinding", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TemplateParameter = PivotTables.PACKid_$metamodel$.getClassId("TemplateParameter", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TemplateParameterSubstitution = PivotTables.PACKid_$metamodel$.getClassId("TemplateParameterSubstitution", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TemplateSignature = PivotTables.PACKid_$metamodel$.getClassId("TemplateSignature", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TemplateableElement = PivotTables.PACKid_$metamodel$.getClassId("TemplateableElement", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Transition = PivotTables.PACKid_$metamodel$.getClassId("Transition", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Trigger = PivotTables.PACKid_$metamodel$.getClassId("Trigger", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TupleLiteralExp = PivotTables.PACKid_$metamodel$.getClassId("TupleLiteralExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TupleLiteralPart = PivotTables.PACKid_$metamodel$.getClassId("TupleLiteralPart", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Type = PivotTables.PACKid_$metamodel$.getClassId("Type", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TypeExp = PivotTables.PACKid_$metamodel$.getClassId("TypeExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_TypedElement = PivotTables.PACKid_$metamodel$.getClassId("TypedElement", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_ValueSpecification = PivotTables.PACKid_$metamodel$.getClassId("ValueSpecification", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Variable = PivotTables.PACKid_$metamodel$.getClassId("Variable", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_VariableDeclaration = PivotTables.PACKid_$metamodel$.getClassId("VariableDeclaration", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_VariableExp = PivotTables.PACKid_$metamodel$.getClassId("VariableExp", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_Vertex = PivotTables.PACKid_$metamodel$.getClassId("Vertex", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_VoidType = PivotTables.PACKid_$metamodel$.getClassId("VoidType", 0);
	public static final /*@NonInvalid*/ @NonNull ClassId CLSSid_WildcardType = PivotTables.PACKid_$metamodel$.getClassId("WildcardType", 0);
	public static final /*@NonInvalid*/ @NonNull DataTypeId DATAid_EcoreObject = PivotTables.PACKid_$metamodel$.getDataTypeId("EcoreObject", 0);
	public static final /*@NonInvalid*/ @NonNull DataTypeId DATAid_LibraryFeature = PivotTables.PACKid_$metamodel$.getDataTypeId("LibraryFeature", 0);
	public static final /*@NonInvalid*/ @NonNull DataTypeId DATAid_Object = PivotTables.PACKid_$metamodel$.getDataTypeId("Object", 0);
	public static final /*@NonInvalid*/ @NonNull EnumerationId ENUMid_AssociativityKind = PivotTables.PACKid_$metamodel$.getEnumerationId("AssociativityKind");
	public static final /*@NonInvalid*/ @NonNull EnumerationId ENUMid_CollectionKind = PivotTables.PACKid_$metamodel$.getEnumerationId("CollectionKind");
	public static final /*@NonInvalid*/ @NonNull EnumerationId ENUMid_PseudostateKind = PivotTables.PACKid_$metamodel$.getEnumerationId("PseudostateKind");
	public static final /*@NonInvalid*/ @NonNull EnumerationId ENUMid_TransitionKind = PivotTables.PACKid_$metamodel$.getEnumerationId("TransitionKind");
	public static final /*@NonInvalid*/ @NonNull IntegerValue INT_0 = ValueUtil.integerValueOf("0");
	public static final /*@NonInvalid*/ @NonNull IntegerValue INT_1 = ValueUtil.integerValueOf("1");
	public static final /*@NonInvalid*/ @NonNull TuplePartId PARTid_ = IdManager.getTuplePartId(1, "status", TypeId.BOOLEAN);
	public static final /*@NonInvalid*/ @NonNull TuplePartId PARTid__0 = IdManager.getTuplePartId(0, "message", TypeId.STRING);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SEQ_PRIMid_Integer = TypeId.SEQUENCE.getSpecializedId(TypeId.INTEGER, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_PRIMid_String = TypeId.SET.getSpecializedId(TypeId.STRING, true, ValueUtil.ONE_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull String STR_Missing_32_initializers_c = "Missing initializers:";
	public static final /*@NonInvalid*/ @NonNull String STR_Unexpected_32_initializers_c = "Unexpected initializers:";
	public static final /*@NonInvalid*/ @NonNull String STR__32 = " ";
	public static final /*@NonInvalid*/ @NonNull String STR_closure = "closure";
	public static final /*@NonInvalid*/ @NonNull String STR_collect = "collect";
	public static final /*@NonInvalid*/ @NonNull String STR_ocl = "ocl";
	public static final /*@NonInvalid*/ @NonNull String STR_sortedBy = "sortedBy";
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Annotation = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Annotation, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_AssociationClassCallExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_AssociationClassCallExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_CallOperationAction = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_CallOperationAction, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Class = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Class, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_CollectionType = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_CollectionType, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_CompleteClass = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_CompleteClass, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_CompleteModel = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_CompleteModel, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_CompletePackage = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_CompletePackage, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_ConnectionPointReference = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_ConnectionPointReference, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Constraint = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Constraint, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_DataType = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_DataType, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_DynamicElement = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_DynamicElement, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_DynamicProperty = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_DynamicProperty, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_ElementExtension = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_ElementExtension, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_EnumLiteralExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_EnumLiteralExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Import = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Import, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_InstanceSpecification = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_InstanceSpecification, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_LambdaType = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_LambdaType, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_LoopExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_LoopExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_MapType = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_MapType, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_MessageType = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_MessageType, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_NavigationCallExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_NavigationCallExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_OCLExpression = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_OCLExpression, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Operation = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Operation, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_OperationCallExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_OperationCallExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_OppositePropertyCallExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_OppositePropertyCallExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Package = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Package, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_PrimitiveType = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_PrimitiveType, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Property = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Property, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_PropertyCallExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_PropertyCallExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Property_0 = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Property, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Region = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Region, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_SendSignalAction = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_SendSignalAction, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_ShadowPart = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_ShadowPart, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Slot = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Slot, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_State = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_State, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_StateExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_StateExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_StateMachine = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_StateMachine, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_TemplateBinding = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_TemplateBinding, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_TemplateParameter = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_TemplateParameter, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_TemplateParameterSubstitution = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_TemplateParameterSubstitution, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_TemplateableElement = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_TemplateableElement, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_TypeExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_TypeExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_TypedElement = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_TypedElement, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_Variable = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_Variable, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_VariableDeclaration = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_VariableDeclaration, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_VariableExp = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_VariableExp, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId BAG_CLSSid_WildcardType = TypeId.BAG.getSpecializedId(PivotTables.CLSSid_WildcardType, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull EnumerationLiteralId ELITid_Bag = PivotTables.ENUMid_CollectionKind.getEnumerationLiteralId("Bag");
	public static final /*@NonInvalid*/ @NonNull EnumerationLiteralId ELITid_Collection = PivotTables.ENUMid_CollectionKind.getEnumerationLiteralId("Collection");
	public static final /*@NonInvalid*/ @NonNull EnumerationLiteralId ELITid_OrderedSet = PivotTables.ENUMid_CollectionKind.getEnumerationLiteralId("OrderedSet");
	public static final /*@NonInvalid*/ @NonNull EnumerationLiteralId ELITid_Sequence = PivotTables.ENUMid_CollectionKind.getEnumerationLiteralId("Sequence");
	public static final /*@NonInvalid*/ @NonNull EnumerationLiteralId ELITid_Set = PivotTables.ENUMid_CollectionKind.getEnumerationLiteralId("Set");
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_CollectionLiteralPart = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_CollectionLiteralPart, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_Detail = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_Detail, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_Element = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_Element, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_EnumerationLiteral = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_EnumerationLiteral, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_Import = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_Import, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_IteratorVariable = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_IteratorVariable, false, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_MapLiteralPart = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_MapLiteralPart, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_NamedElement = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_NamedElement, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_OCLExpression = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_OCLExpression, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_Operation = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_Operation, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_Parameter = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_Parameter, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_Precedence = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_Precedence, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_Property = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_Property, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_ShadowPart = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_ShadowPart, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_TemplateParameter = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_TemplateParameter, true, ValueUtil.ONE_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_TupleLiteralPart = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_TupleLiteralPart, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_ValueSpecification = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_ValueSpecification, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId ORD_CLSSid_Variable = TypeId.ORDERED_SET.getSpecializedId(PivotTables.CLSSid_Variable, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SEQ_CLSSid_Property = TypeId.SEQUENCE.getSpecializedId(PivotTables.CLSSid_Property, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SEQ_CLSSid_Type = TypeId.SEQUENCE.getSpecializedId(PivotTables.CLSSid_Type, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Behavior = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Behavior, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_CallOperationAction = TypeId.SET.getSpecializedId(PivotTables.CLSSid_CallOperationAction, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Class = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Class, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Comment = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Comment, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_CompleteClass = TypeId.SET.getSpecializedId(PivotTables.CLSSid_CompleteClass, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_CompletePackage = TypeId.SET.getSpecializedId(PivotTables.CLSSid_CompletePackage, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_ConnectionPointReference = TypeId.SET.getSpecializedId(PivotTables.CLSSid_ConnectionPointReference, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Constraint = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Constraint, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_DynamicProperty = TypeId.SET.getSpecializedId(PivotTables.CLSSid_DynamicProperty, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Element = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Element, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_ElementExtension = TypeId.SET.getSpecializedId(PivotTables.CLSSid_ElementExtension, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_InstanceSpecification = TypeId.SET.getSpecializedId(PivotTables.CLSSid_InstanceSpecification, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Model = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Model, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_NamedElement = TypeId.SET.getSpecializedId(PivotTables.CLSSid_NamedElement, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_OCLExpression = TypeId.SET.getSpecializedId(PivotTables.CLSSid_OCLExpression, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_OclElement = TypeId.SET.getSpecializedId(PivotTables.CLSSid_OclElement, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Operation = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Operation, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Package = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Package, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_ProfileApplication = TypeId.SET.getSpecializedId(PivotTables.CLSSid_ProfileApplication, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Property = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Property, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Pseudostate = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Pseudostate, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Region = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Region, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Region_0 = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Region, true, ValueUtil.ONE_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_SendSignalAction = TypeId.SET.getSpecializedId(PivotTables.CLSSid_SendSignalAction, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Slot = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Slot, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_State = TypeId.SET.getSpecializedId(PivotTables.CLSSid_State, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_StateMachine = TypeId.SET.getSpecializedId(PivotTables.CLSSid_StateMachine, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_StereotypeExtender = TypeId.SET.getSpecializedId(PivotTables.CLSSid_StereotypeExtender, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_TemplateBinding = TypeId.SET.getSpecializedId(PivotTables.CLSSid_TemplateBinding, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_TemplateParameterSubstitution = TypeId.SET.getSpecializedId(PivotTables.CLSSid_TemplateParameterSubstitution, true, ValueUtil.ONE_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Transition = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Transition, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Trigger = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Trigger, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Type = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Type, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull CollectionTypeId SET_CLSSid_Vertex = TypeId.SET.getSpecializedId(PivotTables.CLSSid_Vertex, true, ValueUtil.ZERO_VALUE, ValueUtil.UNLIMITED_VALUE);
	public static final /*@NonInvalid*/ @NonNull TupleTypeId TUPLid_ = IdManager.getTupleTypeId("Tuple", PivotTables.PARTid__0, PivotTables.PARTid_);

	/**
	 *	The type parameters for templated types and operations.
	 */
	public static class TypeParameters {
		static {
			Init.initStart();
			PivotTables.init();
		}

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::TypeParameters and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The type descriptors for each type.
	 */
	public static class Types {
		static {
			Init.initStart();
			TypeParameters.init();
		}

		public static final org.eclipse.ocl.pivot.@NonNull Class _AbstractClass = LIBRARY.createClass(PivotPackage.Literals.ABSTRACT_CLASS, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Annotation = LIBRARY.createClass(PivotPackage.Literals.ANNOTATION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _AnyType = LIBRARY.createClass(PivotPackage.Literals.ANY_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _AssociationClass = LIBRARY.createClass(PivotPackage.Literals.ASSOCIATION_CLASS, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _AssociationClassCallExp = LIBRARY.createClass(PivotPackage.Literals.ASSOCIATION_CLASS_CALL_EXP, PACKAGE, 0);
		public static final @NonNull Enumeration _AssociativityKind = LIBRARY.createEnumeration(PivotPackage.Literals.ASSOCIATIVITY_KIND, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _BagType = LIBRARY.createClass(PivotPackage.Literals.BAG_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Behavior = LIBRARY.createClass(PivotPackage.Literals.BEHAVIOR, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _BooleanLiteralExp = LIBRARY.createClass(PivotPackage.Literals.BOOLEAN_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _BooleanType = LIBRARY.createClass(PivotPackage.Literals.BOOLEAN_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CallExp = LIBRARY.createClass(PivotPackage.Literals.CALL_EXP, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CallOperationAction = LIBRARY.createClass(PivotPackage.Literals.CALL_OPERATION_ACTION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Class = LIBRARY.createClass(PivotPackage.Literals.CLASS, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CollectionItem = LIBRARY.createClass(PivotPackage.Literals.COLLECTION_ITEM, PACKAGE, 0);
		public static final @NonNull Enumeration _CollectionKind = LIBRARY.createEnumeration(PivotPackage.Literals.COLLECTION_KIND, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CollectionLiteralExp = LIBRARY.createClass(PivotPackage.Literals.COLLECTION_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CollectionLiteralPart = LIBRARY.createClass(PivotPackage.Literals.COLLECTION_LITERAL_PART, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CollectionRange = LIBRARY.createClass(PivotPackage.Literals.COLLECTION_RANGE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CollectionType = LIBRARY.createClass(PivotPackage.Literals.COLLECTION_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Comment = LIBRARY.createClass(PivotPackage.Literals.COMMENT, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CompleteClass = LIBRARY.createClass(PivotPackage.Literals.COMPLETE_CLASS, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CompleteEnvironment = LIBRARY.createClass(PivotPackage.Literals.COMPLETE_ENVIRONMENT, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CompleteModel = LIBRARY.createClass(PivotPackage.Literals.COMPLETE_MODEL, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _CompletePackage = LIBRARY.createClass(PivotPackage.Literals.COMPLETE_PACKAGE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ConnectionPointReference = LIBRARY.createClass(PivotPackage.Literals.CONNECTION_POINT_REFERENCE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Constraint = LIBRARY.createClass(PivotPackage.Literals.CONSTRAINT, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _DataType = LIBRARY.createClass(PivotPackage.Literals.DATA_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Detail = LIBRARY.createClass(PivotPackage.Literals.DETAIL, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _DynamicBehavior = LIBRARY.createClass(PivotPackage.Literals.DYNAMIC_BEHAVIOR, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _DynamicElement = LIBRARY.createClass(PivotPackage.Literals.DYNAMIC_ELEMENT, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _DynamicProperty = LIBRARY.createClass(PivotPackage.Literals.DYNAMIC_PROPERTY, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _DynamicType = LIBRARY.createClass(PivotPackage.Literals.DYNAMIC_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _DynamicValueSpecification = LIBRARY.createClass(PivotPackage.Literals.DYNAMIC_VALUE_SPECIFICATION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _EcoreObject = LIBRARY.createClass(PivotPackage.Literals.ECORE_OBJECT, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Element = LIBRARY.createClass(PivotPackage.Literals.ELEMENT, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ElementExtension = LIBRARY.createClass(PivotPackage.Literals.ELEMENT_EXTENSION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ElementLiteralExp = LIBRARY.createClass(PivotPackage.Literals.ELEMENT_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _EnumLiteralExp = LIBRARY.createClass(PivotPackage.Literals.ENUM_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Enumeration = LIBRARY.createClass(PivotPackage.Literals.ENUMERATION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _EnumerationLiteral = LIBRARY.createClass(PivotPackage.Literals.ENUMERATION_LITERAL, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ExpressionInOCL = LIBRARY.createClass(PivotPackage.Literals.EXPRESSION_IN_OCL, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Feature = LIBRARY.createClass(PivotPackage.Literals.FEATURE, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _FeatureCallExp = LIBRARY.createClass(PivotPackage.Literals.FEATURE_CALL_EXP, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _FinalState = LIBRARY.createClass(PivotPackage.Literals.FINAL_STATE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _IfExp = LIBRARY.createClass(PivotPackage.Literals.IF_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Import = LIBRARY.createClass(PivotPackage.Literals.IMPORT, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _InstanceSpecification = LIBRARY.createClass(PivotPackage.Literals.INSTANCE_SPECIFICATION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _IntegerLiteralExp = LIBRARY.createClass(PivotPackage.Literals.INTEGER_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _InvalidLiteralExp = LIBRARY.createClass(PivotPackage.Literals.INVALID_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _InvalidType = LIBRARY.createClass(PivotPackage.Literals.INVALID_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _IterableType = LIBRARY.createClass(PivotPackage.Literals.ITERABLE_TYPE, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _IterateExp = LIBRARY.createClass(PivotPackage.Literals.ITERATE_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Iteration = LIBRARY.createClass(PivotPackage.Literals.ITERATION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _IteratorExp = LIBRARY.createClass(PivotPackage.Literals.ITERATOR_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _IteratorVariable = LIBRARY.createClass(PivotPackage.Literals.ITERATOR_VARIABLE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _LambdaType = LIBRARY.createClass(PivotPackage.Literals.LAMBDA_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _LanguageExpression = LIBRARY.createClass(PivotPackage.Literals.LANGUAGE_EXPRESSION, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _LetExp = LIBRARY.createClass(PivotPackage.Literals.LET_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _LetVariable = LIBRARY.createClass(PivotPackage.Literals.LET_VARIABLE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Library = LIBRARY.createClass(PivotPackage.Literals.LIBRARY, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _LibraryFeature = LIBRARY.createClass(PivotPackage.Literals.LIBRARY_FEATURE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _LiteralExp = LIBRARY.createClass(PivotPackage.Literals.LITERAL_EXP, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _LoopExp = LIBRARY.createClass(PivotPackage.Literals.LOOP_EXP, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _MapLiteralExp = LIBRARY.createClass(PivotPackage.Literals.MAP_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _MapLiteralPart = LIBRARY.createClass(PivotPackage.Literals.MAP_LITERAL_PART, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _MapType = LIBRARY.createClass(PivotPackage.Literals.MAP_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _MessageExp = LIBRARY.createClass(PivotPackage.Literals.MESSAGE_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _MessageType = LIBRARY.createClass(PivotPackage.Literals.MESSAGE_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Model = LIBRARY.createClass(PivotPackage.Literals.MODEL, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _MorePivotable = LIBRARY.createClass(PivotPackage.Literals.MORE_PIVOTABLE, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Nameable = LIBRARY.createClass(PivotPackage.Literals.NAMEABLE, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _NamedElement = LIBRARY.createClass(PivotPackage.Literals.NAMED_ELEMENT, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Namespace = LIBRARY.createClass(PivotPackage.Literals.NAMESPACE, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _NavigationCallExp = LIBRARY.createClass(PivotPackage.Literals.NAVIGATION_CALL_EXP, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _NullLiteralExp = LIBRARY.createClass(PivotPackage.Literals.NULL_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _NumericLiteralExp = LIBRARY.createClass(PivotPackage.Literals.NUMERIC_LITERAL_EXP, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _OCLExpression = LIBRARY.createClass(PivotPackage.Literals.OCL_EXPRESSION, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Object = LIBRARY.createClass(PivotPackage.Literals.OBJECT, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Operation = LIBRARY.createClass(PivotPackage.Literals.OPERATION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _OperationCallExp = LIBRARY.createClass(PivotPackage.Literals.OPERATION_CALL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _OppositePropertyCallExp = LIBRARY.createClass(PivotPackage.Literals.OPPOSITE_PROPERTY_CALL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _OrderedSetType = LIBRARY.createClass(PivotPackage.Literals.ORDERED_SET_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _OrphanCompletePackage = LIBRARY.createClass(PivotPackage.Literals.ORPHAN_COMPLETE_PACKAGE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Package = LIBRARY.createClass(PivotPackage.Literals.PACKAGE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Parameter = LIBRARY.createClass(PivotPackage.Literals.PARAMETER, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ParameterVariable = LIBRARY.createClass(PivotPackage.Literals.PARAMETER_VARIABLE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Pivotable = LIBRARY.createClass(PivotPackage.Literals.PIVOTABLE, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Precedence = LIBRARY.createClass(PivotPackage.Literals.PRECEDENCE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _PrimitiveCompletePackage = LIBRARY.createClass(PivotPackage.Literals.PRIMITIVE_COMPLETE_PACKAGE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _PrimitiveLiteralExp = LIBRARY.createClass(PivotPackage.Literals.PRIMITIVE_LITERAL_EXP, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _PrimitiveType = LIBRARY.createClass(PivotPackage.Literals.PRIMITIVE_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Profile = LIBRARY.createClass(PivotPackage.Literals.PROFILE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ProfileApplication = LIBRARY.createClass(PivotPackage.Literals.PROFILE_APPLICATION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Property = LIBRARY.createClass(PivotPackage.Literals.PROPERTY, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _PropertyCallExp = LIBRARY.createClass(PivotPackage.Literals.PROPERTY_CALL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Pseudostate = LIBRARY.createClass(PivotPackage.Literals.PSEUDOSTATE, PACKAGE, 0);
		public static final @NonNull Enumeration _PseudostateKind = LIBRARY.createEnumeration(PivotPackage.Literals.PSEUDOSTATE_KIND, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _RealLiteralExp = LIBRARY.createClass(PivotPackage.Literals.REAL_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ReferringElement = LIBRARY.createClass(PivotPackage.Literals.REFERRING_ELEMENT, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Region = LIBRARY.createClass(PivotPackage.Literals.REGION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ResultVariable = LIBRARY.createClass(PivotPackage.Literals.RESULT_VARIABLE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _SelfType = LIBRARY.createClass(PivotPackage.Literals.SELF_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _SendSignalAction = LIBRARY.createClass(PivotPackage.Literals.SEND_SIGNAL_ACTION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _SequenceType = LIBRARY.createClass(PivotPackage.Literals.SEQUENCE_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _SetType = LIBRARY.createClass(PivotPackage.Literals.SET_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ShadowExp = LIBRARY.createClass(PivotPackage.Literals.SHADOW_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ShadowPart = LIBRARY.createClass(PivotPackage.Literals.SHADOW_PART, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Signal = LIBRARY.createClass(PivotPackage.Literals.SIGNAL, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Slot = LIBRARY.createClass(PivotPackage.Literals.SLOT, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _StandardLibrary = LIBRARY.createClass(PivotPackage.Literals.STANDARD_LIBRARY, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _State = LIBRARY.createClass(PivotPackage.Literals.STATE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _StateExp = LIBRARY.createClass(PivotPackage.Literals.STATE_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _StateMachine = LIBRARY.createClass(PivotPackage.Literals.STATE_MACHINE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Stereotype = LIBRARY.createClass(PivotPackage.Literals.STEREOTYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _StereotypeExtender = LIBRARY.createClass(PivotPackage.Literals.STEREOTYPE_EXTENDER, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _StringLiteralExp = LIBRARY.createClass(PivotPackage.Literals.STRING_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TemplateBinding = LIBRARY.createClass(PivotPackage.Literals.TEMPLATE_BINDING, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TemplateParameter = LIBRARY.createClass(PivotPackage.Literals.TEMPLATE_PARAMETER, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TemplateParameterSubstitution = LIBRARY.createClass(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TemplateSignature = LIBRARY.createClass(PivotPackage.Literals.TEMPLATE_SIGNATURE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TemplateableElement = LIBRARY.createClass(PivotPackage.Literals.TEMPLATEABLE_ELEMENT, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Throwable = LIBRARY.createClass(PivotPackage.Literals.THROWABLE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Transition = LIBRARY.createClass(PivotPackage.Literals.TRANSITION, PACKAGE, 0);
		public static final @NonNull Enumeration _TransitionKind = LIBRARY.createEnumeration(PivotPackage.Literals.TRANSITION_KIND, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Trigger = LIBRARY.createClass(PivotPackage.Literals.TRIGGER, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TupleLiteralExp = LIBRARY.createClass(PivotPackage.Literals.TUPLE_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TupleLiteralPart = LIBRARY.createClass(PivotPackage.Literals.TUPLE_LITERAL_PART, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TupleType = LIBRARY.createClass(PivotPackage.Literals.TUPLE_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Type = LIBRARY.createClass(PivotPackage.Literals.TYPE, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TypeExp = LIBRARY.createClass(PivotPackage.Literals.TYPE_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _TypedElement = LIBRARY.createClass(PivotPackage.Literals.TYPED_ELEMENT, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _UnlimitedNaturalLiteralExp = LIBRARY.createClass(PivotPackage.Literals.UNLIMITED_NATURAL_LITERAL_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _UnspecifiedValueExp = LIBRARY.createClass(PivotPackage.Literals.UNSPECIFIED_VALUE_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _ValueSpecification = LIBRARY.createClass(PivotPackage.Literals.VALUE_SPECIFICATION, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Variable = LIBRARY.createClass(PivotPackage.Literals.VARIABLE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _VariableDeclaration = LIBRARY.createClass(PivotPackage.Literals.VARIABLE_DECLARATION, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _VariableExp = LIBRARY.createClass(PivotPackage.Literals.VARIABLE_EXP, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Vertex = LIBRARY.createClass(PivotPackage.Literals.VERTEX, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _Visitable = LIBRARY.createClass(PivotPackage.Literals.VISITABLE, PACKAGE, 0 | FlatClass.ABSTRACT);
		public static final org.eclipse.ocl.pivot.@NonNull Class _VoidType = LIBRARY.createClass(PivotPackage.Literals.VOID_TYPE, PACKAGE, 0);
		public static final org.eclipse.ocl.pivot.@NonNull Class _WildcardType = LIBRARY.createClass(PivotPackage.Literals.WILDCARD_TYPE, PACKAGE, 0);

		private static final org.eclipse.ocl.pivot.@NonNull Class @NonNull [] types = {
			_AbstractClass,
			_Annotation,
			_AnyType,
			_AssociationClass,
			_AssociationClassCallExp,
			_AssociativityKind,
			_BagType,
			_Behavior,
			_BooleanLiteralExp,
			_BooleanType,
			_CallExp,
			_CallOperationAction,
			_Class,
			_CollectionItem,
			_CollectionKind,
			_CollectionLiteralExp,
			_CollectionLiteralPart,
			_CollectionRange,
			_CollectionType,
			_Comment,
			_CompleteClass,
			_CompleteEnvironment,
			_CompleteModel,
			_CompletePackage,
			_ConnectionPointReference,
			_Constraint,
			_DataType,
			_Detail,
			_DynamicBehavior,
			_DynamicElement,
			_DynamicProperty,
			_DynamicType,
			_DynamicValueSpecification,
			_EcoreObject,
			_Element,
			_ElementExtension,
			_ElementLiteralExp,
			_EnumLiteralExp,
			_Enumeration,
			_EnumerationLiteral,
			_ExpressionInOCL,
			_Feature,
			_FeatureCallExp,
			_FinalState,
			_IfExp,
			_Import,
			_InstanceSpecification,
			_IntegerLiteralExp,
			_InvalidLiteralExp,
			_InvalidType,
			_IterableType,
			_IterateExp,
			_Iteration,
			_IteratorExp,
			_IteratorVariable,
			_LambdaType,
			_LanguageExpression,
			_LetExp,
			_LetVariable,
			_Library,
			_LibraryFeature,
			_LiteralExp,
			_LoopExp,
			_MapLiteralExp,
			_MapLiteralPart,
			_MapType,
			_MessageExp,
			_MessageType,
			_Model,
			_MorePivotable,
			_Nameable,
			_NamedElement,
			_Namespace,
			_NavigationCallExp,
			_NullLiteralExp,
			_NumericLiteralExp,
			_OCLExpression,
			_Object,
			_Operation,
			_OperationCallExp,
			_OppositePropertyCallExp,
			_OrderedSetType,
			_OrphanCompletePackage,
			_Package,
			_Parameter,
			_ParameterVariable,
			_Pivotable,
			_Precedence,
			_PrimitiveCompletePackage,
			_PrimitiveLiteralExp,
			_PrimitiveType,
			_Profile,
			_ProfileApplication,
			_Property,
			_PropertyCallExp,
			_Pseudostate,
			_PseudostateKind,
			_RealLiteralExp,
			_ReferringElement,
			_Region,
			_ResultVariable,
			_SelfType,
			_SendSignalAction,
			_SequenceType,
			_SetType,
			_ShadowExp,
			_ShadowPart,
			_Signal,
			_Slot,
			_StandardLibrary,
			_State,
			_StateExp,
			_StateMachine,
			_Stereotype,
			_StereotypeExtender,
			_StringLiteralExp,
			_TemplateBinding,
			_TemplateParameter,
			_TemplateParameterSubstitution,
			_TemplateSignature,
			_TemplateableElement,
			_Throwable,
			_Transition,
			_TransitionKind,
			_Trigger,
			_TupleLiteralExp,
			_TupleLiteralPart,
			_TupleType,
			_Type,
			_TypeExp,
			_TypedElement,
			_UnlimitedNaturalLiteralExp,
			_UnspecifiedValueExp,
			_ValueSpecification,
			_Variable,
			_VariableDeclaration,
			_VariableExp,
			_Vertex,
			_Visitable,
			_VoidType,
			_WildcardType
		};

		/*
		 *	Install the type descriptors in the package descriptor.
		 */
		static {
			LIBRARY.initPackage(PACKAGE, types);
			LIBRARY.addExtension(OCLstdlibTables.PACKAGE, PACKAGE);
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::Types and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The fragment descriptors for the local elements of each type and its supertypes.
	 */
	public static class Fragments {
		static {
			Init.initStart();
			Types.init();
		}

		private static final @NonNull FlatFragment _AbstractClass__AbstractClass = LIBRARY.createFragment(Types._AbstractClass, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _AbstractClass__Element = LIBRARY.createFragment(Types._AbstractClass, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _AbstractClass__NamedElement = LIBRARY.createFragment(Types._AbstractClass, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _AbstractClass__Namespace = LIBRARY.createFragment(Types._AbstractClass, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _AbstractClass__OclAny = LIBRARY.createFragment(Types._AbstractClass, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _AbstractClass__OclElement = LIBRARY.createFragment(Types._AbstractClass, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _AbstractClass__OclType = LIBRARY.createFragment(Types._AbstractClass, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _AbstractClass__TemplateableElement = LIBRARY.createFragment(Types._AbstractClass, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _AbstractClass__Type = LIBRARY.createFragment(Types._AbstractClass, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Annotation__Annotation = LIBRARY.createFragment(Types._Annotation, PivotTables.Types._Annotation);
		private static final @NonNull FlatFragment _Annotation__Element = LIBRARY.createFragment(Types._Annotation, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Annotation__NamedElement = LIBRARY.createFragment(Types._Annotation, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Annotation__OclAny = LIBRARY.createFragment(Types._Annotation, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Annotation__OclElement = LIBRARY.createFragment(Types._Annotation, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _AnyType__AbstractClass = LIBRARY.createFragment(Types._AnyType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _AnyType__AnyType = LIBRARY.createFragment(Types._AnyType, PivotTables.Types._AnyType);
		private static final @NonNull FlatFragment _AnyType__Class = LIBRARY.createFragment(Types._AnyType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _AnyType__Element = LIBRARY.createFragment(Types._AnyType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _AnyType__NamedElement = LIBRARY.createFragment(Types._AnyType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _AnyType__Namespace = LIBRARY.createFragment(Types._AnyType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _AnyType__OclAny = LIBRARY.createFragment(Types._AnyType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _AnyType__OclElement = LIBRARY.createFragment(Types._AnyType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _AnyType__OclType = LIBRARY.createFragment(Types._AnyType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _AnyType__TemplateableElement = LIBRARY.createFragment(Types._AnyType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _AnyType__Type = LIBRARY.createFragment(Types._AnyType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _AssociationClass__AbstractClass = LIBRARY.createFragment(Types._AssociationClass, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _AssociationClass__AssociationClass = LIBRARY.createFragment(Types._AssociationClass, PivotTables.Types._AssociationClass);
		private static final @NonNull FlatFragment _AssociationClass__Class = LIBRARY.createFragment(Types._AssociationClass, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _AssociationClass__Element = LIBRARY.createFragment(Types._AssociationClass, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _AssociationClass__NamedElement = LIBRARY.createFragment(Types._AssociationClass, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _AssociationClass__Namespace = LIBRARY.createFragment(Types._AssociationClass, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _AssociationClass__OclAny = LIBRARY.createFragment(Types._AssociationClass, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _AssociationClass__OclElement = LIBRARY.createFragment(Types._AssociationClass, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _AssociationClass__OclType = LIBRARY.createFragment(Types._AssociationClass, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _AssociationClass__TemplateableElement = LIBRARY.createFragment(Types._AssociationClass, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _AssociationClass__Type = LIBRARY.createFragment(Types._AssociationClass, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _AssociationClassCallExp__AssociationClassCallExp = LIBRARY.createFragment(Types._AssociationClassCallExp, PivotTables.Types._AssociationClassCallExp);
		private static final @NonNull FlatFragment _AssociationClassCallExp__CallExp = LIBRARY.createFragment(Types._AssociationClassCallExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _AssociationClassCallExp__Element = LIBRARY.createFragment(Types._AssociationClassCallExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _AssociationClassCallExp__FeatureCallExp = LIBRARY.createFragment(Types._AssociationClassCallExp, PivotTables.Types._FeatureCallExp);
		private static final @NonNull FlatFragment _AssociationClassCallExp__NamedElement = LIBRARY.createFragment(Types._AssociationClassCallExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _AssociationClassCallExp__NavigationCallExp = LIBRARY.createFragment(Types._AssociationClassCallExp, PivotTables.Types._NavigationCallExp);
		private static final @NonNull FlatFragment _AssociationClassCallExp__OCLExpression = LIBRARY.createFragment(Types._AssociationClassCallExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _AssociationClassCallExp__OclAny = LIBRARY.createFragment(Types._AssociationClassCallExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _AssociationClassCallExp__OclElement = LIBRARY.createFragment(Types._AssociationClassCallExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _AssociationClassCallExp__TypedElement = LIBRARY.createFragment(Types._AssociationClassCallExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _AssociativityKind__AssociativityKind = LIBRARY.createFragment(Types._AssociativityKind, PivotTables.Types._AssociativityKind);
		private static final @NonNull FlatFragment _AssociativityKind__OclAny = LIBRARY.createFragment(Types._AssociativityKind, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _AssociativityKind__OclElement = LIBRARY.createFragment(Types._AssociativityKind, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _AssociativityKind__OclEnumeration = LIBRARY.createFragment(Types._AssociativityKind, OCLstdlibTables.Types._OclEnumeration);
		private static final @NonNull FlatFragment _AssociativityKind__OclType = LIBRARY.createFragment(Types._AssociativityKind, OCLstdlibTables.Types._OclType);

		private static final @NonNull FlatFragment _BagType__AbstractClass = LIBRARY.createFragment(Types._BagType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _BagType__BagType = LIBRARY.createFragment(Types._BagType, PivotTables.Types._BagType);
		private static final @NonNull FlatFragment _BagType__Class = LIBRARY.createFragment(Types._BagType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _BagType__CollectionType = LIBRARY.createFragment(Types._BagType, PivotTables.Types._CollectionType);
		private static final @NonNull FlatFragment _BagType__DataType = LIBRARY.createFragment(Types._BagType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _BagType__Element = LIBRARY.createFragment(Types._BagType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _BagType__IterableType = LIBRARY.createFragment(Types._BagType, PivotTables.Types._IterableType);
		private static final @NonNull FlatFragment _BagType__NamedElement = LIBRARY.createFragment(Types._BagType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _BagType__Namespace = LIBRARY.createFragment(Types._BagType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _BagType__OclAny = LIBRARY.createFragment(Types._BagType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _BagType__OclElement = LIBRARY.createFragment(Types._BagType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _BagType__OclType = LIBRARY.createFragment(Types._BagType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _BagType__TemplateableElement = LIBRARY.createFragment(Types._BagType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _BagType__Type = LIBRARY.createFragment(Types._BagType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Behavior__AbstractClass = LIBRARY.createFragment(Types._Behavior, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _Behavior__Behavior = LIBRARY.createFragment(Types._Behavior, PivotTables.Types._Behavior);
		private static final @NonNull FlatFragment _Behavior__Class = LIBRARY.createFragment(Types._Behavior, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _Behavior__Element = LIBRARY.createFragment(Types._Behavior, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Behavior__NamedElement = LIBRARY.createFragment(Types._Behavior, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Behavior__Namespace = LIBRARY.createFragment(Types._Behavior, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Behavior__OclAny = LIBRARY.createFragment(Types._Behavior, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Behavior__OclElement = LIBRARY.createFragment(Types._Behavior, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Behavior__OclType = LIBRARY.createFragment(Types._Behavior, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _Behavior__TemplateableElement = LIBRARY.createFragment(Types._Behavior, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _Behavior__Type = LIBRARY.createFragment(Types._Behavior, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _BooleanLiteralExp__BooleanLiteralExp = LIBRARY.createFragment(Types._BooleanLiteralExp, PivotTables.Types._BooleanLiteralExp);
		private static final @NonNull FlatFragment _BooleanLiteralExp__Element = LIBRARY.createFragment(Types._BooleanLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _BooleanLiteralExp__LiteralExp = LIBRARY.createFragment(Types._BooleanLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _BooleanLiteralExp__NamedElement = LIBRARY.createFragment(Types._BooleanLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _BooleanLiteralExp__OCLExpression = LIBRARY.createFragment(Types._BooleanLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _BooleanLiteralExp__OclAny = LIBRARY.createFragment(Types._BooleanLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _BooleanLiteralExp__OclElement = LIBRARY.createFragment(Types._BooleanLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _BooleanLiteralExp__PrimitiveLiteralExp = LIBRARY.createFragment(Types._BooleanLiteralExp, PivotTables.Types._PrimitiveLiteralExp);
		private static final @NonNull FlatFragment _BooleanLiteralExp__TypedElement = LIBRARY.createFragment(Types._BooleanLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _BooleanType__AbstractClass = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _BooleanType__BooleanType = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._BooleanType);
		private static final @NonNull FlatFragment _BooleanType__Class = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _BooleanType__DataType = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _BooleanType__Element = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _BooleanType__NamedElement = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _BooleanType__Namespace = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _BooleanType__OclAny = LIBRARY.createFragment(Types._BooleanType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _BooleanType__OclElement = LIBRARY.createFragment(Types._BooleanType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _BooleanType__OclType = LIBRARY.createFragment(Types._BooleanType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _BooleanType__PrimitiveType = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._PrimitiveType);
		private static final @NonNull FlatFragment _BooleanType__TemplateableElement = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _BooleanType__Type = LIBRARY.createFragment(Types._BooleanType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _CallExp__CallExp = LIBRARY.createFragment(Types._CallExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _CallExp__Element = LIBRARY.createFragment(Types._CallExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CallExp__NamedElement = LIBRARY.createFragment(Types._CallExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CallExp__OCLExpression = LIBRARY.createFragment(Types._CallExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _CallExp__OclAny = LIBRARY.createFragment(Types._CallExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CallExp__OclElement = LIBRARY.createFragment(Types._CallExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _CallExp__TypedElement = LIBRARY.createFragment(Types._CallExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _CallOperationAction__CallOperationAction = LIBRARY.createFragment(Types._CallOperationAction, PivotTables.Types._CallOperationAction);
		private static final @NonNull FlatFragment _CallOperationAction__Element = LIBRARY.createFragment(Types._CallOperationAction, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CallOperationAction__NamedElement = LIBRARY.createFragment(Types._CallOperationAction, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CallOperationAction__OclAny = LIBRARY.createFragment(Types._CallOperationAction, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CallOperationAction__OclElement = LIBRARY.createFragment(Types._CallOperationAction, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _Class__AbstractClass = LIBRARY.createFragment(Types._Class, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _Class__Class = LIBRARY.createFragment(Types._Class, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _Class__Element = LIBRARY.createFragment(Types._Class, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Class__NamedElement = LIBRARY.createFragment(Types._Class, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Class__Namespace = LIBRARY.createFragment(Types._Class, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Class__OclAny = LIBRARY.createFragment(Types._Class, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Class__OclElement = LIBRARY.createFragment(Types._Class, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Class__OclType = LIBRARY.createFragment(Types._Class, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _Class__TemplateableElement = LIBRARY.createFragment(Types._Class, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _Class__Type = LIBRARY.createFragment(Types._Class, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _CollectionItem__CollectionItem = LIBRARY.createFragment(Types._CollectionItem, PivotTables.Types._CollectionItem);
		private static final @NonNull FlatFragment _CollectionItem__CollectionLiteralPart = LIBRARY.createFragment(Types._CollectionItem, PivotTables.Types._CollectionLiteralPart);
		private static final @NonNull FlatFragment _CollectionItem__Element = LIBRARY.createFragment(Types._CollectionItem, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CollectionItem__NamedElement = LIBRARY.createFragment(Types._CollectionItem, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CollectionItem__OclAny = LIBRARY.createFragment(Types._CollectionItem, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CollectionItem__OclElement = LIBRARY.createFragment(Types._CollectionItem, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _CollectionItem__TypedElement = LIBRARY.createFragment(Types._CollectionItem, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _CollectionKind__CollectionKind = LIBRARY.createFragment(Types._CollectionKind, PivotTables.Types._CollectionKind);
		private static final @NonNull FlatFragment _CollectionKind__OclAny = LIBRARY.createFragment(Types._CollectionKind, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CollectionKind__OclElement = LIBRARY.createFragment(Types._CollectionKind, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _CollectionKind__OclEnumeration = LIBRARY.createFragment(Types._CollectionKind, OCLstdlibTables.Types._OclEnumeration);
		private static final @NonNull FlatFragment _CollectionKind__OclType = LIBRARY.createFragment(Types._CollectionKind, OCLstdlibTables.Types._OclType);

		private static final @NonNull FlatFragment _CollectionLiteralExp__CollectionLiteralExp = LIBRARY.createFragment(Types._CollectionLiteralExp, PivotTables.Types._CollectionLiteralExp);
		private static final @NonNull FlatFragment _CollectionLiteralExp__Element = LIBRARY.createFragment(Types._CollectionLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CollectionLiteralExp__LiteralExp = LIBRARY.createFragment(Types._CollectionLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _CollectionLiteralExp__NamedElement = LIBRARY.createFragment(Types._CollectionLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CollectionLiteralExp__OCLExpression = LIBRARY.createFragment(Types._CollectionLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _CollectionLiteralExp__OclAny = LIBRARY.createFragment(Types._CollectionLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CollectionLiteralExp__OclElement = LIBRARY.createFragment(Types._CollectionLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _CollectionLiteralExp__TypedElement = LIBRARY.createFragment(Types._CollectionLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _CollectionLiteralPart__CollectionLiteralPart = LIBRARY.createFragment(Types._CollectionLiteralPart, PivotTables.Types._CollectionLiteralPart);
		private static final @NonNull FlatFragment _CollectionLiteralPart__Element = LIBRARY.createFragment(Types._CollectionLiteralPart, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CollectionLiteralPart__NamedElement = LIBRARY.createFragment(Types._CollectionLiteralPart, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CollectionLiteralPart__OclAny = LIBRARY.createFragment(Types._CollectionLiteralPart, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CollectionLiteralPart__OclElement = LIBRARY.createFragment(Types._CollectionLiteralPart, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _CollectionLiteralPart__TypedElement = LIBRARY.createFragment(Types._CollectionLiteralPart, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _CollectionRange__CollectionLiteralPart = LIBRARY.createFragment(Types._CollectionRange, PivotTables.Types._CollectionLiteralPart);
		private static final @NonNull FlatFragment _CollectionRange__CollectionRange = LIBRARY.createFragment(Types._CollectionRange, PivotTables.Types._CollectionRange);
		private static final @NonNull FlatFragment _CollectionRange__Element = LIBRARY.createFragment(Types._CollectionRange, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CollectionRange__NamedElement = LIBRARY.createFragment(Types._CollectionRange, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CollectionRange__OclAny = LIBRARY.createFragment(Types._CollectionRange, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CollectionRange__OclElement = LIBRARY.createFragment(Types._CollectionRange, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _CollectionRange__TypedElement = LIBRARY.createFragment(Types._CollectionRange, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _CollectionType__AbstractClass = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _CollectionType__Class = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _CollectionType__CollectionType = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._CollectionType);
		private static final @NonNull FlatFragment _CollectionType__DataType = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _CollectionType__Element = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CollectionType__IterableType = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._IterableType);
		private static final @NonNull FlatFragment _CollectionType__NamedElement = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CollectionType__Namespace = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _CollectionType__OclAny = LIBRARY.createFragment(Types._CollectionType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CollectionType__OclElement = LIBRARY.createFragment(Types._CollectionType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _CollectionType__OclType = LIBRARY.createFragment(Types._CollectionType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _CollectionType__TemplateableElement = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _CollectionType__Type = LIBRARY.createFragment(Types._CollectionType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Comment__Comment = LIBRARY.createFragment(Types._Comment, PivotTables.Types._Comment);
		private static final @NonNull FlatFragment _Comment__Element = LIBRARY.createFragment(Types._Comment, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Comment__OclAny = LIBRARY.createFragment(Types._Comment, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Comment__OclElement = LIBRARY.createFragment(Types._Comment, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _CompleteClass__CompleteClass = LIBRARY.createFragment(Types._CompleteClass, PivotTables.Types._CompleteClass);
		private static final @NonNull FlatFragment _CompleteClass__Element = LIBRARY.createFragment(Types._CompleteClass, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CompleteClass__NamedElement = LIBRARY.createFragment(Types._CompleteClass, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CompleteClass__OclAny = LIBRARY.createFragment(Types._CompleteClass, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CompleteClass__OclElement = LIBRARY.createFragment(Types._CompleteClass, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _CompleteEnvironment__CompleteEnvironment = LIBRARY.createFragment(Types._CompleteEnvironment, PivotTables.Types._CompleteEnvironment);
		private static final @NonNull FlatFragment _CompleteEnvironment__Element = LIBRARY.createFragment(Types._CompleteEnvironment, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CompleteEnvironment__OclAny = LIBRARY.createFragment(Types._CompleteEnvironment, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CompleteEnvironment__OclElement = LIBRARY.createFragment(Types._CompleteEnvironment, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _CompleteModel__CompleteModel = LIBRARY.createFragment(Types._CompleteModel, PivotTables.Types._CompleteModel);
		private static final @NonNull FlatFragment _CompleteModel__Element = LIBRARY.createFragment(Types._CompleteModel, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CompleteModel__NamedElement = LIBRARY.createFragment(Types._CompleteModel, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CompleteModel__OclAny = LIBRARY.createFragment(Types._CompleteModel, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CompleteModel__OclElement = LIBRARY.createFragment(Types._CompleteModel, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _CompletePackage__CompletePackage = LIBRARY.createFragment(Types._CompletePackage, PivotTables.Types._CompletePackage);
		private static final @NonNull FlatFragment _CompletePackage__Element = LIBRARY.createFragment(Types._CompletePackage, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _CompletePackage__NamedElement = LIBRARY.createFragment(Types._CompletePackage, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _CompletePackage__OclAny = LIBRARY.createFragment(Types._CompletePackage, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _CompletePackage__OclElement = LIBRARY.createFragment(Types._CompletePackage, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _ConnectionPointReference__ConnectionPointReference = LIBRARY.createFragment(Types._ConnectionPointReference, PivotTables.Types._ConnectionPointReference);
		private static final @NonNull FlatFragment _ConnectionPointReference__Element = LIBRARY.createFragment(Types._ConnectionPointReference, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ConnectionPointReference__NamedElement = LIBRARY.createFragment(Types._ConnectionPointReference, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ConnectionPointReference__OclAny = LIBRARY.createFragment(Types._ConnectionPointReference, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ConnectionPointReference__OclElement = LIBRARY.createFragment(Types._ConnectionPointReference, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ConnectionPointReference__Vertex = LIBRARY.createFragment(Types._ConnectionPointReference, PivotTables.Types._Vertex);

		private static final @NonNull FlatFragment _Constraint__Constraint = LIBRARY.createFragment(Types._Constraint, PivotTables.Types._Constraint);
		private static final @NonNull FlatFragment _Constraint__Element = LIBRARY.createFragment(Types._Constraint, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Constraint__NamedElement = LIBRARY.createFragment(Types._Constraint, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Constraint__OclAny = LIBRARY.createFragment(Types._Constraint, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Constraint__OclElement = LIBRARY.createFragment(Types._Constraint, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _DataType__AbstractClass = LIBRARY.createFragment(Types._DataType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _DataType__Class = LIBRARY.createFragment(Types._DataType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _DataType__DataType = LIBRARY.createFragment(Types._DataType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _DataType__Element = LIBRARY.createFragment(Types._DataType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _DataType__NamedElement = LIBRARY.createFragment(Types._DataType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _DataType__Namespace = LIBRARY.createFragment(Types._DataType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _DataType__OclAny = LIBRARY.createFragment(Types._DataType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _DataType__OclElement = LIBRARY.createFragment(Types._DataType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _DataType__OclType = LIBRARY.createFragment(Types._DataType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _DataType__TemplateableElement = LIBRARY.createFragment(Types._DataType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _DataType__Type = LIBRARY.createFragment(Types._DataType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Detail__Detail = LIBRARY.createFragment(Types._Detail, PivotTables.Types._Detail);
		private static final @NonNull FlatFragment _Detail__Element = LIBRARY.createFragment(Types._Detail, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Detail__NamedElement = LIBRARY.createFragment(Types._Detail, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Detail__OclAny = LIBRARY.createFragment(Types._Detail, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Detail__OclElement = LIBRARY.createFragment(Types._Detail, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _DynamicBehavior__AbstractClass = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _DynamicBehavior__Behavior = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._Behavior);
		private static final @NonNull FlatFragment _DynamicBehavior__Class = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _DynamicBehavior__DynamicBehavior = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._DynamicBehavior);
		private static final @NonNull FlatFragment _DynamicBehavior__DynamicElement = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._DynamicElement);
		private static final @NonNull FlatFragment _DynamicBehavior__DynamicType = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._DynamicType);
		private static final @NonNull FlatFragment _DynamicBehavior__Element = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _DynamicBehavior__NamedElement = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _DynamicBehavior__Namespace = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _DynamicBehavior__OclAny = LIBRARY.createFragment(Types._DynamicBehavior, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _DynamicBehavior__OclElement = LIBRARY.createFragment(Types._DynamicBehavior, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _DynamicBehavior__OclType = LIBRARY.createFragment(Types._DynamicBehavior, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _DynamicBehavior__TemplateableElement = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _DynamicBehavior__Type = LIBRARY.createFragment(Types._DynamicBehavior, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _DynamicElement__DynamicElement = LIBRARY.createFragment(Types._DynamicElement, PivotTables.Types._DynamicElement);
		private static final @NonNull FlatFragment _DynamicElement__Element = LIBRARY.createFragment(Types._DynamicElement, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _DynamicElement__OclAny = LIBRARY.createFragment(Types._DynamicElement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _DynamicElement__OclElement = LIBRARY.createFragment(Types._DynamicElement, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _DynamicProperty__DynamicProperty = LIBRARY.createFragment(Types._DynamicProperty, PivotTables.Types._DynamicProperty);
		private static final @NonNull FlatFragment _DynamicProperty__Element = LIBRARY.createFragment(Types._DynamicProperty, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _DynamicProperty__OclAny = LIBRARY.createFragment(Types._DynamicProperty, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _DynamicProperty__OclElement = LIBRARY.createFragment(Types._DynamicProperty, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _DynamicType__AbstractClass = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _DynamicType__Class = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _DynamicType__DynamicElement = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._DynamicElement);
		private static final @NonNull FlatFragment _DynamicType__DynamicType = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._DynamicType);
		private static final @NonNull FlatFragment _DynamicType__Element = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _DynamicType__NamedElement = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _DynamicType__Namespace = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _DynamicType__OclAny = LIBRARY.createFragment(Types._DynamicType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _DynamicType__OclElement = LIBRARY.createFragment(Types._DynamicType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _DynamicType__OclType = LIBRARY.createFragment(Types._DynamicType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _DynamicType__TemplateableElement = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _DynamicType__Type = LIBRARY.createFragment(Types._DynamicType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _DynamicValueSpecification__DynamicValueSpecification = LIBRARY.createFragment(Types._DynamicValueSpecification, PivotTables.Types._DynamicValueSpecification);
		private static final @NonNull FlatFragment _DynamicValueSpecification__Element = LIBRARY.createFragment(Types._DynamicValueSpecification, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _DynamicValueSpecification__NamedElement = LIBRARY.createFragment(Types._DynamicValueSpecification, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _DynamicValueSpecification__OclAny = LIBRARY.createFragment(Types._DynamicValueSpecification, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _DynamicValueSpecification__OclElement = LIBRARY.createFragment(Types._DynamicValueSpecification, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _DynamicValueSpecification__TypedElement = LIBRARY.createFragment(Types._DynamicValueSpecification, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _DynamicValueSpecification__ValueSpecification = LIBRARY.createFragment(Types._DynamicValueSpecification, PivotTables.Types._ValueSpecification);

		private static final @NonNull FlatFragment _EcoreObject__EcoreObject = LIBRARY.createFragment(Types._EcoreObject, PivotTables.Types._EcoreObject);
		private static final @NonNull FlatFragment _EcoreObject__OclAny = LIBRARY.createFragment(Types._EcoreObject, OCLstdlibTables.Types._OclAny);

		private static final @NonNull FlatFragment _Element__Element = LIBRARY.createFragment(Types._Element, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Element__OclAny = LIBRARY.createFragment(Types._Element, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Element__OclElement = LIBRARY.createFragment(Types._Element, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _ElementExtension__AbstractClass = LIBRARY.createFragment(Types._ElementExtension, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _ElementExtension__Class = LIBRARY.createFragment(Types._ElementExtension, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _ElementExtension__Element = LIBRARY.createFragment(Types._ElementExtension, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ElementExtension__ElementExtension = LIBRARY.createFragment(Types._ElementExtension, PivotTables.Types._ElementExtension);
		private static final @NonNull FlatFragment _ElementExtension__NamedElement = LIBRARY.createFragment(Types._ElementExtension, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ElementExtension__Namespace = LIBRARY.createFragment(Types._ElementExtension, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _ElementExtension__OclAny = LIBRARY.createFragment(Types._ElementExtension, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ElementExtension__OclElement = LIBRARY.createFragment(Types._ElementExtension, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ElementExtension__OclType = LIBRARY.createFragment(Types._ElementExtension, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _ElementExtension__TemplateableElement = LIBRARY.createFragment(Types._ElementExtension, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _ElementExtension__Type = LIBRARY.createFragment(Types._ElementExtension, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _ElementLiteralExp__Element = LIBRARY.createFragment(Types._ElementLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ElementLiteralExp__ElementLiteralExp = LIBRARY.createFragment(Types._ElementLiteralExp, PivotTables.Types._ElementLiteralExp);
		private static final @NonNull FlatFragment _ElementLiteralExp__LiteralExp = LIBRARY.createFragment(Types._ElementLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _ElementLiteralExp__NamedElement = LIBRARY.createFragment(Types._ElementLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ElementLiteralExp__OCLExpression = LIBRARY.createFragment(Types._ElementLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _ElementLiteralExp__OclAny = LIBRARY.createFragment(Types._ElementLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ElementLiteralExp__OclElement = LIBRARY.createFragment(Types._ElementLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ElementLiteralExp__TypedElement = LIBRARY.createFragment(Types._ElementLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _EnumLiteralExp__Element = LIBRARY.createFragment(Types._EnumLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _EnumLiteralExp__EnumLiteralExp = LIBRARY.createFragment(Types._EnumLiteralExp, PivotTables.Types._EnumLiteralExp);
		private static final @NonNull FlatFragment _EnumLiteralExp__LiteralExp = LIBRARY.createFragment(Types._EnumLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _EnumLiteralExp__NamedElement = LIBRARY.createFragment(Types._EnumLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _EnumLiteralExp__OCLExpression = LIBRARY.createFragment(Types._EnumLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _EnumLiteralExp__OclAny = LIBRARY.createFragment(Types._EnumLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _EnumLiteralExp__OclElement = LIBRARY.createFragment(Types._EnumLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _EnumLiteralExp__TypedElement = LIBRARY.createFragment(Types._EnumLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _Enumeration__AbstractClass = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _Enumeration__Class = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _Enumeration__DataType = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _Enumeration__Element = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Enumeration__Enumeration = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._Enumeration);
		private static final @NonNull FlatFragment _Enumeration__NamedElement = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Enumeration__Namespace = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Enumeration__OclAny = LIBRARY.createFragment(Types._Enumeration, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Enumeration__OclElement = LIBRARY.createFragment(Types._Enumeration, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Enumeration__OclType = LIBRARY.createFragment(Types._Enumeration, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _Enumeration__TemplateableElement = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _Enumeration__Type = LIBRARY.createFragment(Types._Enumeration, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _EnumerationLiteral__Element = LIBRARY.createFragment(Types._EnumerationLiteral, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _EnumerationLiteral__EnumerationLiteral = LIBRARY.createFragment(Types._EnumerationLiteral, PivotTables.Types._EnumerationLiteral);
		private static final @NonNull FlatFragment _EnumerationLiteral__InstanceSpecification = LIBRARY.createFragment(Types._EnumerationLiteral, PivotTables.Types._InstanceSpecification);
		private static final @NonNull FlatFragment _EnumerationLiteral__NamedElement = LIBRARY.createFragment(Types._EnumerationLiteral, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _EnumerationLiteral__OclAny = LIBRARY.createFragment(Types._EnumerationLiteral, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _EnumerationLiteral__OclElement = LIBRARY.createFragment(Types._EnumerationLiteral, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _ExpressionInOCL__Element = LIBRARY.createFragment(Types._ExpressionInOCL, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ExpressionInOCL__ExpressionInOCL = LIBRARY.createFragment(Types._ExpressionInOCL, PivotTables.Types._ExpressionInOCL);
		private static final @NonNull FlatFragment _ExpressionInOCL__LanguageExpression = LIBRARY.createFragment(Types._ExpressionInOCL, PivotTables.Types._LanguageExpression);
		private static final @NonNull FlatFragment _ExpressionInOCL__NamedElement = LIBRARY.createFragment(Types._ExpressionInOCL, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ExpressionInOCL__OclAny = LIBRARY.createFragment(Types._ExpressionInOCL, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ExpressionInOCL__OclElement = LIBRARY.createFragment(Types._ExpressionInOCL, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ExpressionInOCL__TypedElement = LIBRARY.createFragment(Types._ExpressionInOCL, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _ExpressionInOCL__ValueSpecification = LIBRARY.createFragment(Types._ExpressionInOCL, PivotTables.Types._ValueSpecification);

		private static final @NonNull FlatFragment _Feature__Element = LIBRARY.createFragment(Types._Feature, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Feature__Feature = LIBRARY.createFragment(Types._Feature, PivotTables.Types._Feature);
		private static final @NonNull FlatFragment _Feature__NamedElement = LIBRARY.createFragment(Types._Feature, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Feature__OclAny = LIBRARY.createFragment(Types._Feature, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Feature__OclElement = LIBRARY.createFragment(Types._Feature, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Feature__TypedElement = LIBRARY.createFragment(Types._Feature, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _FeatureCallExp__CallExp = LIBRARY.createFragment(Types._FeatureCallExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _FeatureCallExp__Element = LIBRARY.createFragment(Types._FeatureCallExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _FeatureCallExp__FeatureCallExp = LIBRARY.createFragment(Types._FeatureCallExp, PivotTables.Types._FeatureCallExp);
		private static final @NonNull FlatFragment _FeatureCallExp__NamedElement = LIBRARY.createFragment(Types._FeatureCallExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _FeatureCallExp__OCLExpression = LIBRARY.createFragment(Types._FeatureCallExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _FeatureCallExp__OclAny = LIBRARY.createFragment(Types._FeatureCallExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _FeatureCallExp__OclElement = LIBRARY.createFragment(Types._FeatureCallExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _FeatureCallExp__TypedElement = LIBRARY.createFragment(Types._FeatureCallExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _FinalState__Element = LIBRARY.createFragment(Types._FinalState, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _FinalState__FinalState = LIBRARY.createFragment(Types._FinalState, PivotTables.Types._FinalState);
		private static final @NonNull FlatFragment _FinalState__NamedElement = LIBRARY.createFragment(Types._FinalState, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _FinalState__Namespace = LIBRARY.createFragment(Types._FinalState, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _FinalState__OclAny = LIBRARY.createFragment(Types._FinalState, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _FinalState__OclElement = LIBRARY.createFragment(Types._FinalState, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _FinalState__OclState = LIBRARY.createFragment(Types._FinalState, OCLstdlibTables.Types._OclState);
		private static final @NonNull FlatFragment _FinalState__State = LIBRARY.createFragment(Types._FinalState, PivotTables.Types._State);
		private static final @NonNull FlatFragment _FinalState__Vertex = LIBRARY.createFragment(Types._FinalState, PivotTables.Types._Vertex);

		private static final @NonNull FlatFragment _IfExp__Element = LIBRARY.createFragment(Types._IfExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _IfExp__IfExp = LIBRARY.createFragment(Types._IfExp, PivotTables.Types._IfExp);
		private static final @NonNull FlatFragment _IfExp__NamedElement = LIBRARY.createFragment(Types._IfExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _IfExp__OCLExpression = LIBRARY.createFragment(Types._IfExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _IfExp__OclAny = LIBRARY.createFragment(Types._IfExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _IfExp__OclElement = LIBRARY.createFragment(Types._IfExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _IfExp__TypedElement = LIBRARY.createFragment(Types._IfExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _Import__Element = LIBRARY.createFragment(Types._Import, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Import__Import = LIBRARY.createFragment(Types._Import, PivotTables.Types._Import);
		private static final @NonNull FlatFragment _Import__NamedElement = LIBRARY.createFragment(Types._Import, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Import__OclAny = LIBRARY.createFragment(Types._Import, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Import__OclElement = LIBRARY.createFragment(Types._Import, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _InstanceSpecification__Element = LIBRARY.createFragment(Types._InstanceSpecification, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _InstanceSpecification__InstanceSpecification = LIBRARY.createFragment(Types._InstanceSpecification, PivotTables.Types._InstanceSpecification);
		private static final @NonNull FlatFragment _InstanceSpecification__NamedElement = LIBRARY.createFragment(Types._InstanceSpecification, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _InstanceSpecification__OclAny = LIBRARY.createFragment(Types._InstanceSpecification, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _InstanceSpecification__OclElement = LIBRARY.createFragment(Types._InstanceSpecification, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _IntegerLiteralExp__Element = LIBRARY.createFragment(Types._IntegerLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _IntegerLiteralExp__IntegerLiteralExp = LIBRARY.createFragment(Types._IntegerLiteralExp, PivotTables.Types._IntegerLiteralExp);
		private static final @NonNull FlatFragment _IntegerLiteralExp__LiteralExp = LIBRARY.createFragment(Types._IntegerLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _IntegerLiteralExp__NamedElement = LIBRARY.createFragment(Types._IntegerLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _IntegerLiteralExp__NumericLiteralExp = LIBRARY.createFragment(Types._IntegerLiteralExp, PivotTables.Types._NumericLiteralExp);
		private static final @NonNull FlatFragment _IntegerLiteralExp__OCLExpression = LIBRARY.createFragment(Types._IntegerLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _IntegerLiteralExp__OclAny = LIBRARY.createFragment(Types._IntegerLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _IntegerLiteralExp__OclElement = LIBRARY.createFragment(Types._IntegerLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _IntegerLiteralExp__PrimitiveLiteralExp = LIBRARY.createFragment(Types._IntegerLiteralExp, PivotTables.Types._PrimitiveLiteralExp);
		private static final @NonNull FlatFragment _IntegerLiteralExp__TypedElement = LIBRARY.createFragment(Types._IntegerLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _InvalidLiteralExp__Element = LIBRARY.createFragment(Types._InvalidLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _InvalidLiteralExp__InvalidLiteralExp = LIBRARY.createFragment(Types._InvalidLiteralExp, PivotTables.Types._InvalidLiteralExp);
		private static final @NonNull FlatFragment _InvalidLiteralExp__LiteralExp = LIBRARY.createFragment(Types._InvalidLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _InvalidLiteralExp__NamedElement = LIBRARY.createFragment(Types._InvalidLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _InvalidLiteralExp__OCLExpression = LIBRARY.createFragment(Types._InvalidLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _InvalidLiteralExp__OclAny = LIBRARY.createFragment(Types._InvalidLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _InvalidLiteralExp__OclElement = LIBRARY.createFragment(Types._InvalidLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _InvalidLiteralExp__TypedElement = LIBRARY.createFragment(Types._InvalidLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _InvalidType__AbstractClass = LIBRARY.createFragment(Types._InvalidType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _InvalidType__Class = LIBRARY.createFragment(Types._InvalidType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _InvalidType__Element = LIBRARY.createFragment(Types._InvalidType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _InvalidType__InvalidType = LIBRARY.createFragment(Types._InvalidType, PivotTables.Types._InvalidType);
		private static final @NonNull FlatFragment _InvalidType__NamedElement = LIBRARY.createFragment(Types._InvalidType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _InvalidType__Namespace = LIBRARY.createFragment(Types._InvalidType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _InvalidType__OclAny = LIBRARY.createFragment(Types._InvalidType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _InvalidType__OclElement = LIBRARY.createFragment(Types._InvalidType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _InvalidType__OclType = LIBRARY.createFragment(Types._InvalidType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _InvalidType__TemplateableElement = LIBRARY.createFragment(Types._InvalidType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _InvalidType__Type = LIBRARY.createFragment(Types._InvalidType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _IterableType__AbstractClass = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _IterableType__Class = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _IterableType__DataType = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _IterableType__Element = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _IterableType__IterableType = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._IterableType);
		private static final @NonNull FlatFragment _IterableType__NamedElement = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _IterableType__Namespace = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _IterableType__OclAny = LIBRARY.createFragment(Types._IterableType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _IterableType__OclElement = LIBRARY.createFragment(Types._IterableType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _IterableType__OclType = LIBRARY.createFragment(Types._IterableType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _IterableType__TemplateableElement = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _IterableType__Type = LIBRARY.createFragment(Types._IterableType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _IterateExp__CallExp = LIBRARY.createFragment(Types._IterateExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _IterateExp__Element = LIBRARY.createFragment(Types._IterateExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _IterateExp__IterateExp = LIBRARY.createFragment(Types._IterateExp, PivotTables.Types._IterateExp);
		private static final @NonNull FlatFragment _IterateExp__LoopExp = LIBRARY.createFragment(Types._IterateExp, PivotTables.Types._LoopExp);
		private static final @NonNull FlatFragment _IterateExp__NamedElement = LIBRARY.createFragment(Types._IterateExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _IterateExp__OCLExpression = LIBRARY.createFragment(Types._IterateExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _IterateExp__OclAny = LIBRARY.createFragment(Types._IterateExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _IterateExp__OclElement = LIBRARY.createFragment(Types._IterateExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _IterateExp__ReferringElement = LIBRARY.createFragment(Types._IterateExp, PivotTables.Types._ReferringElement);
		private static final @NonNull FlatFragment _IterateExp__TypedElement = LIBRARY.createFragment(Types._IterateExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _Iteration__Element = LIBRARY.createFragment(Types._Iteration, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Iteration__Feature = LIBRARY.createFragment(Types._Iteration, PivotTables.Types._Feature);
		private static final @NonNull FlatFragment _Iteration__Iteration = LIBRARY.createFragment(Types._Iteration, PivotTables.Types._Iteration);
		private static final @NonNull FlatFragment _Iteration__NamedElement = LIBRARY.createFragment(Types._Iteration, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Iteration__Namespace = LIBRARY.createFragment(Types._Iteration, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Iteration__OclAny = LIBRARY.createFragment(Types._Iteration, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Iteration__OclElement = LIBRARY.createFragment(Types._Iteration, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Iteration__Operation = LIBRARY.createFragment(Types._Iteration, PivotTables.Types._Operation);
		private static final @NonNull FlatFragment _Iteration__TemplateableElement = LIBRARY.createFragment(Types._Iteration, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _Iteration__TypedElement = LIBRARY.createFragment(Types._Iteration, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _IteratorExp__CallExp = LIBRARY.createFragment(Types._IteratorExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _IteratorExp__Element = LIBRARY.createFragment(Types._IteratorExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _IteratorExp__IteratorExp = LIBRARY.createFragment(Types._IteratorExp, PivotTables.Types._IteratorExp);
		private static final @NonNull FlatFragment _IteratorExp__LoopExp = LIBRARY.createFragment(Types._IteratorExp, PivotTables.Types._LoopExp);
		private static final @NonNull FlatFragment _IteratorExp__NamedElement = LIBRARY.createFragment(Types._IteratorExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _IteratorExp__OCLExpression = LIBRARY.createFragment(Types._IteratorExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _IteratorExp__OclAny = LIBRARY.createFragment(Types._IteratorExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _IteratorExp__OclElement = LIBRARY.createFragment(Types._IteratorExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _IteratorExp__ReferringElement = LIBRARY.createFragment(Types._IteratorExp, PivotTables.Types._ReferringElement);
		private static final @NonNull FlatFragment _IteratorExp__TypedElement = LIBRARY.createFragment(Types._IteratorExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _IteratorVariable__Element = LIBRARY.createFragment(Types._IteratorVariable, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _IteratorVariable__IteratorVariable = LIBRARY.createFragment(Types._IteratorVariable, PivotTables.Types._IteratorVariable);
		private static final @NonNull FlatFragment _IteratorVariable__NamedElement = LIBRARY.createFragment(Types._IteratorVariable, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _IteratorVariable__OclAny = LIBRARY.createFragment(Types._IteratorVariable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _IteratorVariable__OclElement = LIBRARY.createFragment(Types._IteratorVariable, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _IteratorVariable__TypedElement = LIBRARY.createFragment(Types._IteratorVariable, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _IteratorVariable__Variable = LIBRARY.createFragment(Types._IteratorVariable, PivotTables.Types._Variable);
		private static final @NonNull FlatFragment _IteratorVariable__VariableDeclaration = LIBRARY.createFragment(Types._IteratorVariable, PivotTables.Types._VariableDeclaration);

		private static final @NonNull FlatFragment _LambdaType__AbstractClass = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _LambdaType__Class = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _LambdaType__DataType = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _LambdaType__Element = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _LambdaType__LambdaType = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._LambdaType);
		private static final @NonNull FlatFragment _LambdaType__NamedElement = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _LambdaType__Namespace = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _LambdaType__OclAny = LIBRARY.createFragment(Types._LambdaType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _LambdaType__OclElement = LIBRARY.createFragment(Types._LambdaType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _LambdaType__OclType = LIBRARY.createFragment(Types._LambdaType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _LambdaType__TemplateableElement = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _LambdaType__Type = LIBRARY.createFragment(Types._LambdaType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _LanguageExpression__Element = LIBRARY.createFragment(Types._LanguageExpression, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _LanguageExpression__LanguageExpression = LIBRARY.createFragment(Types._LanguageExpression, PivotTables.Types._LanguageExpression);
		private static final @NonNull FlatFragment _LanguageExpression__NamedElement = LIBRARY.createFragment(Types._LanguageExpression, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _LanguageExpression__OclAny = LIBRARY.createFragment(Types._LanguageExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _LanguageExpression__OclElement = LIBRARY.createFragment(Types._LanguageExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _LanguageExpression__TypedElement = LIBRARY.createFragment(Types._LanguageExpression, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _LanguageExpression__ValueSpecification = LIBRARY.createFragment(Types._LanguageExpression, PivotTables.Types._ValueSpecification);

		private static final @NonNull FlatFragment _LetExp__Element = LIBRARY.createFragment(Types._LetExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _LetExp__LetExp = LIBRARY.createFragment(Types._LetExp, PivotTables.Types._LetExp);
		private static final @NonNull FlatFragment _LetExp__NamedElement = LIBRARY.createFragment(Types._LetExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _LetExp__OCLExpression = LIBRARY.createFragment(Types._LetExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _LetExp__OclAny = LIBRARY.createFragment(Types._LetExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _LetExp__OclElement = LIBRARY.createFragment(Types._LetExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _LetExp__TypedElement = LIBRARY.createFragment(Types._LetExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _LetVariable__Element = LIBRARY.createFragment(Types._LetVariable, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _LetVariable__LetVariable = LIBRARY.createFragment(Types._LetVariable, PivotTables.Types._LetVariable);
		private static final @NonNull FlatFragment _LetVariable__NamedElement = LIBRARY.createFragment(Types._LetVariable, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _LetVariable__OclAny = LIBRARY.createFragment(Types._LetVariable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _LetVariable__OclElement = LIBRARY.createFragment(Types._LetVariable, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _LetVariable__TypedElement = LIBRARY.createFragment(Types._LetVariable, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _LetVariable__Variable = LIBRARY.createFragment(Types._LetVariable, PivotTables.Types._Variable);
		private static final @NonNull FlatFragment _LetVariable__VariableDeclaration = LIBRARY.createFragment(Types._LetVariable, PivotTables.Types._VariableDeclaration);

		private static final @NonNull FlatFragment _Library__Element = LIBRARY.createFragment(Types._Library, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Library__Library = LIBRARY.createFragment(Types._Library, PivotTables.Types._Library);
		private static final @NonNull FlatFragment _Library__NamedElement = LIBRARY.createFragment(Types._Library, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Library__Namespace = LIBRARY.createFragment(Types._Library, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Library__OclAny = LIBRARY.createFragment(Types._Library, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Library__OclElement = LIBRARY.createFragment(Types._Library, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Library__Package = LIBRARY.createFragment(Types._Library, PivotTables.Types._Package);

		private static final @NonNull FlatFragment _LibraryFeature__LibraryFeature = LIBRARY.createFragment(Types._LibraryFeature, PivotTables.Types._LibraryFeature);
		private static final @NonNull FlatFragment _LibraryFeature__OclAny = LIBRARY.createFragment(Types._LibraryFeature, OCLstdlibTables.Types._OclAny);

		private static final @NonNull FlatFragment _LiteralExp__Element = LIBRARY.createFragment(Types._LiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _LiteralExp__LiteralExp = LIBRARY.createFragment(Types._LiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _LiteralExp__NamedElement = LIBRARY.createFragment(Types._LiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _LiteralExp__OCLExpression = LIBRARY.createFragment(Types._LiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _LiteralExp__OclAny = LIBRARY.createFragment(Types._LiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _LiteralExp__OclElement = LIBRARY.createFragment(Types._LiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _LiteralExp__TypedElement = LIBRARY.createFragment(Types._LiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _LoopExp__CallExp = LIBRARY.createFragment(Types._LoopExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _LoopExp__Element = LIBRARY.createFragment(Types._LoopExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _LoopExp__LoopExp = LIBRARY.createFragment(Types._LoopExp, PivotTables.Types._LoopExp);
		private static final @NonNull FlatFragment _LoopExp__NamedElement = LIBRARY.createFragment(Types._LoopExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _LoopExp__OCLExpression = LIBRARY.createFragment(Types._LoopExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _LoopExp__OclAny = LIBRARY.createFragment(Types._LoopExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _LoopExp__OclElement = LIBRARY.createFragment(Types._LoopExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _LoopExp__TypedElement = LIBRARY.createFragment(Types._LoopExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _MapLiteralExp__Element = LIBRARY.createFragment(Types._MapLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _MapLiteralExp__LiteralExp = LIBRARY.createFragment(Types._MapLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _MapLiteralExp__MapLiteralExp = LIBRARY.createFragment(Types._MapLiteralExp, PivotTables.Types._MapLiteralExp);
		private static final @NonNull FlatFragment _MapLiteralExp__NamedElement = LIBRARY.createFragment(Types._MapLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _MapLiteralExp__OCLExpression = LIBRARY.createFragment(Types._MapLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _MapLiteralExp__OclAny = LIBRARY.createFragment(Types._MapLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _MapLiteralExp__OclElement = LIBRARY.createFragment(Types._MapLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _MapLiteralExp__TypedElement = LIBRARY.createFragment(Types._MapLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _MapLiteralPart__Element = LIBRARY.createFragment(Types._MapLiteralPart, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _MapLiteralPart__MapLiteralPart = LIBRARY.createFragment(Types._MapLiteralPart, PivotTables.Types._MapLiteralPart);
		private static final @NonNull FlatFragment _MapLiteralPart__OclAny = LIBRARY.createFragment(Types._MapLiteralPart, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _MapLiteralPart__OclElement = LIBRARY.createFragment(Types._MapLiteralPart, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _MapType__AbstractClass = LIBRARY.createFragment(Types._MapType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _MapType__Class = LIBRARY.createFragment(Types._MapType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _MapType__DataType = LIBRARY.createFragment(Types._MapType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _MapType__Element = LIBRARY.createFragment(Types._MapType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _MapType__IterableType = LIBRARY.createFragment(Types._MapType, PivotTables.Types._IterableType);
		private static final @NonNull FlatFragment _MapType__MapType = LIBRARY.createFragment(Types._MapType, PivotTables.Types._MapType);
		private static final @NonNull FlatFragment _MapType__NamedElement = LIBRARY.createFragment(Types._MapType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _MapType__Namespace = LIBRARY.createFragment(Types._MapType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _MapType__OclAny = LIBRARY.createFragment(Types._MapType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _MapType__OclElement = LIBRARY.createFragment(Types._MapType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _MapType__OclType = LIBRARY.createFragment(Types._MapType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _MapType__TemplateableElement = LIBRARY.createFragment(Types._MapType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _MapType__Type = LIBRARY.createFragment(Types._MapType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _MessageExp__Element = LIBRARY.createFragment(Types._MessageExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _MessageExp__MessageExp = LIBRARY.createFragment(Types._MessageExp, PivotTables.Types._MessageExp);
		private static final @NonNull FlatFragment _MessageExp__NamedElement = LIBRARY.createFragment(Types._MessageExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _MessageExp__OCLExpression = LIBRARY.createFragment(Types._MessageExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _MessageExp__OclAny = LIBRARY.createFragment(Types._MessageExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _MessageExp__OclElement = LIBRARY.createFragment(Types._MessageExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _MessageExp__TypedElement = LIBRARY.createFragment(Types._MessageExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _MessageType__AbstractClass = LIBRARY.createFragment(Types._MessageType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _MessageType__Class = LIBRARY.createFragment(Types._MessageType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _MessageType__Element = LIBRARY.createFragment(Types._MessageType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _MessageType__MessageType = LIBRARY.createFragment(Types._MessageType, PivotTables.Types._MessageType);
		private static final @NonNull FlatFragment _MessageType__NamedElement = LIBRARY.createFragment(Types._MessageType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _MessageType__Namespace = LIBRARY.createFragment(Types._MessageType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _MessageType__OclAny = LIBRARY.createFragment(Types._MessageType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _MessageType__OclElement = LIBRARY.createFragment(Types._MessageType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _MessageType__OclType = LIBRARY.createFragment(Types._MessageType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _MessageType__TemplateableElement = LIBRARY.createFragment(Types._MessageType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _MessageType__Type = LIBRARY.createFragment(Types._MessageType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Model__Element = LIBRARY.createFragment(Types._Model, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Model__Model = LIBRARY.createFragment(Types._Model, PivotTables.Types._Model);
		private static final @NonNull FlatFragment _Model__NamedElement = LIBRARY.createFragment(Types._Model, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Model__Namespace = LIBRARY.createFragment(Types._Model, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Model__OclAny = LIBRARY.createFragment(Types._Model, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Model__OclElement = LIBRARY.createFragment(Types._Model, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _MorePivotable__MorePivotable = LIBRARY.createFragment(Types._MorePivotable, PivotTables.Types._MorePivotable);
		private static final @NonNull FlatFragment _MorePivotable__OclAny = LIBRARY.createFragment(Types._MorePivotable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _MorePivotable__OclElement = LIBRARY.createFragment(Types._MorePivotable, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _Nameable__Nameable = LIBRARY.createFragment(Types._Nameable, PivotTables.Types._Nameable);
		private static final @NonNull FlatFragment _Nameable__OclAny = LIBRARY.createFragment(Types._Nameable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Nameable__OclElement = LIBRARY.createFragment(Types._Nameable, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _NamedElement__Element = LIBRARY.createFragment(Types._NamedElement, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _NamedElement__NamedElement = LIBRARY.createFragment(Types._NamedElement, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _NamedElement__OclAny = LIBRARY.createFragment(Types._NamedElement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _NamedElement__OclElement = LIBRARY.createFragment(Types._NamedElement, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _Namespace__Element = LIBRARY.createFragment(Types._Namespace, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Namespace__NamedElement = LIBRARY.createFragment(Types._Namespace, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Namespace__Namespace = LIBRARY.createFragment(Types._Namespace, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Namespace__OclAny = LIBRARY.createFragment(Types._Namespace, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Namespace__OclElement = LIBRARY.createFragment(Types._Namespace, OCLstdlibTables.Types._OclElement);

		private static final @NonNull FlatFragment _NavigationCallExp__CallExp = LIBRARY.createFragment(Types._NavigationCallExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _NavigationCallExp__Element = LIBRARY.createFragment(Types._NavigationCallExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _NavigationCallExp__FeatureCallExp = LIBRARY.createFragment(Types._NavigationCallExp, PivotTables.Types._FeatureCallExp);
		private static final @NonNull FlatFragment _NavigationCallExp__NamedElement = LIBRARY.createFragment(Types._NavigationCallExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _NavigationCallExp__NavigationCallExp = LIBRARY.createFragment(Types._NavigationCallExp, PivotTables.Types._NavigationCallExp);
		private static final @NonNull FlatFragment _NavigationCallExp__OCLExpression = LIBRARY.createFragment(Types._NavigationCallExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _NavigationCallExp__OclAny = LIBRARY.createFragment(Types._NavigationCallExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _NavigationCallExp__OclElement = LIBRARY.createFragment(Types._NavigationCallExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _NavigationCallExp__TypedElement = LIBRARY.createFragment(Types._NavigationCallExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _NullLiteralExp__Element = LIBRARY.createFragment(Types._NullLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _NullLiteralExp__LiteralExp = LIBRARY.createFragment(Types._NullLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _NullLiteralExp__NamedElement = LIBRARY.createFragment(Types._NullLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _NullLiteralExp__NullLiteralExp = LIBRARY.createFragment(Types._NullLiteralExp, PivotTables.Types._NullLiteralExp);
		private static final @NonNull FlatFragment _NullLiteralExp__OCLExpression = LIBRARY.createFragment(Types._NullLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _NullLiteralExp__OclAny = LIBRARY.createFragment(Types._NullLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _NullLiteralExp__OclElement = LIBRARY.createFragment(Types._NullLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _NullLiteralExp__PrimitiveLiteralExp = LIBRARY.createFragment(Types._NullLiteralExp, PivotTables.Types._PrimitiveLiteralExp);
		private static final @NonNull FlatFragment _NullLiteralExp__TypedElement = LIBRARY.createFragment(Types._NullLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _NumericLiteralExp__Element = LIBRARY.createFragment(Types._NumericLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _NumericLiteralExp__LiteralExp = LIBRARY.createFragment(Types._NumericLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _NumericLiteralExp__NamedElement = LIBRARY.createFragment(Types._NumericLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _NumericLiteralExp__NumericLiteralExp = LIBRARY.createFragment(Types._NumericLiteralExp, PivotTables.Types._NumericLiteralExp);
		private static final @NonNull FlatFragment _NumericLiteralExp__OCLExpression = LIBRARY.createFragment(Types._NumericLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _NumericLiteralExp__OclAny = LIBRARY.createFragment(Types._NumericLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _NumericLiteralExp__OclElement = LIBRARY.createFragment(Types._NumericLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _NumericLiteralExp__PrimitiveLiteralExp = LIBRARY.createFragment(Types._NumericLiteralExp, PivotTables.Types._PrimitiveLiteralExp);
		private static final @NonNull FlatFragment _NumericLiteralExp__TypedElement = LIBRARY.createFragment(Types._NumericLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _OCLExpression__Element = LIBRARY.createFragment(Types._OCLExpression, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _OCLExpression__NamedElement = LIBRARY.createFragment(Types._OCLExpression, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _OCLExpression__OCLExpression = LIBRARY.createFragment(Types._OCLExpression, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _OCLExpression__OclAny = LIBRARY.createFragment(Types._OCLExpression, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _OCLExpression__OclElement = LIBRARY.createFragment(Types._OCLExpression, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _OCLExpression__TypedElement = LIBRARY.createFragment(Types._OCLExpression, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _Object__Object = LIBRARY.createFragment(Types._Object, PivotTables.Types._Object);
		private static final @NonNull FlatFragment _Object__OclAny = LIBRARY.createFragment(Types._Object, OCLstdlibTables.Types._OclAny);

		private static final @NonNull FlatFragment _Operation__Element = LIBRARY.createFragment(Types._Operation, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Operation__Feature = LIBRARY.createFragment(Types._Operation, PivotTables.Types._Feature);
		private static final @NonNull FlatFragment _Operation__NamedElement = LIBRARY.createFragment(Types._Operation, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Operation__Namespace = LIBRARY.createFragment(Types._Operation, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Operation__OclAny = LIBRARY.createFragment(Types._Operation, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Operation__OclElement = LIBRARY.createFragment(Types._Operation, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Operation__Operation = LIBRARY.createFragment(Types._Operation, PivotTables.Types._Operation);
		private static final @NonNull FlatFragment _Operation__TemplateableElement = LIBRARY.createFragment(Types._Operation, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _Operation__TypedElement = LIBRARY.createFragment(Types._Operation, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _OperationCallExp__CallExp = LIBRARY.createFragment(Types._OperationCallExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _OperationCallExp__Element = LIBRARY.createFragment(Types._OperationCallExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _OperationCallExp__FeatureCallExp = LIBRARY.createFragment(Types._OperationCallExp, PivotTables.Types._FeatureCallExp);
		private static final @NonNull FlatFragment _OperationCallExp__NamedElement = LIBRARY.createFragment(Types._OperationCallExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _OperationCallExp__OCLExpression = LIBRARY.createFragment(Types._OperationCallExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _OperationCallExp__OclAny = LIBRARY.createFragment(Types._OperationCallExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _OperationCallExp__OclElement = LIBRARY.createFragment(Types._OperationCallExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _OperationCallExp__OperationCallExp = LIBRARY.createFragment(Types._OperationCallExp, PivotTables.Types._OperationCallExp);
		private static final @NonNull FlatFragment _OperationCallExp__ReferringElement = LIBRARY.createFragment(Types._OperationCallExp, PivotTables.Types._ReferringElement);
		private static final @NonNull FlatFragment _OperationCallExp__TypedElement = LIBRARY.createFragment(Types._OperationCallExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _OppositePropertyCallExp__CallExp = LIBRARY.createFragment(Types._OppositePropertyCallExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__Element = LIBRARY.createFragment(Types._OppositePropertyCallExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__FeatureCallExp = LIBRARY.createFragment(Types._OppositePropertyCallExp, PivotTables.Types._FeatureCallExp);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__NamedElement = LIBRARY.createFragment(Types._OppositePropertyCallExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__NavigationCallExp = LIBRARY.createFragment(Types._OppositePropertyCallExp, PivotTables.Types._NavigationCallExp);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__OCLExpression = LIBRARY.createFragment(Types._OppositePropertyCallExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__OclAny = LIBRARY.createFragment(Types._OppositePropertyCallExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__OclElement = LIBRARY.createFragment(Types._OppositePropertyCallExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__OppositePropertyCallExp = LIBRARY.createFragment(Types._OppositePropertyCallExp, PivotTables.Types._OppositePropertyCallExp);
		private static final @NonNull FlatFragment _OppositePropertyCallExp__TypedElement = LIBRARY.createFragment(Types._OppositePropertyCallExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _OrderedSetType__AbstractClass = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _OrderedSetType__Class = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _OrderedSetType__CollectionType = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._CollectionType);
		private static final @NonNull FlatFragment _OrderedSetType__DataType = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _OrderedSetType__Element = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _OrderedSetType__IterableType = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._IterableType);
		private static final @NonNull FlatFragment _OrderedSetType__NamedElement = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _OrderedSetType__Namespace = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _OrderedSetType__OclAny = LIBRARY.createFragment(Types._OrderedSetType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _OrderedSetType__OclElement = LIBRARY.createFragment(Types._OrderedSetType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _OrderedSetType__OclType = LIBRARY.createFragment(Types._OrderedSetType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _OrderedSetType__OrderedSetType = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._OrderedSetType);
		private static final @NonNull FlatFragment _OrderedSetType__TemplateableElement = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _OrderedSetType__Type = LIBRARY.createFragment(Types._OrderedSetType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _OrphanCompletePackage__CompletePackage = LIBRARY.createFragment(Types._OrphanCompletePackage, PivotTables.Types._CompletePackage);
		private static final @NonNull FlatFragment _OrphanCompletePackage__Element = LIBRARY.createFragment(Types._OrphanCompletePackage, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _OrphanCompletePackage__NamedElement = LIBRARY.createFragment(Types._OrphanCompletePackage, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _OrphanCompletePackage__OclAny = LIBRARY.createFragment(Types._OrphanCompletePackage, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _OrphanCompletePackage__OclElement = LIBRARY.createFragment(Types._OrphanCompletePackage, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _OrphanCompletePackage__OrphanCompletePackage = LIBRARY.createFragment(Types._OrphanCompletePackage, PivotTables.Types._OrphanCompletePackage);

		private static final @NonNull FlatFragment _Package__Element = LIBRARY.createFragment(Types._Package, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Package__NamedElement = LIBRARY.createFragment(Types._Package, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Package__Namespace = LIBRARY.createFragment(Types._Package, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Package__OclAny = LIBRARY.createFragment(Types._Package, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Package__OclElement = LIBRARY.createFragment(Types._Package, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Package__Package = LIBRARY.createFragment(Types._Package, PivotTables.Types._Package);

		private static final @NonNull FlatFragment _Parameter__Element = LIBRARY.createFragment(Types._Parameter, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Parameter__NamedElement = LIBRARY.createFragment(Types._Parameter, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Parameter__OclAny = LIBRARY.createFragment(Types._Parameter, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Parameter__OclElement = LIBRARY.createFragment(Types._Parameter, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Parameter__Parameter = LIBRARY.createFragment(Types._Parameter, PivotTables.Types._Parameter);
		private static final @NonNull FlatFragment _Parameter__TypedElement = LIBRARY.createFragment(Types._Parameter, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _Parameter__VariableDeclaration = LIBRARY.createFragment(Types._Parameter, PivotTables.Types._VariableDeclaration);

		private static final @NonNull FlatFragment _ParameterVariable__Element = LIBRARY.createFragment(Types._ParameterVariable, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ParameterVariable__NamedElement = LIBRARY.createFragment(Types._ParameterVariable, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ParameterVariable__OclAny = LIBRARY.createFragment(Types._ParameterVariable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ParameterVariable__OclElement = LIBRARY.createFragment(Types._ParameterVariable, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ParameterVariable__ParameterVariable = LIBRARY.createFragment(Types._ParameterVariable, PivotTables.Types._ParameterVariable);
		private static final @NonNull FlatFragment _ParameterVariable__TypedElement = LIBRARY.createFragment(Types._ParameterVariable, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _ParameterVariable__Variable = LIBRARY.createFragment(Types._ParameterVariable, PivotTables.Types._Variable);
		private static final @NonNull FlatFragment _ParameterVariable__VariableDeclaration = LIBRARY.createFragment(Types._ParameterVariable, PivotTables.Types._VariableDeclaration);

		private static final @NonNull FlatFragment _Pivotable__OclAny = LIBRARY.createFragment(Types._Pivotable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Pivotable__OclElement = LIBRARY.createFragment(Types._Pivotable, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Pivotable__Pivotable = LIBRARY.createFragment(Types._Pivotable, PivotTables.Types._Pivotable);

		private static final @NonNull FlatFragment _Precedence__Element = LIBRARY.createFragment(Types._Precedence, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Precedence__NamedElement = LIBRARY.createFragment(Types._Precedence, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Precedence__OclAny = LIBRARY.createFragment(Types._Precedence, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Precedence__OclElement = LIBRARY.createFragment(Types._Precedence, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Precedence__Precedence = LIBRARY.createFragment(Types._Precedence, PivotTables.Types._Precedence);

		private static final @NonNull FlatFragment _PrimitiveCompletePackage__CompletePackage = LIBRARY.createFragment(Types._PrimitiveCompletePackage, PivotTables.Types._CompletePackage);
		private static final @NonNull FlatFragment _PrimitiveCompletePackage__Element = LIBRARY.createFragment(Types._PrimitiveCompletePackage, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _PrimitiveCompletePackage__NamedElement = LIBRARY.createFragment(Types._PrimitiveCompletePackage, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _PrimitiveCompletePackage__OclAny = LIBRARY.createFragment(Types._PrimitiveCompletePackage, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _PrimitiveCompletePackage__OclElement = LIBRARY.createFragment(Types._PrimitiveCompletePackage, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _PrimitiveCompletePackage__PrimitiveCompletePackage = LIBRARY.createFragment(Types._PrimitiveCompletePackage, PivotTables.Types._PrimitiveCompletePackage);

		private static final @NonNull FlatFragment _PrimitiveLiteralExp__Element = LIBRARY.createFragment(Types._PrimitiveLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _PrimitiveLiteralExp__LiteralExp = LIBRARY.createFragment(Types._PrimitiveLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _PrimitiveLiteralExp__NamedElement = LIBRARY.createFragment(Types._PrimitiveLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _PrimitiveLiteralExp__OCLExpression = LIBRARY.createFragment(Types._PrimitiveLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _PrimitiveLiteralExp__OclAny = LIBRARY.createFragment(Types._PrimitiveLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _PrimitiveLiteralExp__OclElement = LIBRARY.createFragment(Types._PrimitiveLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _PrimitiveLiteralExp__PrimitiveLiteralExp = LIBRARY.createFragment(Types._PrimitiveLiteralExp, PivotTables.Types._PrimitiveLiteralExp);
		private static final @NonNull FlatFragment _PrimitiveLiteralExp__TypedElement = LIBRARY.createFragment(Types._PrimitiveLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _PrimitiveType__AbstractClass = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _PrimitiveType__Class = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _PrimitiveType__DataType = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _PrimitiveType__Element = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _PrimitiveType__NamedElement = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _PrimitiveType__Namespace = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _PrimitiveType__OclAny = LIBRARY.createFragment(Types._PrimitiveType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _PrimitiveType__OclElement = LIBRARY.createFragment(Types._PrimitiveType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _PrimitiveType__OclType = LIBRARY.createFragment(Types._PrimitiveType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _PrimitiveType__PrimitiveType = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._PrimitiveType);
		private static final @NonNull FlatFragment _PrimitiveType__TemplateableElement = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _PrimitiveType__Type = LIBRARY.createFragment(Types._PrimitiveType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Profile__Element = LIBRARY.createFragment(Types._Profile, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Profile__NamedElement = LIBRARY.createFragment(Types._Profile, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Profile__Namespace = LIBRARY.createFragment(Types._Profile, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Profile__OclAny = LIBRARY.createFragment(Types._Profile, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Profile__OclElement = LIBRARY.createFragment(Types._Profile, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Profile__Package = LIBRARY.createFragment(Types._Profile, PivotTables.Types._Package);
		private static final @NonNull FlatFragment _Profile__Profile = LIBRARY.createFragment(Types._Profile, PivotTables.Types._Profile);

		private static final @NonNull FlatFragment _ProfileApplication__Element = LIBRARY.createFragment(Types._ProfileApplication, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ProfileApplication__OclAny = LIBRARY.createFragment(Types._ProfileApplication, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ProfileApplication__OclElement = LIBRARY.createFragment(Types._ProfileApplication, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ProfileApplication__ProfileApplication = LIBRARY.createFragment(Types._ProfileApplication, PivotTables.Types._ProfileApplication);

		private static final @NonNull FlatFragment _Property__Element = LIBRARY.createFragment(Types._Property, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Property__Feature = LIBRARY.createFragment(Types._Property, PivotTables.Types._Feature);
		private static final @NonNull FlatFragment _Property__NamedElement = LIBRARY.createFragment(Types._Property, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Property__OclAny = LIBRARY.createFragment(Types._Property, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Property__OclElement = LIBRARY.createFragment(Types._Property, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Property__Property = LIBRARY.createFragment(Types._Property, PivotTables.Types._Property);
		private static final @NonNull FlatFragment _Property__TypedElement = LIBRARY.createFragment(Types._Property, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _PropertyCallExp__CallExp = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._CallExp);
		private static final @NonNull FlatFragment _PropertyCallExp__Element = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _PropertyCallExp__FeatureCallExp = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._FeatureCallExp);
		private static final @NonNull FlatFragment _PropertyCallExp__NamedElement = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _PropertyCallExp__NavigationCallExp = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._NavigationCallExp);
		private static final @NonNull FlatFragment _PropertyCallExp__OCLExpression = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _PropertyCallExp__OclAny = LIBRARY.createFragment(Types._PropertyCallExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _PropertyCallExp__OclElement = LIBRARY.createFragment(Types._PropertyCallExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _PropertyCallExp__PropertyCallExp = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._PropertyCallExp);
		private static final @NonNull FlatFragment _PropertyCallExp__ReferringElement = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._ReferringElement);
		private static final @NonNull FlatFragment _PropertyCallExp__TypedElement = LIBRARY.createFragment(Types._PropertyCallExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _Pseudostate__Element = LIBRARY.createFragment(Types._Pseudostate, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Pseudostate__NamedElement = LIBRARY.createFragment(Types._Pseudostate, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Pseudostate__OclAny = LIBRARY.createFragment(Types._Pseudostate, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Pseudostate__OclElement = LIBRARY.createFragment(Types._Pseudostate, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Pseudostate__Pseudostate = LIBRARY.createFragment(Types._Pseudostate, PivotTables.Types._Pseudostate);
		private static final @NonNull FlatFragment _Pseudostate__Vertex = LIBRARY.createFragment(Types._Pseudostate, PivotTables.Types._Vertex);

		private static final @NonNull FlatFragment _PseudostateKind__OclAny = LIBRARY.createFragment(Types._PseudostateKind, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _PseudostateKind__OclElement = LIBRARY.createFragment(Types._PseudostateKind, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _PseudostateKind__OclEnumeration = LIBRARY.createFragment(Types._PseudostateKind, OCLstdlibTables.Types._OclEnumeration);
		private static final @NonNull FlatFragment _PseudostateKind__OclType = LIBRARY.createFragment(Types._PseudostateKind, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _PseudostateKind__PseudostateKind = LIBRARY.createFragment(Types._PseudostateKind, PivotTables.Types._PseudostateKind);

		private static final @NonNull FlatFragment _RealLiteralExp__Element = LIBRARY.createFragment(Types._RealLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _RealLiteralExp__LiteralExp = LIBRARY.createFragment(Types._RealLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _RealLiteralExp__NamedElement = LIBRARY.createFragment(Types._RealLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _RealLiteralExp__NumericLiteralExp = LIBRARY.createFragment(Types._RealLiteralExp, PivotTables.Types._NumericLiteralExp);
		private static final @NonNull FlatFragment _RealLiteralExp__OCLExpression = LIBRARY.createFragment(Types._RealLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _RealLiteralExp__OclAny = LIBRARY.createFragment(Types._RealLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _RealLiteralExp__OclElement = LIBRARY.createFragment(Types._RealLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _RealLiteralExp__PrimitiveLiteralExp = LIBRARY.createFragment(Types._RealLiteralExp, PivotTables.Types._PrimitiveLiteralExp);
		private static final @NonNull FlatFragment _RealLiteralExp__RealLiteralExp = LIBRARY.createFragment(Types._RealLiteralExp, PivotTables.Types._RealLiteralExp);
		private static final @NonNull FlatFragment _RealLiteralExp__TypedElement = LIBRARY.createFragment(Types._RealLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _ReferringElement__OclAny = LIBRARY.createFragment(Types._ReferringElement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ReferringElement__OclElement = LIBRARY.createFragment(Types._ReferringElement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ReferringElement__ReferringElement = LIBRARY.createFragment(Types._ReferringElement, PivotTables.Types._ReferringElement);

		private static final @NonNull FlatFragment _Region__Element = LIBRARY.createFragment(Types._Region, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Region__NamedElement = LIBRARY.createFragment(Types._Region, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Region__Namespace = LIBRARY.createFragment(Types._Region, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Region__OclAny = LIBRARY.createFragment(Types._Region, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Region__OclElement = LIBRARY.createFragment(Types._Region, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Region__Region = LIBRARY.createFragment(Types._Region, PivotTables.Types._Region);

		private static final @NonNull FlatFragment _ResultVariable__Element = LIBRARY.createFragment(Types._ResultVariable, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ResultVariable__NamedElement = LIBRARY.createFragment(Types._ResultVariable, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ResultVariable__OclAny = LIBRARY.createFragment(Types._ResultVariable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ResultVariable__OclElement = LIBRARY.createFragment(Types._ResultVariable, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ResultVariable__ResultVariable = LIBRARY.createFragment(Types._ResultVariable, PivotTables.Types._ResultVariable);
		private static final @NonNull FlatFragment _ResultVariable__TypedElement = LIBRARY.createFragment(Types._ResultVariable, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _ResultVariable__Variable = LIBRARY.createFragment(Types._ResultVariable, PivotTables.Types._Variable);
		private static final @NonNull FlatFragment _ResultVariable__VariableDeclaration = LIBRARY.createFragment(Types._ResultVariable, PivotTables.Types._VariableDeclaration);

		private static final @NonNull FlatFragment _SelfType__AbstractClass = LIBRARY.createFragment(Types._SelfType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _SelfType__Class = LIBRARY.createFragment(Types._SelfType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _SelfType__Element = LIBRARY.createFragment(Types._SelfType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _SelfType__NamedElement = LIBRARY.createFragment(Types._SelfType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _SelfType__Namespace = LIBRARY.createFragment(Types._SelfType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _SelfType__OclAny = LIBRARY.createFragment(Types._SelfType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _SelfType__OclElement = LIBRARY.createFragment(Types._SelfType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _SelfType__OclType = LIBRARY.createFragment(Types._SelfType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _SelfType__SelfType = LIBRARY.createFragment(Types._SelfType, PivotTables.Types._SelfType);
		private static final @NonNull FlatFragment _SelfType__TemplateableElement = LIBRARY.createFragment(Types._SelfType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _SelfType__Type = LIBRARY.createFragment(Types._SelfType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _SendSignalAction__Element = LIBRARY.createFragment(Types._SendSignalAction, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _SendSignalAction__NamedElement = LIBRARY.createFragment(Types._SendSignalAction, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _SendSignalAction__OclAny = LIBRARY.createFragment(Types._SendSignalAction, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _SendSignalAction__OclElement = LIBRARY.createFragment(Types._SendSignalAction, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _SendSignalAction__SendSignalAction = LIBRARY.createFragment(Types._SendSignalAction, PivotTables.Types._SendSignalAction);

		private static final @NonNull FlatFragment _SequenceType__AbstractClass = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _SequenceType__Class = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _SequenceType__CollectionType = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._CollectionType);
		private static final @NonNull FlatFragment _SequenceType__DataType = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _SequenceType__Element = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _SequenceType__IterableType = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._IterableType);
		private static final @NonNull FlatFragment _SequenceType__NamedElement = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _SequenceType__Namespace = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _SequenceType__OclAny = LIBRARY.createFragment(Types._SequenceType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _SequenceType__OclElement = LIBRARY.createFragment(Types._SequenceType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _SequenceType__OclType = LIBRARY.createFragment(Types._SequenceType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _SequenceType__SequenceType = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._SequenceType);
		private static final @NonNull FlatFragment _SequenceType__TemplateableElement = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _SequenceType__Type = LIBRARY.createFragment(Types._SequenceType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _SetType__AbstractClass = LIBRARY.createFragment(Types._SetType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _SetType__Class = LIBRARY.createFragment(Types._SetType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _SetType__CollectionType = LIBRARY.createFragment(Types._SetType, PivotTables.Types._CollectionType);
		private static final @NonNull FlatFragment _SetType__DataType = LIBRARY.createFragment(Types._SetType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _SetType__Element = LIBRARY.createFragment(Types._SetType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _SetType__IterableType = LIBRARY.createFragment(Types._SetType, PivotTables.Types._IterableType);
		private static final @NonNull FlatFragment _SetType__NamedElement = LIBRARY.createFragment(Types._SetType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _SetType__Namespace = LIBRARY.createFragment(Types._SetType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _SetType__OclAny = LIBRARY.createFragment(Types._SetType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _SetType__OclElement = LIBRARY.createFragment(Types._SetType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _SetType__OclType = LIBRARY.createFragment(Types._SetType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _SetType__SetType = LIBRARY.createFragment(Types._SetType, PivotTables.Types._SetType);
		private static final @NonNull FlatFragment _SetType__TemplateableElement = LIBRARY.createFragment(Types._SetType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _SetType__Type = LIBRARY.createFragment(Types._SetType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _ShadowExp__Element = LIBRARY.createFragment(Types._ShadowExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ShadowExp__NamedElement = LIBRARY.createFragment(Types._ShadowExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ShadowExp__OCLExpression = LIBRARY.createFragment(Types._ShadowExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _ShadowExp__OclAny = LIBRARY.createFragment(Types._ShadowExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ShadowExp__OclElement = LIBRARY.createFragment(Types._ShadowExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ShadowExp__ShadowExp = LIBRARY.createFragment(Types._ShadowExp, PivotTables.Types._ShadowExp);
		private static final @NonNull FlatFragment _ShadowExp__TypedElement = LIBRARY.createFragment(Types._ShadowExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _ShadowPart__Element = LIBRARY.createFragment(Types._ShadowPart, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ShadowPart__NamedElement = LIBRARY.createFragment(Types._ShadowPart, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ShadowPart__OclAny = LIBRARY.createFragment(Types._ShadowPart, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ShadowPart__OclElement = LIBRARY.createFragment(Types._ShadowPart, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ShadowPart__ShadowPart = LIBRARY.createFragment(Types._ShadowPart, PivotTables.Types._ShadowPart);
		private static final @NonNull FlatFragment _ShadowPart__TypedElement = LIBRARY.createFragment(Types._ShadowPart, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _Signal__AbstractClass = LIBRARY.createFragment(Types._Signal, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _Signal__Class = LIBRARY.createFragment(Types._Signal, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _Signal__Element = LIBRARY.createFragment(Types._Signal, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Signal__NamedElement = LIBRARY.createFragment(Types._Signal, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Signal__Namespace = LIBRARY.createFragment(Types._Signal, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Signal__OclAny = LIBRARY.createFragment(Types._Signal, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Signal__OclElement = LIBRARY.createFragment(Types._Signal, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Signal__OclType = LIBRARY.createFragment(Types._Signal, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _Signal__Signal = LIBRARY.createFragment(Types._Signal, PivotTables.Types._Signal);
		private static final @NonNull FlatFragment _Signal__TemplateableElement = LIBRARY.createFragment(Types._Signal, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _Signal__Type = LIBRARY.createFragment(Types._Signal, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Slot__Element = LIBRARY.createFragment(Types._Slot, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Slot__OclAny = LIBRARY.createFragment(Types._Slot, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Slot__OclElement = LIBRARY.createFragment(Types._Slot, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Slot__Slot = LIBRARY.createFragment(Types._Slot, PivotTables.Types._Slot);

		private static final @NonNull FlatFragment _StandardLibrary__Element = LIBRARY.createFragment(Types._StandardLibrary, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _StandardLibrary__OclAny = LIBRARY.createFragment(Types._StandardLibrary, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _StandardLibrary__OclElement = LIBRARY.createFragment(Types._StandardLibrary, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _StandardLibrary__StandardLibrary = LIBRARY.createFragment(Types._StandardLibrary, PivotTables.Types._StandardLibrary);

		private static final @NonNull FlatFragment _State__Element = LIBRARY.createFragment(Types._State, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _State__NamedElement = LIBRARY.createFragment(Types._State, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _State__Namespace = LIBRARY.createFragment(Types._State, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _State__OclAny = LIBRARY.createFragment(Types._State, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _State__OclElement = LIBRARY.createFragment(Types._State, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _State__OclState = LIBRARY.createFragment(Types._State, OCLstdlibTables.Types._OclState);
		private static final @NonNull FlatFragment _State__State = LIBRARY.createFragment(Types._State, PivotTables.Types._State);
		private static final @NonNull FlatFragment _State__Vertex = LIBRARY.createFragment(Types._State, PivotTables.Types._Vertex);

		private static final @NonNull FlatFragment _StateExp__Element = LIBRARY.createFragment(Types._StateExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _StateExp__NamedElement = LIBRARY.createFragment(Types._StateExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _StateExp__OCLExpression = LIBRARY.createFragment(Types._StateExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _StateExp__OclAny = LIBRARY.createFragment(Types._StateExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _StateExp__OclElement = LIBRARY.createFragment(Types._StateExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _StateExp__StateExp = LIBRARY.createFragment(Types._StateExp, PivotTables.Types._StateExp);
		private static final @NonNull FlatFragment _StateExp__TypedElement = LIBRARY.createFragment(Types._StateExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _StateMachine__AbstractClass = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _StateMachine__Behavior = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._Behavior);
		private static final @NonNull FlatFragment _StateMachine__Class = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _StateMachine__Element = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _StateMachine__NamedElement = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _StateMachine__Namespace = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _StateMachine__OclAny = LIBRARY.createFragment(Types._StateMachine, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _StateMachine__OclElement = LIBRARY.createFragment(Types._StateMachine, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _StateMachine__OclType = LIBRARY.createFragment(Types._StateMachine, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _StateMachine__StateMachine = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._StateMachine);
		private static final @NonNull FlatFragment _StateMachine__TemplateableElement = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _StateMachine__Type = LIBRARY.createFragment(Types._StateMachine, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Stereotype__AbstractClass = LIBRARY.createFragment(Types._Stereotype, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _Stereotype__Class = LIBRARY.createFragment(Types._Stereotype, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _Stereotype__Element = LIBRARY.createFragment(Types._Stereotype, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Stereotype__NamedElement = LIBRARY.createFragment(Types._Stereotype, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Stereotype__Namespace = LIBRARY.createFragment(Types._Stereotype, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Stereotype__OclAny = LIBRARY.createFragment(Types._Stereotype, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Stereotype__OclElement = LIBRARY.createFragment(Types._Stereotype, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Stereotype__OclStereotype = LIBRARY.createFragment(Types._Stereotype, OCLstdlibTables.Types._OclStereotype);
		private static final @NonNull FlatFragment _Stereotype__OclType = LIBRARY.createFragment(Types._Stereotype, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _Stereotype__Stereotype = LIBRARY.createFragment(Types._Stereotype, PivotTables.Types._Stereotype);
		private static final @NonNull FlatFragment _Stereotype__TemplateableElement = LIBRARY.createFragment(Types._Stereotype, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _Stereotype__Type = LIBRARY.createFragment(Types._Stereotype, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _StereotypeExtender__Element = LIBRARY.createFragment(Types._StereotypeExtender, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _StereotypeExtender__OclAny = LIBRARY.createFragment(Types._StereotypeExtender, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _StereotypeExtender__OclElement = LIBRARY.createFragment(Types._StereotypeExtender, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _StereotypeExtender__StereotypeExtender = LIBRARY.createFragment(Types._StereotypeExtender, PivotTables.Types._StereotypeExtender);

		private static final @NonNull FlatFragment _StringLiteralExp__Element = LIBRARY.createFragment(Types._StringLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _StringLiteralExp__LiteralExp = LIBRARY.createFragment(Types._StringLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _StringLiteralExp__NamedElement = LIBRARY.createFragment(Types._StringLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _StringLiteralExp__OCLExpression = LIBRARY.createFragment(Types._StringLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _StringLiteralExp__OclAny = LIBRARY.createFragment(Types._StringLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _StringLiteralExp__OclElement = LIBRARY.createFragment(Types._StringLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _StringLiteralExp__PrimitiveLiteralExp = LIBRARY.createFragment(Types._StringLiteralExp, PivotTables.Types._PrimitiveLiteralExp);
		private static final @NonNull FlatFragment _StringLiteralExp__StringLiteralExp = LIBRARY.createFragment(Types._StringLiteralExp, PivotTables.Types._StringLiteralExp);
		private static final @NonNull FlatFragment _StringLiteralExp__TypedElement = LIBRARY.createFragment(Types._StringLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _TemplateBinding__Element = LIBRARY.createFragment(Types._TemplateBinding, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TemplateBinding__OclAny = LIBRARY.createFragment(Types._TemplateBinding, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TemplateBinding__OclElement = LIBRARY.createFragment(Types._TemplateBinding, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TemplateBinding__TemplateBinding = LIBRARY.createFragment(Types._TemplateBinding, PivotTables.Types._TemplateBinding);

		private static final @NonNull FlatFragment _TemplateParameter__Element = LIBRARY.createFragment(Types._TemplateParameter, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TemplateParameter__NamedElement = LIBRARY.createFragment(Types._TemplateParameter, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _TemplateParameter__OclAny = LIBRARY.createFragment(Types._TemplateParameter, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TemplateParameter__OclElement = LIBRARY.createFragment(Types._TemplateParameter, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TemplateParameter__OclType = LIBRARY.createFragment(Types._TemplateParameter, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _TemplateParameter__TemplateParameter = LIBRARY.createFragment(Types._TemplateParameter, PivotTables.Types._TemplateParameter);
		private static final @NonNull FlatFragment _TemplateParameter__Type = LIBRARY.createFragment(Types._TemplateParameter, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _TemplateParameterSubstitution__Element = LIBRARY.createFragment(Types._TemplateParameterSubstitution, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TemplateParameterSubstitution__OclAny = LIBRARY.createFragment(Types._TemplateParameterSubstitution, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TemplateParameterSubstitution__OclElement = LIBRARY.createFragment(Types._TemplateParameterSubstitution, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TemplateParameterSubstitution__TemplateParameterSubstitution = LIBRARY.createFragment(Types._TemplateParameterSubstitution, PivotTables.Types._TemplateParameterSubstitution);

		private static final @NonNull FlatFragment _TemplateSignature__Element = LIBRARY.createFragment(Types._TemplateSignature, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TemplateSignature__OclAny = LIBRARY.createFragment(Types._TemplateSignature, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TemplateSignature__OclElement = LIBRARY.createFragment(Types._TemplateSignature, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TemplateSignature__TemplateSignature = LIBRARY.createFragment(Types._TemplateSignature, PivotTables.Types._TemplateSignature);

		private static final @NonNull FlatFragment _TemplateableElement__Element = LIBRARY.createFragment(Types._TemplateableElement, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TemplateableElement__OclAny = LIBRARY.createFragment(Types._TemplateableElement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TemplateableElement__OclElement = LIBRARY.createFragment(Types._TemplateableElement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TemplateableElement__TemplateableElement = LIBRARY.createFragment(Types._TemplateableElement, PivotTables.Types._TemplateableElement);

		private static final @NonNull FlatFragment _Throwable__OclAny = LIBRARY.createFragment(Types._Throwable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Throwable__Throwable = LIBRARY.createFragment(Types._Throwable, PivotTables.Types._Throwable);

		private static final @NonNull FlatFragment _Transition__Element = LIBRARY.createFragment(Types._Transition, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Transition__NamedElement = LIBRARY.createFragment(Types._Transition, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Transition__Namespace = LIBRARY.createFragment(Types._Transition, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _Transition__OclAny = LIBRARY.createFragment(Types._Transition, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Transition__OclElement = LIBRARY.createFragment(Types._Transition, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Transition__Transition = LIBRARY.createFragment(Types._Transition, PivotTables.Types._Transition);

		private static final @NonNull FlatFragment _TransitionKind__OclAny = LIBRARY.createFragment(Types._TransitionKind, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TransitionKind__OclElement = LIBRARY.createFragment(Types._TransitionKind, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TransitionKind__OclEnumeration = LIBRARY.createFragment(Types._TransitionKind, OCLstdlibTables.Types._OclEnumeration);
		private static final @NonNull FlatFragment _TransitionKind__OclType = LIBRARY.createFragment(Types._TransitionKind, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _TransitionKind__TransitionKind = LIBRARY.createFragment(Types._TransitionKind, PivotTables.Types._TransitionKind);

		private static final @NonNull FlatFragment _Trigger__Element = LIBRARY.createFragment(Types._Trigger, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Trigger__NamedElement = LIBRARY.createFragment(Types._Trigger, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Trigger__OclAny = LIBRARY.createFragment(Types._Trigger, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Trigger__OclElement = LIBRARY.createFragment(Types._Trigger, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Trigger__Trigger = LIBRARY.createFragment(Types._Trigger, PivotTables.Types._Trigger);

		private static final @NonNull FlatFragment _TupleLiteralExp__Element = LIBRARY.createFragment(Types._TupleLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TupleLiteralExp__LiteralExp = LIBRARY.createFragment(Types._TupleLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _TupleLiteralExp__NamedElement = LIBRARY.createFragment(Types._TupleLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _TupleLiteralExp__OCLExpression = LIBRARY.createFragment(Types._TupleLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _TupleLiteralExp__OclAny = LIBRARY.createFragment(Types._TupleLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TupleLiteralExp__OclElement = LIBRARY.createFragment(Types._TupleLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TupleLiteralExp__TupleLiteralExp = LIBRARY.createFragment(Types._TupleLiteralExp, PivotTables.Types._TupleLiteralExp);
		private static final @NonNull FlatFragment _TupleLiteralExp__TypedElement = LIBRARY.createFragment(Types._TupleLiteralExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _TupleLiteralPart__Element = LIBRARY.createFragment(Types._TupleLiteralPart, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TupleLiteralPart__NamedElement = LIBRARY.createFragment(Types._TupleLiteralPart, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _TupleLiteralPart__OclAny = LIBRARY.createFragment(Types._TupleLiteralPart, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TupleLiteralPart__OclElement = LIBRARY.createFragment(Types._TupleLiteralPart, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TupleLiteralPart__TupleLiteralPart = LIBRARY.createFragment(Types._TupleLiteralPart, PivotTables.Types._TupleLiteralPart);
		private static final @NonNull FlatFragment _TupleLiteralPart__TypedElement = LIBRARY.createFragment(Types._TupleLiteralPart, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _TupleLiteralPart__VariableDeclaration = LIBRARY.createFragment(Types._TupleLiteralPart, PivotTables.Types._VariableDeclaration);

		private static final @NonNull FlatFragment _TupleType__AbstractClass = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _TupleType__Class = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _TupleType__DataType = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._DataType);
		private static final @NonNull FlatFragment _TupleType__Element = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TupleType__NamedElement = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _TupleType__Namespace = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _TupleType__OclAny = LIBRARY.createFragment(Types._TupleType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TupleType__OclElement = LIBRARY.createFragment(Types._TupleType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TupleType__OclType = LIBRARY.createFragment(Types._TupleType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _TupleType__TemplateableElement = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _TupleType__TupleType = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._TupleType);
		private static final @NonNull FlatFragment _TupleType__Type = LIBRARY.createFragment(Types._TupleType, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _Type__Element = LIBRARY.createFragment(Types._Type, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Type__NamedElement = LIBRARY.createFragment(Types._Type, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Type__OclAny = LIBRARY.createFragment(Types._Type, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Type__OclElement = LIBRARY.createFragment(Types._Type, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Type__OclType = LIBRARY.createFragment(Types._Type, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _Type__Type = LIBRARY.createFragment(Types._Type, PivotTables.Types._Type);

		private static final @NonNull FlatFragment _TypeExp__Element = LIBRARY.createFragment(Types._TypeExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TypeExp__NamedElement = LIBRARY.createFragment(Types._TypeExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _TypeExp__OCLExpression = LIBRARY.createFragment(Types._TypeExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _TypeExp__OclAny = LIBRARY.createFragment(Types._TypeExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TypeExp__OclElement = LIBRARY.createFragment(Types._TypeExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TypeExp__ReferringElement = LIBRARY.createFragment(Types._TypeExp, PivotTables.Types._ReferringElement);
		private static final @NonNull FlatFragment _TypeExp__TypeExp = LIBRARY.createFragment(Types._TypeExp, PivotTables.Types._TypeExp);
		private static final @NonNull FlatFragment _TypeExp__TypedElement = LIBRARY.createFragment(Types._TypeExp, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _TypedElement__Element = LIBRARY.createFragment(Types._TypedElement, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _TypedElement__NamedElement = LIBRARY.createFragment(Types._TypedElement, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _TypedElement__OclAny = LIBRARY.createFragment(Types._TypedElement, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _TypedElement__OclElement = LIBRARY.createFragment(Types._TypedElement, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _TypedElement__TypedElement = LIBRARY.createFragment(Types._TypedElement, PivotTables.Types._TypedElement);

		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__Element = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__LiteralExp = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, PivotTables.Types._LiteralExp);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__NamedElement = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__NumericLiteralExp = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, PivotTables.Types._NumericLiteralExp);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__OCLExpression = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__OclAny = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__OclElement = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__PrimitiveLiteralExp = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, PivotTables.Types._PrimitiveLiteralExp);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__TypedElement = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _UnlimitedNaturalLiteralExp__UnlimitedNaturalLiteralExp = LIBRARY.createFragment(Types._UnlimitedNaturalLiteralExp, PivotTables.Types._UnlimitedNaturalLiteralExp);

		private static final @NonNull FlatFragment _UnspecifiedValueExp__Element = LIBRARY.createFragment(Types._UnspecifiedValueExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _UnspecifiedValueExp__NamedElement = LIBRARY.createFragment(Types._UnspecifiedValueExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _UnspecifiedValueExp__OCLExpression = LIBRARY.createFragment(Types._UnspecifiedValueExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _UnspecifiedValueExp__OclAny = LIBRARY.createFragment(Types._UnspecifiedValueExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _UnspecifiedValueExp__OclElement = LIBRARY.createFragment(Types._UnspecifiedValueExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _UnspecifiedValueExp__TypedElement = LIBRARY.createFragment(Types._UnspecifiedValueExp, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _UnspecifiedValueExp__UnspecifiedValueExp = LIBRARY.createFragment(Types._UnspecifiedValueExp, PivotTables.Types._UnspecifiedValueExp);

		private static final @NonNull FlatFragment _ValueSpecification__Element = LIBRARY.createFragment(Types._ValueSpecification, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _ValueSpecification__NamedElement = LIBRARY.createFragment(Types._ValueSpecification, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _ValueSpecification__OclAny = LIBRARY.createFragment(Types._ValueSpecification, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _ValueSpecification__OclElement = LIBRARY.createFragment(Types._ValueSpecification, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _ValueSpecification__TypedElement = LIBRARY.createFragment(Types._ValueSpecification, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _ValueSpecification__ValueSpecification = LIBRARY.createFragment(Types._ValueSpecification, PivotTables.Types._ValueSpecification);

		private static final @NonNull FlatFragment _Variable__Element = LIBRARY.createFragment(Types._Variable, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Variable__NamedElement = LIBRARY.createFragment(Types._Variable, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Variable__OclAny = LIBRARY.createFragment(Types._Variable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Variable__OclElement = LIBRARY.createFragment(Types._Variable, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Variable__TypedElement = LIBRARY.createFragment(Types._Variable, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _Variable__Variable = LIBRARY.createFragment(Types._Variable, PivotTables.Types._Variable);
		private static final @NonNull FlatFragment _Variable__VariableDeclaration = LIBRARY.createFragment(Types._Variable, PivotTables.Types._VariableDeclaration);

		private static final @NonNull FlatFragment _VariableDeclaration__Element = LIBRARY.createFragment(Types._VariableDeclaration, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _VariableDeclaration__NamedElement = LIBRARY.createFragment(Types._VariableDeclaration, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _VariableDeclaration__OclAny = LIBRARY.createFragment(Types._VariableDeclaration, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _VariableDeclaration__OclElement = LIBRARY.createFragment(Types._VariableDeclaration, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _VariableDeclaration__TypedElement = LIBRARY.createFragment(Types._VariableDeclaration, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _VariableDeclaration__VariableDeclaration = LIBRARY.createFragment(Types._VariableDeclaration, PivotTables.Types._VariableDeclaration);

		private static final @NonNull FlatFragment _VariableExp__Element = LIBRARY.createFragment(Types._VariableExp, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _VariableExp__NamedElement = LIBRARY.createFragment(Types._VariableExp, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _VariableExp__OCLExpression = LIBRARY.createFragment(Types._VariableExp, PivotTables.Types._OCLExpression);
		private static final @NonNull FlatFragment _VariableExp__OclAny = LIBRARY.createFragment(Types._VariableExp, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _VariableExp__OclElement = LIBRARY.createFragment(Types._VariableExp, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _VariableExp__ReferringElement = LIBRARY.createFragment(Types._VariableExp, PivotTables.Types._ReferringElement);
		private static final @NonNull FlatFragment _VariableExp__TypedElement = LIBRARY.createFragment(Types._VariableExp, PivotTables.Types._TypedElement);
		private static final @NonNull FlatFragment _VariableExp__VariableExp = LIBRARY.createFragment(Types._VariableExp, PivotTables.Types._VariableExp);

		private static final @NonNull FlatFragment _Vertex__Element = LIBRARY.createFragment(Types._Vertex, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _Vertex__NamedElement = LIBRARY.createFragment(Types._Vertex, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _Vertex__OclAny = LIBRARY.createFragment(Types._Vertex, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Vertex__OclElement = LIBRARY.createFragment(Types._Vertex, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Vertex__Vertex = LIBRARY.createFragment(Types._Vertex, PivotTables.Types._Vertex);

		private static final @NonNull FlatFragment _Visitable__OclAny = LIBRARY.createFragment(Types._Visitable, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _Visitable__OclElement = LIBRARY.createFragment(Types._Visitable, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _Visitable__Visitable = LIBRARY.createFragment(Types._Visitable, PivotTables.Types._Visitable);

		private static final @NonNull FlatFragment _VoidType__AbstractClass = LIBRARY.createFragment(Types._VoidType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _VoidType__Class = LIBRARY.createFragment(Types._VoidType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _VoidType__Element = LIBRARY.createFragment(Types._VoidType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _VoidType__NamedElement = LIBRARY.createFragment(Types._VoidType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _VoidType__Namespace = LIBRARY.createFragment(Types._VoidType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _VoidType__OclAny = LIBRARY.createFragment(Types._VoidType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _VoidType__OclElement = LIBRARY.createFragment(Types._VoidType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _VoidType__OclType = LIBRARY.createFragment(Types._VoidType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _VoidType__TemplateableElement = LIBRARY.createFragment(Types._VoidType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _VoidType__Type = LIBRARY.createFragment(Types._VoidType, PivotTables.Types._Type);
		private static final @NonNull FlatFragment _VoidType__VoidType = LIBRARY.createFragment(Types._VoidType, PivotTables.Types._VoidType);

		private static final @NonNull FlatFragment _WildcardType__AbstractClass = LIBRARY.createFragment(Types._WildcardType, PivotTables.Types._AbstractClass);
		private static final @NonNull FlatFragment _WildcardType__Class = LIBRARY.createFragment(Types._WildcardType, PivotTables.Types._Class);
		private static final @NonNull FlatFragment _WildcardType__Element = LIBRARY.createFragment(Types._WildcardType, PivotTables.Types._Element);
		private static final @NonNull FlatFragment _WildcardType__NamedElement = LIBRARY.createFragment(Types._WildcardType, PivotTables.Types._NamedElement);
		private static final @NonNull FlatFragment _WildcardType__Namespace = LIBRARY.createFragment(Types._WildcardType, PivotTables.Types._Namespace);
		private static final @NonNull FlatFragment _WildcardType__OclAny = LIBRARY.createFragment(Types._WildcardType, OCLstdlibTables.Types._OclAny);
		private static final @NonNull FlatFragment _WildcardType__OclElement = LIBRARY.createFragment(Types._WildcardType, OCLstdlibTables.Types._OclElement);
		private static final @NonNull FlatFragment _WildcardType__OclType = LIBRARY.createFragment(Types._WildcardType, OCLstdlibTables.Types._OclType);
		private static final @NonNull FlatFragment _WildcardType__TemplateableElement = LIBRARY.createFragment(Types._WildcardType, PivotTables.Types._TemplateableElement);
		private static final @NonNull FlatFragment _WildcardType__Type = LIBRARY.createFragment(Types._WildcardType, PivotTables.Types._Type);
		private static final @NonNull FlatFragment _WildcardType__WildcardType = LIBRARY.createFragment(Types._WildcardType, PivotTables.Types._WildcardType);

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::Fragments and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The parameter lists shared by operations.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Parameters {
		static {
			Init.initStart();
			Fragments.init();
		}

		public static final @NonNull ParameterTypes _CallExp___Type = TypeUtil.createParameterTypes(PivotTables.Types._CallExp, PivotTables.Types._Type);
		public static final @NonNull ParameterTypes _Property = TypeUtil.createParameterTypes(PivotTables.Types._Property);
		public static final @NonNull ParameterTypes _String = TypeUtil.createParameterTypes(OCLstdlibTables.Types._String);
		public static final @NonNull ParameterTypes _Type = TypeUtil.createParameterTypes(PivotTables.Types._Type);
		public static final @NonNull ParameterTypes _Type___String = TypeUtil.createParameterTypes(PivotTables.Types._Type, OCLstdlibTables.Types._String);
		public static final @NonNull ParameterTypes _ValueSpecification = TypeUtil.createParameterTypes(PivotTables.Types._ValueSpecification);

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::Parameters and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The operation descriptors for each operation of each type.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Operations {
		static {
			Init.initStart();
			Parameters.init();
		}

		public static final @NonNull Operation _BooleanType__allInstances = LIBRARY.createOperation("allInstances", TypeUtil.EMPTY_PARAMETER_TYPES, Types._BooleanType,
			0, TemplateParameters.EMPTY_LIST, org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation.INSTANCE);

		public static final @NonNull Operation _Class__allInstances = LIBRARY.createOperation("allInstances", TypeUtil.EMPTY_PARAMETER_TYPES, Types._Class,
			0, TemplateParameters.EMPTY_LIST, org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation.INSTANCE);

		public static final @NonNull Operation _CompleteModel__getOwnedCompletePackage = LIBRARY.createOperation("getOwnedCompletePackage", Parameters._String, Types._CompleteModel,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _CompletePackage__getOwnedCompleteClass = LIBRARY.createOperation("getOwnedCompleteClass", Parameters._String, Types._CompletePackage,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _Element__allOwnedElements = LIBRARY.createOperation("allOwnedElements", TypeUtil.EMPTY_PARAMETER_TYPES, Types._Element,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _Element__getValue = LIBRARY.createOperation("getValue", Parameters._Type___String, Types._Element,
			1, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _Enumeration__allInstances = LIBRARY.createOperation("allInstances", TypeUtil.EMPTY_PARAMETER_TYPES, Types._Enumeration,
			0, TemplateParameters.EMPTY_LIST, org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation.INSTANCE);

		public static final @NonNull Operation _InvalidType__allInstances = LIBRARY.createOperation("allInstances", TypeUtil.EMPTY_PARAMETER_TYPES, Types._InvalidType,
			0, TemplateParameters.EMPTY_LIST, org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation.INSTANCE);

		public static final @NonNull Operation _OCLExpression__isNonNull = LIBRARY.createOperation("isNonNull", TypeUtil.EMPTY_PARAMETER_TYPES, Types._OCLExpression,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _OCLExpression__isNull = LIBRARY.createOperation("isNull", TypeUtil.EMPTY_PARAMETER_TYPES, Types._OCLExpression,
			1, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _OperationCallExp__hasOclVoidOverload = LIBRARY.createOperation("hasOclVoidOverload", TypeUtil.EMPTY_PARAMETER_TYPES, Types._OperationCallExp,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _Property__isAttribute = LIBRARY.createOperation("isAttribute", Parameters._Property, Types._Property,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _PropertyCallExp__getSpecializedReferredPropertyOwningType = LIBRARY.createOperation("getSpecializedReferredPropertyOwningType", TypeUtil.EMPTY_PARAMETER_TYPES, Types._PropertyCallExp,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _PropertyCallExp__getSpecializedReferredPropertyType = LIBRARY.createOperation("getSpecializedReferredPropertyType", TypeUtil.EMPTY_PARAMETER_TYPES, Types._PropertyCallExp,
			1, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _ReferringElement__getReferredElement = LIBRARY.createOperation("getReferredElement", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ReferringElement,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _SelfType__specializeIn = LIBRARY.createOperation("specializeIn", Parameters._CallExp___Type, Types._SelfType,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _Stereotype__allInstances = LIBRARY.createOperation("allInstances", TypeUtil.EMPTY_PARAMETER_TYPES, Types._Stereotype,
			0, TemplateParameters.EMPTY_LIST, org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation.INSTANCE);

		public static final @NonNull Operation _Type__conformsTo = LIBRARY.createOperation("conformsTo", Parameters._Type, Types._Type,
			0, TemplateParameters.EMPTY_LIST, org.eclipse.ocl.pivot.library.classifier.OclTypeConformsToOperation.INSTANCE);
		public static final @NonNull Operation _Type__flattenedType = LIBRARY.createOperation("flattenedType", TypeUtil.EMPTY_PARAMETER_TYPES, Types._Type,
			1, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _Type__isClass = LIBRARY.createOperation("isClass", TypeUtil.EMPTY_PARAMETER_TYPES, Types._Type,
			2, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _Type__isTemplateParameter = LIBRARY.createOperation("isTemplateParameter", TypeUtil.EMPTY_PARAMETER_TYPES, Types._Type,
			3, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _Type__specializeIn = LIBRARY.createOperation("specializeIn", Parameters._CallExp___Type, Types._Type,
			4, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _TypedElement__CompatibleBody = LIBRARY.createOperation("CompatibleBody", Parameters._ValueSpecification, Types._TypedElement,
			0, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _ValueSpecification__booleanValue = LIBRARY.createOperation("booleanValue", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ValueSpecification,
			0, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _ValueSpecification__integerValue = LIBRARY.createOperation("integerValue", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ValueSpecification,
			1, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _ValueSpecification__isComputable = LIBRARY.createOperation("isComputable", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ValueSpecification,
			2, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _ValueSpecification__isNull = LIBRARY.createOperation("isNull", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ValueSpecification,
			3, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _ValueSpecification__stringValue = LIBRARY.createOperation("stringValue", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ValueSpecification,
			4, TemplateParameters.EMPTY_LIST, null);
		public static final @NonNull Operation _ValueSpecification__unlimitedValue = LIBRARY.createOperation("unlimitedValue", TypeUtil.EMPTY_PARAMETER_TYPES, Types._ValueSpecification,
			5, TemplateParameters.EMPTY_LIST, null);

		public static final @NonNull Operation _VoidType__allInstances = LIBRARY.createOperation("allInstances", TypeUtil.EMPTY_PARAMETER_TYPES, Types._VoidType,
			0, TemplateParameters.EMPTY_LIST, org.eclipse.ocl.pivot.library.classifier.ClassifierAllInstancesOperation.INSTANCE);

		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::Operations and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The property descriptors for each property of each type.
	 *
	 * @noextend This class is not intended to be subclassed by clients.
	 * @noinstantiate This class is not intended to be instantiated by clients.
	 * @noreference This class is not intended to be referenced by clients.
	 */
	public static class Properties {
		static {
			Init.initStart();
			Operations.init();
		}


		public static final @NonNull Property _Annotation__ownedContents = LIBRARY.createProperty(PivotPackage.Literals.ANNOTATION__OWNED_CONTENTS, Types._Annotation, 0);
		public static final @NonNull Property _Annotation__ownedDetails = LIBRARY.createProperty(PivotPackage.Literals.ANNOTATION__OWNED_DETAILS, Types._Annotation, 1);
		public static final @NonNull Property _Annotation__references = LIBRARY.createProperty(PivotPackage.Literals.ANNOTATION__REFERENCES, Types._Annotation, 2);

		public static final @NonNull Property _AssociationClass__unownedAttributes = LIBRARY.createProperty(PivotPackage.Literals.ASSOCIATION_CLASS__UNOWNED_ATTRIBUTES, Types._AssociationClass, 0);
		public static final @NonNull Property _AssociationClass__AssociationClassCallExp__referredAssociationClass = LIBRARY.createOppositeProperty("AssociationClassCallExp", Types._AssociationClass, 1, PivotPackage.Literals.ASSOCIATION_CLASS_CALL_EXP__REFERRED_ASSOCIATION_CLASS);

		public static final @NonNull Property _AssociationClassCallExp__referredAssociationClass = LIBRARY.createProperty(PivotPackage.Literals.ASSOCIATION_CLASS_CALL_EXP__REFERRED_ASSOCIATION_CLASS, Types._AssociationClassCallExp, 0);

		public static final @NonNull Property _Behavior__owningTransition = LIBRARY.createProperty(PivotPackage.Literals.BEHAVIOR__OWNING_TRANSITION, Types._Behavior, 0);
		public static final @NonNull Property _Behavior__Class__ownedBehaviors = LIBRARY.createOppositeProperty("Class", Types._Behavior, 1, PivotPackage.Literals.CLASS__OWNED_BEHAVIORS);
		public static final @NonNull Property _Behavior__State__ownedDoActivity = LIBRARY.createOppositeProperty("State", Types._Behavior, 2, PivotPackage.Literals.STATE__OWNED_DO_ACTIVITY);
		public static final @NonNull Property _Behavior__State__ownedEntry = LIBRARY.createOppositeProperty("State", Types._Behavior, 3, PivotPackage.Literals.STATE__OWNED_ENTRY);
		public static final @NonNull Property _Behavior__State__ownedExit = LIBRARY.createOppositeProperty("State", Types._Behavior, 4, PivotPackage.Literals.STATE__OWNED_EXIT);

		public static final @NonNull Property _BooleanLiteralExp__booleanSymbol = LIBRARY.createProperty(PivotPackage.Literals.BOOLEAN_LITERAL_EXP__BOOLEAN_SYMBOL, Types._BooleanLiteralExp, 0);

		public static final @NonNull Property _CallExp__isImplicit = LIBRARY.createProperty(PivotPackage.Literals.CALL_EXP__IS_IMPLICIT, Types._CallExp, 0);
		public static final @NonNull Property _CallExp__isSafe = LIBRARY.createProperty(PivotPackage.Literals.CALL_EXP__IS_SAFE, Types._CallExp, 1);
		public static final @NonNull Property _CallExp__ownedSource = LIBRARY.createProperty(PivotPackage.Literals.CALL_EXP__OWNED_SOURCE, Types._CallExp, 2);

		public static final @NonNull Property _CallOperationAction__operation = LIBRARY.createProperty(PivotPackage.Literals.CALL_OPERATION_ACTION__OPERATION, Types._CallOperationAction, 0);
		public static final @NonNull Property _CallOperationAction__MessageExp__ownedCalledOperation = LIBRARY.createOppositeProperty("MessageExp", Types._CallOperationAction, 1, PivotPackage.Literals.MESSAGE_EXP__OWNED_CALLED_OPERATION);

		public static final @NonNull Property _Class__extenders = LIBRARY.createProperty(PivotPackage.Literals.CLASS__EXTENDERS, Types._Class, 0);
		public static final @NonNull Property _Class__instanceClassName = LIBRARY.createProperty(PivotPackage.Literals.CLASS__INSTANCE_CLASS_NAME, Types._Class, 1);
		public static final @NonNull Property _Class__isAbstract = LIBRARY.createProperty(PivotPackage.Literals.CLASS__IS_ABSTRACT, Types._Class, 2);
		public static final @NonNull Property _Class__isActive = LIBRARY.createProperty(PivotPackage.Literals.CLASS__IS_ACTIVE, Types._Class, 3);
		public static final @NonNull Property _Class__isInterface = LIBRARY.createProperty(PivotPackage.Literals.CLASS__IS_INTERFACE, Types._Class, 4);
		public static final @NonNull Property _Class__ownedBehaviors = LIBRARY.createProperty(PivotPackage.Literals.CLASS__OWNED_BEHAVIORS, Types._Class, 5);
		public static final @NonNull Property _Class__ownedInvariants = LIBRARY.createProperty(PivotPackage.Literals.CLASS__OWNED_INVARIANTS, Types._Class, 6);
		public static final @NonNull Property _Class__ownedOperations = LIBRARY.createProperty(PivotPackage.Literals.CLASS__OWNED_OPERATIONS, Types._Class, 7);
		public static final @NonNull Property _Class__ownedProperties = LIBRARY.createProperty(PivotPackage.Literals.CLASS__OWNED_PROPERTIES, Types._Class, 8);
		public static final @NonNull Property _Class__owningPackage = LIBRARY.createProperty(PivotPackage.Literals.CLASS__OWNING_PACKAGE, Types._Class, 9);
		public static final @NonNull Property _Class__superClasses = LIBRARY.createProperty(PivotPackage.Literals.CLASS__SUPER_CLASSES, Types._Class, 10);
		public static final @NonNull Property _Class__Class__superClasses = LIBRARY.createOppositeProperty("Class", Types._Class, 11, PivotPackage.Literals.CLASS__SUPER_CLASSES);
		public static final @NonNull Property _Class__CompleteClass__partialClasses = LIBRARY.createOppositeProperty("CompleteClass", Types._Class, 12, PivotPackage.Literals.COMPLETE_CLASS__PARTIAL_CLASSES);
		public static final @NonNull Property _Class__DataType__behavioralClass = LIBRARY.createOppositeProperty("DataType", Types._Class, 13, PivotPackage.Literals.DATA_TYPE__BEHAVIORAL_CLASS);
		public static final @NonNull Property _Class__InstanceSpecification__classes = LIBRARY.createOppositeProperty("InstanceSpecification", Types._Class, 14, PivotPackage.Literals.INSTANCE_SPECIFICATION__CLASSES);
		public static final @NonNull Property _Class__MapType__entryClass = LIBRARY.createOppositeProperty("MapType", Types._Class, 15, PivotPackage.Literals.MAP_TYPE__ENTRY_CLASS);
		public static final @NonNull Property _Class__TemplateParameter__constrainingClasses = LIBRARY.createOppositeProperty("TemplateParameter", Types._Class, 16, PivotPackage.Literals.TEMPLATE_PARAMETER__CONSTRAINING_CLASSES);

		public static final @NonNull Property _CollectionItem__ownedItem = LIBRARY.createProperty(PivotPackage.Literals.COLLECTION_ITEM__OWNED_ITEM, Types._CollectionItem, 0);

		public static final @NonNull Property _CollectionLiteralExp__kind = LIBRARY.createProperty(PivotPackage.Literals.COLLECTION_LITERAL_EXP__KIND, Types._CollectionLiteralExp, 0);
		public static final @NonNull Property _CollectionLiteralExp__ownedParts = LIBRARY.createProperty(PivotPackage.Literals.COLLECTION_LITERAL_EXP__OWNED_PARTS, Types._CollectionLiteralExp, 1);

		public static final @NonNull Property _CollectionLiteralPart__CollectionLiteralExp__ownedParts = LIBRARY.createOppositeProperty("CollectionLiteralExp", Types._CollectionLiteralPart, 0, PivotPackage.Literals.COLLECTION_LITERAL_EXP__OWNED_PARTS);

		public static final @NonNull Property _CollectionRange__ownedFirst = LIBRARY.createProperty(PivotPackage.Literals.COLLECTION_RANGE__OWNED_FIRST, Types._CollectionRange, 0);
		public static final @NonNull Property _CollectionRange__ownedLast = LIBRARY.createProperty(PivotPackage.Literals.COLLECTION_RANGE__OWNED_LAST, Types._CollectionRange, 1);

		public static final @NonNull Property _CollectionType__elementType = LIBRARY.createProperty("elementType", Types._CollectionType, 0, org.eclipse.ocl.pivot.library.collection.CollectionElementTypeProperty.INSTANCE);
		public static final @NonNull Property _CollectionType__isNullFree = LIBRARY.createProperty(PivotPackage.Literals.COLLECTION_TYPE__IS_NULL_FREE, Types._CollectionType, 1);
		public static final @NonNull Property _CollectionType__lower = LIBRARY.createProperty("lower", Types._CollectionType, 2, org.eclipse.ocl.pivot.library.collection.CollectionLowerProperty.INSTANCE);
		public static final @NonNull Property _CollectionType__upper = LIBRARY.createProperty("upper", Types._CollectionType, 3, org.eclipse.ocl.pivot.library.collection.CollectionUpperProperty.INSTANCE);

		public static final @NonNull Property _Comment__annotatedElements = LIBRARY.createProperty(PivotPackage.Literals.COMMENT__ANNOTATED_ELEMENTS, Types._Comment, 0);
		public static final @NonNull Property _Comment__body = LIBRARY.createProperty(PivotPackage.Literals.COMMENT__BODY, Types._Comment, 1);
		public static final @NonNull Property _Comment__owningElement = LIBRARY.createProperty(PivotPackage.Literals.COMMENT__OWNING_ELEMENT, Types._Comment, 2);

		public static final @NonNull Property _CompleteClass__owningCompletePackage = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_CLASS__OWNING_COMPLETE_PACKAGE, Types._CompleteClass, 0);
		public static final @NonNull Property _CompleteClass__partialClasses = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_CLASS__PARTIAL_CLASSES, Types._CompleteClass, 1);

		public static final @NonNull Property _CompleteEnvironment__ownedCompleteModel = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_ENVIRONMENT__OWNED_COMPLETE_MODEL, Types._CompleteEnvironment, 0);
		public static final @NonNull Property _CompleteEnvironment__ownedStandardLibrary = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_ENVIRONMENT__OWNED_STANDARD_LIBRARY, Types._CompleteEnvironment, 1);

		public static final @NonNull Property _CompleteModel__orphanCompletePackage = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_MODEL__ORPHAN_COMPLETE_PACKAGE, Types._CompleteModel, 0);
		public static final @NonNull Property _CompleteModel__ownedCompletePackages = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_MODEL__OWNED_COMPLETE_PACKAGES, Types._CompleteModel, 1);
		public static final @NonNull Property _CompleteModel__owningCompleteEnvironment = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_MODEL__OWNING_COMPLETE_ENVIRONMENT, Types._CompleteModel, 2);
		public static final @NonNull Property _CompleteModel__partialModels = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_MODEL__PARTIAL_MODELS, Types._CompleteModel, 3);
		public static final @NonNull Property _CompleteModel__primitiveCompletePackage = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_MODEL__PRIMITIVE_COMPLETE_PACKAGE, Types._CompleteModel, 4);

		public static final @NonNull Property _CompletePackage__ownedCompleteClasses = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__OWNED_COMPLETE_CLASSES, Types._CompletePackage, 0);
		public static final @NonNull Property _CompletePackage__ownedCompletePackages = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__OWNED_COMPLETE_PACKAGES, Types._CompletePackage, 1);
		public static final @NonNull Property _CompletePackage__owningCompleteModel = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__OWNING_COMPLETE_MODEL, Types._CompletePackage, 2);
		public static final @NonNull Property _CompletePackage__owningCompletePackage = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__OWNING_COMPLETE_PACKAGE, Types._CompletePackage, 3);
		public static final @NonNull Property _CompletePackage__partialPackages = LIBRARY.createProperty(PivotPackage.Literals.COMPLETE_PACKAGE__PARTIAL_PACKAGES, Types._CompletePackage, 4);

		public static final @NonNull Property _ConnectionPointReference__entries = LIBRARY.createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__ENTRIES, Types._ConnectionPointReference, 0);
		public static final @NonNull Property _ConnectionPointReference__exits = LIBRARY.createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__EXITS, Types._ConnectionPointReference, 1);
		public static final @NonNull Property _ConnectionPointReference__owningState = LIBRARY.createProperty(PivotPackage.Literals.CONNECTION_POINT_REFERENCE__OWNING_STATE, Types._ConnectionPointReference, 2);

		public static final @NonNull Property _Constraint__constrainedElements = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__CONSTRAINED_ELEMENTS, Types._Constraint, 0);
		public static final @NonNull Property _Constraint__context = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__CONTEXT, Types._Constraint, 1);
		public static final @NonNull Property _Constraint__isCallable = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__IS_CALLABLE, Types._Constraint, 2);
		public static final @NonNull Property _Constraint__ownedSpecification = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__OWNED_SPECIFICATION, Types._Constraint, 3);
		public static final @NonNull Property _Constraint__owningPostContext = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__OWNING_POST_CONTEXT, Types._Constraint, 4);
		public static final @NonNull Property _Constraint__owningPreContext = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__OWNING_PRE_CONTEXT, Types._Constraint, 5);
		public static final @NonNull Property _Constraint__owningState = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__OWNING_STATE, Types._Constraint, 6);
		public static final @NonNull Property _Constraint__owningTransition = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__OWNING_TRANSITION, Types._Constraint, 7);
		public static final @NonNull Property _Constraint__redefinedConstraints = LIBRARY.createProperty(PivotPackage.Literals.CONSTRAINT__REDEFINED_CONSTRAINTS, Types._Constraint, 8);
		public static final @NonNull Property _Constraint__Class__ownedInvariants = LIBRARY.createOppositeProperty("Class", Types._Constraint, 9, PivotPackage.Literals.CLASS__OWNED_INVARIANTS);
		public static final @NonNull Property _Constraint__Constraint__redefinedConstraints = LIBRARY.createOppositeProperty("Constraint", Types._Constraint, 10, PivotPackage.Literals.CONSTRAINT__REDEFINED_CONSTRAINTS);
		public static final @NonNull Property _Constraint__Namespace__ownedConstraints = LIBRARY.createOppositeProperty("Namespace", Types._Constraint, 11, PivotPackage.Literals.NAMESPACE__OWNED_CONSTRAINTS);

		public static final @NonNull Property _DataType__behavioralClass = LIBRARY.createProperty(PivotPackage.Literals.DATA_TYPE__BEHAVIORAL_CLASS, Types._DataType, 0);
		public static final @NonNull Property _DataType__isSerializable = LIBRARY.createProperty(PivotPackage.Literals.DATA_TYPE__IS_SERIALIZABLE, Types._DataType, 1);
		public static final @NonNull Property _DataType__value = LIBRARY.createProperty(PivotPackage.Literals.DATA_TYPE__VALUE, Types._DataType, 2);

		public static final @NonNull Property _Detail__values = LIBRARY.createProperty(PivotPackage.Literals.DETAIL__VALUES, Types._Detail, 0);
		public static final @NonNull Property _Detail__Annotation__ownedDetails = LIBRARY.createOppositeProperty("Annotation", Types._Detail, 1, PivotPackage.Literals.ANNOTATION__OWNED_DETAILS);

		public static final @NonNull Property _DynamicElement__metaType = LIBRARY.createProperty(PivotPackage.Literals.DYNAMIC_ELEMENT__META_TYPE, Types._DynamicElement, 0);

		public static final @NonNull Property _DynamicProperty__default = LIBRARY.createProperty(PivotPackage.Literals.DYNAMIC_PROPERTY__DEFAULT, Types._DynamicProperty, 0);
		public static final @NonNull Property _DynamicProperty__referredProperty = LIBRARY.createProperty(PivotPackage.Literals.DYNAMIC_PROPERTY__REFERRED_PROPERTY, Types._DynamicProperty, 1);
		public static final @NonNull Property _DynamicProperty__DynamicType__ownedDynamicProperties = LIBRARY.createOppositeProperty("DynamicType", Types._DynamicProperty, 2, PivotPackage.Literals.DYNAMIC_TYPE__OWNED_DYNAMIC_PROPERTIES);

		public static final @NonNull Property _DynamicType__ownedDynamicProperties = LIBRARY.createProperty(PivotPackage.Literals.DYNAMIC_TYPE__OWNED_DYNAMIC_PROPERTIES, Types._DynamicType, 0);

		public static final @NonNull Property _Element__annotatingComments = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT__ANNOTATING_COMMENTS, Types._Element, 0);
		public static final @NonNull Property _Element__ownedAnnotations = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT__OWNED_ANNOTATIONS, Types._Element, 1);
		public static final @NonNull Property _Element__ownedComments = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT__OWNED_COMMENTS, Types._Element, 2);
		public static final @NonNull Property _Element__ownedExtensions = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT__OWNED_EXTENSIONS, Types._Element, 3);
		public static final @NonNull Property _Element__Annotation__ownedContents = LIBRARY.createOppositeProperty("Annotation", Types._Element, 4, PivotPackage.Literals.ANNOTATION__OWNED_CONTENTS);
		public static final @NonNull Property _Element__Annotation__references = LIBRARY.createOppositeProperty("Annotation", Types._Element, 5, PivotPackage.Literals.ANNOTATION__REFERENCES);
		public static final @NonNull Property _Element__Constraint__constrainedElements = LIBRARY.createOppositeProperty("Constraint", Types._Element, 6, PivotPackage.Literals.CONSTRAINT__CONSTRAINED_ELEMENTS);
		public static final @NonNull Property _Element__Element__ownedAnnotations = LIBRARY.createOppositeProperty("Element", Types._Element, 7, PivotPackage.Literals.ELEMENT__OWNED_ANNOTATIONS);

		public static final @NonNull Property _ElementExtension__base = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__BASE, Types._ElementExtension, 0);
		public static final @NonNull Property _ElementExtension__isApplied = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__IS_APPLIED, Types._ElementExtension, 1);
		public static final @NonNull Property _ElementExtension__isRequired = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__IS_REQUIRED, Types._ElementExtension, 2);
		public static final @NonNull Property _ElementExtension__stereotype = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT_EXTENSION__STEREOTYPE, Types._ElementExtension, 3);

		public static final @NonNull Property _ElementLiteralExp__referredElement = LIBRARY.createProperty(PivotPackage.Literals.ELEMENT_LITERAL_EXP__REFERRED_ELEMENT, Types._ElementLiteralExp, 0);

		public static final @NonNull Property _EnumLiteralExp__referredLiteral = LIBRARY.createProperty(PivotPackage.Literals.ENUM_LITERAL_EXP__REFERRED_LITERAL, Types._EnumLiteralExp, 0);

		public static final @NonNull Property _Enumeration__ownedLiterals = LIBRARY.createProperty(PivotPackage.Literals.ENUMERATION__OWNED_LITERALS, Types._Enumeration, 0);

		public static final @NonNull Property _EnumerationLiteral__literal = LIBRARY.createProperty(PivotPackage.Literals.ENUMERATION_LITERAL__LITERAL, Types._EnumerationLiteral, 0);
		public static final @NonNull Property _EnumerationLiteral__owningEnumeration = LIBRARY.createProperty(PivotPackage.Literals.ENUMERATION_LITERAL__OWNING_ENUMERATION, Types._EnumerationLiteral, 1);
		public static final @NonNull Property _EnumerationLiteral__value = LIBRARY.createProperty(PivotPackage.Literals.ENUMERATION_LITERAL__VALUE, Types._EnumerationLiteral, 2);
		public static final @NonNull Property _EnumerationLiteral__EnumLiteralExp__referredLiteral = LIBRARY.createOppositeProperty("EnumLiteralExp", Types._EnumerationLiteral, 3, PivotPackage.Literals.ENUM_LITERAL_EXP__REFERRED_LITERAL);

		public static final @NonNull Property _ExpressionInOCL__ownedBody = LIBRARY.createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_BODY, Types._ExpressionInOCL, 0);
		public static final @NonNull Property _ExpressionInOCL__ownedContext = LIBRARY.createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_CONTEXT, Types._ExpressionInOCL, 1);
		public static final @NonNull Property _ExpressionInOCL__ownedParameters = LIBRARY.createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_PARAMETERS, Types._ExpressionInOCL, 2);
		public static final @NonNull Property _ExpressionInOCL__ownedResult = LIBRARY.createProperty(PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_RESULT, Types._ExpressionInOCL, 3);

		public static final @NonNull Property _Feature__implementation = LIBRARY.createProperty(PivotPackage.Literals.FEATURE__IMPLEMENTATION, Types._Feature, 0);
		public static final @NonNull Property _Feature__implementationClass = LIBRARY.createProperty(PivotPackage.Literals.FEATURE__IMPLEMENTATION_CLASS, Types._Feature, 1);
		public static final @NonNull Property _Feature__isStatic = LIBRARY.createProperty(PivotPackage.Literals.FEATURE__IS_STATIC, Types._Feature, 2);

		public static final @NonNull Property _FeatureCallExp__isPre = LIBRARY.createProperty(PivotPackage.Literals.FEATURE_CALL_EXP__IS_PRE, Types._FeatureCallExp, 0);

		public static final @NonNull Property _IfExp__isElseIf = LIBRARY.createProperty(PivotPackage.Literals.IF_EXP__IS_ELSE_IF, Types._IfExp, 0);
		public static final @NonNull Property _IfExp__ownedCondition = LIBRARY.createProperty(PivotPackage.Literals.IF_EXP__OWNED_CONDITION, Types._IfExp, 1);
		public static final @NonNull Property _IfExp__ownedElse = LIBRARY.createProperty(PivotPackage.Literals.IF_EXP__OWNED_ELSE, Types._IfExp, 2);
		public static final @NonNull Property _IfExp__ownedThen = LIBRARY.createProperty(PivotPackage.Literals.IF_EXP__OWNED_THEN, Types._IfExp, 3);

		public static final @NonNull Property _Import__importedNamespace = LIBRARY.createProperty(PivotPackage.Literals.IMPORT__IMPORTED_NAMESPACE, Types._Import, 0);
		public static final @NonNull Property _Import__xmiidVersion = LIBRARY.createProperty(PivotPackage.Literals.IMPORT__XMIID_VERSION, Types._Import, 1);
		public static final @NonNull Property _Import__Model__ownedImports = LIBRARY.createOppositeProperty("Model", Types._Import, 2, PivotPackage.Literals.MODEL__OWNED_IMPORTS);

		public static final @NonNull Property _InstanceSpecification__classes = LIBRARY.createProperty(PivotPackage.Literals.INSTANCE_SPECIFICATION__CLASSES, Types._InstanceSpecification, 0);
		public static final @NonNull Property _InstanceSpecification__ownedSlots = LIBRARY.createProperty(PivotPackage.Literals.INSTANCE_SPECIFICATION__OWNED_SLOTS, Types._InstanceSpecification, 1);
		public static final @NonNull Property _InstanceSpecification__ownedSpecification = LIBRARY.createProperty(PivotPackage.Literals.INSTANCE_SPECIFICATION__OWNED_SPECIFICATION, Types._InstanceSpecification, 2);
		public static final @NonNull Property _InstanceSpecification__owningPackage = LIBRARY.createProperty(PivotPackage.Literals.INSTANCE_SPECIFICATION__OWNING_PACKAGE, Types._InstanceSpecification, 3);

		public static final @NonNull Property _IntegerLiteralExp__integerSymbol = LIBRARY.createProperty(PivotPackage.Literals.INTEGER_LITERAL_EXP__INTEGER_SYMBOL, Types._IntegerLiteralExp, 0);

		public static final @NonNull Property _IterateExp__ownedResult = LIBRARY.createProperty(PivotPackage.Literals.ITERATE_EXP__OWNED_RESULT, Types._IterateExp, 0);

		public static final @NonNull Property _Iteration__ownedAccumulators = LIBRARY.createProperty(PivotPackage.Literals.ITERATION__OWNED_ACCUMULATORS, Types._Iteration, 0);
		public static final @NonNull Property _Iteration__ownedIterators = LIBRARY.createProperty(PivotPackage.Literals.ITERATION__OWNED_ITERATORS, Types._Iteration, 1);
		public static final @NonNull Property _Iteration__LoopExp__referredIteration = LIBRARY.createOppositeProperty("LoopExp", Types._Iteration, 2, PivotPackage.Literals.LOOP_EXP__REFERRED_ITERATION);

		public static final @NonNull Property _IteratorVariable__LoopExp__ownedCoIterators = LIBRARY.createOppositeProperty("LoopExp", Types._IteratorVariable, 0, PivotPackage.Literals.LOOP_EXP__OWNED_CO_ITERATORS);

		public static final @NonNull Property _LambdaType__contextType = LIBRARY.createProperty(PivotPackage.Literals.LAMBDA_TYPE__CONTEXT_TYPE, Types._LambdaType, 0);
		public static final @NonNull Property _LambdaType__parameterType = LIBRARY.createProperty(PivotPackage.Literals.LAMBDA_TYPE__PARAMETER_TYPE, Types._LambdaType, 1);
		public static final @NonNull Property _LambdaType__resultType = LIBRARY.createProperty(PivotPackage.Literals.LAMBDA_TYPE__RESULT_TYPE, Types._LambdaType, 2);

		public static final @NonNull Property _LanguageExpression__body = LIBRARY.createProperty(PivotPackage.Literals.LANGUAGE_EXPRESSION__BODY, Types._LanguageExpression, 0);
		public static final @NonNull Property _LanguageExpression__language = LIBRARY.createProperty(PivotPackage.Literals.LANGUAGE_EXPRESSION__LANGUAGE, Types._LanguageExpression, 1);
		public static final @NonNull Property _LanguageExpression__owningConstraint = LIBRARY.createProperty(PivotPackage.Literals.LANGUAGE_EXPRESSION__OWNING_CONSTRAINT, Types._LanguageExpression, 2);
		public static final @NonNull Property _LanguageExpression__InstanceSpecification__ownedSpecification = LIBRARY.createOppositeProperty("InstanceSpecification", Types._LanguageExpression, 3, PivotPackage.Literals.INSTANCE_SPECIFICATION__OWNED_SPECIFICATION);
		public static final @NonNull Property _LanguageExpression__Operation__bodyExpression = LIBRARY.createOppositeProperty("Operation", Types._LanguageExpression, 4, PivotPackage.Literals.OPERATION__BODY_EXPRESSION);
		public static final @NonNull Property _LanguageExpression__Property__ownedExpression = LIBRARY.createOppositeProperty("Property", Types._LanguageExpression, 5, PivotPackage.Literals.PROPERTY__OWNED_EXPRESSION);

		public static final @NonNull Property _LetExp__ownedIn = LIBRARY.createProperty(PivotPackage.Literals.LET_EXP__OWNED_IN, Types._LetExp, 0);
		public static final @NonNull Property _LetExp__ownedVariable = LIBRARY.createProperty(PivotPackage.Literals.LET_EXP__OWNED_VARIABLE, Types._LetExp, 1);

		public static final @NonNull Property _Library__ownedPrecedences = LIBRARY.createProperty(PivotPackage.Literals.LIBRARY__OWNED_PRECEDENCES, Types._Library, 0);

		public static final @NonNull Property _LoopExp__ownedBody = LIBRARY.createProperty(PivotPackage.Literals.LOOP_EXP__OWNED_BODY, Types._LoopExp, 0);
		public static final @NonNull Property _LoopExp__ownedCoIterators = LIBRARY.createProperty(PivotPackage.Literals.LOOP_EXP__OWNED_CO_ITERATORS, Types._LoopExp, 1);
		public static final @NonNull Property _LoopExp__ownedIterators = LIBRARY.createProperty(PivotPackage.Literals.LOOP_EXP__OWNED_ITERATORS, Types._LoopExp, 2);
		public static final @NonNull Property _LoopExp__referredIteration = LIBRARY.createProperty(PivotPackage.Literals.LOOP_EXP__REFERRED_ITERATION, Types._LoopExp, 3);

		public static final @NonNull Property _MapLiteralExp__ownedParts = LIBRARY.createProperty(PivotPackage.Literals.MAP_LITERAL_EXP__OWNED_PARTS, Types._MapLiteralExp, 0);

		public static final @NonNull Property _MapLiteralPart__ownedKey = LIBRARY.createProperty(PivotPackage.Literals.MAP_LITERAL_PART__OWNED_KEY, Types._MapLiteralPart, 0);
		public static final @NonNull Property _MapLiteralPart__ownedValue = LIBRARY.createProperty(PivotPackage.Literals.MAP_LITERAL_PART__OWNED_VALUE, Types._MapLiteralPart, 1);
		public static final @NonNull Property _MapLiteralPart__MapLiteralExp__ownedParts = LIBRARY.createOppositeProperty("MapLiteralExp", Types._MapLiteralPart, 2, PivotPackage.Literals.MAP_LITERAL_EXP__OWNED_PARTS);

		public static final @NonNull Property _MapType__entryClass = LIBRARY.createProperty(PivotPackage.Literals.MAP_TYPE__ENTRY_CLASS, Types._MapType, 0);
		public static final @NonNull Property _MapType__keyType = LIBRARY.createProperty("keyType", Types._MapType, 1, org.eclipse.ocl.pivot.library.map.MapKeyTypeProperty.INSTANCE);
		public static final @NonNull Property _MapType__keysAreNullFree = LIBRARY.createProperty(PivotPackage.Literals.MAP_TYPE__KEYS_ARE_NULL_FREE, Types._MapType, 2);
		public static final @NonNull Property _MapType__valueType = LIBRARY.createProperty("valueType", Types._MapType, 3, org.eclipse.ocl.pivot.library.map.MapValueTypeProperty.INSTANCE);
		public static final @NonNull Property _MapType__valuesAreNullFree = LIBRARY.createProperty(PivotPackage.Literals.MAP_TYPE__VALUES_ARE_NULL_FREE, Types._MapType, 4);

		public static final @NonNull Property _MessageExp__ownedArguments = LIBRARY.createProperty(PivotPackage.Literals.MESSAGE_EXP__OWNED_ARGUMENTS, Types._MessageExp, 0);
		public static final @NonNull Property _MessageExp__ownedCalledOperation = LIBRARY.createProperty(PivotPackage.Literals.MESSAGE_EXP__OWNED_CALLED_OPERATION, Types._MessageExp, 1);
		public static final @NonNull Property _MessageExp__ownedSentSignal = LIBRARY.createProperty(PivotPackage.Literals.MESSAGE_EXP__OWNED_SENT_SIGNAL, Types._MessageExp, 2);
		public static final @NonNull Property _MessageExp__ownedTarget = LIBRARY.createProperty(PivotPackage.Literals.MESSAGE_EXP__OWNED_TARGET, Types._MessageExp, 3);

		public static final @NonNull Property _MessageType__referredOperation = LIBRARY.createProperty(PivotPackage.Literals.MESSAGE_TYPE__REFERRED_OPERATION, Types._MessageType, 0);
		public static final @NonNull Property _MessageType__referredSignal = LIBRARY.createProperty(PivotPackage.Literals.MESSAGE_TYPE__REFERRED_SIGNAL, Types._MessageType, 1);

		public static final @NonNull Property _Model__externalURI = LIBRARY.createProperty(PivotPackage.Literals.MODEL__EXTERNAL_URI, Types._Model, 0);
		public static final @NonNull Property _Model__ownedImports = LIBRARY.createProperty(PivotPackage.Literals.MODEL__OWNED_IMPORTS, Types._Model, 1);
		public static final @NonNull Property _Model__ownedPackages = LIBRARY.createProperty(PivotPackage.Literals.MODEL__OWNED_PACKAGES, Types._Model, 2);
		public static final @NonNull Property _Model__xmiidVersion = LIBRARY.createProperty(PivotPackage.Literals.MODEL__XMIID_VERSION, Types._Model, 3);
		public static final @NonNull Property _Model__CompleteModel__partialModels = LIBRARY.createOppositeProperty("CompleteModel", Types._Model, 4, PivotPackage.Literals.COMPLETE_MODEL__PARTIAL_MODELS);

		public static final @NonNull Property _NamedElement__name = LIBRARY.createProperty(PivotPackage.Literals.NAMED_ELEMENT__NAME, Types._NamedElement, 0);

		public static final @NonNull Property _Namespace__ownedConstraints = LIBRARY.createProperty(PivotPackage.Literals.NAMESPACE__OWNED_CONSTRAINTS, Types._Namespace, 0);
		public static final @NonNull Property _Namespace__Constraint__context = LIBRARY.createOppositeProperty("Constraint", Types._Namespace, 1, PivotPackage.Literals.CONSTRAINT__CONTEXT);
		public static final @NonNull Property _Namespace__Import__importedNamespace = LIBRARY.createOppositeProperty("Import", Types._Namespace, 2, PivotPackage.Literals.IMPORT__IMPORTED_NAMESPACE);

		public static final @NonNull Property _NavigationCallExp__navigationSource = LIBRARY.createProperty(PivotPackage.Literals.NAVIGATION_CALL_EXP__NAVIGATION_SOURCE, Types._NavigationCallExp, 0);
		public static final @NonNull Property _NavigationCallExp__qualifiers = LIBRARY.createProperty(PivotPackage.Literals.NAVIGATION_CALL_EXP__QUALIFIERS, Types._NavigationCallExp, 1);

		public static final @NonNull Property _OCLExpression__typeValue = LIBRARY.createProperty(PivotPackage.Literals.OCL_EXPRESSION__TYPE_VALUE, Types._OCLExpression, 0);
		public static final @NonNull Property _OCLExpression__CallExp__ownedSource = LIBRARY.createOppositeProperty("CallExp", Types._OCLExpression, 1, PivotPackage.Literals.CALL_EXP__OWNED_SOURCE);
		public static final @NonNull Property _OCLExpression__CollectionItem__ownedItem = LIBRARY.createOppositeProperty("CollectionItem", Types._OCLExpression, 2, PivotPackage.Literals.COLLECTION_ITEM__OWNED_ITEM);
		public static final @NonNull Property _OCLExpression__CollectionRange__ownedFirst = LIBRARY.createOppositeProperty("CollectionRange", Types._OCLExpression, 3, PivotPackage.Literals.COLLECTION_RANGE__OWNED_FIRST);
		public static final @NonNull Property _OCLExpression__CollectionRange__ownedLast = LIBRARY.createOppositeProperty("CollectionRange", Types._OCLExpression, 4, PivotPackage.Literals.COLLECTION_RANGE__OWNED_LAST);
		public static final @NonNull Property _OCLExpression__ExpressionInOCL__ownedBody = LIBRARY.createOppositeProperty("ExpressionInOCL", Types._OCLExpression, 5, PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_BODY);
		public static final @NonNull Property _OCLExpression__IfExp__ownedCondition = LIBRARY.createOppositeProperty("IfExp", Types._OCLExpression, 6, PivotPackage.Literals.IF_EXP__OWNED_CONDITION);
		public static final @NonNull Property _OCLExpression__IfExp__ownedElse = LIBRARY.createOppositeProperty("IfExp", Types._OCLExpression, 7, PivotPackage.Literals.IF_EXP__OWNED_ELSE);
		public static final @NonNull Property _OCLExpression__IfExp__ownedThen = LIBRARY.createOppositeProperty("IfExp", Types._OCLExpression, 8, PivotPackage.Literals.IF_EXP__OWNED_THEN);
		public static final @NonNull Property _OCLExpression__LetExp__ownedIn = LIBRARY.createOppositeProperty("LetExp", Types._OCLExpression, 9, PivotPackage.Literals.LET_EXP__OWNED_IN);
		public static final @NonNull Property _OCLExpression__LoopExp__ownedBody = LIBRARY.createOppositeProperty("LoopExp", Types._OCLExpression, 10, PivotPackage.Literals.LOOP_EXP__OWNED_BODY);
		public static final @NonNull Property _OCLExpression__MapLiteralPart__ownedKey = LIBRARY.createOppositeProperty("MapLiteralPart", Types._OCLExpression, 11, PivotPackage.Literals.MAP_LITERAL_PART__OWNED_KEY);
		public static final @NonNull Property _OCLExpression__MapLiteralPart__ownedValue = LIBRARY.createOppositeProperty("MapLiteralPart", Types._OCLExpression, 12, PivotPackage.Literals.MAP_LITERAL_PART__OWNED_VALUE);
		public static final @NonNull Property _OCLExpression__MessageExp__ownedArguments = LIBRARY.createOppositeProperty("MessageExp", Types._OCLExpression, 13, PivotPackage.Literals.MESSAGE_EXP__OWNED_ARGUMENTS);
		public static final @NonNull Property _OCLExpression__MessageExp__ownedTarget = LIBRARY.createOppositeProperty("MessageExp", Types._OCLExpression, 14, PivotPackage.Literals.MESSAGE_EXP__OWNED_TARGET);
		public static final @NonNull Property _OCLExpression__NavigationCallExp__qualifiers = LIBRARY.createOppositeProperty("NavigationCallExp", Types._OCLExpression, 15, PivotPackage.Literals.NAVIGATION_CALL_EXP__QUALIFIERS);
		public static final @NonNull Property _OCLExpression__OperationCallExp__ownedArguments = LIBRARY.createOppositeProperty("OperationCallExp", Types._OCLExpression, 16, PivotPackage.Literals.OPERATION_CALL_EXP__OWNED_ARGUMENTS);
		public static final @NonNull Property _OCLExpression__ShadowPart__ownedInit = LIBRARY.createOppositeProperty("ShadowPart", Types._OCLExpression, 17, PivotPackage.Literals.SHADOW_PART__OWNED_INIT);
		public static final @NonNull Property _OCLExpression__TupleLiteralPart__ownedInit = LIBRARY.createOppositeProperty("TupleLiteralPart", Types._OCLExpression, 18, PivotPackage.Literals.TUPLE_LITERAL_PART__OWNED_INIT);
		public static final @NonNull Property _OCLExpression__Variable__ownedInit = LIBRARY.createOppositeProperty("Variable", Types._OCLExpression, 19, PivotPackage.Literals.VARIABLE__OWNED_INIT);

		public static final @NonNull Property _Operation__bodyExpression = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__BODY_EXPRESSION, Types._Operation, 0);
		public static final @NonNull Property _Operation__isInvalidating = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__IS_INVALIDATING, Types._Operation, 1);
		public static final @NonNull Property _Operation__isTransient = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__IS_TRANSIENT, Types._Operation, 2);
		public static final @NonNull Property _Operation__isTypeof = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__IS_TYPEOF, Types._Operation, 3);
		public static final @NonNull Property _Operation__isValidating = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__IS_VALIDATING, Types._Operation, 4);
		public static final @NonNull Property _Operation__ownedParameters = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__OWNED_PARAMETERS, Types._Operation, 5);
		public static final @NonNull Property _Operation__ownedPostconditions = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__OWNED_POSTCONDITIONS, Types._Operation, 6);
		public static final @NonNull Property _Operation__ownedPreconditions = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__OWNED_PRECONDITIONS, Types._Operation, 7);
		public static final @NonNull Property _Operation__owningClass = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__OWNING_CLASS, Types._Operation, 8);
		public static final @NonNull Property _Operation__precedence = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__PRECEDENCE, Types._Operation, 9);
		public static final @NonNull Property _Operation__raisedExceptions = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__RAISED_EXCEPTIONS, Types._Operation, 10);
		public static final @NonNull Property _Operation__redefinedOperations = LIBRARY.createProperty(PivotPackage.Literals.OPERATION__REDEFINED_OPERATIONS, Types._Operation, 11);
		public static final @NonNull Property _Operation__CallOperationAction__operation = LIBRARY.createOppositeProperty("CallOperationAction", Types._Operation, 12, PivotPackage.Literals.CALL_OPERATION_ACTION__OPERATION);
		public static final @NonNull Property _Operation__MessageType__referredOperation = LIBRARY.createOppositeProperty("MessageType", Types._Operation, 13, PivotPackage.Literals.MESSAGE_TYPE__REFERRED_OPERATION);
		public static final @NonNull Property _Operation__Operation__redefinedOperations = LIBRARY.createOppositeProperty("Operation", Types._Operation, 14, PivotPackage.Literals.OPERATION__REDEFINED_OPERATIONS);
		public static final @NonNull Property _Operation__OperationCallExp__referredOperation = LIBRARY.createOppositeProperty("OperationCallExp", Types._Operation, 15, PivotPackage.Literals.OPERATION_CALL_EXP__REFERRED_OPERATION);
		public static final @NonNull Property _Operation__PrimitiveType__coercions = LIBRARY.createOppositeProperty("PrimitiveType", Types._Operation, 16, PivotPackage.Literals.PRIMITIVE_TYPE__COERCIONS);

		public static final @NonNull Property _OperationCallExp__isVirtual = LIBRARY.createProperty(PivotPackage.Literals.OPERATION_CALL_EXP__IS_VIRTUAL, Types._OperationCallExp, 0);
		public static final @NonNull Property _OperationCallExp__ownedArguments = LIBRARY.createProperty(PivotPackage.Literals.OPERATION_CALL_EXP__OWNED_ARGUMENTS, Types._OperationCallExp, 1);
		public static final @NonNull Property _OperationCallExp__referredOperation = LIBRARY.createProperty(PivotPackage.Literals.OPERATION_CALL_EXP__REFERRED_OPERATION, Types._OperationCallExp, 2);

		public static final @NonNull Property _OppositePropertyCallExp__referredProperty = LIBRARY.createProperty(PivotPackage.Literals.OPPOSITE_PROPERTY_CALL_EXP__REFERRED_PROPERTY, Types._OppositePropertyCallExp, 0);

		public static final @NonNull Property _OrphanCompletePackage__CompleteModel__orphanCompletePackage = LIBRARY.createOppositeProperty("CompleteModel", Types._OrphanCompletePackage, 0, PivotPackage.Literals.COMPLETE_MODEL__ORPHAN_COMPLETE_PACKAGE);

		public static final @NonNull Property _Package__URI = LIBRARY.createProperty(PivotPackage.Literals.PACKAGE__URI, Types._Package, 0);
		public static final @NonNull Property _Package__importedPackages = LIBRARY.createProperty(PivotPackage.Literals.PACKAGE__IMPORTED_PACKAGES, Types._Package, 1);
		public static final @NonNull Property _Package__nsPrefix = LIBRARY.createProperty(PivotPackage.Literals.PACKAGE__NS_PREFIX, Types._Package, 2);
		public static final @NonNull Property _Package__ownedClasses = LIBRARY.createProperty(PivotPackage.Literals.PACKAGE__OWNED_CLASSES, Types._Package, 3);
		public static final @NonNull Property _Package__ownedInstances = LIBRARY.createProperty(PivotPackage.Literals.PACKAGE__OWNED_INSTANCES, Types._Package, 4);
		public static final @NonNull Property _Package__ownedPackages = LIBRARY.createProperty(PivotPackage.Literals.PACKAGE__OWNED_PACKAGES, Types._Package, 5);
		public static final @NonNull Property _Package__ownedProfileApplications = LIBRARY.createProperty(PivotPackage.Literals.PACKAGE__OWNED_PROFILE_APPLICATIONS, Types._Package, 6);
		public static final @NonNull Property _Package__owningPackage = LIBRARY.createProperty(PivotPackage.Literals.PACKAGE__OWNING_PACKAGE, Types._Package, 7);
		public static final @NonNull Property _Package__CompletePackage__partialPackages = LIBRARY.createOppositeProperty("CompletePackage", Types._Package, 8, PivotPackage.Literals.COMPLETE_PACKAGE__PARTIAL_PACKAGES);
		public static final @NonNull Property _Package__Model__ownedPackages = LIBRARY.createOppositeProperty("Model", Types._Package, 9, PivotPackage.Literals.MODEL__OWNED_PACKAGES);
		public static final @NonNull Property _Package__Package__importedPackages = LIBRARY.createOppositeProperty("Package", Types._Package, 10, PivotPackage.Literals.PACKAGE__IMPORTED_PACKAGES);

		public static final @NonNull Property _Parameter__isTypeof = LIBRARY.createProperty(PivotPackage.Literals.PARAMETER__IS_TYPEOF, Types._Parameter, 0);
		public static final @NonNull Property _Parameter__owningOperation = LIBRARY.createProperty(PivotPackage.Literals.PARAMETER__OWNING_OPERATION, Types._Parameter, 1);
		public static final @NonNull Property _Parameter__Iteration__ownedAccumulators = LIBRARY.createOppositeProperty("Iteration", Types._Parameter, 2, PivotPackage.Literals.ITERATION__OWNED_ACCUMULATORS);
		public static final @NonNull Property _Parameter__Iteration__ownedIterators = LIBRARY.createOppositeProperty("Iteration", Types._Parameter, 3, PivotPackage.Literals.ITERATION__OWNED_ITERATORS);
		public static final @NonNull Property _Parameter__Variable__representedParameter = LIBRARY.createOppositeProperty("Variable", Types._Parameter, 4, PivotPackage.Literals.VARIABLE__REPRESENTED_PARAMETER);

		public static final @NonNull Property _Precedence__associativity = LIBRARY.createProperty(PivotPackage.Literals.PRECEDENCE__ASSOCIATIVITY, Types._Precedence, 0);
		public static final @NonNull Property _Precedence__order = LIBRARY.createProperty(PivotPackage.Literals.PRECEDENCE__ORDER, Types._Precedence, 1);
		public static final @NonNull Property _Precedence__Library__ownedPrecedences = LIBRARY.createOppositeProperty("Library", Types._Precedence, 2, PivotPackage.Literals.LIBRARY__OWNED_PRECEDENCES);
		public static final @NonNull Property _Precedence__Operation__precedence = LIBRARY.createOppositeProperty("Operation", Types._Precedence, 3, PivotPackage.Literals.OPERATION__PRECEDENCE);

		public static final @NonNull Property _PrimitiveCompletePackage__CompleteModel__primitiveCompletePackage = LIBRARY.createOppositeProperty("CompleteModel", Types._PrimitiveCompletePackage, 0, PivotPackage.Literals.COMPLETE_MODEL__PRIMITIVE_COMPLETE_PACKAGE);

		public static final @NonNull Property _PrimitiveType__coercions = LIBRARY.createProperty(PivotPackage.Literals.PRIMITIVE_TYPE__COERCIONS, Types._PrimitiveType, 0);

		public static final @NonNull Property _Profile__profileApplications = LIBRARY.createProperty(PivotPackage.Literals.PROFILE__PROFILE_APPLICATIONS, Types._Profile, 0);

		public static final @NonNull Property _ProfileApplication__appliedProfile = LIBRARY.createProperty(PivotPackage.Literals.PROFILE_APPLICATION__APPLIED_PROFILE, Types._ProfileApplication, 0);
		public static final @NonNull Property _ProfileApplication__isStrict = LIBRARY.createProperty(PivotPackage.Literals.PROFILE_APPLICATION__IS_STRICT, Types._ProfileApplication, 1);
		public static final @NonNull Property _ProfileApplication__owningPackage = LIBRARY.createProperty(PivotPackage.Literals.PROFILE_APPLICATION__OWNING_PACKAGE, Types._ProfileApplication, 2);

		public static final @NonNull Property _Property__associationClass = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__ASSOCIATION_CLASS, Types._Property, 0);
		public static final @NonNull Property _Property__defaultValue = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__DEFAULT_VALUE, Types._Property, 1);
		public static final @NonNull Property _Property__defaultValueString = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__DEFAULT_VALUE_STRING, Types._Property, 2);
		public static final @NonNull Property _Property__isComposite = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_COMPOSITE, Types._Property, 3);
		public static final @NonNull Property _Property__isDerived = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_DERIVED, Types._Property, 4);
		public static final @NonNull Property _Property__isID = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_ID, Types._Property, 5);
		public static final @NonNull Property _Property__isImplicit = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_IMPLICIT, Types._Property, 6);
		public static final @NonNull Property _Property__isReadOnly = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_READ_ONLY, Types._Property, 7);
		public static final @NonNull Property _Property__isResolveProxies = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_RESOLVE_PROXIES, Types._Property, 8);
		public static final @NonNull Property _Property__isTransient = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_TRANSIENT, Types._Property, 9);
		public static final @NonNull Property _Property__isUnsettable = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_UNSETTABLE, Types._Property, 10);
		public static final @NonNull Property _Property__isVolatile = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__IS_VOLATILE, Types._Property, 11);
		public static final @NonNull Property _Property__keys = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__KEYS, Types._Property, 12);
		public static final @NonNull Property _Property__opposite = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__OPPOSITE, Types._Property, 13);
		public static final @NonNull Property _Property__ownedExpression = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__OWNED_EXPRESSION, Types._Property, 14);
		public static final @NonNull Property _Property__owningClass = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__OWNING_CLASS, Types._Property, 15);
		public static final @NonNull Property _Property__redefinedProperties = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__REDEFINED_PROPERTIES, Types._Property, 16);
		public static final @NonNull Property _Property__referredProperty = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__REFERRED_PROPERTY, Types._Property, 17);
		public static final @NonNull Property _Property__subsettedProperty = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY__SUBSETTED_PROPERTY, Types._Property, 18);
		public static final @NonNull Property _Property__DynamicProperty__referredProperty = LIBRARY.createOppositeProperty("DynamicProperty", Types._Property, 19, PivotPackage.Literals.DYNAMIC_PROPERTY__REFERRED_PROPERTY);
		public static final @NonNull Property _Property__NavigationCallExp__navigationSource = LIBRARY.createOppositeProperty("NavigationCallExp", Types._Property, 20, PivotPackage.Literals.NAVIGATION_CALL_EXP__NAVIGATION_SOURCE);
		public static final @NonNull Property _Property__OppositePropertyCallExp__referredProperty = LIBRARY.createOppositeProperty("OppositePropertyCallExp", Types._Property, 21, PivotPackage.Literals.OPPOSITE_PROPERTY_CALL_EXP__REFERRED_PROPERTY);
		public static final @NonNull Property _Property__Property__keys = LIBRARY.createOppositeProperty("Property", Types._Property, 22, PivotPackage.Literals.PROPERTY__KEYS);
		public static final @NonNull Property _Property__Property__opposite = LIBRARY.createOppositeProperty("Property", Types._Property, 23, PivotPackage.Literals.PROPERTY__OPPOSITE);
		public static final @NonNull Property _Property__Property__redefinedProperties = LIBRARY.createOppositeProperty("Property", Types._Property, 24, PivotPackage.Literals.PROPERTY__REDEFINED_PROPERTIES);
		public static final @NonNull Property _Property__Property__referredProperty = LIBRARY.createOppositeProperty("Property", Types._Property, 25, PivotPackage.Literals.PROPERTY__REFERRED_PROPERTY);
		public static final @NonNull Property _Property__Property__subsettedProperty = LIBRARY.createOppositeProperty("Property", Types._Property, 26, PivotPackage.Literals.PROPERTY__SUBSETTED_PROPERTY);
		public static final @NonNull Property _Property__PropertyCallExp__referredProperty = LIBRARY.createOppositeProperty("PropertyCallExp", Types._Property, 27, PivotPackage.Literals.PROPERTY_CALL_EXP__REFERRED_PROPERTY);
		public static final @NonNull Property _Property__ShadowPart__referredProperty = LIBRARY.createOppositeProperty("ShadowPart", Types._Property, 28, PivotPackage.Literals.SHADOW_PART__REFERRED_PROPERTY);
		public static final @NonNull Property _Property__Slot__definingProperty = LIBRARY.createOppositeProperty("Slot", Types._Property, 29, PivotPackage.Literals.SLOT__DEFINING_PROPERTY);

		public static final @NonNull Property _PropertyCallExp__referredProperty = LIBRARY.createProperty(PivotPackage.Literals.PROPERTY_CALL_EXP__REFERRED_PROPERTY, Types._PropertyCallExp, 0);

		public static final @NonNull Property _Pseudostate__kind = LIBRARY.createProperty(PivotPackage.Literals.PSEUDOSTATE__KIND, Types._Pseudostate, 0);
		public static final @NonNull Property _Pseudostate__owningState = LIBRARY.createProperty(PivotPackage.Literals.PSEUDOSTATE__OWNING_STATE, Types._Pseudostate, 1);
		public static final @NonNull Property _Pseudostate__owningStateMachine = LIBRARY.createProperty(PivotPackage.Literals.PSEUDOSTATE__OWNING_STATE_MACHINE, Types._Pseudostate, 2);
		public static final @NonNull Property _Pseudostate__ConnectionPointReference__entries = LIBRARY.createOppositeProperty("ConnectionPointReference", Types._Pseudostate, 3, PivotPackage.Literals.CONNECTION_POINT_REFERENCE__ENTRIES);
		public static final @NonNull Property _Pseudostate__ConnectionPointReference__exits = LIBRARY.createOppositeProperty("ConnectionPointReference", Types._Pseudostate, 4, PivotPackage.Literals.CONNECTION_POINT_REFERENCE__EXITS);

		public static final @NonNull Property _RealLiteralExp__realSymbol = LIBRARY.createProperty(PivotPackage.Literals.REAL_LITERAL_EXP__REAL_SYMBOL, Types._RealLiteralExp, 0);

		public static final @NonNull Property _Region__extendedRegion = LIBRARY.createProperty(PivotPackage.Literals.REGION__EXTENDED_REGION, Types._Region, 0);
		public static final @NonNull Property _Region__ownedSubvertexes = LIBRARY.createProperty(PivotPackage.Literals.REGION__OWNED_SUBVERTEXES, Types._Region, 1);
		public static final @NonNull Property _Region__ownedTransitions = LIBRARY.createProperty(PivotPackage.Literals.REGION__OWNED_TRANSITIONS, Types._Region, 2);
		public static final @NonNull Property _Region__owningState = LIBRARY.createProperty(PivotPackage.Literals.REGION__OWNING_STATE, Types._Region, 3);
		public static final @NonNull Property _Region__owningStateMachine = LIBRARY.createProperty(PivotPackage.Literals.REGION__OWNING_STATE_MACHINE, Types._Region, 4);
		public static final @NonNull Property _Region__Region__extendedRegion = LIBRARY.createOppositeProperty("Region", Types._Region, 5, PivotPackage.Literals.REGION__EXTENDED_REGION);

		public static final @NonNull Property _SendSignalAction__signal = LIBRARY.createProperty(PivotPackage.Literals.SEND_SIGNAL_ACTION__SIGNAL, Types._SendSignalAction, 0);
		public static final @NonNull Property _SendSignalAction__MessageExp__ownedSentSignal = LIBRARY.createOppositeProperty("MessageExp", Types._SendSignalAction, 1, PivotPackage.Literals.MESSAGE_EXP__OWNED_SENT_SIGNAL);

		public static final @NonNull Property _ShadowExp__ownedParts = LIBRARY.createProperty(PivotPackage.Literals.SHADOW_EXP__OWNED_PARTS, Types._ShadowExp, 0);
		public static final @NonNull Property _ShadowExp__value = LIBRARY.createProperty(PivotPackage.Literals.SHADOW_EXP__VALUE, Types._ShadowExp, 1);

		public static final @NonNull Property _ShadowPart__ownedInit = LIBRARY.createProperty(PivotPackage.Literals.SHADOW_PART__OWNED_INIT, Types._ShadowPart, 0);
		public static final @NonNull Property _ShadowPart__referredProperty = LIBRARY.createProperty(PivotPackage.Literals.SHADOW_PART__REFERRED_PROPERTY, Types._ShadowPart, 1);
		public static final @NonNull Property _ShadowPart__ShadowExp__ownedParts = LIBRARY.createOppositeProperty("ShadowExp", Types._ShadowPart, 2, PivotPackage.Literals.SHADOW_EXP__OWNED_PARTS);

		public static final @NonNull Property _Signal__MessageType__referredSignal = LIBRARY.createOppositeProperty("MessageType", Types._Signal, 0, PivotPackage.Literals.MESSAGE_TYPE__REFERRED_SIGNAL);
		public static final @NonNull Property _Signal__SendSignalAction__signal = LIBRARY.createOppositeProperty("SendSignalAction", Types._Signal, 1, PivotPackage.Literals.SEND_SIGNAL_ACTION__SIGNAL);

		public static final @NonNull Property _Slot__definingProperty = LIBRARY.createProperty(PivotPackage.Literals.SLOT__DEFINING_PROPERTY, Types._Slot, 0);
		public static final @NonNull Property _Slot__ownedValues = LIBRARY.createProperty(PivotPackage.Literals.SLOT__OWNED_VALUES, Types._Slot, 1);
		public static final @NonNull Property _Slot__owningInstance = LIBRARY.createProperty(PivotPackage.Literals.SLOT__OWNING_INSTANCE, Types._Slot, 2);

		public static final @NonNull Property _StandardLibrary__owningCompleteEnvironment = LIBRARY.createProperty(PivotPackage.Literals.STANDARD_LIBRARY__OWNING_COMPLETE_ENVIRONMENT, Types._StandardLibrary, 0);

		public static final @NonNull Property _State__isComposite = LIBRARY.createProperty(PivotPackage.Literals.STATE__IS_COMPOSITE, Types._State, 0);
		public static final @NonNull Property _State__isOrthogonal = LIBRARY.createProperty(PivotPackage.Literals.STATE__IS_ORTHOGONAL, Types._State, 1);
		public static final @NonNull Property _State__isSimple = LIBRARY.createProperty(PivotPackage.Literals.STATE__IS_SIMPLE, Types._State, 2);
		public static final @NonNull Property _State__isSubmachineState = LIBRARY.createProperty(PivotPackage.Literals.STATE__IS_SUBMACHINE_STATE, Types._State, 3);
		public static final @NonNull Property _State__ownedConnectionPoints = LIBRARY.createProperty(PivotPackage.Literals.STATE__OWNED_CONNECTION_POINTS, Types._State, 4);
		public static final @NonNull Property _State__ownedConnections = LIBRARY.createProperty(PivotPackage.Literals.STATE__OWNED_CONNECTIONS, Types._State, 5);
		public static final @NonNull Property _State__ownedDeferrableTriggers = LIBRARY.createProperty(PivotPackage.Literals.STATE__OWNED_DEFERRABLE_TRIGGERS, Types._State, 6);
		public static final @NonNull Property _State__ownedDoActivity = LIBRARY.createProperty(PivotPackage.Literals.STATE__OWNED_DO_ACTIVITY, Types._State, 7);
		public static final @NonNull Property _State__ownedEntry = LIBRARY.createProperty(PivotPackage.Literals.STATE__OWNED_ENTRY, Types._State, 8);
		public static final @NonNull Property _State__ownedExit = LIBRARY.createProperty(PivotPackage.Literals.STATE__OWNED_EXIT, Types._State, 9);
		public static final @NonNull Property _State__ownedRegions = LIBRARY.createProperty(PivotPackage.Literals.STATE__OWNED_REGIONS, Types._State, 10);
		public static final @NonNull Property _State__ownedStateInvariant = LIBRARY.createProperty(PivotPackage.Literals.STATE__OWNED_STATE_INVARIANT, Types._State, 11);
		public static final @NonNull Property _State__redefinedState = LIBRARY.createProperty(PivotPackage.Literals.STATE__REDEFINED_STATE, Types._State, 12);
		public static final @NonNull Property _State__submachines = LIBRARY.createProperty(PivotPackage.Literals.STATE__SUBMACHINES, Types._State, 13);
		public static final @NonNull Property _State__State__redefinedState = LIBRARY.createOppositeProperty("State", Types._State, 14, PivotPackage.Literals.STATE__REDEFINED_STATE);
		public static final @NonNull Property _State__StateExp__referredState = LIBRARY.createOppositeProperty("StateExp", Types._State, 15, PivotPackage.Literals.STATE_EXP__REFERRED_STATE);

		public static final @NonNull Property _StateExp__referredState = LIBRARY.createProperty(PivotPackage.Literals.STATE_EXP__REFERRED_STATE, Types._StateExp, 0);

		public static final @NonNull Property _StateMachine__extendedStateMachines = LIBRARY.createProperty(PivotPackage.Literals.STATE_MACHINE__EXTENDED_STATE_MACHINES, Types._StateMachine, 0);
		public static final @NonNull Property _StateMachine__ownedConnectionPoints = LIBRARY.createProperty(PivotPackage.Literals.STATE_MACHINE__OWNED_CONNECTION_POINTS, Types._StateMachine, 1);
		public static final @NonNull Property _StateMachine__ownedRegions = LIBRARY.createProperty(PivotPackage.Literals.STATE_MACHINE__OWNED_REGIONS, Types._StateMachine, 2);
		public static final @NonNull Property _StateMachine__submachineStates = LIBRARY.createProperty(PivotPackage.Literals.STATE_MACHINE__SUBMACHINE_STATES, Types._StateMachine, 3);
		public static final @NonNull Property _StateMachine__StateMachine__extendedStateMachines = LIBRARY.createOppositeProperty("StateMachine", Types._StateMachine, 4, PivotPackage.Literals.STATE_MACHINE__EXTENDED_STATE_MACHINES);

		public static final @NonNull Property _Stereotype__ownedExtenders = LIBRARY.createProperty(PivotPackage.Literals.STEREOTYPE__OWNED_EXTENDERS, Types._Stereotype, 0);
		public static final @NonNull Property _Stereotype__ElementExtension__stereotype = LIBRARY.createOppositeProperty("ElementExtension", Types._Stereotype, 1, PivotPackage.Literals.ELEMENT_EXTENSION__STEREOTYPE);

		public static final @NonNull Property _StereotypeExtender__class = LIBRARY.createProperty(PivotPackage.Literals.STEREOTYPE_EXTENDER__CLASS, Types._StereotypeExtender, 0);
		public static final @NonNull Property _StereotypeExtender__isRequired = LIBRARY.createProperty(PivotPackage.Literals.STEREOTYPE_EXTENDER__IS_REQUIRED, Types._StereotypeExtender, 1);
		public static final @NonNull Property _StereotypeExtender__owningStereotype = LIBRARY.createProperty(PivotPackage.Literals.STEREOTYPE_EXTENDER__OWNING_STEREOTYPE, Types._StereotypeExtender, 2);

		public static final @NonNull Property _StringLiteralExp__stringSymbol = LIBRARY.createProperty(PivotPackage.Literals.STRING_LITERAL_EXP__STRING_SYMBOL, Types._StringLiteralExp, 0);

		public static final @NonNull Property _TemplateBinding__ownedSubstitutions = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_BINDING__OWNED_SUBSTITUTIONS, Types._TemplateBinding, 0);
		public static final @NonNull Property _TemplateBinding__owningElement = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_BINDING__OWNING_ELEMENT, Types._TemplateBinding, 1);
		public static final @NonNull Property _TemplateBinding__templateSignature = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_BINDING__TEMPLATE_SIGNATURE, Types._TemplateBinding, 2);

		public static final @NonNull Property _TemplateParameter__constrainingClasses = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__CONSTRAINING_CLASSES, Types._TemplateParameter, 0);
		public static final @NonNull Property _TemplateParameter__owningSignature = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER__OWNING_SIGNATURE, Types._TemplateParameter, 1);
		public static final @NonNull Property _TemplateParameter__TemplateParameterSubstitution__formal = LIBRARY.createOppositeProperty("TemplateParameterSubstitution", Types._TemplateParameter, 2, PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__FORMAL);

		public static final @NonNull Property _TemplateParameterSubstitution__actual = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__ACTUAL, Types._TemplateParameterSubstitution, 0);
		public static final @NonNull Property _TemplateParameterSubstitution__formal = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__FORMAL, Types._TemplateParameterSubstitution, 1);
		public static final @NonNull Property _TemplateParameterSubstitution__ownedWildcard = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__OWNED_WILDCARD, Types._TemplateParameterSubstitution, 2);
		public static final @NonNull Property _TemplateParameterSubstitution__owningBinding = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__OWNING_BINDING, Types._TemplateParameterSubstitution, 3);

		public static final @NonNull Property _TemplateSignature__ownedParameters = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_SIGNATURE__OWNED_PARAMETERS, Types._TemplateSignature, 0);
		public static final @NonNull Property _TemplateSignature__owningElement = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATE_SIGNATURE__OWNING_ELEMENT, Types._TemplateSignature, 1);
		public static final @NonNull Property _TemplateSignature__TemplateBinding__templateSignature = LIBRARY.createOppositeProperty("TemplateBinding", Types._TemplateSignature, 2, PivotPackage.Literals.TEMPLATE_BINDING__TEMPLATE_SIGNATURE);

		public static final @NonNull Property _TemplateableElement__ownedBindings = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__OWNED_BINDINGS, Types._TemplateableElement, 0);
		public static final @NonNull Property _TemplateableElement__ownedSignature = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__OWNED_SIGNATURE, Types._TemplateableElement, 1);
		public static final @NonNull Property _TemplateableElement__unspecializedElement = LIBRARY.createProperty(PivotPackage.Literals.TEMPLATEABLE_ELEMENT__UNSPECIALIZED_ELEMENT, Types._TemplateableElement, 2);
		public static final @NonNull Property _TemplateableElement__TemplateableElement__unspecializedElement = LIBRARY.createOppositeProperty("TemplateableElement", Types._TemplateableElement, 3, PivotPackage.Literals.TEMPLATEABLE_ELEMENT__UNSPECIALIZED_ELEMENT);

		public static final @NonNull Property _Transition__kind = LIBRARY.createProperty(PivotPackage.Literals.TRANSITION__KIND, Types._Transition, 0);
		public static final @NonNull Property _Transition__ownedEffect = LIBRARY.createProperty(PivotPackage.Literals.TRANSITION__OWNED_EFFECT, Types._Transition, 1);
		public static final @NonNull Property _Transition__ownedGuard = LIBRARY.createProperty(PivotPackage.Literals.TRANSITION__OWNED_GUARD, Types._Transition, 2);
		public static final @NonNull Property _Transition__ownedTriggers = LIBRARY.createProperty(PivotPackage.Literals.TRANSITION__OWNED_TRIGGERS, Types._Transition, 3);
		public static final @NonNull Property _Transition__owningRegion = LIBRARY.createProperty(PivotPackage.Literals.TRANSITION__OWNING_REGION, Types._Transition, 4);
		public static final @NonNull Property _Transition__source = LIBRARY.createProperty(PivotPackage.Literals.TRANSITION__SOURCE, Types._Transition, 5);
		public static final @NonNull Property _Transition__target = LIBRARY.createProperty(PivotPackage.Literals.TRANSITION__TARGET, Types._Transition, 6);

		public static final @NonNull Property _Trigger__owningState = LIBRARY.createProperty(PivotPackage.Literals.TRIGGER__OWNING_STATE, Types._Trigger, 0);
		public static final @NonNull Property _Trigger__owningTransition = LIBRARY.createProperty(PivotPackage.Literals.TRIGGER__OWNING_TRANSITION, Types._Trigger, 1);

		public static final @NonNull Property _TupleLiteralExp__ownedParts = LIBRARY.createProperty(PivotPackage.Literals.TUPLE_LITERAL_EXP__OWNED_PARTS, Types._TupleLiteralExp, 0);

		public static final @NonNull Property _TupleLiteralPart__ownedInit = LIBRARY.createProperty(PivotPackage.Literals.TUPLE_LITERAL_PART__OWNED_INIT, Types._TupleLiteralPart, 0);
		public static final @NonNull Property _TupleLiteralPart__TupleLiteralExp__ownedParts = LIBRARY.createOppositeProperty("TupleLiteralExp", Types._TupleLiteralPart, 1, PivotPackage.Literals.TUPLE_LITERAL_EXP__OWNED_PARTS);

		public static final @NonNull Property _Type__CollectionType__elementType = LIBRARY.createOppositeProperty("CollectionType", Types._Type, 0, PivotPackage.Literals.COLLECTION_TYPE__ELEMENT_TYPE);
		public static final @NonNull Property _Type__DynamicElement__metaType = LIBRARY.createOppositeProperty("DynamicElement", Types._Type, 1, PivotPackage.Literals.DYNAMIC_ELEMENT__META_TYPE);
		public static final @NonNull Property _Type__LambdaType__contextType = LIBRARY.createOppositeProperty("LambdaType", Types._Type, 2, PivotPackage.Literals.LAMBDA_TYPE__CONTEXT_TYPE);
		public static final @NonNull Property _Type__LambdaType__parameterType = LIBRARY.createOppositeProperty("LambdaType", Types._Type, 3, PivotPackage.Literals.LAMBDA_TYPE__PARAMETER_TYPE);
		public static final @NonNull Property _Type__LambdaType__resultType = LIBRARY.createOppositeProperty("LambdaType", Types._Type, 4, PivotPackage.Literals.LAMBDA_TYPE__RESULT_TYPE);
		public static final @NonNull Property _Type__MapType__keyType = LIBRARY.createOppositeProperty("MapType", Types._Type, 5, PivotPackage.Literals.MAP_TYPE__KEY_TYPE);
		public static final @NonNull Property _Type__MapType__valueType = LIBRARY.createOppositeProperty("MapType", Types._Type, 6, PivotPackage.Literals.MAP_TYPE__VALUE_TYPE);
		public static final @NonNull Property _Type__OCLExpression__typeValue = LIBRARY.createOppositeProperty("OCLExpression", Types._Type, 7, PivotPackage.Literals.OCL_EXPRESSION__TYPE_VALUE);
		public static final @NonNull Property _Type__Operation__raisedExceptions = LIBRARY.createOppositeProperty("Operation", Types._Type, 8, PivotPackage.Literals.OPERATION__RAISED_EXCEPTIONS);
		public static final @NonNull Property _Type__TemplateParameterSubstitution__actual = LIBRARY.createOppositeProperty("TemplateParameterSubstitution", Types._Type, 9, PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__ACTUAL);
		public static final @NonNull Property _Type__TypeExp__referredType = LIBRARY.createOppositeProperty("TypeExp", Types._Type, 10, PivotPackage.Literals.TYPE_EXP__REFERRED_TYPE);
		public static final @NonNull Property _Type__TypedElement__type = LIBRARY.createOppositeProperty("TypedElement", Types._Type, 11, PivotPackage.Literals.TYPED_ELEMENT__TYPE);
		public static final @NonNull Property _Type__VariableDeclaration__typeValue = LIBRARY.createOppositeProperty("VariableDeclaration", Types._Type, 12, PivotPackage.Literals.VARIABLE_DECLARATION__TYPE_VALUE);
		public static final @NonNull Property _Type__WildcardType__lowerBound = LIBRARY.createOppositeProperty("WildcardType", Types._Type, 13, PivotPackage.Literals.WILDCARD_TYPE__LOWER_BOUND);
		public static final @NonNull Property _Type__WildcardType__upperBound = LIBRARY.createOppositeProperty("WildcardType", Types._Type, 14, PivotPackage.Literals.WILDCARD_TYPE__UPPER_BOUND);

		public static final @NonNull Property _TypeExp__referredType = LIBRARY.createProperty(PivotPackage.Literals.TYPE_EXP__REFERRED_TYPE, Types._TypeExp, 0);

		public static final @NonNull Property _TypedElement__isMany = LIBRARY.createProperty(PivotPackage.Literals.TYPED_ELEMENT__IS_MANY, Types._TypedElement, 0);
		public static final @NonNull Property _TypedElement__isRequired = LIBRARY.createProperty(PivotPackage.Literals.TYPED_ELEMENT__IS_REQUIRED, Types._TypedElement, 1);
		public static final @NonNull Property _TypedElement__type = LIBRARY.createProperty(PivotPackage.Literals.TYPED_ELEMENT__TYPE, Types._TypedElement, 2);

		public static final @NonNull Property _UnlimitedNaturalLiteralExp__unlimitedNaturalSymbol = LIBRARY.createProperty(PivotPackage.Literals.UNLIMITED_NATURAL_LITERAL_EXP__UNLIMITED_NATURAL_SYMBOL, Types._UnlimitedNaturalLiteralExp, 0);

		public static final @NonNull Property _ValueSpecification__Slot__ownedValues = LIBRARY.createOppositeProperty("Slot", Types._ValueSpecification, 0, PivotPackage.Literals.SLOT__OWNED_VALUES);

		public static final @NonNull Property _Variable__isImplicit = LIBRARY.createProperty(PivotPackage.Literals.VARIABLE__IS_IMPLICIT, Types._Variable, 0);
		public static final @NonNull Property _Variable__ownedInit = LIBRARY.createProperty(PivotPackage.Literals.VARIABLE__OWNED_INIT, Types._Variable, 1);
		public static final @NonNull Property _Variable__representedParameter = LIBRARY.createProperty(PivotPackage.Literals.VARIABLE__REPRESENTED_PARAMETER, Types._Variable, 2);
		public static final @NonNull Property _Variable__ExpressionInOCL__ownedContext = LIBRARY.createOppositeProperty("ExpressionInOCL", Types._Variable, 3, PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_CONTEXT);
		public static final @NonNull Property _Variable__ExpressionInOCL__ownedParameters = LIBRARY.createOppositeProperty("ExpressionInOCL", Types._Variable, 4, PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_PARAMETERS);
		public static final @NonNull Property _Variable__ExpressionInOCL__ownedResult = LIBRARY.createOppositeProperty("ExpressionInOCL", Types._Variable, 5, PivotPackage.Literals.EXPRESSION_IN_OCL__OWNED_RESULT);
		public static final @NonNull Property _Variable__IterateExp__ownedResult = LIBRARY.createOppositeProperty("IterateExp", Types._Variable, 6, PivotPackage.Literals.ITERATE_EXP__OWNED_RESULT);
		public static final @NonNull Property _Variable__LetExp__ownedVariable = LIBRARY.createOppositeProperty("LetExp", Types._Variable, 7, PivotPackage.Literals.LET_EXP__OWNED_VARIABLE);
		public static final @NonNull Property _Variable__LoopExp__ownedIterators = LIBRARY.createOppositeProperty("LoopExp", Types._Variable, 8, PivotPackage.Literals.LOOP_EXP__OWNED_ITERATORS);

		public static final @NonNull Property _VariableDeclaration__typeValue = LIBRARY.createProperty(PivotPackage.Literals.VARIABLE_DECLARATION__TYPE_VALUE, Types._VariableDeclaration, 0);
		public static final @NonNull Property _VariableDeclaration__VariableExp__referredVariable = LIBRARY.createOppositeProperty("VariableExp", Types._VariableDeclaration, 1, PivotPackage.Literals.VARIABLE_EXP__REFERRED_VARIABLE);

		public static final @NonNull Property _VariableExp__isImplicit = LIBRARY.createProperty(PivotPackage.Literals.VARIABLE_EXP__IS_IMPLICIT, Types._VariableExp, 0);
		public static final @NonNull Property _VariableExp__referredVariable = LIBRARY.createProperty(PivotPackage.Literals.VARIABLE_EXP__REFERRED_VARIABLE, Types._VariableExp, 1);

		public static final @NonNull Property _Vertex__incomingTransitions = LIBRARY.createProperty(PivotPackage.Literals.VERTEX__INCOMING_TRANSITIONS, Types._Vertex, 0);
		public static final @NonNull Property _Vertex__outgoingTransitions = LIBRARY.createProperty(PivotPackage.Literals.VERTEX__OUTGOING_TRANSITIONS, Types._Vertex, 1);
		public static final @NonNull Property _Vertex__owningRegion = LIBRARY.createProperty(PivotPackage.Literals.VERTEX__OWNING_REGION, Types._Vertex, 2);

		public static final @NonNull Property _WildcardType__lowerBound = LIBRARY.createProperty(PivotPackage.Literals.WILDCARD_TYPE__LOWER_BOUND, Types._WildcardType, 0);
		public static final @NonNull Property _WildcardType__upperBound = LIBRARY.createProperty(PivotPackage.Literals.WILDCARD_TYPE__UPPER_BOUND, Types._WildcardType, 1);
		public static final @NonNull Property _WildcardType__TemplateParameterSubstitution__ownedWildcard = LIBRARY.createOppositeProperty("TemplateParameterSubstitution", Types._WildcardType, 2, PivotPackage.Literals.TEMPLATE_PARAMETER_SUBSTITUTION__OWNED_WILDCARD);
		static {
			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::Properties and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The fragments for all base types in depth order: OclAny first, OclSelf last.
	 */
	public static class TypeFragments {
		static {
			Init.initStart();
			Properties.init();
		}

		private static final @NonNull FlatFragment @NonNull [] _AbstractClass =
			{
				Fragments._AbstractClass__OclAny /* 0 */,
				Fragments._AbstractClass__OclElement /* 1 */,
				Fragments._AbstractClass__Element /* 2 */,
				Fragments._AbstractClass__OclType /* 2 */,
				Fragments._AbstractClass__NamedElement /* 3 */,
				Fragments._AbstractClass__TemplateableElement /* 3 */,
				Fragments._AbstractClass__Namespace /* 4 */,
				Fragments._AbstractClass__Type /* 4 */,
				Fragments._AbstractClass__AbstractClass /* 5 */
			};
		private static final int @NonNull [] __AbstractClass = { 1,1,2,2,2,1 };

		private static final @NonNull FlatFragment @NonNull [] _Annotation =
			{
				Fragments._Annotation__OclAny /* 0 */,
				Fragments._Annotation__OclElement /* 1 */,
				Fragments._Annotation__Element /* 2 */,
				Fragments._Annotation__NamedElement /* 3 */,
				Fragments._Annotation__Annotation /* 4 */
			};
		private static final int @NonNull [] __Annotation = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _AnyType =
			{
				Fragments._AnyType__OclAny /* 0 */,
				Fragments._AnyType__OclElement /* 1 */,
				Fragments._AnyType__Element /* 2 */,
				Fragments._AnyType__OclType /* 2 */,
				Fragments._AnyType__NamedElement /* 3 */,
				Fragments._AnyType__TemplateableElement /* 3 */,
				Fragments._AnyType__Namespace /* 4 */,
				Fragments._AnyType__Type /* 4 */,
				Fragments._AnyType__AbstractClass /* 5 */,
				Fragments._AnyType__Class /* 6 */,
				Fragments._AnyType__AnyType /* 7 */
			};
		private static final int @NonNull [] __AnyType = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _AssociationClass =
			{
				Fragments._AssociationClass__OclAny /* 0 */,
				Fragments._AssociationClass__OclElement /* 1 */,
				Fragments._AssociationClass__Element /* 2 */,
				Fragments._AssociationClass__OclType /* 2 */,
				Fragments._AssociationClass__NamedElement /* 3 */,
				Fragments._AssociationClass__TemplateableElement /* 3 */,
				Fragments._AssociationClass__Namespace /* 4 */,
				Fragments._AssociationClass__Type /* 4 */,
				Fragments._AssociationClass__AbstractClass /* 5 */,
				Fragments._AssociationClass__Class /* 6 */,
				Fragments._AssociationClass__AssociationClass /* 7 */
			};
		private static final int @NonNull [] __AssociationClass = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _AssociationClassCallExp =
			{
				Fragments._AssociationClassCallExp__OclAny /* 0 */,
				Fragments._AssociationClassCallExp__OclElement /* 1 */,
				Fragments._AssociationClassCallExp__Element /* 2 */,
				Fragments._AssociationClassCallExp__NamedElement /* 3 */,
				Fragments._AssociationClassCallExp__TypedElement /* 4 */,
				Fragments._AssociationClassCallExp__OCLExpression /* 5 */,
				Fragments._AssociationClassCallExp__CallExp /* 6 */,
				Fragments._AssociationClassCallExp__FeatureCallExp /* 7 */,
				Fragments._AssociationClassCallExp__NavigationCallExp /* 8 */,
				Fragments._AssociationClassCallExp__AssociationClassCallExp /* 9 */
			};
		private static final int @NonNull [] __AssociationClassCallExp = { 1,1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _AssociativityKind =
			{
				Fragments._AssociativityKind__OclAny /* 0 */,
				Fragments._AssociativityKind__OclElement /* 1 */,
				Fragments._AssociativityKind__OclType /* 2 */,
				Fragments._AssociativityKind__OclEnumeration /* 3 */,
				Fragments._AssociativityKind__AssociativityKind /* 4 */
			};
		private static final int @NonNull [] __AssociativityKind = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _BagType =
			{
				Fragments._BagType__OclAny /* 0 */,
				Fragments._BagType__OclElement /* 1 */,
				Fragments._BagType__Element /* 2 */,
				Fragments._BagType__OclType /* 2 */,
				Fragments._BagType__NamedElement /* 3 */,
				Fragments._BagType__TemplateableElement /* 3 */,
				Fragments._BagType__Namespace /* 4 */,
				Fragments._BagType__Type /* 4 */,
				Fragments._BagType__AbstractClass /* 5 */,
				Fragments._BagType__Class /* 6 */,
				Fragments._BagType__DataType /* 7 */,
				Fragments._BagType__IterableType /* 8 */,
				Fragments._BagType__CollectionType /* 9 */,
				Fragments._BagType__BagType /* 10 */
			};
		private static final int @NonNull [] __BagType = { 1,1,2,2,2,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Behavior =
			{
				Fragments._Behavior__OclAny /* 0 */,
				Fragments._Behavior__OclElement /* 1 */,
				Fragments._Behavior__Element /* 2 */,
				Fragments._Behavior__OclType /* 2 */,
				Fragments._Behavior__NamedElement /* 3 */,
				Fragments._Behavior__TemplateableElement /* 3 */,
				Fragments._Behavior__Namespace /* 4 */,
				Fragments._Behavior__Type /* 4 */,
				Fragments._Behavior__AbstractClass /* 5 */,
				Fragments._Behavior__Class /* 6 */,
				Fragments._Behavior__Behavior /* 7 */
			};
		private static final int @NonNull [] __Behavior = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _BooleanLiteralExp =
			{
				Fragments._BooleanLiteralExp__OclAny /* 0 */,
				Fragments._BooleanLiteralExp__OclElement /* 1 */,
				Fragments._BooleanLiteralExp__Element /* 2 */,
				Fragments._BooleanLiteralExp__NamedElement /* 3 */,
				Fragments._BooleanLiteralExp__TypedElement /* 4 */,
				Fragments._BooleanLiteralExp__OCLExpression /* 5 */,
				Fragments._BooleanLiteralExp__LiteralExp /* 6 */,
				Fragments._BooleanLiteralExp__PrimitiveLiteralExp /* 7 */,
				Fragments._BooleanLiteralExp__BooleanLiteralExp /* 8 */
			};
		private static final int @NonNull [] __BooleanLiteralExp = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _BooleanType =
			{
				Fragments._BooleanType__OclAny /* 0 */,
				Fragments._BooleanType__OclElement /* 1 */,
				Fragments._BooleanType__Element /* 2 */,
				Fragments._BooleanType__OclType /* 2 */,
				Fragments._BooleanType__NamedElement /* 3 */,
				Fragments._BooleanType__TemplateableElement /* 3 */,
				Fragments._BooleanType__Namespace /* 4 */,
				Fragments._BooleanType__Type /* 4 */,
				Fragments._BooleanType__AbstractClass /* 5 */,
				Fragments._BooleanType__Class /* 6 */,
				Fragments._BooleanType__DataType /* 7 */,
				Fragments._BooleanType__PrimitiveType /* 8 */,
				Fragments._BooleanType__BooleanType /* 9 */
			};
		private static final int @NonNull [] __BooleanType = { 1,1,2,2,2,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CallExp =
			{
				Fragments._CallExp__OclAny /* 0 */,
				Fragments._CallExp__OclElement /* 1 */,
				Fragments._CallExp__Element /* 2 */,
				Fragments._CallExp__NamedElement /* 3 */,
				Fragments._CallExp__TypedElement /* 4 */,
				Fragments._CallExp__OCLExpression /* 5 */,
				Fragments._CallExp__CallExp /* 6 */
			};
		private static final int @NonNull [] __CallExp = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CallOperationAction =
			{
				Fragments._CallOperationAction__OclAny /* 0 */,
				Fragments._CallOperationAction__OclElement /* 1 */,
				Fragments._CallOperationAction__Element /* 2 */,
				Fragments._CallOperationAction__NamedElement /* 3 */,
				Fragments._CallOperationAction__CallOperationAction /* 4 */
			};
		private static final int @NonNull [] __CallOperationAction = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Class =
			{
				Fragments._Class__OclAny /* 0 */,
				Fragments._Class__OclElement /* 1 */,
				Fragments._Class__Element /* 2 */,
				Fragments._Class__OclType /* 2 */,
				Fragments._Class__NamedElement /* 3 */,
				Fragments._Class__TemplateableElement /* 3 */,
				Fragments._Class__Namespace /* 4 */,
				Fragments._Class__Type /* 4 */,
				Fragments._Class__AbstractClass /* 5 */,
				Fragments._Class__Class /* 6 */
			};
		private static final int @NonNull [] __Class = { 1,1,2,2,2,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CollectionItem =
			{
				Fragments._CollectionItem__OclAny /* 0 */,
				Fragments._CollectionItem__OclElement /* 1 */,
				Fragments._CollectionItem__Element /* 2 */,
				Fragments._CollectionItem__NamedElement /* 3 */,
				Fragments._CollectionItem__TypedElement /* 4 */,
				Fragments._CollectionItem__CollectionLiteralPart /* 5 */,
				Fragments._CollectionItem__CollectionItem /* 6 */
			};
		private static final int @NonNull [] __CollectionItem = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CollectionKind =
			{
				Fragments._CollectionKind__OclAny /* 0 */,
				Fragments._CollectionKind__OclElement /* 1 */,
				Fragments._CollectionKind__OclType /* 2 */,
				Fragments._CollectionKind__OclEnumeration /* 3 */,
				Fragments._CollectionKind__CollectionKind /* 4 */
			};
		private static final int @NonNull [] __CollectionKind = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CollectionLiteralExp =
			{
				Fragments._CollectionLiteralExp__OclAny /* 0 */,
				Fragments._CollectionLiteralExp__OclElement /* 1 */,
				Fragments._CollectionLiteralExp__Element /* 2 */,
				Fragments._CollectionLiteralExp__NamedElement /* 3 */,
				Fragments._CollectionLiteralExp__TypedElement /* 4 */,
				Fragments._CollectionLiteralExp__OCLExpression /* 5 */,
				Fragments._CollectionLiteralExp__LiteralExp /* 6 */,
				Fragments._CollectionLiteralExp__CollectionLiteralExp /* 7 */
			};
		private static final int @NonNull [] __CollectionLiteralExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CollectionLiteralPart =
			{
				Fragments._CollectionLiteralPart__OclAny /* 0 */,
				Fragments._CollectionLiteralPart__OclElement /* 1 */,
				Fragments._CollectionLiteralPart__Element /* 2 */,
				Fragments._CollectionLiteralPart__NamedElement /* 3 */,
				Fragments._CollectionLiteralPart__TypedElement /* 4 */,
				Fragments._CollectionLiteralPart__CollectionLiteralPart /* 5 */
			};
		private static final int @NonNull [] __CollectionLiteralPart = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CollectionRange =
			{
				Fragments._CollectionRange__OclAny /* 0 */,
				Fragments._CollectionRange__OclElement /* 1 */,
				Fragments._CollectionRange__Element /* 2 */,
				Fragments._CollectionRange__NamedElement /* 3 */,
				Fragments._CollectionRange__TypedElement /* 4 */,
				Fragments._CollectionRange__CollectionLiteralPart /* 5 */,
				Fragments._CollectionRange__CollectionRange /* 6 */
			};
		private static final int @NonNull [] __CollectionRange = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CollectionType =
			{
				Fragments._CollectionType__OclAny /* 0 */,
				Fragments._CollectionType__OclElement /* 1 */,
				Fragments._CollectionType__Element /* 2 */,
				Fragments._CollectionType__OclType /* 2 */,
				Fragments._CollectionType__NamedElement /* 3 */,
				Fragments._CollectionType__TemplateableElement /* 3 */,
				Fragments._CollectionType__Namespace /* 4 */,
				Fragments._CollectionType__Type /* 4 */,
				Fragments._CollectionType__AbstractClass /* 5 */,
				Fragments._CollectionType__Class /* 6 */,
				Fragments._CollectionType__DataType /* 7 */,
				Fragments._CollectionType__IterableType /* 8 */,
				Fragments._CollectionType__CollectionType /* 9 */
			};
		private static final int @NonNull [] __CollectionType = { 1,1,2,2,2,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Comment =
			{
				Fragments._Comment__OclAny /* 0 */,
				Fragments._Comment__OclElement /* 1 */,
				Fragments._Comment__Element /* 2 */,
				Fragments._Comment__Comment /* 3 */
			};
		private static final int @NonNull [] __Comment = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CompleteClass =
			{
				Fragments._CompleteClass__OclAny /* 0 */,
				Fragments._CompleteClass__OclElement /* 1 */,
				Fragments._CompleteClass__Element /* 2 */,
				Fragments._CompleteClass__NamedElement /* 3 */,
				Fragments._CompleteClass__CompleteClass /* 4 */
			};
		private static final int @NonNull [] __CompleteClass = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CompleteEnvironment =
			{
				Fragments._CompleteEnvironment__OclAny /* 0 */,
				Fragments._CompleteEnvironment__OclElement /* 1 */,
				Fragments._CompleteEnvironment__Element /* 2 */,
				Fragments._CompleteEnvironment__CompleteEnvironment /* 3 */
			};
		private static final int @NonNull [] __CompleteEnvironment = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CompleteModel =
			{
				Fragments._CompleteModel__OclAny /* 0 */,
				Fragments._CompleteModel__OclElement /* 1 */,
				Fragments._CompleteModel__Element /* 2 */,
				Fragments._CompleteModel__NamedElement /* 3 */,
				Fragments._CompleteModel__CompleteModel /* 4 */
			};
		private static final int @NonNull [] __CompleteModel = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _CompletePackage =
			{
				Fragments._CompletePackage__OclAny /* 0 */,
				Fragments._CompletePackage__OclElement /* 1 */,
				Fragments._CompletePackage__Element /* 2 */,
				Fragments._CompletePackage__NamedElement /* 3 */,
				Fragments._CompletePackage__CompletePackage /* 4 */
			};
		private static final int @NonNull [] __CompletePackage = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ConnectionPointReference =
			{
				Fragments._ConnectionPointReference__OclAny /* 0 */,
				Fragments._ConnectionPointReference__OclElement /* 1 */,
				Fragments._ConnectionPointReference__Element /* 2 */,
				Fragments._ConnectionPointReference__NamedElement /* 3 */,
				Fragments._ConnectionPointReference__Vertex /* 4 */,
				Fragments._ConnectionPointReference__ConnectionPointReference /* 5 */
			};
		private static final int @NonNull [] __ConnectionPointReference = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Constraint =
			{
				Fragments._Constraint__OclAny /* 0 */,
				Fragments._Constraint__OclElement /* 1 */,
				Fragments._Constraint__Element /* 2 */,
				Fragments._Constraint__NamedElement /* 3 */,
				Fragments._Constraint__Constraint /* 4 */
			};
		private static final int @NonNull [] __Constraint = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _DataType =
			{
				Fragments._DataType__OclAny /* 0 */,
				Fragments._DataType__OclElement /* 1 */,
				Fragments._DataType__Element /* 2 */,
				Fragments._DataType__OclType /* 2 */,
				Fragments._DataType__NamedElement /* 3 */,
				Fragments._DataType__TemplateableElement /* 3 */,
				Fragments._DataType__Namespace /* 4 */,
				Fragments._DataType__Type /* 4 */,
				Fragments._DataType__AbstractClass /* 5 */,
				Fragments._DataType__Class /* 6 */,
				Fragments._DataType__DataType /* 7 */
			};
		private static final int @NonNull [] __DataType = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Detail =
			{
				Fragments._Detail__OclAny /* 0 */,
				Fragments._Detail__OclElement /* 1 */,
				Fragments._Detail__Element /* 2 */,
				Fragments._Detail__NamedElement /* 3 */,
				Fragments._Detail__Detail /* 4 */
			};
		private static final int @NonNull [] __Detail = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _DynamicBehavior =
			{
				Fragments._DynamicBehavior__OclAny /* 0 */,
				Fragments._DynamicBehavior__OclElement /* 1 */,
				Fragments._DynamicBehavior__Element /* 2 */,
				Fragments._DynamicBehavior__OclType /* 2 */,
				Fragments._DynamicBehavior__DynamicElement /* 3 */,
				Fragments._DynamicBehavior__NamedElement /* 3 */,
				Fragments._DynamicBehavior__TemplateableElement /* 3 */,
				Fragments._DynamicBehavior__Namespace /* 4 */,
				Fragments._DynamicBehavior__Type /* 4 */,
				Fragments._DynamicBehavior__AbstractClass /* 5 */,
				Fragments._DynamicBehavior__Class /* 6 */,
				Fragments._DynamicBehavior__Behavior /* 7 */,
				Fragments._DynamicBehavior__DynamicType /* 7 */,
				Fragments._DynamicBehavior__DynamicBehavior /* 8 */
			};
		private static final int @NonNull [] __DynamicBehavior = { 1,1,2,3,2,1,1,2,1 };

		private static final @NonNull FlatFragment @NonNull [] _DynamicElement =
			{
				Fragments._DynamicElement__OclAny /* 0 */,
				Fragments._DynamicElement__OclElement /* 1 */,
				Fragments._DynamicElement__Element /* 2 */,
				Fragments._DynamicElement__DynamicElement /* 3 */
			};
		private static final int @NonNull [] __DynamicElement = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _DynamicProperty =
			{
				Fragments._DynamicProperty__OclAny /* 0 */,
				Fragments._DynamicProperty__OclElement /* 1 */,
				Fragments._DynamicProperty__Element /* 2 */,
				Fragments._DynamicProperty__DynamicProperty /* 3 */
			};
		private static final int @NonNull [] __DynamicProperty = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _DynamicType =
			{
				Fragments._DynamicType__OclAny /* 0 */,
				Fragments._DynamicType__OclElement /* 1 */,
				Fragments._DynamicType__Element /* 2 */,
				Fragments._DynamicType__OclType /* 2 */,
				Fragments._DynamicType__DynamicElement /* 3 */,
				Fragments._DynamicType__NamedElement /* 3 */,
				Fragments._DynamicType__TemplateableElement /* 3 */,
				Fragments._DynamicType__Namespace /* 4 */,
				Fragments._DynamicType__Type /* 4 */,
				Fragments._DynamicType__AbstractClass /* 5 */,
				Fragments._DynamicType__Class /* 6 */,
				Fragments._DynamicType__DynamicType /* 7 */
			};
		private static final int @NonNull [] __DynamicType = { 1,1,2,3,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _DynamicValueSpecification =
			{
				Fragments._DynamicValueSpecification__OclAny /* 0 */,
				Fragments._DynamicValueSpecification__OclElement /* 1 */,
				Fragments._DynamicValueSpecification__Element /* 2 */,
				Fragments._DynamicValueSpecification__NamedElement /* 3 */,
				Fragments._DynamicValueSpecification__TypedElement /* 4 */,
				Fragments._DynamicValueSpecification__ValueSpecification /* 5 */,
				Fragments._DynamicValueSpecification__DynamicValueSpecification /* 6 */
			};
		private static final int @NonNull [] __DynamicValueSpecification = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _EcoreObject =
			{
				Fragments._EcoreObject__OclAny /* 0 */,
				Fragments._EcoreObject__EcoreObject /* 1 */
			};
		private static final int @NonNull [] __EcoreObject = { 1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Element =
			{
				Fragments._Element__OclAny /* 0 */,
				Fragments._Element__OclElement /* 1 */,
				Fragments._Element__Element /* 2 */
			};
		private static final int @NonNull [] __Element = { 1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ElementExtension =
			{
				Fragments._ElementExtension__OclAny /* 0 */,
				Fragments._ElementExtension__OclElement /* 1 */,
				Fragments._ElementExtension__Element /* 2 */,
				Fragments._ElementExtension__OclType /* 2 */,
				Fragments._ElementExtension__NamedElement /* 3 */,
				Fragments._ElementExtension__TemplateableElement /* 3 */,
				Fragments._ElementExtension__Namespace /* 4 */,
				Fragments._ElementExtension__Type /* 4 */,
				Fragments._ElementExtension__AbstractClass /* 5 */,
				Fragments._ElementExtension__Class /* 6 */,
				Fragments._ElementExtension__ElementExtension /* 7 */
			};
		private static final int @NonNull [] __ElementExtension = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ElementLiteralExp =
			{
				Fragments._ElementLiteralExp__OclAny /* 0 */,
				Fragments._ElementLiteralExp__OclElement /* 1 */,
				Fragments._ElementLiteralExp__Element /* 2 */,
				Fragments._ElementLiteralExp__NamedElement /* 3 */,
				Fragments._ElementLiteralExp__TypedElement /* 4 */,
				Fragments._ElementLiteralExp__OCLExpression /* 5 */,
				Fragments._ElementLiteralExp__LiteralExp /* 6 */,
				Fragments._ElementLiteralExp__ElementLiteralExp /* 7 */
			};
		private static final int @NonNull [] __ElementLiteralExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _EnumLiteralExp =
			{
				Fragments._EnumLiteralExp__OclAny /* 0 */,
				Fragments._EnumLiteralExp__OclElement /* 1 */,
				Fragments._EnumLiteralExp__Element /* 2 */,
				Fragments._EnumLiteralExp__NamedElement /* 3 */,
				Fragments._EnumLiteralExp__TypedElement /* 4 */,
				Fragments._EnumLiteralExp__OCLExpression /* 5 */,
				Fragments._EnumLiteralExp__LiteralExp /* 6 */,
				Fragments._EnumLiteralExp__EnumLiteralExp /* 7 */
			};
		private static final int @NonNull [] __EnumLiteralExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Enumeration =
			{
				Fragments._Enumeration__OclAny /* 0 */,
				Fragments._Enumeration__OclElement /* 1 */,
				Fragments._Enumeration__Element /* 2 */,
				Fragments._Enumeration__OclType /* 2 */,
				Fragments._Enumeration__NamedElement /* 3 */,
				Fragments._Enumeration__TemplateableElement /* 3 */,
				Fragments._Enumeration__Namespace /* 4 */,
				Fragments._Enumeration__Type /* 4 */,
				Fragments._Enumeration__AbstractClass /* 5 */,
				Fragments._Enumeration__Class /* 6 */,
				Fragments._Enumeration__DataType /* 7 */,
				Fragments._Enumeration__Enumeration /* 8 */
			};
		private static final int @NonNull [] __Enumeration = { 1,1,2,2,2,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _EnumerationLiteral =
			{
				Fragments._EnumerationLiteral__OclAny /* 0 */,
				Fragments._EnumerationLiteral__OclElement /* 1 */,
				Fragments._EnumerationLiteral__Element /* 2 */,
				Fragments._EnumerationLiteral__NamedElement /* 3 */,
				Fragments._EnumerationLiteral__InstanceSpecification /* 4 */,
				Fragments._EnumerationLiteral__EnumerationLiteral /* 5 */
			};
		private static final int @NonNull [] __EnumerationLiteral = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ExpressionInOCL =
			{
				Fragments._ExpressionInOCL__OclAny /* 0 */,
				Fragments._ExpressionInOCL__OclElement /* 1 */,
				Fragments._ExpressionInOCL__Element /* 2 */,
				Fragments._ExpressionInOCL__NamedElement /* 3 */,
				Fragments._ExpressionInOCL__TypedElement /* 4 */,
				Fragments._ExpressionInOCL__ValueSpecification /* 5 */,
				Fragments._ExpressionInOCL__LanguageExpression /* 6 */,
				Fragments._ExpressionInOCL__ExpressionInOCL /* 7 */
			};
		private static final int @NonNull [] __ExpressionInOCL = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Feature =
			{
				Fragments._Feature__OclAny /* 0 */,
				Fragments._Feature__OclElement /* 1 */,
				Fragments._Feature__Element /* 2 */,
				Fragments._Feature__NamedElement /* 3 */,
				Fragments._Feature__TypedElement /* 4 */,
				Fragments._Feature__Feature /* 5 */
			};
		private static final int @NonNull [] __Feature = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _FeatureCallExp =
			{
				Fragments._FeatureCallExp__OclAny /* 0 */,
				Fragments._FeatureCallExp__OclElement /* 1 */,
				Fragments._FeatureCallExp__Element /* 2 */,
				Fragments._FeatureCallExp__NamedElement /* 3 */,
				Fragments._FeatureCallExp__TypedElement /* 4 */,
				Fragments._FeatureCallExp__OCLExpression /* 5 */,
				Fragments._FeatureCallExp__CallExp /* 6 */,
				Fragments._FeatureCallExp__FeatureCallExp /* 7 */
			};
		private static final int @NonNull [] __FeatureCallExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _FinalState =
			{
				Fragments._FinalState__OclAny /* 0 */,
				Fragments._FinalState__OclElement /* 1 */,
				Fragments._FinalState__OclState /* 1 */,
				Fragments._FinalState__Element /* 2 */,
				Fragments._FinalState__NamedElement /* 3 */,
				Fragments._FinalState__Namespace /* 4 */,
				Fragments._FinalState__Vertex /* 4 */,
				Fragments._FinalState__State /* 5 */,
				Fragments._FinalState__FinalState /* 6 */
			};
		private static final int @NonNull [] __FinalState = { 1,2,1,1,2,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _IfExp =
			{
				Fragments._IfExp__OclAny /* 0 */,
				Fragments._IfExp__OclElement /* 1 */,
				Fragments._IfExp__Element /* 2 */,
				Fragments._IfExp__NamedElement /* 3 */,
				Fragments._IfExp__TypedElement /* 4 */,
				Fragments._IfExp__OCLExpression /* 5 */,
				Fragments._IfExp__IfExp /* 6 */
			};
		private static final int @NonNull [] __IfExp = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Import =
			{
				Fragments._Import__OclAny /* 0 */,
				Fragments._Import__OclElement /* 1 */,
				Fragments._Import__Element /* 2 */,
				Fragments._Import__NamedElement /* 3 */,
				Fragments._Import__Import /* 4 */
			};
		private static final int @NonNull [] __Import = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _InstanceSpecification =
			{
				Fragments._InstanceSpecification__OclAny /* 0 */,
				Fragments._InstanceSpecification__OclElement /* 1 */,
				Fragments._InstanceSpecification__Element /* 2 */,
				Fragments._InstanceSpecification__NamedElement /* 3 */,
				Fragments._InstanceSpecification__InstanceSpecification /* 4 */
			};
		private static final int @NonNull [] __InstanceSpecification = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _IntegerLiteralExp =
			{
				Fragments._IntegerLiteralExp__OclAny /* 0 */,
				Fragments._IntegerLiteralExp__OclElement /* 1 */,
				Fragments._IntegerLiteralExp__Element /* 2 */,
				Fragments._IntegerLiteralExp__NamedElement /* 3 */,
				Fragments._IntegerLiteralExp__TypedElement /* 4 */,
				Fragments._IntegerLiteralExp__OCLExpression /* 5 */,
				Fragments._IntegerLiteralExp__LiteralExp /* 6 */,
				Fragments._IntegerLiteralExp__PrimitiveLiteralExp /* 7 */,
				Fragments._IntegerLiteralExp__NumericLiteralExp /* 8 */,
				Fragments._IntegerLiteralExp__IntegerLiteralExp /* 9 */
			};
		private static final int @NonNull [] __IntegerLiteralExp = { 1,1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _InvalidLiteralExp =
			{
				Fragments._InvalidLiteralExp__OclAny /* 0 */,
				Fragments._InvalidLiteralExp__OclElement /* 1 */,
				Fragments._InvalidLiteralExp__Element /* 2 */,
				Fragments._InvalidLiteralExp__NamedElement /* 3 */,
				Fragments._InvalidLiteralExp__TypedElement /* 4 */,
				Fragments._InvalidLiteralExp__OCLExpression /* 5 */,
				Fragments._InvalidLiteralExp__LiteralExp /* 6 */,
				Fragments._InvalidLiteralExp__InvalidLiteralExp /* 7 */
			};
		private static final int @NonNull [] __InvalidLiteralExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _InvalidType =
			{
				Fragments._InvalidType__OclAny /* 0 */,
				Fragments._InvalidType__OclElement /* 1 */,
				Fragments._InvalidType__Element /* 2 */,
				Fragments._InvalidType__OclType /* 2 */,
				Fragments._InvalidType__NamedElement /* 3 */,
				Fragments._InvalidType__TemplateableElement /* 3 */,
				Fragments._InvalidType__Namespace /* 4 */,
				Fragments._InvalidType__Type /* 4 */,
				Fragments._InvalidType__AbstractClass /* 5 */,
				Fragments._InvalidType__Class /* 6 */,
				Fragments._InvalidType__InvalidType /* 7 */
			};
		private static final int @NonNull [] __InvalidType = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _IterableType =
			{
				Fragments._IterableType__OclAny /* 0 */,
				Fragments._IterableType__OclElement /* 1 */,
				Fragments._IterableType__Element /* 2 */,
				Fragments._IterableType__OclType /* 2 */,
				Fragments._IterableType__NamedElement /* 3 */,
				Fragments._IterableType__TemplateableElement /* 3 */,
				Fragments._IterableType__Namespace /* 4 */,
				Fragments._IterableType__Type /* 4 */,
				Fragments._IterableType__AbstractClass /* 5 */,
				Fragments._IterableType__Class /* 6 */,
				Fragments._IterableType__DataType /* 7 */,
				Fragments._IterableType__IterableType /* 8 */
			};
		private static final int @NonNull [] __IterableType = { 1,1,2,2,2,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _IterateExp =
			{
				Fragments._IterateExp__OclAny /* 0 */,
				Fragments._IterateExp__OclElement /* 1 */,
				Fragments._IterateExp__Element /* 2 */,
				Fragments._IterateExp__ReferringElement /* 2 */,
				Fragments._IterateExp__NamedElement /* 3 */,
				Fragments._IterateExp__TypedElement /* 4 */,
				Fragments._IterateExp__OCLExpression /* 5 */,
				Fragments._IterateExp__CallExp /* 6 */,
				Fragments._IterateExp__LoopExp /* 7 */,
				Fragments._IterateExp__IterateExp /* 8 */
			};
		private static final int @NonNull [] __IterateExp = { 1,1,2,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Iteration =
			{
				Fragments._Iteration__OclAny /* 0 */,
				Fragments._Iteration__OclElement /* 1 */,
				Fragments._Iteration__Element /* 2 */,
				Fragments._Iteration__NamedElement /* 3 */,
				Fragments._Iteration__TemplateableElement /* 3 */,
				Fragments._Iteration__Namespace /* 4 */,
				Fragments._Iteration__TypedElement /* 4 */,
				Fragments._Iteration__Feature /* 5 */,
				Fragments._Iteration__Operation /* 6 */,
				Fragments._Iteration__Iteration /* 7 */
			};
		private static final int @NonNull [] __Iteration = { 1,1,1,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _IteratorExp =
			{
				Fragments._IteratorExp__OclAny /* 0 */,
				Fragments._IteratorExp__OclElement /* 1 */,
				Fragments._IteratorExp__Element /* 2 */,
				Fragments._IteratorExp__ReferringElement /* 2 */,
				Fragments._IteratorExp__NamedElement /* 3 */,
				Fragments._IteratorExp__TypedElement /* 4 */,
				Fragments._IteratorExp__OCLExpression /* 5 */,
				Fragments._IteratorExp__CallExp /* 6 */,
				Fragments._IteratorExp__LoopExp /* 7 */,
				Fragments._IteratorExp__IteratorExp /* 8 */
			};
		private static final int @NonNull [] __IteratorExp = { 1,1,2,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _IteratorVariable =
			{
				Fragments._IteratorVariable__OclAny /* 0 */,
				Fragments._IteratorVariable__OclElement /* 1 */,
				Fragments._IteratorVariable__Element /* 2 */,
				Fragments._IteratorVariable__NamedElement /* 3 */,
				Fragments._IteratorVariable__TypedElement /* 4 */,
				Fragments._IteratorVariable__VariableDeclaration /* 5 */,
				Fragments._IteratorVariable__Variable /* 6 */,
				Fragments._IteratorVariable__IteratorVariable /* 7 */
			};
		private static final int @NonNull [] __IteratorVariable = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _LambdaType =
			{
				Fragments._LambdaType__OclAny /* 0 */,
				Fragments._LambdaType__OclElement /* 1 */,
				Fragments._LambdaType__Element /* 2 */,
				Fragments._LambdaType__OclType /* 2 */,
				Fragments._LambdaType__NamedElement /* 3 */,
				Fragments._LambdaType__TemplateableElement /* 3 */,
				Fragments._LambdaType__Namespace /* 4 */,
				Fragments._LambdaType__Type /* 4 */,
				Fragments._LambdaType__AbstractClass /* 5 */,
				Fragments._LambdaType__Class /* 6 */,
				Fragments._LambdaType__DataType /* 7 */,
				Fragments._LambdaType__LambdaType /* 8 */
			};
		private static final int @NonNull [] __LambdaType = { 1,1,2,2,2,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _LanguageExpression =
			{
				Fragments._LanguageExpression__OclAny /* 0 */,
				Fragments._LanguageExpression__OclElement /* 1 */,
				Fragments._LanguageExpression__Element /* 2 */,
				Fragments._LanguageExpression__NamedElement /* 3 */,
				Fragments._LanguageExpression__TypedElement /* 4 */,
				Fragments._LanguageExpression__ValueSpecification /* 5 */,
				Fragments._LanguageExpression__LanguageExpression /* 6 */
			};
		private static final int @NonNull [] __LanguageExpression = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _LetExp =
			{
				Fragments._LetExp__OclAny /* 0 */,
				Fragments._LetExp__OclElement /* 1 */,
				Fragments._LetExp__Element /* 2 */,
				Fragments._LetExp__NamedElement /* 3 */,
				Fragments._LetExp__TypedElement /* 4 */,
				Fragments._LetExp__OCLExpression /* 5 */,
				Fragments._LetExp__LetExp /* 6 */
			};
		private static final int @NonNull [] __LetExp = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _LetVariable =
			{
				Fragments._LetVariable__OclAny /* 0 */,
				Fragments._LetVariable__OclElement /* 1 */,
				Fragments._LetVariable__Element /* 2 */,
				Fragments._LetVariable__NamedElement /* 3 */,
				Fragments._LetVariable__TypedElement /* 4 */,
				Fragments._LetVariable__VariableDeclaration /* 5 */,
				Fragments._LetVariable__Variable /* 6 */,
				Fragments._LetVariable__LetVariable /* 7 */
			};
		private static final int @NonNull [] __LetVariable = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Library =
			{
				Fragments._Library__OclAny /* 0 */,
				Fragments._Library__OclElement /* 1 */,
				Fragments._Library__Element /* 2 */,
				Fragments._Library__NamedElement /* 3 */,
				Fragments._Library__Namespace /* 4 */,
				Fragments._Library__Package /* 5 */,
				Fragments._Library__Library /* 6 */
			};
		private static final int @NonNull [] __Library = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _LibraryFeature =
			{
				Fragments._LibraryFeature__OclAny /* 0 */,
				Fragments._LibraryFeature__LibraryFeature /* 1 */
			};
		private static final int @NonNull [] __LibraryFeature = { 1,1 };

		private static final @NonNull FlatFragment @NonNull [] _LiteralExp =
			{
				Fragments._LiteralExp__OclAny /* 0 */,
				Fragments._LiteralExp__OclElement /* 1 */,
				Fragments._LiteralExp__Element /* 2 */,
				Fragments._LiteralExp__NamedElement /* 3 */,
				Fragments._LiteralExp__TypedElement /* 4 */,
				Fragments._LiteralExp__OCLExpression /* 5 */,
				Fragments._LiteralExp__LiteralExp /* 6 */
			};
		private static final int @NonNull [] __LiteralExp = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _LoopExp =
			{
				Fragments._LoopExp__OclAny /* 0 */,
				Fragments._LoopExp__OclElement /* 1 */,
				Fragments._LoopExp__Element /* 2 */,
				Fragments._LoopExp__NamedElement /* 3 */,
				Fragments._LoopExp__TypedElement /* 4 */,
				Fragments._LoopExp__OCLExpression /* 5 */,
				Fragments._LoopExp__CallExp /* 6 */,
				Fragments._LoopExp__LoopExp /* 7 */
			};
		private static final int @NonNull [] __LoopExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _MapLiteralExp =
			{
				Fragments._MapLiteralExp__OclAny /* 0 */,
				Fragments._MapLiteralExp__OclElement /* 1 */,
				Fragments._MapLiteralExp__Element /* 2 */,
				Fragments._MapLiteralExp__NamedElement /* 3 */,
				Fragments._MapLiteralExp__TypedElement /* 4 */,
				Fragments._MapLiteralExp__OCLExpression /* 5 */,
				Fragments._MapLiteralExp__LiteralExp /* 6 */,
				Fragments._MapLiteralExp__MapLiteralExp /* 7 */
			};
		private static final int @NonNull [] __MapLiteralExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _MapLiteralPart =
			{
				Fragments._MapLiteralPart__OclAny /* 0 */,
				Fragments._MapLiteralPart__OclElement /* 1 */,
				Fragments._MapLiteralPart__Element /* 2 */,
				Fragments._MapLiteralPart__MapLiteralPart /* 3 */
			};
		private static final int @NonNull [] __MapLiteralPart = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _MapType =
			{
				Fragments._MapType__OclAny /* 0 */,
				Fragments._MapType__OclElement /* 1 */,
				Fragments._MapType__Element /* 2 */,
				Fragments._MapType__OclType /* 2 */,
				Fragments._MapType__NamedElement /* 3 */,
				Fragments._MapType__TemplateableElement /* 3 */,
				Fragments._MapType__Namespace /* 4 */,
				Fragments._MapType__Type /* 4 */,
				Fragments._MapType__AbstractClass /* 5 */,
				Fragments._MapType__Class /* 6 */,
				Fragments._MapType__DataType /* 7 */,
				Fragments._MapType__IterableType /* 8 */,
				Fragments._MapType__MapType /* 9 */
			};
		private static final int @NonNull [] __MapType = { 1,1,2,2,2,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _MessageExp =
			{
				Fragments._MessageExp__OclAny /* 0 */,
				Fragments._MessageExp__OclElement /* 1 */,
				Fragments._MessageExp__Element /* 2 */,
				Fragments._MessageExp__NamedElement /* 3 */,
				Fragments._MessageExp__TypedElement /* 4 */,
				Fragments._MessageExp__OCLExpression /* 5 */,
				Fragments._MessageExp__MessageExp /* 6 */
			};
		private static final int @NonNull [] __MessageExp = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _MessageType =
			{
				Fragments._MessageType__OclAny /* 0 */,
				Fragments._MessageType__OclElement /* 1 */,
				Fragments._MessageType__Element /* 2 */,
				Fragments._MessageType__OclType /* 2 */,
				Fragments._MessageType__NamedElement /* 3 */,
				Fragments._MessageType__TemplateableElement /* 3 */,
				Fragments._MessageType__Namespace /* 4 */,
				Fragments._MessageType__Type /* 4 */,
				Fragments._MessageType__AbstractClass /* 5 */,
				Fragments._MessageType__Class /* 6 */,
				Fragments._MessageType__MessageType /* 7 */
			};
		private static final int @NonNull [] __MessageType = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Model =
			{
				Fragments._Model__OclAny /* 0 */,
				Fragments._Model__OclElement /* 1 */,
				Fragments._Model__Element /* 2 */,
				Fragments._Model__NamedElement /* 3 */,
				Fragments._Model__Namespace /* 4 */,
				Fragments._Model__Model /* 5 */
			};
		private static final int @NonNull [] __Model = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _MorePivotable =
			{
				Fragments._MorePivotable__OclAny /* 0 */,
				Fragments._MorePivotable__OclElement /* 1 */,
				Fragments._MorePivotable__MorePivotable /* 2 */
			};
		private static final int @NonNull [] __MorePivotable = { 1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Nameable =
			{
				Fragments._Nameable__OclAny /* 0 */,
				Fragments._Nameable__OclElement /* 1 */,
				Fragments._Nameable__Nameable /* 2 */
			};
		private static final int @NonNull [] __Nameable = { 1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _NamedElement =
			{
				Fragments._NamedElement__OclAny /* 0 */,
				Fragments._NamedElement__OclElement /* 1 */,
				Fragments._NamedElement__Element /* 2 */,
				Fragments._NamedElement__NamedElement /* 3 */
			};
		private static final int @NonNull [] __NamedElement = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Namespace =
			{
				Fragments._Namespace__OclAny /* 0 */,
				Fragments._Namespace__OclElement /* 1 */,
				Fragments._Namespace__Element /* 2 */,
				Fragments._Namespace__NamedElement /* 3 */,
				Fragments._Namespace__Namespace /* 4 */
			};
		private static final int @NonNull [] __Namespace = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _NavigationCallExp =
			{
				Fragments._NavigationCallExp__OclAny /* 0 */,
				Fragments._NavigationCallExp__OclElement /* 1 */,
				Fragments._NavigationCallExp__Element /* 2 */,
				Fragments._NavigationCallExp__NamedElement /* 3 */,
				Fragments._NavigationCallExp__TypedElement /* 4 */,
				Fragments._NavigationCallExp__OCLExpression /* 5 */,
				Fragments._NavigationCallExp__CallExp /* 6 */,
				Fragments._NavigationCallExp__FeatureCallExp /* 7 */,
				Fragments._NavigationCallExp__NavigationCallExp /* 8 */
			};
		private static final int @NonNull [] __NavigationCallExp = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _NullLiteralExp =
			{
				Fragments._NullLiteralExp__OclAny /* 0 */,
				Fragments._NullLiteralExp__OclElement /* 1 */,
				Fragments._NullLiteralExp__Element /* 2 */,
				Fragments._NullLiteralExp__NamedElement /* 3 */,
				Fragments._NullLiteralExp__TypedElement /* 4 */,
				Fragments._NullLiteralExp__OCLExpression /* 5 */,
				Fragments._NullLiteralExp__LiteralExp /* 6 */,
				Fragments._NullLiteralExp__PrimitiveLiteralExp /* 7 */,
				Fragments._NullLiteralExp__NullLiteralExp /* 8 */
			};
		private static final int @NonNull [] __NullLiteralExp = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _NumericLiteralExp =
			{
				Fragments._NumericLiteralExp__OclAny /* 0 */,
				Fragments._NumericLiteralExp__OclElement /* 1 */,
				Fragments._NumericLiteralExp__Element /* 2 */,
				Fragments._NumericLiteralExp__NamedElement /* 3 */,
				Fragments._NumericLiteralExp__TypedElement /* 4 */,
				Fragments._NumericLiteralExp__OCLExpression /* 5 */,
				Fragments._NumericLiteralExp__LiteralExp /* 6 */,
				Fragments._NumericLiteralExp__PrimitiveLiteralExp /* 7 */,
				Fragments._NumericLiteralExp__NumericLiteralExp /* 8 */
			};
		private static final int @NonNull [] __NumericLiteralExp = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _OCLExpression =
			{
				Fragments._OCLExpression__OclAny /* 0 */,
				Fragments._OCLExpression__OclElement /* 1 */,
				Fragments._OCLExpression__Element /* 2 */,
				Fragments._OCLExpression__NamedElement /* 3 */,
				Fragments._OCLExpression__TypedElement /* 4 */,
				Fragments._OCLExpression__OCLExpression /* 5 */
			};
		private static final int @NonNull [] __OCLExpression = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Object =
			{
				Fragments._Object__OclAny /* 0 */,
				Fragments._Object__Object /* 1 */
			};
		private static final int @NonNull [] __Object = { 1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Operation =
			{
				Fragments._Operation__OclAny /* 0 */,
				Fragments._Operation__OclElement /* 1 */,
				Fragments._Operation__Element /* 2 */,
				Fragments._Operation__NamedElement /* 3 */,
				Fragments._Operation__TemplateableElement /* 3 */,
				Fragments._Operation__Namespace /* 4 */,
				Fragments._Operation__TypedElement /* 4 */,
				Fragments._Operation__Feature /* 5 */,
				Fragments._Operation__Operation /* 6 */
			};
		private static final int @NonNull [] __Operation = { 1,1,1,2,2,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _OperationCallExp =
			{
				Fragments._OperationCallExp__OclAny /* 0 */,
				Fragments._OperationCallExp__OclElement /* 1 */,
				Fragments._OperationCallExp__Element /* 2 */,
				Fragments._OperationCallExp__ReferringElement /* 2 */,
				Fragments._OperationCallExp__NamedElement /* 3 */,
				Fragments._OperationCallExp__TypedElement /* 4 */,
				Fragments._OperationCallExp__OCLExpression /* 5 */,
				Fragments._OperationCallExp__CallExp /* 6 */,
				Fragments._OperationCallExp__FeatureCallExp /* 7 */,
				Fragments._OperationCallExp__OperationCallExp /* 8 */
			};
		private static final int @NonNull [] __OperationCallExp = { 1,1,2,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _OppositePropertyCallExp =
			{
				Fragments._OppositePropertyCallExp__OclAny /* 0 */,
				Fragments._OppositePropertyCallExp__OclElement /* 1 */,
				Fragments._OppositePropertyCallExp__Element /* 2 */,
				Fragments._OppositePropertyCallExp__NamedElement /* 3 */,
				Fragments._OppositePropertyCallExp__TypedElement /* 4 */,
				Fragments._OppositePropertyCallExp__OCLExpression /* 5 */,
				Fragments._OppositePropertyCallExp__CallExp /* 6 */,
				Fragments._OppositePropertyCallExp__FeatureCallExp /* 7 */,
				Fragments._OppositePropertyCallExp__NavigationCallExp /* 8 */,
				Fragments._OppositePropertyCallExp__OppositePropertyCallExp /* 9 */
			};
		private static final int @NonNull [] __OppositePropertyCallExp = { 1,1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _OrderedSetType =
			{
				Fragments._OrderedSetType__OclAny /* 0 */,
				Fragments._OrderedSetType__OclElement /* 1 */,
				Fragments._OrderedSetType__Element /* 2 */,
				Fragments._OrderedSetType__OclType /* 2 */,
				Fragments._OrderedSetType__NamedElement /* 3 */,
				Fragments._OrderedSetType__TemplateableElement /* 3 */,
				Fragments._OrderedSetType__Namespace /* 4 */,
				Fragments._OrderedSetType__Type /* 4 */,
				Fragments._OrderedSetType__AbstractClass /* 5 */,
				Fragments._OrderedSetType__Class /* 6 */,
				Fragments._OrderedSetType__DataType /* 7 */,
				Fragments._OrderedSetType__IterableType /* 8 */,
				Fragments._OrderedSetType__CollectionType /* 9 */,
				Fragments._OrderedSetType__OrderedSetType /* 10 */
			};
		private static final int @NonNull [] __OrderedSetType = { 1,1,2,2,2,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _OrphanCompletePackage =
			{
				Fragments._OrphanCompletePackage__OclAny /* 0 */,
				Fragments._OrphanCompletePackage__OclElement /* 1 */,
				Fragments._OrphanCompletePackage__Element /* 2 */,
				Fragments._OrphanCompletePackage__NamedElement /* 3 */,
				Fragments._OrphanCompletePackage__CompletePackage /* 4 */,
				Fragments._OrphanCompletePackage__OrphanCompletePackage /* 5 */
			};
		private static final int @NonNull [] __OrphanCompletePackage = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Package =
			{
				Fragments._Package__OclAny /* 0 */,
				Fragments._Package__OclElement /* 1 */,
				Fragments._Package__Element /* 2 */,
				Fragments._Package__NamedElement /* 3 */,
				Fragments._Package__Namespace /* 4 */,
				Fragments._Package__Package /* 5 */
			};
		private static final int @NonNull [] __Package = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Parameter =
			{
				Fragments._Parameter__OclAny /* 0 */,
				Fragments._Parameter__OclElement /* 1 */,
				Fragments._Parameter__Element /* 2 */,
				Fragments._Parameter__NamedElement /* 3 */,
				Fragments._Parameter__TypedElement /* 4 */,
				Fragments._Parameter__VariableDeclaration /* 5 */,
				Fragments._Parameter__Parameter /* 6 */
			};
		private static final int @NonNull [] __Parameter = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ParameterVariable =
			{
				Fragments._ParameterVariable__OclAny /* 0 */,
				Fragments._ParameterVariable__OclElement /* 1 */,
				Fragments._ParameterVariable__Element /* 2 */,
				Fragments._ParameterVariable__NamedElement /* 3 */,
				Fragments._ParameterVariable__TypedElement /* 4 */,
				Fragments._ParameterVariable__VariableDeclaration /* 5 */,
				Fragments._ParameterVariable__Variable /* 6 */,
				Fragments._ParameterVariable__ParameterVariable /* 7 */
			};
		private static final int @NonNull [] __ParameterVariable = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Pivotable =
			{
				Fragments._Pivotable__OclAny /* 0 */,
				Fragments._Pivotable__OclElement /* 1 */,
				Fragments._Pivotable__Pivotable /* 2 */
			};
		private static final int @NonNull [] __Pivotable = { 1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Precedence =
			{
				Fragments._Precedence__OclAny /* 0 */,
				Fragments._Precedence__OclElement /* 1 */,
				Fragments._Precedence__Element /* 2 */,
				Fragments._Precedence__NamedElement /* 3 */,
				Fragments._Precedence__Precedence /* 4 */
			};
		private static final int @NonNull [] __Precedence = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _PrimitiveCompletePackage =
			{
				Fragments._PrimitiveCompletePackage__OclAny /* 0 */,
				Fragments._PrimitiveCompletePackage__OclElement /* 1 */,
				Fragments._PrimitiveCompletePackage__Element /* 2 */,
				Fragments._PrimitiveCompletePackage__NamedElement /* 3 */,
				Fragments._PrimitiveCompletePackage__CompletePackage /* 4 */,
				Fragments._PrimitiveCompletePackage__PrimitiveCompletePackage /* 5 */
			};
		private static final int @NonNull [] __PrimitiveCompletePackage = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _PrimitiveLiteralExp =
			{
				Fragments._PrimitiveLiteralExp__OclAny /* 0 */,
				Fragments._PrimitiveLiteralExp__OclElement /* 1 */,
				Fragments._PrimitiveLiteralExp__Element /* 2 */,
				Fragments._PrimitiveLiteralExp__NamedElement /* 3 */,
				Fragments._PrimitiveLiteralExp__TypedElement /* 4 */,
				Fragments._PrimitiveLiteralExp__OCLExpression /* 5 */,
				Fragments._PrimitiveLiteralExp__LiteralExp /* 6 */,
				Fragments._PrimitiveLiteralExp__PrimitiveLiteralExp /* 7 */
			};
		private static final int @NonNull [] __PrimitiveLiteralExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _PrimitiveType =
			{
				Fragments._PrimitiveType__OclAny /* 0 */,
				Fragments._PrimitiveType__OclElement /* 1 */,
				Fragments._PrimitiveType__Element /* 2 */,
				Fragments._PrimitiveType__OclType /* 2 */,
				Fragments._PrimitiveType__NamedElement /* 3 */,
				Fragments._PrimitiveType__TemplateableElement /* 3 */,
				Fragments._PrimitiveType__Namespace /* 4 */,
				Fragments._PrimitiveType__Type /* 4 */,
				Fragments._PrimitiveType__AbstractClass /* 5 */,
				Fragments._PrimitiveType__Class /* 6 */,
				Fragments._PrimitiveType__DataType /* 7 */,
				Fragments._PrimitiveType__PrimitiveType /* 8 */
			};
		private static final int @NonNull [] __PrimitiveType = { 1,1,2,2,2,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Profile =
			{
				Fragments._Profile__OclAny /* 0 */,
				Fragments._Profile__OclElement /* 1 */,
				Fragments._Profile__Element /* 2 */,
				Fragments._Profile__NamedElement /* 3 */,
				Fragments._Profile__Namespace /* 4 */,
				Fragments._Profile__Package /* 5 */,
				Fragments._Profile__Profile /* 6 */
			};
		private static final int @NonNull [] __Profile = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ProfileApplication =
			{
				Fragments._ProfileApplication__OclAny /* 0 */,
				Fragments._ProfileApplication__OclElement /* 1 */,
				Fragments._ProfileApplication__Element /* 2 */,
				Fragments._ProfileApplication__ProfileApplication /* 3 */
			};
		private static final int @NonNull [] __ProfileApplication = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Property =
			{
				Fragments._Property__OclAny /* 0 */,
				Fragments._Property__OclElement /* 1 */,
				Fragments._Property__Element /* 2 */,
				Fragments._Property__NamedElement /* 3 */,
				Fragments._Property__TypedElement /* 4 */,
				Fragments._Property__Feature /* 5 */,
				Fragments._Property__Property /* 6 */
			};
		private static final int @NonNull [] __Property = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _PropertyCallExp =
			{
				Fragments._PropertyCallExp__OclAny /* 0 */,
				Fragments._PropertyCallExp__OclElement /* 1 */,
				Fragments._PropertyCallExp__Element /* 2 */,
				Fragments._PropertyCallExp__ReferringElement /* 2 */,
				Fragments._PropertyCallExp__NamedElement /* 3 */,
				Fragments._PropertyCallExp__TypedElement /* 4 */,
				Fragments._PropertyCallExp__OCLExpression /* 5 */,
				Fragments._PropertyCallExp__CallExp /* 6 */,
				Fragments._PropertyCallExp__FeatureCallExp /* 7 */,
				Fragments._PropertyCallExp__NavigationCallExp /* 8 */,
				Fragments._PropertyCallExp__PropertyCallExp /* 9 */
			};
		private static final int @NonNull [] __PropertyCallExp = { 1,1,2,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Pseudostate =
			{
				Fragments._Pseudostate__OclAny /* 0 */,
				Fragments._Pseudostate__OclElement /* 1 */,
				Fragments._Pseudostate__Element /* 2 */,
				Fragments._Pseudostate__NamedElement /* 3 */,
				Fragments._Pseudostate__Vertex /* 4 */,
				Fragments._Pseudostate__Pseudostate /* 5 */
			};
		private static final int @NonNull [] __Pseudostate = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _PseudostateKind =
			{
				Fragments._PseudostateKind__OclAny /* 0 */,
				Fragments._PseudostateKind__OclElement /* 1 */,
				Fragments._PseudostateKind__OclType /* 2 */,
				Fragments._PseudostateKind__OclEnumeration /* 3 */,
				Fragments._PseudostateKind__PseudostateKind /* 4 */
			};
		private static final int @NonNull [] __PseudostateKind = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _RealLiteralExp =
			{
				Fragments._RealLiteralExp__OclAny /* 0 */,
				Fragments._RealLiteralExp__OclElement /* 1 */,
				Fragments._RealLiteralExp__Element /* 2 */,
				Fragments._RealLiteralExp__NamedElement /* 3 */,
				Fragments._RealLiteralExp__TypedElement /* 4 */,
				Fragments._RealLiteralExp__OCLExpression /* 5 */,
				Fragments._RealLiteralExp__LiteralExp /* 6 */,
				Fragments._RealLiteralExp__PrimitiveLiteralExp /* 7 */,
				Fragments._RealLiteralExp__NumericLiteralExp /* 8 */,
				Fragments._RealLiteralExp__RealLiteralExp /* 9 */
			};
		private static final int @NonNull [] __RealLiteralExp = { 1,1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ReferringElement =
			{
				Fragments._ReferringElement__OclAny /* 0 */,
				Fragments._ReferringElement__OclElement /* 1 */,
				Fragments._ReferringElement__ReferringElement /* 2 */
			};
		private static final int @NonNull [] __ReferringElement = { 1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Region =
			{
				Fragments._Region__OclAny /* 0 */,
				Fragments._Region__OclElement /* 1 */,
				Fragments._Region__Element /* 2 */,
				Fragments._Region__NamedElement /* 3 */,
				Fragments._Region__Namespace /* 4 */,
				Fragments._Region__Region /* 5 */
			};
		private static final int @NonNull [] __Region = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ResultVariable =
			{
				Fragments._ResultVariable__OclAny /* 0 */,
				Fragments._ResultVariable__OclElement /* 1 */,
				Fragments._ResultVariable__Element /* 2 */,
				Fragments._ResultVariable__NamedElement /* 3 */,
				Fragments._ResultVariable__TypedElement /* 4 */,
				Fragments._ResultVariable__VariableDeclaration /* 5 */,
				Fragments._ResultVariable__Variable /* 6 */,
				Fragments._ResultVariable__ResultVariable /* 7 */
			};
		private static final int @NonNull [] __ResultVariable = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _SelfType =
			{
				Fragments._SelfType__OclAny /* 0 */,
				Fragments._SelfType__OclElement /* 1 */,
				Fragments._SelfType__Element /* 2 */,
				Fragments._SelfType__OclType /* 2 */,
				Fragments._SelfType__NamedElement /* 3 */,
				Fragments._SelfType__TemplateableElement /* 3 */,
				Fragments._SelfType__Namespace /* 4 */,
				Fragments._SelfType__Type /* 4 */,
				Fragments._SelfType__AbstractClass /* 5 */,
				Fragments._SelfType__Class /* 6 */,
				Fragments._SelfType__SelfType /* 7 */
			};
		private static final int @NonNull [] __SelfType = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _SendSignalAction =
			{
				Fragments._SendSignalAction__OclAny /* 0 */,
				Fragments._SendSignalAction__OclElement /* 1 */,
				Fragments._SendSignalAction__Element /* 2 */,
				Fragments._SendSignalAction__NamedElement /* 3 */,
				Fragments._SendSignalAction__SendSignalAction /* 4 */
			};
		private static final int @NonNull [] __SendSignalAction = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _SequenceType =
			{
				Fragments._SequenceType__OclAny /* 0 */,
				Fragments._SequenceType__OclElement /* 1 */,
				Fragments._SequenceType__Element /* 2 */,
				Fragments._SequenceType__OclType /* 2 */,
				Fragments._SequenceType__NamedElement /* 3 */,
				Fragments._SequenceType__TemplateableElement /* 3 */,
				Fragments._SequenceType__Namespace /* 4 */,
				Fragments._SequenceType__Type /* 4 */,
				Fragments._SequenceType__AbstractClass /* 5 */,
				Fragments._SequenceType__Class /* 6 */,
				Fragments._SequenceType__DataType /* 7 */,
				Fragments._SequenceType__IterableType /* 8 */,
				Fragments._SequenceType__CollectionType /* 9 */,
				Fragments._SequenceType__SequenceType /* 10 */
			};
		private static final int @NonNull [] __SequenceType = { 1,1,2,2,2,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _SetType =
			{
				Fragments._SetType__OclAny /* 0 */,
				Fragments._SetType__OclElement /* 1 */,
				Fragments._SetType__Element /* 2 */,
				Fragments._SetType__OclType /* 2 */,
				Fragments._SetType__NamedElement /* 3 */,
				Fragments._SetType__TemplateableElement /* 3 */,
				Fragments._SetType__Namespace /* 4 */,
				Fragments._SetType__Type /* 4 */,
				Fragments._SetType__AbstractClass /* 5 */,
				Fragments._SetType__Class /* 6 */,
				Fragments._SetType__DataType /* 7 */,
				Fragments._SetType__IterableType /* 8 */,
				Fragments._SetType__CollectionType /* 9 */,
				Fragments._SetType__SetType /* 10 */
			};
		private static final int @NonNull [] __SetType = { 1,1,2,2,2,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ShadowExp =
			{
				Fragments._ShadowExp__OclAny /* 0 */,
				Fragments._ShadowExp__OclElement /* 1 */,
				Fragments._ShadowExp__Element /* 2 */,
				Fragments._ShadowExp__NamedElement /* 3 */,
				Fragments._ShadowExp__TypedElement /* 4 */,
				Fragments._ShadowExp__OCLExpression /* 5 */,
				Fragments._ShadowExp__ShadowExp /* 6 */
			};
		private static final int @NonNull [] __ShadowExp = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ShadowPart =
			{
				Fragments._ShadowPart__OclAny /* 0 */,
				Fragments._ShadowPart__OclElement /* 1 */,
				Fragments._ShadowPart__Element /* 2 */,
				Fragments._ShadowPart__NamedElement /* 3 */,
				Fragments._ShadowPart__TypedElement /* 4 */,
				Fragments._ShadowPart__ShadowPart /* 5 */
			};
		private static final int @NonNull [] __ShadowPart = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Signal =
			{
				Fragments._Signal__OclAny /* 0 */,
				Fragments._Signal__OclElement /* 1 */,
				Fragments._Signal__Element /* 2 */,
				Fragments._Signal__OclType /* 2 */,
				Fragments._Signal__NamedElement /* 3 */,
				Fragments._Signal__TemplateableElement /* 3 */,
				Fragments._Signal__Namespace /* 4 */,
				Fragments._Signal__Type /* 4 */,
				Fragments._Signal__AbstractClass /* 5 */,
				Fragments._Signal__Class /* 6 */,
				Fragments._Signal__Signal /* 7 */
			};
		private static final int @NonNull [] __Signal = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Slot =
			{
				Fragments._Slot__OclAny /* 0 */,
				Fragments._Slot__OclElement /* 1 */,
				Fragments._Slot__Element /* 2 */,
				Fragments._Slot__Slot /* 3 */
			};
		private static final int @NonNull [] __Slot = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _StandardLibrary =
			{
				Fragments._StandardLibrary__OclAny /* 0 */,
				Fragments._StandardLibrary__OclElement /* 1 */,
				Fragments._StandardLibrary__Element /* 2 */,
				Fragments._StandardLibrary__StandardLibrary /* 3 */
			};
		private static final int @NonNull [] __StandardLibrary = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _State =
			{
				Fragments._State__OclAny /* 0 */,
				Fragments._State__OclElement /* 1 */,
				Fragments._State__OclState /* 1 */,
				Fragments._State__Element /* 2 */,
				Fragments._State__NamedElement /* 3 */,
				Fragments._State__Namespace /* 4 */,
				Fragments._State__Vertex /* 4 */,
				Fragments._State__State /* 5 */
			};
		private static final int @NonNull [] __State = { 1,2,1,1,2,1 };

		private static final @NonNull FlatFragment @NonNull [] _StateExp =
			{
				Fragments._StateExp__OclAny /* 0 */,
				Fragments._StateExp__OclElement /* 1 */,
				Fragments._StateExp__Element /* 2 */,
				Fragments._StateExp__NamedElement /* 3 */,
				Fragments._StateExp__TypedElement /* 4 */,
				Fragments._StateExp__OCLExpression /* 5 */,
				Fragments._StateExp__StateExp /* 6 */
			};
		private static final int @NonNull [] __StateExp = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _StateMachine =
			{
				Fragments._StateMachine__OclAny /* 0 */,
				Fragments._StateMachine__OclElement /* 1 */,
				Fragments._StateMachine__Element /* 2 */,
				Fragments._StateMachine__OclType /* 2 */,
				Fragments._StateMachine__NamedElement /* 3 */,
				Fragments._StateMachine__TemplateableElement /* 3 */,
				Fragments._StateMachine__Namespace /* 4 */,
				Fragments._StateMachine__Type /* 4 */,
				Fragments._StateMachine__AbstractClass /* 5 */,
				Fragments._StateMachine__Class /* 6 */,
				Fragments._StateMachine__Behavior /* 7 */,
				Fragments._StateMachine__StateMachine /* 8 */
			};
		private static final int @NonNull [] __StateMachine = { 1,1,2,2,2,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Stereotype =
			{
				Fragments._Stereotype__OclAny /* 0 */,
				Fragments._Stereotype__OclElement /* 1 */,
				Fragments._Stereotype__Element /* 2 */,
				Fragments._Stereotype__OclType /* 2 */,
				Fragments._Stereotype__NamedElement /* 3 */,
				Fragments._Stereotype__OclStereotype /* 3 */,
				Fragments._Stereotype__TemplateableElement /* 3 */,
				Fragments._Stereotype__Namespace /* 4 */,
				Fragments._Stereotype__Type /* 4 */,
				Fragments._Stereotype__AbstractClass /* 5 */,
				Fragments._Stereotype__Class /* 6 */,
				Fragments._Stereotype__Stereotype /* 7 */
			};
		private static final int @NonNull [] __Stereotype = { 1,1,2,3,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _StereotypeExtender =
			{
				Fragments._StereotypeExtender__OclAny /* 0 */,
				Fragments._StereotypeExtender__OclElement /* 1 */,
				Fragments._StereotypeExtender__Element /* 2 */,
				Fragments._StereotypeExtender__StereotypeExtender /* 3 */
			};
		private static final int @NonNull [] __StereotypeExtender = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _StringLiteralExp =
			{
				Fragments._StringLiteralExp__OclAny /* 0 */,
				Fragments._StringLiteralExp__OclElement /* 1 */,
				Fragments._StringLiteralExp__Element /* 2 */,
				Fragments._StringLiteralExp__NamedElement /* 3 */,
				Fragments._StringLiteralExp__TypedElement /* 4 */,
				Fragments._StringLiteralExp__OCLExpression /* 5 */,
				Fragments._StringLiteralExp__LiteralExp /* 6 */,
				Fragments._StringLiteralExp__PrimitiveLiteralExp /* 7 */,
				Fragments._StringLiteralExp__StringLiteralExp /* 8 */
			};
		private static final int @NonNull [] __StringLiteralExp = { 1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TemplateBinding =
			{
				Fragments._TemplateBinding__OclAny /* 0 */,
				Fragments._TemplateBinding__OclElement /* 1 */,
				Fragments._TemplateBinding__Element /* 2 */,
				Fragments._TemplateBinding__TemplateBinding /* 3 */
			};
		private static final int @NonNull [] __TemplateBinding = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TemplateParameter =
			{
				Fragments._TemplateParameter__OclAny /* 0 */,
				Fragments._TemplateParameter__OclElement /* 1 */,
				Fragments._TemplateParameter__Element /* 2 */,
				Fragments._TemplateParameter__OclType /* 2 */,
				Fragments._TemplateParameter__NamedElement /* 3 */,
				Fragments._TemplateParameter__Type /* 4 */,
				Fragments._TemplateParameter__TemplateParameter /* 5 */
			};
		private static final int @NonNull [] __TemplateParameter = { 1,1,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TemplateParameterSubstitution =
			{
				Fragments._TemplateParameterSubstitution__OclAny /* 0 */,
				Fragments._TemplateParameterSubstitution__OclElement /* 1 */,
				Fragments._TemplateParameterSubstitution__Element /* 2 */,
				Fragments._TemplateParameterSubstitution__TemplateParameterSubstitution /* 3 */
			};
		private static final int @NonNull [] __TemplateParameterSubstitution = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TemplateSignature =
			{
				Fragments._TemplateSignature__OclAny /* 0 */,
				Fragments._TemplateSignature__OclElement /* 1 */,
				Fragments._TemplateSignature__Element /* 2 */,
				Fragments._TemplateSignature__TemplateSignature /* 3 */
			};
		private static final int @NonNull [] __TemplateSignature = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TemplateableElement =
			{
				Fragments._TemplateableElement__OclAny /* 0 */,
				Fragments._TemplateableElement__OclElement /* 1 */,
				Fragments._TemplateableElement__Element /* 2 */,
				Fragments._TemplateableElement__TemplateableElement /* 3 */
			};
		private static final int @NonNull [] __TemplateableElement = { 1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Throwable =
			{
				Fragments._Throwable__OclAny /* 0 */,
				Fragments._Throwable__Throwable /* 1 */
			};
		private static final int @NonNull [] __Throwable = { 1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Transition =
			{
				Fragments._Transition__OclAny /* 0 */,
				Fragments._Transition__OclElement /* 1 */,
				Fragments._Transition__Element /* 2 */,
				Fragments._Transition__NamedElement /* 3 */,
				Fragments._Transition__Namespace /* 4 */,
				Fragments._Transition__Transition /* 5 */
			};
		private static final int @NonNull [] __Transition = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TransitionKind =
			{
				Fragments._TransitionKind__OclAny /* 0 */,
				Fragments._TransitionKind__OclElement /* 1 */,
				Fragments._TransitionKind__OclType /* 2 */,
				Fragments._TransitionKind__OclEnumeration /* 3 */,
				Fragments._TransitionKind__TransitionKind /* 4 */
			};
		private static final int @NonNull [] __TransitionKind = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Trigger =
			{
				Fragments._Trigger__OclAny /* 0 */,
				Fragments._Trigger__OclElement /* 1 */,
				Fragments._Trigger__Element /* 2 */,
				Fragments._Trigger__NamedElement /* 3 */,
				Fragments._Trigger__Trigger /* 4 */
			};
		private static final int @NonNull [] __Trigger = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TupleLiteralExp =
			{
				Fragments._TupleLiteralExp__OclAny /* 0 */,
				Fragments._TupleLiteralExp__OclElement /* 1 */,
				Fragments._TupleLiteralExp__Element /* 2 */,
				Fragments._TupleLiteralExp__NamedElement /* 3 */,
				Fragments._TupleLiteralExp__TypedElement /* 4 */,
				Fragments._TupleLiteralExp__OCLExpression /* 5 */,
				Fragments._TupleLiteralExp__LiteralExp /* 6 */,
				Fragments._TupleLiteralExp__TupleLiteralExp /* 7 */
			};
		private static final int @NonNull [] __TupleLiteralExp = { 1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TupleLiteralPart =
			{
				Fragments._TupleLiteralPart__OclAny /* 0 */,
				Fragments._TupleLiteralPart__OclElement /* 1 */,
				Fragments._TupleLiteralPart__Element /* 2 */,
				Fragments._TupleLiteralPart__NamedElement /* 3 */,
				Fragments._TupleLiteralPart__TypedElement /* 4 */,
				Fragments._TupleLiteralPart__VariableDeclaration /* 5 */,
				Fragments._TupleLiteralPart__TupleLiteralPart /* 6 */
			};
		private static final int @NonNull [] __TupleLiteralPart = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TupleType =
			{
				Fragments._TupleType__OclAny /* 0 */,
				Fragments._TupleType__OclElement /* 1 */,
				Fragments._TupleType__Element /* 2 */,
				Fragments._TupleType__OclType /* 2 */,
				Fragments._TupleType__NamedElement /* 3 */,
				Fragments._TupleType__TemplateableElement /* 3 */,
				Fragments._TupleType__Namespace /* 4 */,
				Fragments._TupleType__Type /* 4 */,
				Fragments._TupleType__AbstractClass /* 5 */,
				Fragments._TupleType__Class /* 6 */,
				Fragments._TupleType__DataType /* 7 */,
				Fragments._TupleType__TupleType /* 8 */
			};
		private static final int @NonNull [] __TupleType = { 1,1,2,2,2,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Type =
			{
				Fragments._Type__OclAny /* 0 */,
				Fragments._Type__OclElement /* 1 */,
				Fragments._Type__Element /* 2 */,
				Fragments._Type__OclType /* 2 */,
				Fragments._Type__NamedElement /* 3 */,
				Fragments._Type__Type /* 4 */
			};
		private static final int @NonNull [] __Type = { 1,1,2,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TypeExp =
			{
				Fragments._TypeExp__OclAny /* 0 */,
				Fragments._TypeExp__OclElement /* 1 */,
				Fragments._TypeExp__Element /* 2 */,
				Fragments._TypeExp__ReferringElement /* 2 */,
				Fragments._TypeExp__NamedElement /* 3 */,
				Fragments._TypeExp__TypedElement /* 4 */,
				Fragments._TypeExp__OCLExpression /* 5 */,
				Fragments._TypeExp__TypeExp /* 6 */
			};
		private static final int @NonNull [] __TypeExp = { 1,1,2,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _TypedElement =
			{
				Fragments._TypedElement__OclAny /* 0 */,
				Fragments._TypedElement__OclElement /* 1 */,
				Fragments._TypedElement__Element /* 2 */,
				Fragments._TypedElement__NamedElement /* 3 */,
				Fragments._TypedElement__TypedElement /* 4 */
			};
		private static final int @NonNull [] __TypedElement = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _UnlimitedNaturalLiteralExp =
			{
				Fragments._UnlimitedNaturalLiteralExp__OclAny /* 0 */,
				Fragments._UnlimitedNaturalLiteralExp__OclElement /* 1 */,
				Fragments._UnlimitedNaturalLiteralExp__Element /* 2 */,
				Fragments._UnlimitedNaturalLiteralExp__NamedElement /* 3 */,
				Fragments._UnlimitedNaturalLiteralExp__TypedElement /* 4 */,
				Fragments._UnlimitedNaturalLiteralExp__OCLExpression /* 5 */,
				Fragments._UnlimitedNaturalLiteralExp__LiteralExp /* 6 */,
				Fragments._UnlimitedNaturalLiteralExp__PrimitiveLiteralExp /* 7 */,
				Fragments._UnlimitedNaturalLiteralExp__NumericLiteralExp /* 8 */,
				Fragments._UnlimitedNaturalLiteralExp__UnlimitedNaturalLiteralExp /* 9 */
			};
		private static final int @NonNull [] __UnlimitedNaturalLiteralExp = { 1,1,1,1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _UnspecifiedValueExp =
			{
				Fragments._UnspecifiedValueExp__OclAny /* 0 */,
				Fragments._UnspecifiedValueExp__OclElement /* 1 */,
				Fragments._UnspecifiedValueExp__Element /* 2 */,
				Fragments._UnspecifiedValueExp__NamedElement /* 3 */,
				Fragments._UnspecifiedValueExp__TypedElement /* 4 */,
				Fragments._UnspecifiedValueExp__OCLExpression /* 5 */,
				Fragments._UnspecifiedValueExp__UnspecifiedValueExp /* 6 */
			};
		private static final int @NonNull [] __UnspecifiedValueExp = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _ValueSpecification =
			{
				Fragments._ValueSpecification__OclAny /* 0 */,
				Fragments._ValueSpecification__OclElement /* 1 */,
				Fragments._ValueSpecification__Element /* 2 */,
				Fragments._ValueSpecification__NamedElement /* 3 */,
				Fragments._ValueSpecification__TypedElement /* 4 */,
				Fragments._ValueSpecification__ValueSpecification /* 5 */
			};
		private static final int @NonNull [] __ValueSpecification = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Variable =
			{
				Fragments._Variable__OclAny /* 0 */,
				Fragments._Variable__OclElement /* 1 */,
				Fragments._Variable__Element /* 2 */,
				Fragments._Variable__NamedElement /* 3 */,
				Fragments._Variable__TypedElement /* 4 */,
				Fragments._Variable__VariableDeclaration /* 5 */,
				Fragments._Variable__Variable /* 6 */
			};
		private static final int @NonNull [] __Variable = { 1,1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _VariableDeclaration =
			{
				Fragments._VariableDeclaration__OclAny /* 0 */,
				Fragments._VariableDeclaration__OclElement /* 1 */,
				Fragments._VariableDeclaration__Element /* 2 */,
				Fragments._VariableDeclaration__NamedElement /* 3 */,
				Fragments._VariableDeclaration__TypedElement /* 4 */,
				Fragments._VariableDeclaration__VariableDeclaration /* 5 */
			};
		private static final int @NonNull [] __VariableDeclaration = { 1,1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _VariableExp =
			{
				Fragments._VariableExp__OclAny /* 0 */,
				Fragments._VariableExp__OclElement /* 1 */,
				Fragments._VariableExp__Element /* 2 */,
				Fragments._VariableExp__ReferringElement /* 2 */,
				Fragments._VariableExp__NamedElement /* 3 */,
				Fragments._VariableExp__TypedElement /* 4 */,
				Fragments._VariableExp__OCLExpression /* 5 */,
				Fragments._VariableExp__VariableExp /* 6 */
			};
		private static final int @NonNull [] __VariableExp = { 1,1,2,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Vertex =
			{
				Fragments._Vertex__OclAny /* 0 */,
				Fragments._Vertex__OclElement /* 1 */,
				Fragments._Vertex__Element /* 2 */,
				Fragments._Vertex__NamedElement /* 3 */,
				Fragments._Vertex__Vertex /* 4 */
			};
		private static final int @NonNull [] __Vertex = { 1,1,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _Visitable =
			{
				Fragments._Visitable__OclAny /* 0 */,
				Fragments._Visitable__OclElement /* 1 */,
				Fragments._Visitable__Visitable /* 2 */
			};
		private static final int @NonNull [] __Visitable = { 1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _VoidType =
			{
				Fragments._VoidType__OclAny /* 0 */,
				Fragments._VoidType__OclElement /* 1 */,
				Fragments._VoidType__Element /* 2 */,
				Fragments._VoidType__OclType /* 2 */,
				Fragments._VoidType__NamedElement /* 3 */,
				Fragments._VoidType__TemplateableElement /* 3 */,
				Fragments._VoidType__Namespace /* 4 */,
				Fragments._VoidType__Type /* 4 */,
				Fragments._VoidType__AbstractClass /* 5 */,
				Fragments._VoidType__Class /* 6 */,
				Fragments._VoidType__VoidType /* 7 */
			};
		private static final int @NonNull [] __VoidType = { 1,1,2,2,2,1,1,1 };

		private static final @NonNull FlatFragment @NonNull [] _WildcardType =
			{
				Fragments._WildcardType__OclAny /* 0 */,
				Fragments._WildcardType__OclElement /* 1 */,
				Fragments._WildcardType__Element /* 2 */,
				Fragments._WildcardType__OclType /* 2 */,
				Fragments._WildcardType__NamedElement /* 3 */,
				Fragments._WildcardType__TemplateableElement /* 3 */,
				Fragments._WildcardType__Namespace /* 4 */,
				Fragments._WildcardType__Type /* 4 */,
				Fragments._WildcardType__AbstractClass /* 5 */,
				Fragments._WildcardType__Class /* 6 */,
				Fragments._WildcardType__WildcardType /* 7 */
			};
		private static final int @NonNull [] __WildcardType = { 1,1,2,2,2,1,1,1 };

		/**
		 *	Install the fragment descriptors in the class descriptors.
		 */
		static {
			Types._AbstractClass.initFragments(_AbstractClass, __AbstractClass);
			Types._Annotation.initFragments(_Annotation, __Annotation);
			Types._AnyType.initFragments(_AnyType, __AnyType);
			Types._AssociationClass.initFragments(_AssociationClass, __AssociationClass);
			Types._AssociationClassCallExp.initFragments(_AssociationClassCallExp, __AssociationClassCallExp);
			Types._AssociativityKind.initFragments(_AssociativityKind, __AssociativityKind);
			Types._BagType.initFragments(_BagType, __BagType);
			Types._Behavior.initFragments(_Behavior, __Behavior);
			Types._BooleanLiteralExp.initFragments(_BooleanLiteralExp, __BooleanLiteralExp);
			Types._BooleanType.initFragments(_BooleanType, __BooleanType);
			Types._CallExp.initFragments(_CallExp, __CallExp);
			Types._CallOperationAction.initFragments(_CallOperationAction, __CallOperationAction);
			Types._Class.initFragments(_Class, __Class);
			Types._CollectionItem.initFragments(_CollectionItem, __CollectionItem);
			Types._CollectionKind.initFragments(_CollectionKind, __CollectionKind);
			Types._CollectionLiteralExp.initFragments(_CollectionLiteralExp, __CollectionLiteralExp);
			Types._CollectionLiteralPart.initFragments(_CollectionLiteralPart, __CollectionLiteralPart);
			Types._CollectionRange.initFragments(_CollectionRange, __CollectionRange);
			Types._CollectionType.initFragments(_CollectionType, __CollectionType);
			Types._Comment.initFragments(_Comment, __Comment);
			Types._CompleteClass.initFragments(_CompleteClass, __CompleteClass);
			Types._CompleteEnvironment.initFragments(_CompleteEnvironment, __CompleteEnvironment);
			Types._CompleteModel.initFragments(_CompleteModel, __CompleteModel);
			Types._CompletePackage.initFragments(_CompletePackage, __CompletePackage);
			Types._ConnectionPointReference.initFragments(_ConnectionPointReference, __ConnectionPointReference);
			Types._Constraint.initFragments(_Constraint, __Constraint);
			Types._DataType.initFragments(_DataType, __DataType);
			Types._Detail.initFragments(_Detail, __Detail);
			Types._DynamicBehavior.initFragments(_DynamicBehavior, __DynamicBehavior);
			Types._DynamicElement.initFragments(_DynamicElement, __DynamicElement);
			Types._DynamicProperty.initFragments(_DynamicProperty, __DynamicProperty);
			Types._DynamicType.initFragments(_DynamicType, __DynamicType);
			Types._DynamicValueSpecification.initFragments(_DynamicValueSpecification, __DynamicValueSpecification);
			Types._EcoreObject.initFragments(_EcoreObject, __EcoreObject);
			Types._Element.initFragments(_Element, __Element);
			Types._ElementExtension.initFragments(_ElementExtension, __ElementExtension);
			Types._ElementLiteralExp.initFragments(_ElementLiteralExp, __ElementLiteralExp);
			Types._EnumLiteralExp.initFragments(_EnumLiteralExp, __EnumLiteralExp);
			Types._Enumeration.initFragments(_Enumeration, __Enumeration);
			Types._EnumerationLiteral.initFragments(_EnumerationLiteral, __EnumerationLiteral);
			Types._ExpressionInOCL.initFragments(_ExpressionInOCL, __ExpressionInOCL);
			Types._Feature.initFragments(_Feature, __Feature);
			Types._FeatureCallExp.initFragments(_FeatureCallExp, __FeatureCallExp);
			Types._FinalState.initFragments(_FinalState, __FinalState);
			Types._IfExp.initFragments(_IfExp, __IfExp);
			Types._Import.initFragments(_Import, __Import);
			Types._InstanceSpecification.initFragments(_InstanceSpecification, __InstanceSpecification);
			Types._IntegerLiteralExp.initFragments(_IntegerLiteralExp, __IntegerLiteralExp);
			Types._InvalidLiteralExp.initFragments(_InvalidLiteralExp, __InvalidLiteralExp);
			Types._InvalidType.initFragments(_InvalidType, __InvalidType);
			Types._IterableType.initFragments(_IterableType, __IterableType);
			Types._IterateExp.initFragments(_IterateExp, __IterateExp);
			Types._Iteration.initFragments(_Iteration, __Iteration);
			Types._IteratorExp.initFragments(_IteratorExp, __IteratorExp);
			Types._IteratorVariable.initFragments(_IteratorVariable, __IteratorVariable);
			Types._LambdaType.initFragments(_LambdaType, __LambdaType);
			Types._LanguageExpression.initFragments(_LanguageExpression, __LanguageExpression);
			Types._LetExp.initFragments(_LetExp, __LetExp);
			Types._LetVariable.initFragments(_LetVariable, __LetVariable);
			Types._Library.initFragments(_Library, __Library);
			Types._LibraryFeature.initFragments(_LibraryFeature, __LibraryFeature);
			Types._LiteralExp.initFragments(_LiteralExp, __LiteralExp);
			Types._LoopExp.initFragments(_LoopExp, __LoopExp);
			Types._MapLiteralExp.initFragments(_MapLiteralExp, __MapLiteralExp);
			Types._MapLiteralPart.initFragments(_MapLiteralPart, __MapLiteralPart);
			Types._MapType.initFragments(_MapType, __MapType);
			Types._MessageExp.initFragments(_MessageExp, __MessageExp);
			Types._MessageType.initFragments(_MessageType, __MessageType);
			Types._Model.initFragments(_Model, __Model);
			Types._MorePivotable.initFragments(_MorePivotable, __MorePivotable);
			Types._Nameable.initFragments(_Nameable, __Nameable);
			Types._NamedElement.initFragments(_NamedElement, __NamedElement);
			Types._Namespace.initFragments(_Namespace, __Namespace);
			Types._NavigationCallExp.initFragments(_NavigationCallExp, __NavigationCallExp);
			Types._NullLiteralExp.initFragments(_NullLiteralExp, __NullLiteralExp);
			Types._NumericLiteralExp.initFragments(_NumericLiteralExp, __NumericLiteralExp);
			Types._OCLExpression.initFragments(_OCLExpression, __OCLExpression);
			Types._Object.initFragments(_Object, __Object);
			Types._Operation.initFragments(_Operation, __Operation);
			Types._OperationCallExp.initFragments(_OperationCallExp, __OperationCallExp);
			Types._OppositePropertyCallExp.initFragments(_OppositePropertyCallExp, __OppositePropertyCallExp);
			Types._OrderedSetType.initFragments(_OrderedSetType, __OrderedSetType);
			Types._OrphanCompletePackage.initFragments(_OrphanCompletePackage, __OrphanCompletePackage);
			Types._Package.initFragments(_Package, __Package);
			Types._Parameter.initFragments(_Parameter, __Parameter);
			Types._ParameterVariable.initFragments(_ParameterVariable, __ParameterVariable);
			Types._Pivotable.initFragments(_Pivotable, __Pivotable);
			Types._Precedence.initFragments(_Precedence, __Precedence);
			Types._PrimitiveCompletePackage.initFragments(_PrimitiveCompletePackage, __PrimitiveCompletePackage);
			Types._PrimitiveLiteralExp.initFragments(_PrimitiveLiteralExp, __PrimitiveLiteralExp);
			Types._PrimitiveType.initFragments(_PrimitiveType, __PrimitiveType);
			Types._Profile.initFragments(_Profile, __Profile);
			Types._ProfileApplication.initFragments(_ProfileApplication, __ProfileApplication);
			Types._Property.initFragments(_Property, __Property);
			Types._PropertyCallExp.initFragments(_PropertyCallExp, __PropertyCallExp);
			Types._Pseudostate.initFragments(_Pseudostate, __Pseudostate);
			Types._PseudostateKind.initFragments(_PseudostateKind, __PseudostateKind);
			Types._RealLiteralExp.initFragments(_RealLiteralExp, __RealLiteralExp);
			Types._ReferringElement.initFragments(_ReferringElement, __ReferringElement);
			Types._Region.initFragments(_Region, __Region);
			Types._ResultVariable.initFragments(_ResultVariable, __ResultVariable);
			Types._SelfType.initFragments(_SelfType, __SelfType);
			Types._SendSignalAction.initFragments(_SendSignalAction, __SendSignalAction);
			Types._SequenceType.initFragments(_SequenceType, __SequenceType);
			Types._SetType.initFragments(_SetType, __SetType);
			Types._ShadowExp.initFragments(_ShadowExp, __ShadowExp);
			Types._ShadowPart.initFragments(_ShadowPart, __ShadowPart);
			Types._Signal.initFragments(_Signal, __Signal);
			Types._Slot.initFragments(_Slot, __Slot);
			Types._StandardLibrary.initFragments(_StandardLibrary, __StandardLibrary);
			Types._State.initFragments(_State, __State);
			Types._StateExp.initFragments(_StateExp, __StateExp);
			Types._StateMachine.initFragments(_StateMachine, __StateMachine);
			Types._Stereotype.initFragments(_Stereotype, __Stereotype);
			Types._StereotypeExtender.initFragments(_StereotypeExtender, __StereotypeExtender);
			Types._StringLiteralExp.initFragments(_StringLiteralExp, __StringLiteralExp);
			Types._TemplateBinding.initFragments(_TemplateBinding, __TemplateBinding);
			Types._TemplateParameter.initFragments(_TemplateParameter, __TemplateParameter);
			Types._TemplateParameterSubstitution.initFragments(_TemplateParameterSubstitution, __TemplateParameterSubstitution);
			Types._TemplateSignature.initFragments(_TemplateSignature, __TemplateSignature);
			Types._TemplateableElement.initFragments(_TemplateableElement, __TemplateableElement);
			Types._Throwable.initFragments(_Throwable, __Throwable);
			Types._Transition.initFragments(_Transition, __Transition);
			Types._TransitionKind.initFragments(_TransitionKind, __TransitionKind);
			Types._Trigger.initFragments(_Trigger, __Trigger);
			Types._TupleLiteralExp.initFragments(_TupleLiteralExp, __TupleLiteralExp);
			Types._TupleLiteralPart.initFragments(_TupleLiteralPart, __TupleLiteralPart);
			Types._TupleType.initFragments(_TupleType, __TupleType);
			Types._Type.initFragments(_Type, __Type);
			Types._TypeExp.initFragments(_TypeExp, __TypeExp);
			Types._TypedElement.initFragments(_TypedElement, __TypedElement);
			Types._UnlimitedNaturalLiteralExp.initFragments(_UnlimitedNaturalLiteralExp, __UnlimitedNaturalLiteralExp);
			Types._UnspecifiedValueExp.initFragments(_UnspecifiedValueExp, __UnspecifiedValueExp);
			Types._ValueSpecification.initFragments(_ValueSpecification, __ValueSpecification);
			Types._Variable.initFragments(_Variable, __Variable);
			Types._VariableDeclaration.initFragments(_VariableDeclaration, __VariableDeclaration);
			Types._VariableExp.initFragments(_VariableExp, __VariableExp);
			Types._Vertex.initFragments(_Vertex, __Vertex);
			Types._Visitable.initFragments(_Visitable, __Visitable);
			Types._VoidType.initFragments(_VoidType, __VoidType);
			Types._WildcardType.initFragments(_WildcardType, __WildcardType);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::TypeFragments and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of local operations or local operation overrides for each fragment of each type.
	 */
	public static class FragmentOperations1 {
		static {
			Init.initStart();
			TypeFragments.init();
		}

		private static final @NonNull Operation @NonNull [] _AbstractClass__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _AbstractClass__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _AbstractClass__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _AbstractClass__Namespace = {};
		private static final @NonNull Operation @NonNull [] _AbstractClass__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _AbstractClass__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _AbstractClass__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _AbstractClass__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _AbstractClass__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Annotation__Annotation = {};
		private static final @NonNull Operation @NonNull [] _Annotation__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Annotation__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Annotation__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Annotation__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _AnyType__AnyType = {};
		private static final @NonNull Operation @NonNull [] _AnyType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _AnyType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _AnyType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _AnyType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _AnyType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _AnyType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _AnyType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _AnyType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _AnyType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _AnyType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _AssociationClass__AssociationClass = {};
		private static final @NonNull Operation @NonNull [] _AssociationClass__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _AssociationClass__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClass__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClass__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _AssociationClass__Namespace = {};
		private static final @NonNull Operation @NonNull [] _AssociationClass__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClass__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClass__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClass__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _AssociationClass__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__AssociationClassCallExp = {};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__FeatureCallExp = {};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__NavigationCallExp = {};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _AssociationClassCallExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _AssociativityKind__AssociativityKind = {};
		private static final @NonNull Operation @NonNull [] _AssociativityKind__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _AssociativityKind__OclElement = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _AssociativityKind__OclEnumeration = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances(Integer[1]) */
		};
		private static final @NonNull Operation @NonNull [] _AssociativityKind__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};

		private static final @NonNull Operation @NonNull [] _BagType__BagType = {};
		private static final @NonNull Operation @NonNull [] _BagType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _BagType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _BagType__CollectionType = {};
		private static final @NonNull Operation @NonNull [] _BagType__DataType = {};
		private static final @NonNull Operation @NonNull [] _BagType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _BagType__IterableType = {};
		private static final @NonNull Operation @NonNull [] _BagType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _BagType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _BagType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _BagType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _BagType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _BagType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _BagType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Behavior__Behavior = {};
		private static final @NonNull Operation @NonNull [] _Behavior__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _Behavior__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _Behavior__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Behavior__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Behavior__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Behavior__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Behavior__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Behavior__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _Behavior__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _Behavior__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__BooleanLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__PrimitiveLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _BooleanLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _BooleanType__BooleanType = {
			PivotTables.Operations._BooleanType__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _BooleanType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _BooleanType__Class = {
			PivotTables.Operations._BooleanType__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _BooleanType__DataType = {};
		private static final @NonNull Operation @NonNull [] _BooleanType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _BooleanType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _BooleanType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _BooleanType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _BooleanType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _BooleanType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _BooleanType__PrimitiveType = {};
		private static final @NonNull Operation @NonNull [] _BooleanType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _BooleanType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _CallExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _CallExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CallExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CallExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _CallExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CallExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _CallExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _CallOperationAction__CallOperationAction = {};
		private static final @NonNull Operation @NonNull [] _CallOperationAction__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CallOperationAction__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CallOperationAction__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CallOperationAction__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Class__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _Class__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _Class__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Class__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Class__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Class__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Class__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Class__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _Class__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _Class__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _CollectionItem__CollectionItem = {};
		private static final @NonNull Operation @NonNull [] _CollectionItem__CollectionLiteralPart = {};
		private static final @NonNull Operation @NonNull [] _CollectionItem__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CollectionItem__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CollectionItem__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionItem__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionItem__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _CollectionKind__CollectionKind = {};
		private static final @NonNull Operation @NonNull [] _CollectionKind__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionKind__OclElement = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionKind__OclEnumeration = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances(Integer[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CollectionKind__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};

		private static final @NonNull Operation @NonNull [] _CollectionLiteralExp__CollectionLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _CollectionLiteralPart__CollectionLiteralPart = {};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralPart__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralPart__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralPart__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralPart__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionLiteralPart__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _CollectionRange__CollectionRange = {};
		private static final @NonNull Operation @NonNull [] _CollectionRange__CollectionLiteralPart = {};
		private static final @NonNull Operation @NonNull [] _CollectionRange__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CollectionRange__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CollectionRange__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionRange__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionRange__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _CollectionType__CollectionType = {};
		private static final @NonNull Operation @NonNull [] _CollectionType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _CollectionType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionType__DataType = {};
		private static final @NonNull Operation @NonNull [] _CollectionType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CollectionType__IterableType = {};
		private static final @NonNull Operation @NonNull [] _CollectionType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CollectionType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _CollectionType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _CollectionType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _CollectionType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _CollectionType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Comment__Comment = {};
		private static final @NonNull Operation @NonNull [] _Comment__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Comment__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Comment__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _CompleteClass__CompleteClass = {};
		private static final @NonNull Operation @NonNull [] _CompleteClass__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CompleteClass__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CompleteClass__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CompleteClass__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _CompleteEnvironment__CompleteEnvironment = {};
		private static final @NonNull Operation @NonNull [] _CompleteEnvironment__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CompleteEnvironment__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CompleteEnvironment__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _CompleteModel__CompleteModel = {
			PivotTables.Operations._CompleteModel__getOwnedCompletePackage /* getOwnedCompletePackage(String[?]) */
		};
		private static final @NonNull Operation @NonNull [] _CompleteModel__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CompleteModel__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CompleteModel__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CompleteModel__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _CompletePackage__CompletePackage = {
			PivotTables.Operations._CompletePackage__getOwnedCompleteClass /* getOwnedCompleteClass(String[?]) */
		};
		private static final @NonNull Operation @NonNull [] _CompletePackage__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _CompletePackage__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _CompletePackage__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _CompletePackage__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _ConnectionPointReference__ConnectionPointReference = {};
		private static final @NonNull Operation @NonNull [] _ConnectionPointReference__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ConnectionPointReference__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ConnectionPointReference__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ConnectionPointReference__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ConnectionPointReference__Vertex = {};

		private static final @NonNull Operation @NonNull [] _Constraint__Constraint = {};
		private static final @NonNull Operation @NonNull [] _Constraint__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Constraint__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Constraint__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Constraint__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _DataType__DataType = {};
		private static final @NonNull Operation @NonNull [] _DataType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _DataType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _DataType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _DataType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _DataType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _DataType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _DataType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _DataType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _DataType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _DataType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Detail__Detail = {};
		private static final @NonNull Operation @NonNull [] _Detail__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Detail__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Detail__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Detail__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _DynamicBehavior__DynamicBehavior = {};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__Behavior = {};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__DynamicElement = {};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__DynamicType = {};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__Namespace = {};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _DynamicBehavior__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _DynamicElement__DynamicElement = {};
		private static final @NonNull Operation @NonNull [] _DynamicElement__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _DynamicElement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicElement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _DynamicProperty__DynamicProperty = {};
		private static final @NonNull Operation @NonNull [] _DynamicProperty__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _DynamicProperty__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicProperty__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _DynamicType__DynamicType = {};
		private static final @NonNull Operation @NonNull [] _DynamicType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _DynamicType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicType__DynamicElement = {};
		private static final @NonNull Operation @NonNull [] _DynamicType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _DynamicType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _DynamicType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _DynamicType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _DynamicType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _DynamicType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _DynamicValueSpecification__DynamicValueSpecification = {};
		private static final @NonNull Operation @NonNull [] _DynamicValueSpecification__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _DynamicValueSpecification__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _DynamicValueSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicValueSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _DynamicValueSpecification__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _DynamicValueSpecification__ValueSpecification = {
			PivotTables.Operations._ValueSpecification__booleanValue /* booleanValue() */,
			PivotTables.Operations._ValueSpecification__integerValue /* integerValue() */,
			PivotTables.Operations._ValueSpecification__isComputable /* isComputable() */,
			PivotTables.Operations._ValueSpecification__isNull /* isNull() */,
			PivotTables.Operations._ValueSpecification__stringValue /* stringValue() */,
			PivotTables.Operations._ValueSpecification__unlimitedValue /* unlimitedValue() */
		};

		private static final @NonNull Operation @NonNull [] _EcoreObject__EcoreObject = {};
		private static final @NonNull Operation @NonNull [] _EcoreObject__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};

		private static final @NonNull Operation @NonNull [] _Element__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Element__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Element__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _ElementExtension__ElementExtension = {};
		private static final @NonNull Operation @NonNull [] _ElementExtension__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _ElementExtension__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _ElementExtension__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ElementExtension__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ElementExtension__Namespace = {};
		private static final @NonNull Operation @NonNull [] _ElementExtension__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ElementExtension__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ElementExtension__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _ElementExtension__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _ElementExtension__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _ElementLiteralExp__ElementLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _ElementLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ElementLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _ElementLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ElementLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _ElementLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ElementLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ElementLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _EnumLiteralExp__EnumLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _EnumLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _EnumLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _EnumLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _EnumLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _EnumLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _EnumLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _EnumLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Enumeration__Enumeration = {
			PivotTables.Operations._Enumeration__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _Enumeration__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _Enumeration__Class = {
			PivotTables.Operations._Enumeration__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _Enumeration__DataType = {};
		private static final @NonNull Operation @NonNull [] _Enumeration__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Enumeration__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Enumeration__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Enumeration__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Enumeration__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Enumeration__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _Enumeration__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _Enumeration__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _EnumerationLiteral__EnumerationLiteral = {};
		private static final @NonNull Operation @NonNull [] _EnumerationLiteral__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _EnumerationLiteral__InstanceSpecification = {};
		private static final @NonNull Operation @NonNull [] _EnumerationLiteral__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _EnumerationLiteral__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _EnumerationLiteral__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _ExpressionInOCL__ExpressionInOCL = {};
		private static final @NonNull Operation @NonNull [] _ExpressionInOCL__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ExpressionInOCL__LanguageExpression = {};
		private static final @NonNull Operation @NonNull [] _ExpressionInOCL__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ExpressionInOCL__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ExpressionInOCL__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ExpressionInOCL__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ExpressionInOCL__ValueSpecification = {
			PivotTables.Operations._ValueSpecification__booleanValue /* booleanValue() */,
			PivotTables.Operations._ValueSpecification__integerValue /* integerValue() */,
			PivotTables.Operations._ValueSpecification__isComputable /* isComputable() */,
			PivotTables.Operations._ValueSpecification__isNull /* isNull() */,
			PivotTables.Operations._ValueSpecification__stringValue /* stringValue() */,
			PivotTables.Operations._ValueSpecification__unlimitedValue /* unlimitedValue() */
		};

		private static final @NonNull Operation @NonNull [] _Feature__Feature = {};
		private static final @NonNull Operation @NonNull [] _Feature__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Feature__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Feature__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Feature__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Feature__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _FeatureCallExp__FeatureCallExp = {};
		private static final @NonNull Operation @NonNull [] _FeatureCallExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _FeatureCallExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _FeatureCallExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _FeatureCallExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _FeatureCallExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _FeatureCallExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _FeatureCallExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _FinalState__FinalState = {};
		private static final @NonNull Operation @NonNull [] _FinalState__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _FinalState__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _FinalState__Namespace = {};
		private static final @NonNull Operation @NonNull [] _FinalState__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _FinalState__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _FinalState__OclState = {};
		private static final @NonNull Operation @NonNull [] _FinalState__State = {};
		private static final @NonNull Operation @NonNull [] _FinalState__Vertex = {};

		private static final @NonNull Operation @NonNull [] _IfExp__IfExp = {};
		private static final @NonNull Operation @NonNull [] _IfExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _IfExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _IfExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _IfExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _IfExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _IfExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Import__Import = {};
		private static final @NonNull Operation @NonNull [] _Import__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Import__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Import__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Import__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _InstanceSpecification__InstanceSpecification = {};
		private static final @NonNull Operation @NonNull [] _InstanceSpecification__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _InstanceSpecification__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _InstanceSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _InstanceSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__IntegerLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__NumericLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__PrimitiveLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _IntegerLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _InvalidLiteralExp__InvalidLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _InvalidLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _InvalidLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _InvalidLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _InvalidLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _InvalidLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _InvalidLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _InvalidLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _InvalidType__InvalidType = {
			PivotTables.Operations._InvalidType__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _InvalidType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _InvalidType__Class = {
			PivotTables.Operations._InvalidType__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _InvalidType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _InvalidType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _InvalidType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _InvalidType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _InvalidType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _InvalidType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _InvalidType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _InvalidType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _IterableType__IterableType = {};
		private static final @NonNull Operation @NonNull [] _IterableType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _IterableType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _IterableType__DataType = {};
		private static final @NonNull Operation @NonNull [] _IterableType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _IterableType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _IterableType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _IterableType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _IterableType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _IterableType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _IterableType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _IterableType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _IterateExp__IterateExp = {};
		private static final @NonNull Operation @NonNull [] _IterateExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _IterateExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _IterateExp__LoopExp = {};
		private static final @NonNull Operation @NonNull [] _IterateExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _IterateExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _IterateExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _IterateExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _IterateExp__ReferringElement = {
			PivotTables.Operations._ReferringElement__getReferredElement /* getReferredElement() */
		};
		private static final @NonNull Operation @NonNull [] _IterateExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Iteration__Iteration = {};
		private static final @NonNull Operation @NonNull [] _Iteration__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Iteration__Feature = {};
		private static final @NonNull Operation @NonNull [] _Iteration__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Iteration__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Iteration__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Iteration__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Iteration__Operation = {};
		private static final @NonNull Operation @NonNull [] _Iteration__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _Iteration__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _IteratorExp__IteratorExp = {};
		private static final @NonNull Operation @NonNull [] _IteratorExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _IteratorExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _IteratorExp__LoopExp = {};
		private static final @NonNull Operation @NonNull [] _IteratorExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _IteratorExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _IteratorExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _IteratorExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _IteratorExp__ReferringElement = {
			PivotTables.Operations._ReferringElement__getReferredElement /* getReferredElement() */
		};
		private static final @NonNull Operation @NonNull [] _IteratorExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _IteratorVariable__IteratorVariable = {};
		private static final @NonNull Operation @NonNull [] _IteratorVariable__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _IteratorVariable__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _IteratorVariable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _IteratorVariable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _IteratorVariable__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _IteratorVariable__Variable = {};
		private static final @NonNull Operation @NonNull [] _IteratorVariable__VariableDeclaration = {};

		private static final @NonNull Operation @NonNull [] _LambdaType__LambdaType = {};
		private static final @NonNull Operation @NonNull [] _LambdaType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _LambdaType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _LambdaType__DataType = {};
		private static final @NonNull Operation @NonNull [] _LambdaType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _LambdaType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _LambdaType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _LambdaType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _LambdaType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _LambdaType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _LambdaType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _LambdaType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _LanguageExpression__LanguageExpression = {};
		private static final @NonNull Operation @NonNull [] _LanguageExpression__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _LanguageExpression__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _LanguageExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _LanguageExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _LanguageExpression__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _LanguageExpression__ValueSpecification = {
			PivotTables.Operations._ValueSpecification__booleanValue /* booleanValue() */,
			PivotTables.Operations._ValueSpecification__integerValue /* integerValue() */,
			PivotTables.Operations._ValueSpecification__isComputable /* isComputable() */,
			PivotTables.Operations._ValueSpecification__isNull /* isNull() */,
			PivotTables.Operations._ValueSpecification__stringValue /* stringValue() */,
			PivotTables.Operations._ValueSpecification__unlimitedValue /* unlimitedValue() */
		};

		private static final @NonNull Operation @NonNull [] _LetExp__LetExp = {};
		private static final @NonNull Operation @NonNull [] _LetExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _LetExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _LetExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _LetExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _LetExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _LetExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _LetVariable__LetVariable = {};
		private static final @NonNull Operation @NonNull [] _LetVariable__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _LetVariable__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _LetVariable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _LetVariable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _LetVariable__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _LetVariable__Variable = {};
		private static final @NonNull Operation @NonNull [] _LetVariable__VariableDeclaration = {};

		private static final @NonNull Operation @NonNull [] _Library__Library = {};
		private static final @NonNull Operation @NonNull [] _Library__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Library__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Library__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Library__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Library__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Library__Package = {};

		private static final @NonNull Operation @NonNull [] _LibraryFeature__LibraryFeature = {};
		private static final @NonNull Operation @NonNull [] _LibraryFeature__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};

		private static final @NonNull Operation @NonNull [] _LiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _LiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _LiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _LiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _LiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _LiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _LiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _LoopExp__LoopExp = {};
		private static final @NonNull Operation @NonNull [] _LoopExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _LoopExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _LoopExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _LoopExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _LoopExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _LoopExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _LoopExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _MapLiteralExp__MapLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _MapLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _MapLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _MapLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _MapLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _MapLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _MapLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _MapLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _MapLiteralPart__MapLiteralPart = {};
		private static final @NonNull Operation @NonNull [] _MapLiteralPart__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _MapLiteralPart__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _MapLiteralPart__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _MapType__MapType = {};
		private static final @NonNull Operation @NonNull [] _MapType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _MapType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _MapType__DataType = {};
		private static final @NonNull Operation @NonNull [] _MapType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _MapType__IterableType = {};
		private static final @NonNull Operation @NonNull [] _MapType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _MapType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _MapType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _MapType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _MapType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _MapType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _MapType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _MessageExp__MessageExp = {};
		private static final @NonNull Operation @NonNull [] _MessageExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _MessageExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _MessageExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _MessageExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _MessageExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _MessageExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _MessageType__MessageType = {};
		private static final @NonNull Operation @NonNull [] _MessageType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _MessageType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _MessageType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _MessageType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _MessageType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _MessageType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _MessageType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _MessageType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _MessageType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _MessageType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Model__Model = {};
		private static final @NonNull Operation @NonNull [] _Model__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Model__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Model__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Model__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Model__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _MorePivotable__MorePivotable = {};
		private static final @NonNull Operation @NonNull [] _MorePivotable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _MorePivotable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Nameable__Nameable = {};
		private static final @NonNull Operation @NonNull [] _Nameable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Nameable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _NamedElement__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _NamedElement__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _NamedElement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _NamedElement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Namespace__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Namespace__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Namespace__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Namespace__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Namespace__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _NavigationCallExp__NavigationCallExp = {};
		private static final @NonNull Operation @NonNull [] _NavigationCallExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _NavigationCallExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _NavigationCallExp__FeatureCallExp = {};
		private static final @NonNull Operation @NonNull [] _NavigationCallExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _NavigationCallExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _NavigationCallExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _NavigationCallExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _NavigationCallExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _NullLiteralExp__NullLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _NullLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _NullLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _NullLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _NullLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _NullLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _NullLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _NullLiteralExp__PrimitiveLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _NullLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__NumericLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__PrimitiveLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _NumericLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _OCLExpression__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _OCLExpression__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _OCLExpression__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _OCLExpression__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _OCLExpression__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _OCLExpression__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Object__Object = {};
		private static final @NonNull Operation @NonNull [] _Object__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};

		private static final @NonNull Operation @NonNull [] _Operation__Operation = {};
		private static final @NonNull Operation @NonNull [] _Operation__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Operation__Feature = {};
		private static final @NonNull Operation @NonNull [] _Operation__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Operation__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Operation__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Operation__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Operation__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _Operation__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _OperationCallExp__OperationCallExp = {
			PivotTables.Operations._OperationCallExp__hasOclVoidOverload /* hasOclVoidOverload() */
		};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__FeatureCallExp = {};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__ReferringElement = {
			PivotTables.Operations._ReferringElement__getReferredElement /* getReferredElement() */
		};
		private static final @NonNull Operation @NonNull [] _OperationCallExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__OppositePropertyCallExp = {};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__FeatureCallExp = {};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__NavigationCallExp = {};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _OppositePropertyCallExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _OrderedSetType__OrderedSetType = {};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__CollectionType = {};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__DataType = {};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__IterableType = {};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _OrderedSetType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _OrphanCompletePackage__OrphanCompletePackage = {};
		private static final @NonNull Operation @NonNull [] _OrphanCompletePackage__CompletePackage = {
			PivotTables.Operations._CompletePackage__getOwnedCompleteClass /* getOwnedCompleteClass(String[?]) */
		};
		private static final @NonNull Operation @NonNull [] _OrphanCompletePackage__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _OrphanCompletePackage__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _OrphanCompletePackage__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _OrphanCompletePackage__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Package__Package = {};
		private static final @NonNull Operation @NonNull [] _Package__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Package__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Package__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Package__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Package__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Parameter__Parameter = {};
		private static final @NonNull Operation @NonNull [] _Parameter__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Parameter__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Parameter__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Parameter__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Parameter__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Parameter__VariableDeclaration = {};

		private static final @NonNull Operation @NonNull [] _ParameterVariable__ParameterVariable = {};
		private static final @NonNull Operation @NonNull [] _ParameterVariable__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ParameterVariable__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ParameterVariable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ParameterVariable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ParameterVariable__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ParameterVariable__Variable = {};
		private static final @NonNull Operation @NonNull [] _ParameterVariable__VariableDeclaration = {};

		private static final @NonNull Operation @NonNull [] _Pivotable__Pivotable = {};
		private static final @NonNull Operation @NonNull [] _Pivotable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Pivotable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Precedence__Precedence = {};
		private static final @NonNull Operation @NonNull [] _Precedence__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Precedence__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Precedence__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Precedence__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _PrimitiveCompletePackage__PrimitiveCompletePackage = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveCompletePackage__CompletePackage = {
			PivotTables.Operations._CompletePackage__getOwnedCompleteClass /* getOwnedCompleteClass(String[?]) */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveCompletePackage__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveCompletePackage__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveCompletePackage__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveCompletePackage__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _PrimitiveLiteralExp__PrimitiveLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _PrimitiveType__PrimitiveType = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__DataType = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _PrimitiveType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Profile__Profile = {};
		private static final @NonNull Operation @NonNull [] _Profile__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Profile__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Profile__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Profile__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Profile__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Profile__Package = {};

		private static final @NonNull Operation @NonNull [] _ProfileApplication__ProfileApplication = {};
		private static final @NonNull Operation @NonNull [] _ProfileApplication__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ProfileApplication__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ProfileApplication__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Property__Property = {
			PivotTables.Operations._Property__isAttribute /* isAttribute(Property[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Property__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Property__Feature = {};
		private static final @NonNull Operation @NonNull [] _Property__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Property__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Property__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Property__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _PropertyCallExp__PropertyCallExp = {
			PivotTables.Operations._PropertyCallExp__getSpecializedReferredPropertyOwningType /* getSpecializedReferredPropertyOwningType() */,
			PivotTables.Operations._PropertyCallExp__getSpecializedReferredPropertyType /* getSpecializedReferredPropertyType() */
		};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__CallExp = {};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__FeatureCallExp = {};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__NavigationCallExp = {};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__ReferringElement = {
			PivotTables.Operations._ReferringElement__getReferredElement /* getReferredElement() */
		};
		private static final @NonNull Operation @NonNull [] _PropertyCallExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Pseudostate__Pseudostate = {};
		private static final @NonNull Operation @NonNull [] _Pseudostate__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Pseudostate__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Pseudostate__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Pseudostate__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Pseudostate__Vertex = {};

		private static final @NonNull Operation @NonNull [] _PseudostateKind__PseudostateKind = {};
		private static final @NonNull Operation @NonNull [] _PseudostateKind__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _PseudostateKind__OclElement = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _PseudostateKind__OclEnumeration = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances(Integer[1]) */
		};
		private static final @NonNull Operation @NonNull [] _PseudostateKind__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};

		private static final @NonNull Operation @NonNull [] _RealLiteralExp__RealLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__NumericLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__PrimitiveLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _RealLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _ReferringElement__ReferringElement = {
			PivotTables.Operations._ReferringElement__getReferredElement /* getReferredElement() */
		};
		private static final @NonNull Operation @NonNull [] _ReferringElement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ReferringElement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Region__Region = {};
		private static final @NonNull Operation @NonNull [] _Region__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Region__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Region__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Region__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Region__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _ResultVariable__ResultVariable = {};
		private static final @NonNull Operation @NonNull [] _ResultVariable__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ResultVariable__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ResultVariable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ResultVariable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ResultVariable__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ResultVariable__Variable = {};
		private static final @NonNull Operation @NonNull [] _ResultVariable__VariableDeclaration = {};

		private static final @NonNull Operation @NonNull [] _SelfType__SelfType = {
			PivotTables.Operations._SelfType__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};
		private static final @NonNull Operation @NonNull [] _SelfType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _SelfType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _SelfType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _SelfType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _SelfType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _SelfType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _SelfType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _SelfType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _SelfType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _SelfType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._SelfType__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _SendSignalAction__SendSignalAction = {};
		private static final @NonNull Operation @NonNull [] _SendSignalAction__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _SendSignalAction__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _SendSignalAction__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _SendSignalAction__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _SequenceType__SequenceType = {};
		private static final @NonNull Operation @NonNull [] _SequenceType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _SequenceType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _SequenceType__CollectionType = {};
		private static final @NonNull Operation @NonNull [] _SequenceType__DataType = {};
		private static final @NonNull Operation @NonNull [] _SequenceType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _SequenceType__IterableType = {};
		private static final @NonNull Operation @NonNull [] _SequenceType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _SequenceType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _SequenceType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _SequenceType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _SequenceType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _SequenceType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _SequenceType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _SetType__SetType = {};
		private static final @NonNull Operation @NonNull [] _SetType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _SetType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _SetType__CollectionType = {};
		private static final @NonNull Operation @NonNull [] _SetType__DataType = {};
		private static final @NonNull Operation @NonNull [] _SetType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _SetType__IterableType = {};
		private static final @NonNull Operation @NonNull [] _SetType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _SetType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _SetType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _SetType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _SetType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _SetType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _SetType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _ShadowExp__ShadowExp = {};
		private static final @NonNull Operation @NonNull [] _ShadowExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ShadowExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ShadowExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _ShadowExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ShadowExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ShadowExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _ShadowPart__ShadowPart = {};
		private static final @NonNull Operation @NonNull [] _ShadowPart__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ShadowPart__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ShadowPart__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ShadowPart__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ShadowPart__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Signal__Signal = {};
		private static final @NonNull Operation @NonNull [] _Signal__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _Signal__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _Signal__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Signal__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Signal__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Signal__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Signal__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Signal__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _Signal__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _Signal__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Slot__Slot = {};
		private static final @NonNull Operation @NonNull [] _Slot__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Slot__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Slot__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _StandardLibrary__StandardLibrary = {};
		private static final @NonNull Operation @NonNull [] _StandardLibrary__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _StandardLibrary__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _StandardLibrary__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _State__State = {};
		private static final @NonNull Operation @NonNull [] _State__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _State__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _State__Namespace = {};
		private static final @NonNull Operation @NonNull [] _State__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _State__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _State__OclState = {};
		private static final @NonNull Operation @NonNull [] _State__Vertex = {};

		private static final @NonNull Operation @NonNull [] _StateExp__StateExp = {};
		private static final @NonNull Operation @NonNull [] _StateExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _StateExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _StateExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _StateExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _StateExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _StateExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _StateMachine__StateMachine = {};
		private static final @NonNull Operation @NonNull [] _StateMachine__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _StateMachine__Behavior = {};
		private static final @NonNull Operation @NonNull [] _StateMachine__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _StateMachine__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _StateMachine__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _StateMachine__Namespace = {};
		private static final @NonNull Operation @NonNull [] _StateMachine__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _StateMachine__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _StateMachine__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _StateMachine__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _StateMachine__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Stereotype__Stereotype = {
			PivotTables.Operations._Stereotype__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _Stereotype__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _Stereotype__Class = {
			PivotTables.Operations._Stereotype__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _Stereotype__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Stereotype__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Stereotype__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Stereotype__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Stereotype__OclElement = {
			OCLstdlibTables.Operations._OclStereotype__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Stereotype__OclStereotype = {
			OCLstdlibTables.Operations._OclStereotype__allInstances /* allInstances(Integer[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Stereotype__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _Stereotype__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _Stereotype__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _StereotypeExtender__StereotypeExtender = {};
		private static final @NonNull Operation @NonNull [] _StereotypeExtender__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _StereotypeExtender__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _StereotypeExtender__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _StringLiteralExp__StringLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _StringLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _StringLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _StringLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _StringLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _StringLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _StringLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _StringLiteralExp__PrimitiveLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _StringLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _TemplateBinding__TemplateBinding = {};
		private static final @NonNull Operation @NonNull [] _TemplateBinding__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TemplateBinding__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TemplateBinding__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _TemplateParameter__TemplateParameter = {};
		private static final @NonNull Operation @NonNull [] _TemplateParameter__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TemplateParameter__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _TemplateParameter__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TemplateParameter__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _TemplateParameter__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _TemplateParameter__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _TemplateParameterSubstitution__TemplateParameterSubstitution = {};
		private static final @NonNull Operation @NonNull [] _TemplateParameterSubstitution__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TemplateParameterSubstitution__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TemplateParameterSubstitution__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _TemplateSignature__TemplateSignature = {};
		private static final @NonNull Operation @NonNull [] _TemplateSignature__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TemplateSignature__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TemplateSignature__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _TemplateableElement__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _TemplateableElement__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TemplateableElement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TemplateableElement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Throwable__Throwable = {};
		private static final @NonNull Operation @NonNull [] _Throwable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};

		private static final @NonNull Operation @NonNull [] _Transition__Transition = {};
		private static final @NonNull Operation @NonNull [] _Transition__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Transition__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Transition__Namespace = {};
		private static final @NonNull Operation @NonNull [] _Transition__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Transition__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _TransitionKind__TransitionKind = {};
		private static final @NonNull Operation @NonNull [] _TransitionKind__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TransitionKind__OclElement = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _TransitionKind__OclEnumeration = {
			OCLstdlibTables.Operations._OclEnumeration__allInstances /* allInstances(Integer[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TransitionKind__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};

		private static final @NonNull Operation @NonNull [] _Trigger__Trigger = {};
		private static final @NonNull Operation @NonNull [] _Trigger__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Trigger__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Trigger__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Trigger__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _TupleLiteralExp__TupleLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _TupleLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TupleLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _TupleLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _TupleLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _TupleLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TupleLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _TupleLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _TupleLiteralPart__TupleLiteralPart = {};
		private static final @NonNull Operation @NonNull [] _TupleLiteralPart__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TupleLiteralPart__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _TupleLiteralPart__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TupleLiteralPart__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _TupleLiteralPart__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TupleLiteralPart__VariableDeclaration = {};

		private static final @NonNull Operation @NonNull [] _TupleType__TupleType = {};
		private static final @NonNull Operation @NonNull [] _TupleType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _TupleType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _TupleType__DataType = {};
		private static final @NonNull Operation @NonNull [] _TupleType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TupleType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _TupleType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _TupleType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TupleType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _TupleType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _TupleType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _TupleType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		/*
		 *	Install the operation descriptors in the fragment descriptors.
		 */
		static {
			Fragments._AbstractClass__AbstractClass.initOperations(_AbstractClass__AbstractClass);
			Fragments._AbstractClass__Element.initOperations(_AbstractClass__Element);
			Fragments._AbstractClass__NamedElement.initOperations(_AbstractClass__NamedElement);
			Fragments._AbstractClass__Namespace.initOperations(_AbstractClass__Namespace);
			Fragments._AbstractClass__OclAny.initOperations(_AbstractClass__OclAny);
			Fragments._AbstractClass__OclElement.initOperations(_AbstractClass__OclElement);
			Fragments._AbstractClass__OclType.initOperations(_AbstractClass__OclType);
			Fragments._AbstractClass__TemplateableElement.initOperations(_AbstractClass__TemplateableElement);
			Fragments._AbstractClass__Type.initOperations(_AbstractClass__Type);

			Fragments._Annotation__Annotation.initOperations(_Annotation__Annotation);
			Fragments._Annotation__Element.initOperations(_Annotation__Element);
			Fragments._Annotation__NamedElement.initOperations(_Annotation__NamedElement);
			Fragments._Annotation__OclAny.initOperations(_Annotation__OclAny);
			Fragments._Annotation__OclElement.initOperations(_Annotation__OclElement);

			Fragments._AnyType__AbstractClass.initOperations(_AnyType__AbstractClass);
			Fragments._AnyType__AnyType.initOperations(_AnyType__AnyType);
			Fragments._AnyType__Class.initOperations(_AnyType__Class);
			Fragments._AnyType__Element.initOperations(_AnyType__Element);
			Fragments._AnyType__NamedElement.initOperations(_AnyType__NamedElement);
			Fragments._AnyType__Namespace.initOperations(_AnyType__Namespace);
			Fragments._AnyType__OclAny.initOperations(_AnyType__OclAny);
			Fragments._AnyType__OclElement.initOperations(_AnyType__OclElement);
			Fragments._AnyType__OclType.initOperations(_AnyType__OclType);
			Fragments._AnyType__TemplateableElement.initOperations(_AnyType__TemplateableElement);
			Fragments._AnyType__Type.initOperations(_AnyType__Type);

			Fragments._AssociationClass__AbstractClass.initOperations(_AssociationClass__AbstractClass);
			Fragments._AssociationClass__AssociationClass.initOperations(_AssociationClass__AssociationClass);
			Fragments._AssociationClass__Class.initOperations(_AssociationClass__Class);
			Fragments._AssociationClass__Element.initOperations(_AssociationClass__Element);
			Fragments._AssociationClass__NamedElement.initOperations(_AssociationClass__NamedElement);
			Fragments._AssociationClass__Namespace.initOperations(_AssociationClass__Namespace);
			Fragments._AssociationClass__OclAny.initOperations(_AssociationClass__OclAny);
			Fragments._AssociationClass__OclElement.initOperations(_AssociationClass__OclElement);
			Fragments._AssociationClass__OclType.initOperations(_AssociationClass__OclType);
			Fragments._AssociationClass__TemplateableElement.initOperations(_AssociationClass__TemplateableElement);
			Fragments._AssociationClass__Type.initOperations(_AssociationClass__Type);

			Fragments._AssociationClassCallExp__AssociationClassCallExp.initOperations(_AssociationClassCallExp__AssociationClassCallExp);
			Fragments._AssociationClassCallExp__CallExp.initOperations(_AssociationClassCallExp__CallExp);
			Fragments._AssociationClassCallExp__Element.initOperations(_AssociationClassCallExp__Element);
			Fragments._AssociationClassCallExp__FeatureCallExp.initOperations(_AssociationClassCallExp__FeatureCallExp);
			Fragments._AssociationClassCallExp__NamedElement.initOperations(_AssociationClassCallExp__NamedElement);
			Fragments._AssociationClassCallExp__NavigationCallExp.initOperations(_AssociationClassCallExp__NavigationCallExp);
			Fragments._AssociationClassCallExp__OCLExpression.initOperations(_AssociationClassCallExp__OCLExpression);
			Fragments._AssociationClassCallExp__OclAny.initOperations(_AssociationClassCallExp__OclAny);
			Fragments._AssociationClassCallExp__OclElement.initOperations(_AssociationClassCallExp__OclElement);
			Fragments._AssociationClassCallExp__TypedElement.initOperations(_AssociationClassCallExp__TypedElement);

			Fragments._AssociativityKind__AssociativityKind.initOperations(_AssociativityKind__AssociativityKind);
			Fragments._AssociativityKind__OclAny.initOperations(_AssociativityKind__OclAny);
			Fragments._AssociativityKind__OclElement.initOperations(_AssociativityKind__OclElement);
			Fragments._AssociativityKind__OclEnumeration.initOperations(_AssociativityKind__OclEnumeration);
			Fragments._AssociativityKind__OclType.initOperations(_AssociativityKind__OclType);

			Fragments._BagType__AbstractClass.initOperations(_BagType__AbstractClass);
			Fragments._BagType__BagType.initOperations(_BagType__BagType);
			Fragments._BagType__Class.initOperations(_BagType__Class);
			Fragments._BagType__CollectionType.initOperations(_BagType__CollectionType);
			Fragments._BagType__DataType.initOperations(_BagType__DataType);
			Fragments._BagType__Element.initOperations(_BagType__Element);
			Fragments._BagType__IterableType.initOperations(_BagType__IterableType);
			Fragments._BagType__NamedElement.initOperations(_BagType__NamedElement);
			Fragments._BagType__Namespace.initOperations(_BagType__Namespace);
			Fragments._BagType__OclAny.initOperations(_BagType__OclAny);
			Fragments._BagType__OclElement.initOperations(_BagType__OclElement);
			Fragments._BagType__OclType.initOperations(_BagType__OclType);
			Fragments._BagType__TemplateableElement.initOperations(_BagType__TemplateableElement);
			Fragments._BagType__Type.initOperations(_BagType__Type);

			Fragments._Behavior__AbstractClass.initOperations(_Behavior__AbstractClass);
			Fragments._Behavior__Behavior.initOperations(_Behavior__Behavior);
			Fragments._Behavior__Class.initOperations(_Behavior__Class);
			Fragments._Behavior__Element.initOperations(_Behavior__Element);
			Fragments._Behavior__NamedElement.initOperations(_Behavior__NamedElement);
			Fragments._Behavior__Namespace.initOperations(_Behavior__Namespace);
			Fragments._Behavior__OclAny.initOperations(_Behavior__OclAny);
			Fragments._Behavior__OclElement.initOperations(_Behavior__OclElement);
			Fragments._Behavior__OclType.initOperations(_Behavior__OclType);
			Fragments._Behavior__TemplateableElement.initOperations(_Behavior__TemplateableElement);
			Fragments._Behavior__Type.initOperations(_Behavior__Type);

			Fragments._BooleanLiteralExp__BooleanLiteralExp.initOperations(_BooleanLiteralExp__BooleanLiteralExp);
			Fragments._BooleanLiteralExp__Element.initOperations(_BooleanLiteralExp__Element);
			Fragments._BooleanLiteralExp__LiteralExp.initOperations(_BooleanLiteralExp__LiteralExp);
			Fragments._BooleanLiteralExp__NamedElement.initOperations(_BooleanLiteralExp__NamedElement);
			Fragments._BooleanLiteralExp__OCLExpression.initOperations(_BooleanLiteralExp__OCLExpression);
			Fragments._BooleanLiteralExp__OclAny.initOperations(_BooleanLiteralExp__OclAny);
			Fragments._BooleanLiteralExp__OclElement.initOperations(_BooleanLiteralExp__OclElement);
			Fragments._BooleanLiteralExp__PrimitiveLiteralExp.initOperations(_BooleanLiteralExp__PrimitiveLiteralExp);
			Fragments._BooleanLiteralExp__TypedElement.initOperations(_BooleanLiteralExp__TypedElement);

			Fragments._BooleanType__AbstractClass.initOperations(_BooleanType__AbstractClass);
			Fragments._BooleanType__BooleanType.initOperations(_BooleanType__BooleanType);
			Fragments._BooleanType__Class.initOperations(_BooleanType__Class);
			Fragments._BooleanType__DataType.initOperations(_BooleanType__DataType);
			Fragments._BooleanType__Element.initOperations(_BooleanType__Element);
			Fragments._BooleanType__NamedElement.initOperations(_BooleanType__NamedElement);
			Fragments._BooleanType__Namespace.initOperations(_BooleanType__Namespace);
			Fragments._BooleanType__OclAny.initOperations(_BooleanType__OclAny);
			Fragments._BooleanType__OclElement.initOperations(_BooleanType__OclElement);
			Fragments._BooleanType__OclType.initOperations(_BooleanType__OclType);
			Fragments._BooleanType__PrimitiveType.initOperations(_BooleanType__PrimitiveType);
			Fragments._BooleanType__TemplateableElement.initOperations(_BooleanType__TemplateableElement);
			Fragments._BooleanType__Type.initOperations(_BooleanType__Type);

			Fragments._CallExp__CallExp.initOperations(_CallExp__CallExp);
			Fragments._CallExp__Element.initOperations(_CallExp__Element);
			Fragments._CallExp__NamedElement.initOperations(_CallExp__NamedElement);
			Fragments._CallExp__OCLExpression.initOperations(_CallExp__OCLExpression);
			Fragments._CallExp__OclAny.initOperations(_CallExp__OclAny);
			Fragments._CallExp__OclElement.initOperations(_CallExp__OclElement);
			Fragments._CallExp__TypedElement.initOperations(_CallExp__TypedElement);

			Fragments._CallOperationAction__CallOperationAction.initOperations(_CallOperationAction__CallOperationAction);
			Fragments._CallOperationAction__Element.initOperations(_CallOperationAction__Element);
			Fragments._CallOperationAction__NamedElement.initOperations(_CallOperationAction__NamedElement);
			Fragments._CallOperationAction__OclAny.initOperations(_CallOperationAction__OclAny);
			Fragments._CallOperationAction__OclElement.initOperations(_CallOperationAction__OclElement);

			Fragments._Class__AbstractClass.initOperations(_Class__AbstractClass);
			Fragments._Class__Class.initOperations(_Class__Class);
			Fragments._Class__Element.initOperations(_Class__Element);
			Fragments._Class__NamedElement.initOperations(_Class__NamedElement);
			Fragments._Class__Namespace.initOperations(_Class__Namespace);
			Fragments._Class__OclAny.initOperations(_Class__OclAny);
			Fragments._Class__OclElement.initOperations(_Class__OclElement);
			Fragments._Class__OclType.initOperations(_Class__OclType);
			Fragments._Class__TemplateableElement.initOperations(_Class__TemplateableElement);
			Fragments._Class__Type.initOperations(_Class__Type);

			Fragments._CollectionItem__CollectionItem.initOperations(_CollectionItem__CollectionItem);
			Fragments._CollectionItem__CollectionLiteralPart.initOperations(_CollectionItem__CollectionLiteralPart);
			Fragments._CollectionItem__Element.initOperations(_CollectionItem__Element);
			Fragments._CollectionItem__NamedElement.initOperations(_CollectionItem__NamedElement);
			Fragments._CollectionItem__OclAny.initOperations(_CollectionItem__OclAny);
			Fragments._CollectionItem__OclElement.initOperations(_CollectionItem__OclElement);
			Fragments._CollectionItem__TypedElement.initOperations(_CollectionItem__TypedElement);

			Fragments._CollectionKind__CollectionKind.initOperations(_CollectionKind__CollectionKind);
			Fragments._CollectionKind__OclAny.initOperations(_CollectionKind__OclAny);
			Fragments._CollectionKind__OclElement.initOperations(_CollectionKind__OclElement);
			Fragments._CollectionKind__OclEnumeration.initOperations(_CollectionKind__OclEnumeration);
			Fragments._CollectionKind__OclType.initOperations(_CollectionKind__OclType);

			Fragments._CollectionLiteralExp__CollectionLiteralExp.initOperations(_CollectionLiteralExp__CollectionLiteralExp);
			Fragments._CollectionLiteralExp__Element.initOperations(_CollectionLiteralExp__Element);
			Fragments._CollectionLiteralExp__LiteralExp.initOperations(_CollectionLiteralExp__LiteralExp);
			Fragments._CollectionLiteralExp__NamedElement.initOperations(_CollectionLiteralExp__NamedElement);
			Fragments._CollectionLiteralExp__OCLExpression.initOperations(_CollectionLiteralExp__OCLExpression);
			Fragments._CollectionLiteralExp__OclAny.initOperations(_CollectionLiteralExp__OclAny);
			Fragments._CollectionLiteralExp__OclElement.initOperations(_CollectionLiteralExp__OclElement);
			Fragments._CollectionLiteralExp__TypedElement.initOperations(_CollectionLiteralExp__TypedElement);

			Fragments._CollectionLiteralPart__CollectionLiteralPart.initOperations(_CollectionLiteralPart__CollectionLiteralPart);
			Fragments._CollectionLiteralPart__Element.initOperations(_CollectionLiteralPart__Element);
			Fragments._CollectionLiteralPart__NamedElement.initOperations(_CollectionLiteralPart__NamedElement);
			Fragments._CollectionLiteralPart__OclAny.initOperations(_CollectionLiteralPart__OclAny);
			Fragments._CollectionLiteralPart__OclElement.initOperations(_CollectionLiteralPart__OclElement);
			Fragments._CollectionLiteralPart__TypedElement.initOperations(_CollectionLiteralPart__TypedElement);

			Fragments._CollectionRange__CollectionLiteralPart.initOperations(_CollectionRange__CollectionLiteralPart);
			Fragments._CollectionRange__CollectionRange.initOperations(_CollectionRange__CollectionRange);
			Fragments._CollectionRange__Element.initOperations(_CollectionRange__Element);
			Fragments._CollectionRange__NamedElement.initOperations(_CollectionRange__NamedElement);
			Fragments._CollectionRange__OclAny.initOperations(_CollectionRange__OclAny);
			Fragments._CollectionRange__OclElement.initOperations(_CollectionRange__OclElement);
			Fragments._CollectionRange__TypedElement.initOperations(_CollectionRange__TypedElement);

			Fragments._CollectionType__AbstractClass.initOperations(_CollectionType__AbstractClass);
			Fragments._CollectionType__Class.initOperations(_CollectionType__Class);
			Fragments._CollectionType__CollectionType.initOperations(_CollectionType__CollectionType);
			Fragments._CollectionType__DataType.initOperations(_CollectionType__DataType);
			Fragments._CollectionType__Element.initOperations(_CollectionType__Element);
			Fragments._CollectionType__IterableType.initOperations(_CollectionType__IterableType);
			Fragments._CollectionType__NamedElement.initOperations(_CollectionType__NamedElement);
			Fragments._CollectionType__Namespace.initOperations(_CollectionType__Namespace);
			Fragments._CollectionType__OclAny.initOperations(_CollectionType__OclAny);
			Fragments._CollectionType__OclElement.initOperations(_CollectionType__OclElement);
			Fragments._CollectionType__OclType.initOperations(_CollectionType__OclType);
			Fragments._CollectionType__TemplateableElement.initOperations(_CollectionType__TemplateableElement);
			Fragments._CollectionType__Type.initOperations(_CollectionType__Type);

			Fragments._Comment__Comment.initOperations(_Comment__Comment);
			Fragments._Comment__Element.initOperations(_Comment__Element);
			Fragments._Comment__OclAny.initOperations(_Comment__OclAny);
			Fragments._Comment__OclElement.initOperations(_Comment__OclElement);

			Fragments._CompleteClass__CompleteClass.initOperations(_CompleteClass__CompleteClass);
			Fragments._CompleteClass__Element.initOperations(_CompleteClass__Element);
			Fragments._CompleteClass__NamedElement.initOperations(_CompleteClass__NamedElement);
			Fragments._CompleteClass__OclAny.initOperations(_CompleteClass__OclAny);
			Fragments._CompleteClass__OclElement.initOperations(_CompleteClass__OclElement);

			Fragments._CompleteEnvironment__CompleteEnvironment.initOperations(_CompleteEnvironment__CompleteEnvironment);
			Fragments._CompleteEnvironment__Element.initOperations(_CompleteEnvironment__Element);
			Fragments._CompleteEnvironment__OclAny.initOperations(_CompleteEnvironment__OclAny);
			Fragments._CompleteEnvironment__OclElement.initOperations(_CompleteEnvironment__OclElement);

			Fragments._CompleteModel__CompleteModel.initOperations(_CompleteModel__CompleteModel);
			Fragments._CompleteModel__Element.initOperations(_CompleteModel__Element);
			Fragments._CompleteModel__NamedElement.initOperations(_CompleteModel__NamedElement);
			Fragments._CompleteModel__OclAny.initOperations(_CompleteModel__OclAny);
			Fragments._CompleteModel__OclElement.initOperations(_CompleteModel__OclElement);

			Fragments._CompletePackage__CompletePackage.initOperations(_CompletePackage__CompletePackage);
			Fragments._CompletePackage__Element.initOperations(_CompletePackage__Element);
			Fragments._CompletePackage__NamedElement.initOperations(_CompletePackage__NamedElement);
			Fragments._CompletePackage__OclAny.initOperations(_CompletePackage__OclAny);
			Fragments._CompletePackage__OclElement.initOperations(_CompletePackage__OclElement);

			Fragments._ConnectionPointReference__ConnectionPointReference.initOperations(_ConnectionPointReference__ConnectionPointReference);
			Fragments._ConnectionPointReference__Element.initOperations(_ConnectionPointReference__Element);
			Fragments._ConnectionPointReference__NamedElement.initOperations(_ConnectionPointReference__NamedElement);
			Fragments._ConnectionPointReference__OclAny.initOperations(_ConnectionPointReference__OclAny);
			Fragments._ConnectionPointReference__OclElement.initOperations(_ConnectionPointReference__OclElement);
			Fragments._ConnectionPointReference__Vertex.initOperations(_ConnectionPointReference__Vertex);

			Fragments._Constraint__Constraint.initOperations(_Constraint__Constraint);
			Fragments._Constraint__Element.initOperations(_Constraint__Element);
			Fragments._Constraint__NamedElement.initOperations(_Constraint__NamedElement);
			Fragments._Constraint__OclAny.initOperations(_Constraint__OclAny);
			Fragments._Constraint__OclElement.initOperations(_Constraint__OclElement);

			Fragments._DataType__AbstractClass.initOperations(_DataType__AbstractClass);
			Fragments._DataType__Class.initOperations(_DataType__Class);
			Fragments._DataType__DataType.initOperations(_DataType__DataType);
			Fragments._DataType__Element.initOperations(_DataType__Element);
			Fragments._DataType__NamedElement.initOperations(_DataType__NamedElement);
			Fragments._DataType__Namespace.initOperations(_DataType__Namespace);
			Fragments._DataType__OclAny.initOperations(_DataType__OclAny);
			Fragments._DataType__OclElement.initOperations(_DataType__OclElement);
			Fragments._DataType__OclType.initOperations(_DataType__OclType);
			Fragments._DataType__TemplateableElement.initOperations(_DataType__TemplateableElement);
			Fragments._DataType__Type.initOperations(_DataType__Type);

			Fragments._Detail__Detail.initOperations(_Detail__Detail);
			Fragments._Detail__Element.initOperations(_Detail__Element);
			Fragments._Detail__NamedElement.initOperations(_Detail__NamedElement);
			Fragments._Detail__OclAny.initOperations(_Detail__OclAny);
			Fragments._Detail__OclElement.initOperations(_Detail__OclElement);

			Fragments._DynamicBehavior__AbstractClass.initOperations(_DynamicBehavior__AbstractClass);
			Fragments._DynamicBehavior__Behavior.initOperations(_DynamicBehavior__Behavior);
			Fragments._DynamicBehavior__Class.initOperations(_DynamicBehavior__Class);
			Fragments._DynamicBehavior__DynamicBehavior.initOperations(_DynamicBehavior__DynamicBehavior);
			Fragments._DynamicBehavior__DynamicElement.initOperations(_DynamicBehavior__DynamicElement);
			Fragments._DynamicBehavior__DynamicType.initOperations(_DynamicBehavior__DynamicType);
			Fragments._DynamicBehavior__Element.initOperations(_DynamicBehavior__Element);
			Fragments._DynamicBehavior__NamedElement.initOperations(_DynamicBehavior__NamedElement);
			Fragments._DynamicBehavior__Namespace.initOperations(_DynamicBehavior__Namespace);
			Fragments._DynamicBehavior__OclAny.initOperations(_DynamicBehavior__OclAny);
			Fragments._DynamicBehavior__OclElement.initOperations(_DynamicBehavior__OclElement);
			Fragments._DynamicBehavior__OclType.initOperations(_DynamicBehavior__OclType);
			Fragments._DynamicBehavior__TemplateableElement.initOperations(_DynamicBehavior__TemplateableElement);
			Fragments._DynamicBehavior__Type.initOperations(_DynamicBehavior__Type);

			Fragments._DynamicElement__DynamicElement.initOperations(_DynamicElement__DynamicElement);
			Fragments._DynamicElement__Element.initOperations(_DynamicElement__Element);
			Fragments._DynamicElement__OclAny.initOperations(_DynamicElement__OclAny);
			Fragments._DynamicElement__OclElement.initOperations(_DynamicElement__OclElement);

			Fragments._DynamicProperty__DynamicProperty.initOperations(_DynamicProperty__DynamicProperty);
			Fragments._DynamicProperty__Element.initOperations(_DynamicProperty__Element);
			Fragments._DynamicProperty__OclAny.initOperations(_DynamicProperty__OclAny);
			Fragments._DynamicProperty__OclElement.initOperations(_DynamicProperty__OclElement);

			Fragments._DynamicType__AbstractClass.initOperations(_DynamicType__AbstractClass);
			Fragments._DynamicType__Class.initOperations(_DynamicType__Class);
			Fragments._DynamicType__DynamicElement.initOperations(_DynamicType__DynamicElement);
			Fragments._DynamicType__DynamicType.initOperations(_DynamicType__DynamicType);
			Fragments._DynamicType__Element.initOperations(_DynamicType__Element);
			Fragments._DynamicType__NamedElement.initOperations(_DynamicType__NamedElement);
			Fragments._DynamicType__Namespace.initOperations(_DynamicType__Namespace);
			Fragments._DynamicType__OclAny.initOperations(_DynamicType__OclAny);
			Fragments._DynamicType__OclElement.initOperations(_DynamicType__OclElement);
			Fragments._DynamicType__OclType.initOperations(_DynamicType__OclType);
			Fragments._DynamicType__TemplateableElement.initOperations(_DynamicType__TemplateableElement);
			Fragments._DynamicType__Type.initOperations(_DynamicType__Type);

			Fragments._DynamicValueSpecification__DynamicValueSpecification.initOperations(_DynamicValueSpecification__DynamicValueSpecification);
			Fragments._DynamicValueSpecification__Element.initOperations(_DynamicValueSpecification__Element);
			Fragments._DynamicValueSpecification__NamedElement.initOperations(_DynamicValueSpecification__NamedElement);
			Fragments._DynamicValueSpecification__OclAny.initOperations(_DynamicValueSpecification__OclAny);
			Fragments._DynamicValueSpecification__OclElement.initOperations(_DynamicValueSpecification__OclElement);
			Fragments._DynamicValueSpecification__TypedElement.initOperations(_DynamicValueSpecification__TypedElement);
			Fragments._DynamicValueSpecification__ValueSpecification.initOperations(_DynamicValueSpecification__ValueSpecification);

			Fragments._EcoreObject__EcoreObject.initOperations(_EcoreObject__EcoreObject);
			Fragments._EcoreObject__OclAny.initOperations(_EcoreObject__OclAny);

			Fragments._Element__Element.initOperations(_Element__Element);
			Fragments._Element__OclAny.initOperations(_Element__OclAny);
			Fragments._Element__OclElement.initOperations(_Element__OclElement);

			Fragments._ElementExtension__AbstractClass.initOperations(_ElementExtension__AbstractClass);
			Fragments._ElementExtension__Class.initOperations(_ElementExtension__Class);
			Fragments._ElementExtension__Element.initOperations(_ElementExtension__Element);
			Fragments._ElementExtension__ElementExtension.initOperations(_ElementExtension__ElementExtension);
			Fragments._ElementExtension__NamedElement.initOperations(_ElementExtension__NamedElement);
			Fragments._ElementExtension__Namespace.initOperations(_ElementExtension__Namespace);
			Fragments._ElementExtension__OclAny.initOperations(_ElementExtension__OclAny);
			Fragments._ElementExtension__OclElement.initOperations(_ElementExtension__OclElement);
			Fragments._ElementExtension__OclType.initOperations(_ElementExtension__OclType);
			Fragments._ElementExtension__TemplateableElement.initOperations(_ElementExtension__TemplateableElement);
			Fragments._ElementExtension__Type.initOperations(_ElementExtension__Type);

			Fragments._ElementLiteralExp__Element.initOperations(_ElementLiteralExp__Element);
			Fragments._ElementLiteralExp__ElementLiteralExp.initOperations(_ElementLiteralExp__ElementLiteralExp);
			Fragments._ElementLiteralExp__LiteralExp.initOperations(_ElementLiteralExp__LiteralExp);
			Fragments._ElementLiteralExp__NamedElement.initOperations(_ElementLiteralExp__NamedElement);
			Fragments._ElementLiteralExp__OCLExpression.initOperations(_ElementLiteralExp__OCLExpression);
			Fragments._ElementLiteralExp__OclAny.initOperations(_ElementLiteralExp__OclAny);
			Fragments._ElementLiteralExp__OclElement.initOperations(_ElementLiteralExp__OclElement);
			Fragments._ElementLiteralExp__TypedElement.initOperations(_ElementLiteralExp__TypedElement);

			Fragments._EnumLiteralExp__Element.initOperations(_EnumLiteralExp__Element);
			Fragments._EnumLiteralExp__EnumLiteralExp.initOperations(_EnumLiteralExp__EnumLiteralExp);
			Fragments._EnumLiteralExp__LiteralExp.initOperations(_EnumLiteralExp__LiteralExp);
			Fragments._EnumLiteralExp__NamedElement.initOperations(_EnumLiteralExp__NamedElement);
			Fragments._EnumLiteralExp__OCLExpression.initOperations(_EnumLiteralExp__OCLExpression);
			Fragments._EnumLiteralExp__OclAny.initOperations(_EnumLiteralExp__OclAny);
			Fragments._EnumLiteralExp__OclElement.initOperations(_EnumLiteralExp__OclElement);
			Fragments._EnumLiteralExp__TypedElement.initOperations(_EnumLiteralExp__TypedElement);

			Fragments._Enumeration__AbstractClass.initOperations(_Enumeration__AbstractClass);
			Fragments._Enumeration__Class.initOperations(_Enumeration__Class);
			Fragments._Enumeration__DataType.initOperations(_Enumeration__DataType);
			Fragments._Enumeration__Element.initOperations(_Enumeration__Element);
			Fragments._Enumeration__Enumeration.initOperations(_Enumeration__Enumeration);
			Fragments._Enumeration__NamedElement.initOperations(_Enumeration__NamedElement);
			Fragments._Enumeration__Namespace.initOperations(_Enumeration__Namespace);
			Fragments._Enumeration__OclAny.initOperations(_Enumeration__OclAny);
			Fragments._Enumeration__OclElement.initOperations(_Enumeration__OclElement);
			Fragments._Enumeration__OclType.initOperations(_Enumeration__OclType);
			Fragments._Enumeration__TemplateableElement.initOperations(_Enumeration__TemplateableElement);
			Fragments._Enumeration__Type.initOperations(_Enumeration__Type);

			Fragments._EnumerationLiteral__Element.initOperations(_EnumerationLiteral__Element);
			Fragments._EnumerationLiteral__EnumerationLiteral.initOperations(_EnumerationLiteral__EnumerationLiteral);
			Fragments._EnumerationLiteral__InstanceSpecification.initOperations(_EnumerationLiteral__InstanceSpecification);
			Fragments._EnumerationLiteral__NamedElement.initOperations(_EnumerationLiteral__NamedElement);
			Fragments._EnumerationLiteral__OclAny.initOperations(_EnumerationLiteral__OclAny);
			Fragments._EnumerationLiteral__OclElement.initOperations(_EnumerationLiteral__OclElement);

			Fragments._ExpressionInOCL__Element.initOperations(_ExpressionInOCL__Element);
			Fragments._ExpressionInOCL__ExpressionInOCL.initOperations(_ExpressionInOCL__ExpressionInOCL);
			Fragments._ExpressionInOCL__LanguageExpression.initOperations(_ExpressionInOCL__LanguageExpression);
			Fragments._ExpressionInOCL__NamedElement.initOperations(_ExpressionInOCL__NamedElement);
			Fragments._ExpressionInOCL__OclAny.initOperations(_ExpressionInOCL__OclAny);
			Fragments._ExpressionInOCL__OclElement.initOperations(_ExpressionInOCL__OclElement);
			Fragments._ExpressionInOCL__TypedElement.initOperations(_ExpressionInOCL__TypedElement);
			Fragments._ExpressionInOCL__ValueSpecification.initOperations(_ExpressionInOCL__ValueSpecification);

			Fragments._Feature__Element.initOperations(_Feature__Element);
			Fragments._Feature__Feature.initOperations(_Feature__Feature);
			Fragments._Feature__NamedElement.initOperations(_Feature__NamedElement);
			Fragments._Feature__OclAny.initOperations(_Feature__OclAny);
			Fragments._Feature__OclElement.initOperations(_Feature__OclElement);
			Fragments._Feature__TypedElement.initOperations(_Feature__TypedElement);

			Fragments._FeatureCallExp__CallExp.initOperations(_FeatureCallExp__CallExp);
			Fragments._FeatureCallExp__Element.initOperations(_FeatureCallExp__Element);
			Fragments._FeatureCallExp__FeatureCallExp.initOperations(_FeatureCallExp__FeatureCallExp);
			Fragments._FeatureCallExp__NamedElement.initOperations(_FeatureCallExp__NamedElement);
			Fragments._FeatureCallExp__OCLExpression.initOperations(_FeatureCallExp__OCLExpression);
			Fragments._FeatureCallExp__OclAny.initOperations(_FeatureCallExp__OclAny);
			Fragments._FeatureCallExp__OclElement.initOperations(_FeatureCallExp__OclElement);
			Fragments._FeatureCallExp__TypedElement.initOperations(_FeatureCallExp__TypedElement);

			Fragments._FinalState__Element.initOperations(_FinalState__Element);
			Fragments._FinalState__FinalState.initOperations(_FinalState__FinalState);
			Fragments._FinalState__NamedElement.initOperations(_FinalState__NamedElement);
			Fragments._FinalState__Namespace.initOperations(_FinalState__Namespace);
			Fragments._FinalState__OclAny.initOperations(_FinalState__OclAny);
			Fragments._FinalState__OclElement.initOperations(_FinalState__OclElement);
			Fragments._FinalState__OclState.initOperations(_FinalState__OclState);
			Fragments._FinalState__State.initOperations(_FinalState__State);
			Fragments._FinalState__Vertex.initOperations(_FinalState__Vertex);

			Fragments._IfExp__Element.initOperations(_IfExp__Element);
			Fragments._IfExp__IfExp.initOperations(_IfExp__IfExp);
			Fragments._IfExp__NamedElement.initOperations(_IfExp__NamedElement);
			Fragments._IfExp__OCLExpression.initOperations(_IfExp__OCLExpression);
			Fragments._IfExp__OclAny.initOperations(_IfExp__OclAny);
			Fragments._IfExp__OclElement.initOperations(_IfExp__OclElement);
			Fragments._IfExp__TypedElement.initOperations(_IfExp__TypedElement);

			Fragments._Import__Element.initOperations(_Import__Element);
			Fragments._Import__Import.initOperations(_Import__Import);
			Fragments._Import__NamedElement.initOperations(_Import__NamedElement);
			Fragments._Import__OclAny.initOperations(_Import__OclAny);
			Fragments._Import__OclElement.initOperations(_Import__OclElement);

			Fragments._InstanceSpecification__Element.initOperations(_InstanceSpecification__Element);
			Fragments._InstanceSpecification__InstanceSpecification.initOperations(_InstanceSpecification__InstanceSpecification);
			Fragments._InstanceSpecification__NamedElement.initOperations(_InstanceSpecification__NamedElement);
			Fragments._InstanceSpecification__OclAny.initOperations(_InstanceSpecification__OclAny);
			Fragments._InstanceSpecification__OclElement.initOperations(_InstanceSpecification__OclElement);

			Fragments._IntegerLiteralExp__Element.initOperations(_IntegerLiteralExp__Element);
			Fragments._IntegerLiteralExp__IntegerLiteralExp.initOperations(_IntegerLiteralExp__IntegerLiteralExp);
			Fragments._IntegerLiteralExp__LiteralExp.initOperations(_IntegerLiteralExp__LiteralExp);
			Fragments._IntegerLiteralExp__NamedElement.initOperations(_IntegerLiteralExp__NamedElement);
			Fragments._IntegerLiteralExp__NumericLiteralExp.initOperations(_IntegerLiteralExp__NumericLiteralExp);
			Fragments._IntegerLiteralExp__OCLExpression.initOperations(_IntegerLiteralExp__OCLExpression);
			Fragments._IntegerLiteralExp__OclAny.initOperations(_IntegerLiteralExp__OclAny);
			Fragments._IntegerLiteralExp__OclElement.initOperations(_IntegerLiteralExp__OclElement);
			Fragments._IntegerLiteralExp__PrimitiveLiteralExp.initOperations(_IntegerLiteralExp__PrimitiveLiteralExp);
			Fragments._IntegerLiteralExp__TypedElement.initOperations(_IntegerLiteralExp__TypedElement);

			Fragments._InvalidLiteralExp__Element.initOperations(_InvalidLiteralExp__Element);
			Fragments._InvalidLiteralExp__InvalidLiteralExp.initOperations(_InvalidLiteralExp__InvalidLiteralExp);
			Fragments._InvalidLiteralExp__LiteralExp.initOperations(_InvalidLiteralExp__LiteralExp);
			Fragments._InvalidLiteralExp__NamedElement.initOperations(_InvalidLiteralExp__NamedElement);
			Fragments._InvalidLiteralExp__OCLExpression.initOperations(_InvalidLiteralExp__OCLExpression);
			Fragments._InvalidLiteralExp__OclAny.initOperations(_InvalidLiteralExp__OclAny);
			Fragments._InvalidLiteralExp__OclElement.initOperations(_InvalidLiteralExp__OclElement);
			Fragments._InvalidLiteralExp__TypedElement.initOperations(_InvalidLiteralExp__TypedElement);

			Fragments._InvalidType__AbstractClass.initOperations(_InvalidType__AbstractClass);
			Fragments._InvalidType__Class.initOperations(_InvalidType__Class);
			Fragments._InvalidType__Element.initOperations(_InvalidType__Element);
			Fragments._InvalidType__InvalidType.initOperations(_InvalidType__InvalidType);
			Fragments._InvalidType__NamedElement.initOperations(_InvalidType__NamedElement);
			Fragments._InvalidType__Namespace.initOperations(_InvalidType__Namespace);
			Fragments._InvalidType__OclAny.initOperations(_InvalidType__OclAny);
			Fragments._InvalidType__OclElement.initOperations(_InvalidType__OclElement);
			Fragments._InvalidType__OclType.initOperations(_InvalidType__OclType);
			Fragments._InvalidType__TemplateableElement.initOperations(_InvalidType__TemplateableElement);
			Fragments._InvalidType__Type.initOperations(_InvalidType__Type);

			Fragments._IterableType__AbstractClass.initOperations(_IterableType__AbstractClass);
			Fragments._IterableType__Class.initOperations(_IterableType__Class);
			Fragments._IterableType__DataType.initOperations(_IterableType__DataType);
			Fragments._IterableType__Element.initOperations(_IterableType__Element);
			Fragments._IterableType__IterableType.initOperations(_IterableType__IterableType);
			Fragments._IterableType__NamedElement.initOperations(_IterableType__NamedElement);
			Fragments._IterableType__Namespace.initOperations(_IterableType__Namespace);
			Fragments._IterableType__OclAny.initOperations(_IterableType__OclAny);
			Fragments._IterableType__OclElement.initOperations(_IterableType__OclElement);
			Fragments._IterableType__OclType.initOperations(_IterableType__OclType);
			Fragments._IterableType__TemplateableElement.initOperations(_IterableType__TemplateableElement);
			Fragments._IterableType__Type.initOperations(_IterableType__Type);

			Fragments._IterateExp__CallExp.initOperations(_IterateExp__CallExp);
			Fragments._IterateExp__Element.initOperations(_IterateExp__Element);
			Fragments._IterateExp__IterateExp.initOperations(_IterateExp__IterateExp);
			Fragments._IterateExp__LoopExp.initOperations(_IterateExp__LoopExp);
			Fragments._IterateExp__NamedElement.initOperations(_IterateExp__NamedElement);
			Fragments._IterateExp__OCLExpression.initOperations(_IterateExp__OCLExpression);
			Fragments._IterateExp__OclAny.initOperations(_IterateExp__OclAny);
			Fragments._IterateExp__OclElement.initOperations(_IterateExp__OclElement);
			Fragments._IterateExp__ReferringElement.initOperations(_IterateExp__ReferringElement);
			Fragments._IterateExp__TypedElement.initOperations(_IterateExp__TypedElement);

			Fragments._Iteration__Element.initOperations(_Iteration__Element);
			Fragments._Iteration__Feature.initOperations(_Iteration__Feature);
			Fragments._Iteration__Iteration.initOperations(_Iteration__Iteration);
			Fragments._Iteration__NamedElement.initOperations(_Iteration__NamedElement);
			Fragments._Iteration__Namespace.initOperations(_Iteration__Namespace);
			Fragments._Iteration__OclAny.initOperations(_Iteration__OclAny);
			Fragments._Iteration__OclElement.initOperations(_Iteration__OclElement);
			Fragments._Iteration__Operation.initOperations(_Iteration__Operation);
			Fragments._Iteration__TemplateableElement.initOperations(_Iteration__TemplateableElement);
			Fragments._Iteration__TypedElement.initOperations(_Iteration__TypedElement);

			Fragments._IteratorExp__CallExp.initOperations(_IteratorExp__CallExp);
			Fragments._IteratorExp__Element.initOperations(_IteratorExp__Element);
			Fragments._IteratorExp__IteratorExp.initOperations(_IteratorExp__IteratorExp);
			Fragments._IteratorExp__LoopExp.initOperations(_IteratorExp__LoopExp);
			Fragments._IteratorExp__NamedElement.initOperations(_IteratorExp__NamedElement);
			Fragments._IteratorExp__OCLExpression.initOperations(_IteratorExp__OCLExpression);
			Fragments._IteratorExp__OclAny.initOperations(_IteratorExp__OclAny);
			Fragments._IteratorExp__OclElement.initOperations(_IteratorExp__OclElement);
			Fragments._IteratorExp__ReferringElement.initOperations(_IteratorExp__ReferringElement);
			Fragments._IteratorExp__TypedElement.initOperations(_IteratorExp__TypedElement);

			Fragments._IteratorVariable__Element.initOperations(_IteratorVariable__Element);
			Fragments._IteratorVariable__IteratorVariable.initOperations(_IteratorVariable__IteratorVariable);
			Fragments._IteratorVariable__NamedElement.initOperations(_IteratorVariable__NamedElement);
			Fragments._IteratorVariable__OclAny.initOperations(_IteratorVariable__OclAny);
			Fragments._IteratorVariable__OclElement.initOperations(_IteratorVariable__OclElement);
			Fragments._IteratorVariable__TypedElement.initOperations(_IteratorVariable__TypedElement);
			Fragments._IteratorVariable__Variable.initOperations(_IteratorVariable__Variable);
			Fragments._IteratorVariable__VariableDeclaration.initOperations(_IteratorVariable__VariableDeclaration);

			Fragments._LambdaType__AbstractClass.initOperations(_LambdaType__AbstractClass);
			Fragments._LambdaType__Class.initOperations(_LambdaType__Class);
			Fragments._LambdaType__DataType.initOperations(_LambdaType__DataType);
			Fragments._LambdaType__Element.initOperations(_LambdaType__Element);
			Fragments._LambdaType__LambdaType.initOperations(_LambdaType__LambdaType);
			Fragments._LambdaType__NamedElement.initOperations(_LambdaType__NamedElement);
			Fragments._LambdaType__Namespace.initOperations(_LambdaType__Namespace);
			Fragments._LambdaType__OclAny.initOperations(_LambdaType__OclAny);
			Fragments._LambdaType__OclElement.initOperations(_LambdaType__OclElement);
			Fragments._LambdaType__OclType.initOperations(_LambdaType__OclType);
			Fragments._LambdaType__TemplateableElement.initOperations(_LambdaType__TemplateableElement);
			Fragments._LambdaType__Type.initOperations(_LambdaType__Type);

			Fragments._LanguageExpression__Element.initOperations(_LanguageExpression__Element);
			Fragments._LanguageExpression__LanguageExpression.initOperations(_LanguageExpression__LanguageExpression);
			Fragments._LanguageExpression__NamedElement.initOperations(_LanguageExpression__NamedElement);
			Fragments._LanguageExpression__OclAny.initOperations(_LanguageExpression__OclAny);
			Fragments._LanguageExpression__OclElement.initOperations(_LanguageExpression__OclElement);
			Fragments._LanguageExpression__TypedElement.initOperations(_LanguageExpression__TypedElement);
			Fragments._LanguageExpression__ValueSpecification.initOperations(_LanguageExpression__ValueSpecification);

			Fragments._LetExp__Element.initOperations(_LetExp__Element);
			Fragments._LetExp__LetExp.initOperations(_LetExp__LetExp);
			Fragments._LetExp__NamedElement.initOperations(_LetExp__NamedElement);
			Fragments._LetExp__OCLExpression.initOperations(_LetExp__OCLExpression);
			Fragments._LetExp__OclAny.initOperations(_LetExp__OclAny);
			Fragments._LetExp__OclElement.initOperations(_LetExp__OclElement);
			Fragments._LetExp__TypedElement.initOperations(_LetExp__TypedElement);

			Fragments._LetVariable__Element.initOperations(_LetVariable__Element);
			Fragments._LetVariable__LetVariable.initOperations(_LetVariable__LetVariable);
			Fragments._LetVariable__NamedElement.initOperations(_LetVariable__NamedElement);
			Fragments._LetVariable__OclAny.initOperations(_LetVariable__OclAny);
			Fragments._LetVariable__OclElement.initOperations(_LetVariable__OclElement);
			Fragments._LetVariable__TypedElement.initOperations(_LetVariable__TypedElement);
			Fragments._LetVariable__Variable.initOperations(_LetVariable__Variable);
			Fragments._LetVariable__VariableDeclaration.initOperations(_LetVariable__VariableDeclaration);

			Fragments._Library__Element.initOperations(_Library__Element);
			Fragments._Library__Library.initOperations(_Library__Library);
			Fragments._Library__NamedElement.initOperations(_Library__NamedElement);
			Fragments._Library__Namespace.initOperations(_Library__Namespace);
			Fragments._Library__OclAny.initOperations(_Library__OclAny);
			Fragments._Library__OclElement.initOperations(_Library__OclElement);
			Fragments._Library__Package.initOperations(_Library__Package);

			Fragments._LibraryFeature__LibraryFeature.initOperations(_LibraryFeature__LibraryFeature);
			Fragments._LibraryFeature__OclAny.initOperations(_LibraryFeature__OclAny);

			Fragments._LiteralExp__Element.initOperations(_LiteralExp__Element);
			Fragments._LiteralExp__LiteralExp.initOperations(_LiteralExp__LiteralExp);
			Fragments._LiteralExp__NamedElement.initOperations(_LiteralExp__NamedElement);
			Fragments._LiteralExp__OCLExpression.initOperations(_LiteralExp__OCLExpression);
			Fragments._LiteralExp__OclAny.initOperations(_LiteralExp__OclAny);
			Fragments._LiteralExp__OclElement.initOperations(_LiteralExp__OclElement);
			Fragments._LiteralExp__TypedElement.initOperations(_LiteralExp__TypedElement);

			Fragments._LoopExp__CallExp.initOperations(_LoopExp__CallExp);
			Fragments._LoopExp__Element.initOperations(_LoopExp__Element);
			Fragments._LoopExp__LoopExp.initOperations(_LoopExp__LoopExp);
			Fragments._LoopExp__NamedElement.initOperations(_LoopExp__NamedElement);
			Fragments._LoopExp__OCLExpression.initOperations(_LoopExp__OCLExpression);
			Fragments._LoopExp__OclAny.initOperations(_LoopExp__OclAny);
			Fragments._LoopExp__OclElement.initOperations(_LoopExp__OclElement);
			Fragments._LoopExp__TypedElement.initOperations(_LoopExp__TypedElement);

			Fragments._MapLiteralExp__Element.initOperations(_MapLiteralExp__Element);
			Fragments._MapLiteralExp__LiteralExp.initOperations(_MapLiteralExp__LiteralExp);
			Fragments._MapLiteralExp__MapLiteralExp.initOperations(_MapLiteralExp__MapLiteralExp);
			Fragments._MapLiteralExp__NamedElement.initOperations(_MapLiteralExp__NamedElement);
			Fragments._MapLiteralExp__OCLExpression.initOperations(_MapLiteralExp__OCLExpression);
			Fragments._MapLiteralExp__OclAny.initOperations(_MapLiteralExp__OclAny);
			Fragments._MapLiteralExp__OclElement.initOperations(_MapLiteralExp__OclElement);
			Fragments._MapLiteralExp__TypedElement.initOperations(_MapLiteralExp__TypedElement);

			Fragments._MapLiteralPart__Element.initOperations(_MapLiteralPart__Element);
			Fragments._MapLiteralPart__MapLiteralPart.initOperations(_MapLiteralPart__MapLiteralPart);
			Fragments._MapLiteralPart__OclAny.initOperations(_MapLiteralPart__OclAny);
			Fragments._MapLiteralPart__OclElement.initOperations(_MapLiteralPart__OclElement);

			Fragments._MapType__AbstractClass.initOperations(_MapType__AbstractClass);
			Fragments._MapType__Class.initOperations(_MapType__Class);
			Fragments._MapType__DataType.initOperations(_MapType__DataType);
			Fragments._MapType__Element.initOperations(_MapType__Element);
			Fragments._MapType__IterableType.initOperations(_MapType__IterableType);
			Fragments._MapType__MapType.initOperations(_MapType__MapType);
			Fragments._MapType__NamedElement.initOperations(_MapType__NamedElement);
			Fragments._MapType__Namespace.initOperations(_MapType__Namespace);
			Fragments._MapType__OclAny.initOperations(_MapType__OclAny);
			Fragments._MapType__OclElement.initOperations(_MapType__OclElement);
			Fragments._MapType__OclType.initOperations(_MapType__OclType);
			Fragments._MapType__TemplateableElement.initOperations(_MapType__TemplateableElement);
			Fragments._MapType__Type.initOperations(_MapType__Type);

			Fragments._MessageExp__Element.initOperations(_MessageExp__Element);
			Fragments._MessageExp__MessageExp.initOperations(_MessageExp__MessageExp);
			Fragments._MessageExp__NamedElement.initOperations(_MessageExp__NamedElement);
			Fragments._MessageExp__OCLExpression.initOperations(_MessageExp__OCLExpression);
			Fragments._MessageExp__OclAny.initOperations(_MessageExp__OclAny);
			Fragments._MessageExp__OclElement.initOperations(_MessageExp__OclElement);
			Fragments._MessageExp__TypedElement.initOperations(_MessageExp__TypedElement);

			Fragments._MessageType__AbstractClass.initOperations(_MessageType__AbstractClass);
			Fragments._MessageType__Class.initOperations(_MessageType__Class);
			Fragments._MessageType__Element.initOperations(_MessageType__Element);
			Fragments._MessageType__MessageType.initOperations(_MessageType__MessageType);
			Fragments._MessageType__NamedElement.initOperations(_MessageType__NamedElement);
			Fragments._MessageType__Namespace.initOperations(_MessageType__Namespace);
			Fragments._MessageType__OclAny.initOperations(_MessageType__OclAny);
			Fragments._MessageType__OclElement.initOperations(_MessageType__OclElement);
			Fragments._MessageType__OclType.initOperations(_MessageType__OclType);
			Fragments._MessageType__TemplateableElement.initOperations(_MessageType__TemplateableElement);
			Fragments._MessageType__Type.initOperations(_MessageType__Type);

			Fragments._Model__Element.initOperations(_Model__Element);
			Fragments._Model__Model.initOperations(_Model__Model);
			Fragments._Model__NamedElement.initOperations(_Model__NamedElement);
			Fragments._Model__Namespace.initOperations(_Model__Namespace);
			Fragments._Model__OclAny.initOperations(_Model__OclAny);
			Fragments._Model__OclElement.initOperations(_Model__OclElement);

			Fragments._MorePivotable__MorePivotable.initOperations(_MorePivotable__MorePivotable);
			Fragments._MorePivotable__OclAny.initOperations(_MorePivotable__OclAny);
			Fragments._MorePivotable__OclElement.initOperations(_MorePivotable__OclElement);

			Fragments._Nameable__Nameable.initOperations(_Nameable__Nameable);
			Fragments._Nameable__OclAny.initOperations(_Nameable__OclAny);
			Fragments._Nameable__OclElement.initOperations(_Nameable__OclElement);

			Fragments._NamedElement__Element.initOperations(_NamedElement__Element);
			Fragments._NamedElement__NamedElement.initOperations(_NamedElement__NamedElement);
			Fragments._NamedElement__OclAny.initOperations(_NamedElement__OclAny);
			Fragments._NamedElement__OclElement.initOperations(_NamedElement__OclElement);

			Fragments._Namespace__Element.initOperations(_Namespace__Element);
			Fragments._Namespace__NamedElement.initOperations(_Namespace__NamedElement);
			Fragments._Namespace__Namespace.initOperations(_Namespace__Namespace);
			Fragments._Namespace__OclAny.initOperations(_Namespace__OclAny);
			Fragments._Namespace__OclElement.initOperations(_Namespace__OclElement);

			Fragments._NavigationCallExp__CallExp.initOperations(_NavigationCallExp__CallExp);
			Fragments._NavigationCallExp__Element.initOperations(_NavigationCallExp__Element);
			Fragments._NavigationCallExp__FeatureCallExp.initOperations(_NavigationCallExp__FeatureCallExp);
			Fragments._NavigationCallExp__NamedElement.initOperations(_NavigationCallExp__NamedElement);
			Fragments._NavigationCallExp__NavigationCallExp.initOperations(_NavigationCallExp__NavigationCallExp);
			Fragments._NavigationCallExp__OCLExpression.initOperations(_NavigationCallExp__OCLExpression);
			Fragments._NavigationCallExp__OclAny.initOperations(_NavigationCallExp__OclAny);
			Fragments._NavigationCallExp__OclElement.initOperations(_NavigationCallExp__OclElement);
			Fragments._NavigationCallExp__TypedElement.initOperations(_NavigationCallExp__TypedElement);

			Fragments._NullLiteralExp__Element.initOperations(_NullLiteralExp__Element);
			Fragments._NullLiteralExp__LiteralExp.initOperations(_NullLiteralExp__LiteralExp);
			Fragments._NullLiteralExp__NamedElement.initOperations(_NullLiteralExp__NamedElement);
			Fragments._NullLiteralExp__NullLiteralExp.initOperations(_NullLiteralExp__NullLiteralExp);
			Fragments._NullLiteralExp__OCLExpression.initOperations(_NullLiteralExp__OCLExpression);
			Fragments._NullLiteralExp__OclAny.initOperations(_NullLiteralExp__OclAny);
			Fragments._NullLiteralExp__OclElement.initOperations(_NullLiteralExp__OclElement);
			Fragments._NullLiteralExp__PrimitiveLiteralExp.initOperations(_NullLiteralExp__PrimitiveLiteralExp);
			Fragments._NullLiteralExp__TypedElement.initOperations(_NullLiteralExp__TypedElement);

			Fragments._NumericLiteralExp__Element.initOperations(_NumericLiteralExp__Element);
			Fragments._NumericLiteralExp__LiteralExp.initOperations(_NumericLiteralExp__LiteralExp);
			Fragments._NumericLiteralExp__NamedElement.initOperations(_NumericLiteralExp__NamedElement);
			Fragments._NumericLiteralExp__NumericLiteralExp.initOperations(_NumericLiteralExp__NumericLiteralExp);
			Fragments._NumericLiteralExp__OCLExpression.initOperations(_NumericLiteralExp__OCLExpression);
			Fragments._NumericLiteralExp__OclAny.initOperations(_NumericLiteralExp__OclAny);
			Fragments._NumericLiteralExp__OclElement.initOperations(_NumericLiteralExp__OclElement);
			Fragments._NumericLiteralExp__PrimitiveLiteralExp.initOperations(_NumericLiteralExp__PrimitiveLiteralExp);
			Fragments._NumericLiteralExp__TypedElement.initOperations(_NumericLiteralExp__TypedElement);

			Fragments._OCLExpression__Element.initOperations(_OCLExpression__Element);
			Fragments._OCLExpression__NamedElement.initOperations(_OCLExpression__NamedElement);
			Fragments._OCLExpression__OCLExpression.initOperations(_OCLExpression__OCLExpression);
			Fragments._OCLExpression__OclAny.initOperations(_OCLExpression__OclAny);
			Fragments._OCLExpression__OclElement.initOperations(_OCLExpression__OclElement);
			Fragments._OCLExpression__TypedElement.initOperations(_OCLExpression__TypedElement);

			Fragments._Object__Object.initOperations(_Object__Object);
			Fragments._Object__OclAny.initOperations(_Object__OclAny);

			Fragments._Operation__Element.initOperations(_Operation__Element);
			Fragments._Operation__Feature.initOperations(_Operation__Feature);
			Fragments._Operation__NamedElement.initOperations(_Operation__NamedElement);
			Fragments._Operation__Namespace.initOperations(_Operation__Namespace);
			Fragments._Operation__OclAny.initOperations(_Operation__OclAny);
			Fragments._Operation__OclElement.initOperations(_Operation__OclElement);
			Fragments._Operation__Operation.initOperations(_Operation__Operation);
			Fragments._Operation__TemplateableElement.initOperations(_Operation__TemplateableElement);
			Fragments._Operation__TypedElement.initOperations(_Operation__TypedElement);

			Fragments._OperationCallExp__CallExp.initOperations(_OperationCallExp__CallExp);
			Fragments._OperationCallExp__Element.initOperations(_OperationCallExp__Element);
			Fragments._OperationCallExp__FeatureCallExp.initOperations(_OperationCallExp__FeatureCallExp);
			Fragments._OperationCallExp__NamedElement.initOperations(_OperationCallExp__NamedElement);
			Fragments._OperationCallExp__OCLExpression.initOperations(_OperationCallExp__OCLExpression);
			Fragments._OperationCallExp__OclAny.initOperations(_OperationCallExp__OclAny);
			Fragments._OperationCallExp__OclElement.initOperations(_OperationCallExp__OclElement);
			Fragments._OperationCallExp__OperationCallExp.initOperations(_OperationCallExp__OperationCallExp);
			Fragments._OperationCallExp__ReferringElement.initOperations(_OperationCallExp__ReferringElement);
			Fragments._OperationCallExp__TypedElement.initOperations(_OperationCallExp__TypedElement);

			Fragments._OppositePropertyCallExp__CallExp.initOperations(_OppositePropertyCallExp__CallExp);
			Fragments._OppositePropertyCallExp__Element.initOperations(_OppositePropertyCallExp__Element);
			Fragments._OppositePropertyCallExp__FeatureCallExp.initOperations(_OppositePropertyCallExp__FeatureCallExp);
			Fragments._OppositePropertyCallExp__NamedElement.initOperations(_OppositePropertyCallExp__NamedElement);
			Fragments._OppositePropertyCallExp__NavigationCallExp.initOperations(_OppositePropertyCallExp__NavigationCallExp);
			Fragments._OppositePropertyCallExp__OCLExpression.initOperations(_OppositePropertyCallExp__OCLExpression);
			Fragments._OppositePropertyCallExp__OclAny.initOperations(_OppositePropertyCallExp__OclAny);
			Fragments._OppositePropertyCallExp__OclElement.initOperations(_OppositePropertyCallExp__OclElement);
			Fragments._OppositePropertyCallExp__OppositePropertyCallExp.initOperations(_OppositePropertyCallExp__OppositePropertyCallExp);
			Fragments._OppositePropertyCallExp__TypedElement.initOperations(_OppositePropertyCallExp__TypedElement);

			Fragments._OrderedSetType__AbstractClass.initOperations(_OrderedSetType__AbstractClass);
			Fragments._OrderedSetType__Class.initOperations(_OrderedSetType__Class);
			Fragments._OrderedSetType__CollectionType.initOperations(_OrderedSetType__CollectionType);
			Fragments._OrderedSetType__DataType.initOperations(_OrderedSetType__DataType);
			Fragments._OrderedSetType__Element.initOperations(_OrderedSetType__Element);
			Fragments._OrderedSetType__IterableType.initOperations(_OrderedSetType__IterableType);
			Fragments._OrderedSetType__NamedElement.initOperations(_OrderedSetType__NamedElement);
			Fragments._OrderedSetType__Namespace.initOperations(_OrderedSetType__Namespace);
			Fragments._OrderedSetType__OclAny.initOperations(_OrderedSetType__OclAny);
			Fragments._OrderedSetType__OclElement.initOperations(_OrderedSetType__OclElement);
			Fragments._OrderedSetType__OclType.initOperations(_OrderedSetType__OclType);
			Fragments._OrderedSetType__OrderedSetType.initOperations(_OrderedSetType__OrderedSetType);
			Fragments._OrderedSetType__TemplateableElement.initOperations(_OrderedSetType__TemplateableElement);
			Fragments._OrderedSetType__Type.initOperations(_OrderedSetType__Type);

			Fragments._OrphanCompletePackage__CompletePackage.initOperations(_OrphanCompletePackage__CompletePackage);
			Fragments._OrphanCompletePackage__Element.initOperations(_OrphanCompletePackage__Element);
			Fragments._OrphanCompletePackage__NamedElement.initOperations(_OrphanCompletePackage__NamedElement);
			Fragments._OrphanCompletePackage__OclAny.initOperations(_OrphanCompletePackage__OclAny);
			Fragments._OrphanCompletePackage__OclElement.initOperations(_OrphanCompletePackage__OclElement);
			Fragments._OrphanCompletePackage__OrphanCompletePackage.initOperations(_OrphanCompletePackage__OrphanCompletePackage);

			Fragments._Package__Element.initOperations(_Package__Element);
			Fragments._Package__NamedElement.initOperations(_Package__NamedElement);
			Fragments._Package__Namespace.initOperations(_Package__Namespace);
			Fragments._Package__OclAny.initOperations(_Package__OclAny);
			Fragments._Package__OclElement.initOperations(_Package__OclElement);
			Fragments._Package__Package.initOperations(_Package__Package);

			Fragments._Parameter__Element.initOperations(_Parameter__Element);
			Fragments._Parameter__NamedElement.initOperations(_Parameter__NamedElement);
			Fragments._Parameter__OclAny.initOperations(_Parameter__OclAny);
			Fragments._Parameter__OclElement.initOperations(_Parameter__OclElement);
			Fragments._Parameter__Parameter.initOperations(_Parameter__Parameter);
			Fragments._Parameter__TypedElement.initOperations(_Parameter__TypedElement);
			Fragments._Parameter__VariableDeclaration.initOperations(_Parameter__VariableDeclaration);

			Fragments._ParameterVariable__Element.initOperations(_ParameterVariable__Element);
			Fragments._ParameterVariable__NamedElement.initOperations(_ParameterVariable__NamedElement);
			Fragments._ParameterVariable__OclAny.initOperations(_ParameterVariable__OclAny);
			Fragments._ParameterVariable__OclElement.initOperations(_ParameterVariable__OclElement);
			Fragments._ParameterVariable__ParameterVariable.initOperations(_ParameterVariable__ParameterVariable);
			Fragments._ParameterVariable__TypedElement.initOperations(_ParameterVariable__TypedElement);
			Fragments._ParameterVariable__Variable.initOperations(_ParameterVariable__Variable);
			Fragments._ParameterVariable__VariableDeclaration.initOperations(_ParameterVariable__VariableDeclaration);

			Fragments._Pivotable__OclAny.initOperations(_Pivotable__OclAny);
			Fragments._Pivotable__OclElement.initOperations(_Pivotable__OclElement);
			Fragments._Pivotable__Pivotable.initOperations(_Pivotable__Pivotable);

			Fragments._Precedence__Element.initOperations(_Precedence__Element);
			Fragments._Precedence__NamedElement.initOperations(_Precedence__NamedElement);
			Fragments._Precedence__OclAny.initOperations(_Precedence__OclAny);
			Fragments._Precedence__OclElement.initOperations(_Precedence__OclElement);
			Fragments._Precedence__Precedence.initOperations(_Precedence__Precedence);

			Fragments._PrimitiveCompletePackage__CompletePackage.initOperations(_PrimitiveCompletePackage__CompletePackage);
			Fragments._PrimitiveCompletePackage__Element.initOperations(_PrimitiveCompletePackage__Element);
			Fragments._PrimitiveCompletePackage__NamedElement.initOperations(_PrimitiveCompletePackage__NamedElement);
			Fragments._PrimitiveCompletePackage__OclAny.initOperations(_PrimitiveCompletePackage__OclAny);
			Fragments._PrimitiveCompletePackage__OclElement.initOperations(_PrimitiveCompletePackage__OclElement);
			Fragments._PrimitiveCompletePackage__PrimitiveCompletePackage.initOperations(_PrimitiveCompletePackage__PrimitiveCompletePackage);

			Fragments._PrimitiveLiteralExp__Element.initOperations(_PrimitiveLiteralExp__Element);
			Fragments._PrimitiveLiteralExp__LiteralExp.initOperations(_PrimitiveLiteralExp__LiteralExp);
			Fragments._PrimitiveLiteralExp__NamedElement.initOperations(_PrimitiveLiteralExp__NamedElement);
			Fragments._PrimitiveLiteralExp__OCLExpression.initOperations(_PrimitiveLiteralExp__OCLExpression);
			Fragments._PrimitiveLiteralExp__OclAny.initOperations(_PrimitiveLiteralExp__OclAny);
			Fragments._PrimitiveLiteralExp__OclElement.initOperations(_PrimitiveLiteralExp__OclElement);
			Fragments._PrimitiveLiteralExp__PrimitiveLiteralExp.initOperations(_PrimitiveLiteralExp__PrimitiveLiteralExp);
			Fragments._PrimitiveLiteralExp__TypedElement.initOperations(_PrimitiveLiteralExp__TypedElement);

			Fragments._PrimitiveType__AbstractClass.initOperations(_PrimitiveType__AbstractClass);
			Fragments._PrimitiveType__Class.initOperations(_PrimitiveType__Class);
			Fragments._PrimitiveType__DataType.initOperations(_PrimitiveType__DataType);
			Fragments._PrimitiveType__Element.initOperations(_PrimitiveType__Element);
			Fragments._PrimitiveType__NamedElement.initOperations(_PrimitiveType__NamedElement);
			Fragments._PrimitiveType__Namespace.initOperations(_PrimitiveType__Namespace);
			Fragments._PrimitiveType__OclAny.initOperations(_PrimitiveType__OclAny);
			Fragments._PrimitiveType__OclElement.initOperations(_PrimitiveType__OclElement);
			Fragments._PrimitiveType__OclType.initOperations(_PrimitiveType__OclType);
			Fragments._PrimitiveType__PrimitiveType.initOperations(_PrimitiveType__PrimitiveType);
			Fragments._PrimitiveType__TemplateableElement.initOperations(_PrimitiveType__TemplateableElement);
			Fragments._PrimitiveType__Type.initOperations(_PrimitiveType__Type);

			Fragments._Profile__Element.initOperations(_Profile__Element);
			Fragments._Profile__NamedElement.initOperations(_Profile__NamedElement);
			Fragments._Profile__Namespace.initOperations(_Profile__Namespace);
			Fragments._Profile__OclAny.initOperations(_Profile__OclAny);
			Fragments._Profile__OclElement.initOperations(_Profile__OclElement);
			Fragments._Profile__Package.initOperations(_Profile__Package);
			Fragments._Profile__Profile.initOperations(_Profile__Profile);

			Fragments._ProfileApplication__Element.initOperations(_ProfileApplication__Element);
			Fragments._ProfileApplication__OclAny.initOperations(_ProfileApplication__OclAny);
			Fragments._ProfileApplication__OclElement.initOperations(_ProfileApplication__OclElement);
			Fragments._ProfileApplication__ProfileApplication.initOperations(_ProfileApplication__ProfileApplication);

			Fragments._Property__Element.initOperations(_Property__Element);
			Fragments._Property__Feature.initOperations(_Property__Feature);
			Fragments._Property__NamedElement.initOperations(_Property__NamedElement);
			Fragments._Property__OclAny.initOperations(_Property__OclAny);
			Fragments._Property__OclElement.initOperations(_Property__OclElement);
			Fragments._Property__Property.initOperations(_Property__Property);
			Fragments._Property__TypedElement.initOperations(_Property__TypedElement);

			Fragments._PropertyCallExp__CallExp.initOperations(_PropertyCallExp__CallExp);
			Fragments._PropertyCallExp__Element.initOperations(_PropertyCallExp__Element);
			Fragments._PropertyCallExp__FeatureCallExp.initOperations(_PropertyCallExp__FeatureCallExp);
			Fragments._PropertyCallExp__NamedElement.initOperations(_PropertyCallExp__NamedElement);
			Fragments._PropertyCallExp__NavigationCallExp.initOperations(_PropertyCallExp__NavigationCallExp);
			Fragments._PropertyCallExp__OCLExpression.initOperations(_PropertyCallExp__OCLExpression);
			Fragments._PropertyCallExp__OclAny.initOperations(_PropertyCallExp__OclAny);
			Fragments._PropertyCallExp__OclElement.initOperations(_PropertyCallExp__OclElement);
			Fragments._PropertyCallExp__PropertyCallExp.initOperations(_PropertyCallExp__PropertyCallExp);
			Fragments._PropertyCallExp__ReferringElement.initOperations(_PropertyCallExp__ReferringElement);
			Fragments._PropertyCallExp__TypedElement.initOperations(_PropertyCallExp__TypedElement);

			Fragments._Pseudostate__Element.initOperations(_Pseudostate__Element);
			Fragments._Pseudostate__NamedElement.initOperations(_Pseudostate__NamedElement);
			Fragments._Pseudostate__OclAny.initOperations(_Pseudostate__OclAny);
			Fragments._Pseudostate__OclElement.initOperations(_Pseudostate__OclElement);
			Fragments._Pseudostate__Pseudostate.initOperations(_Pseudostate__Pseudostate);
			Fragments._Pseudostate__Vertex.initOperations(_Pseudostate__Vertex);

			Fragments._PseudostateKind__OclAny.initOperations(_PseudostateKind__OclAny);
			Fragments._PseudostateKind__OclElement.initOperations(_PseudostateKind__OclElement);
			Fragments._PseudostateKind__OclEnumeration.initOperations(_PseudostateKind__OclEnumeration);
			Fragments._PseudostateKind__OclType.initOperations(_PseudostateKind__OclType);
			Fragments._PseudostateKind__PseudostateKind.initOperations(_PseudostateKind__PseudostateKind);

			Fragments._RealLiteralExp__Element.initOperations(_RealLiteralExp__Element);
			Fragments._RealLiteralExp__LiteralExp.initOperations(_RealLiteralExp__LiteralExp);
			Fragments._RealLiteralExp__NamedElement.initOperations(_RealLiteralExp__NamedElement);
			Fragments._RealLiteralExp__NumericLiteralExp.initOperations(_RealLiteralExp__NumericLiteralExp);
			Fragments._RealLiteralExp__OCLExpression.initOperations(_RealLiteralExp__OCLExpression);
			Fragments._RealLiteralExp__OclAny.initOperations(_RealLiteralExp__OclAny);
			Fragments._RealLiteralExp__OclElement.initOperations(_RealLiteralExp__OclElement);
			Fragments._RealLiteralExp__PrimitiveLiteralExp.initOperations(_RealLiteralExp__PrimitiveLiteralExp);
			Fragments._RealLiteralExp__RealLiteralExp.initOperations(_RealLiteralExp__RealLiteralExp);
			Fragments._RealLiteralExp__TypedElement.initOperations(_RealLiteralExp__TypedElement);

			Fragments._ReferringElement__OclAny.initOperations(_ReferringElement__OclAny);
			Fragments._ReferringElement__OclElement.initOperations(_ReferringElement__OclElement);
			Fragments._ReferringElement__ReferringElement.initOperations(_ReferringElement__ReferringElement);

			Fragments._Region__Element.initOperations(_Region__Element);
			Fragments._Region__NamedElement.initOperations(_Region__NamedElement);
			Fragments._Region__Namespace.initOperations(_Region__Namespace);
			Fragments._Region__OclAny.initOperations(_Region__OclAny);
			Fragments._Region__OclElement.initOperations(_Region__OclElement);
			Fragments._Region__Region.initOperations(_Region__Region);

			Fragments._ResultVariable__Element.initOperations(_ResultVariable__Element);
			Fragments._ResultVariable__NamedElement.initOperations(_ResultVariable__NamedElement);
			Fragments._ResultVariable__OclAny.initOperations(_ResultVariable__OclAny);
			Fragments._ResultVariable__OclElement.initOperations(_ResultVariable__OclElement);
			Fragments._ResultVariable__ResultVariable.initOperations(_ResultVariable__ResultVariable);
			Fragments._ResultVariable__TypedElement.initOperations(_ResultVariable__TypedElement);
			Fragments._ResultVariable__Variable.initOperations(_ResultVariable__Variable);
			Fragments._ResultVariable__VariableDeclaration.initOperations(_ResultVariable__VariableDeclaration);

			Fragments._SelfType__AbstractClass.initOperations(_SelfType__AbstractClass);
			Fragments._SelfType__Class.initOperations(_SelfType__Class);
			Fragments._SelfType__Element.initOperations(_SelfType__Element);
			Fragments._SelfType__NamedElement.initOperations(_SelfType__NamedElement);
			Fragments._SelfType__Namespace.initOperations(_SelfType__Namespace);
			Fragments._SelfType__OclAny.initOperations(_SelfType__OclAny);
			Fragments._SelfType__OclElement.initOperations(_SelfType__OclElement);
			Fragments._SelfType__OclType.initOperations(_SelfType__OclType);
			Fragments._SelfType__SelfType.initOperations(_SelfType__SelfType);
			Fragments._SelfType__TemplateableElement.initOperations(_SelfType__TemplateableElement);
			Fragments._SelfType__Type.initOperations(_SelfType__Type);

			Fragments._SendSignalAction__Element.initOperations(_SendSignalAction__Element);
			Fragments._SendSignalAction__NamedElement.initOperations(_SendSignalAction__NamedElement);
			Fragments._SendSignalAction__OclAny.initOperations(_SendSignalAction__OclAny);
			Fragments._SendSignalAction__OclElement.initOperations(_SendSignalAction__OclElement);
			Fragments._SendSignalAction__SendSignalAction.initOperations(_SendSignalAction__SendSignalAction);

			Fragments._SequenceType__AbstractClass.initOperations(_SequenceType__AbstractClass);
			Fragments._SequenceType__Class.initOperations(_SequenceType__Class);
			Fragments._SequenceType__CollectionType.initOperations(_SequenceType__CollectionType);
			Fragments._SequenceType__DataType.initOperations(_SequenceType__DataType);
			Fragments._SequenceType__Element.initOperations(_SequenceType__Element);
			Fragments._SequenceType__IterableType.initOperations(_SequenceType__IterableType);
			Fragments._SequenceType__NamedElement.initOperations(_SequenceType__NamedElement);
			Fragments._SequenceType__Namespace.initOperations(_SequenceType__Namespace);
			Fragments._SequenceType__OclAny.initOperations(_SequenceType__OclAny);
			Fragments._SequenceType__OclElement.initOperations(_SequenceType__OclElement);
			Fragments._SequenceType__OclType.initOperations(_SequenceType__OclType);
			Fragments._SequenceType__SequenceType.initOperations(_SequenceType__SequenceType);
			Fragments._SequenceType__TemplateableElement.initOperations(_SequenceType__TemplateableElement);
			Fragments._SequenceType__Type.initOperations(_SequenceType__Type);

			Fragments._SetType__AbstractClass.initOperations(_SetType__AbstractClass);
			Fragments._SetType__Class.initOperations(_SetType__Class);
			Fragments._SetType__CollectionType.initOperations(_SetType__CollectionType);
			Fragments._SetType__DataType.initOperations(_SetType__DataType);
			Fragments._SetType__Element.initOperations(_SetType__Element);
			Fragments._SetType__IterableType.initOperations(_SetType__IterableType);
			Fragments._SetType__NamedElement.initOperations(_SetType__NamedElement);
			Fragments._SetType__Namespace.initOperations(_SetType__Namespace);
			Fragments._SetType__OclAny.initOperations(_SetType__OclAny);
			Fragments._SetType__OclElement.initOperations(_SetType__OclElement);
			Fragments._SetType__OclType.initOperations(_SetType__OclType);
			Fragments._SetType__SetType.initOperations(_SetType__SetType);
			Fragments._SetType__TemplateableElement.initOperations(_SetType__TemplateableElement);
			Fragments._SetType__Type.initOperations(_SetType__Type);

			Fragments._ShadowExp__Element.initOperations(_ShadowExp__Element);
			Fragments._ShadowExp__NamedElement.initOperations(_ShadowExp__NamedElement);
			Fragments._ShadowExp__OCLExpression.initOperations(_ShadowExp__OCLExpression);
			Fragments._ShadowExp__OclAny.initOperations(_ShadowExp__OclAny);
			Fragments._ShadowExp__OclElement.initOperations(_ShadowExp__OclElement);
			Fragments._ShadowExp__ShadowExp.initOperations(_ShadowExp__ShadowExp);
			Fragments._ShadowExp__TypedElement.initOperations(_ShadowExp__TypedElement);

			Fragments._ShadowPart__Element.initOperations(_ShadowPart__Element);
			Fragments._ShadowPart__NamedElement.initOperations(_ShadowPart__NamedElement);
			Fragments._ShadowPart__OclAny.initOperations(_ShadowPart__OclAny);
			Fragments._ShadowPart__OclElement.initOperations(_ShadowPart__OclElement);
			Fragments._ShadowPart__ShadowPart.initOperations(_ShadowPart__ShadowPart);
			Fragments._ShadowPart__TypedElement.initOperations(_ShadowPart__TypedElement);

			Fragments._Signal__AbstractClass.initOperations(_Signal__AbstractClass);
			Fragments._Signal__Class.initOperations(_Signal__Class);
			Fragments._Signal__Element.initOperations(_Signal__Element);
			Fragments._Signal__NamedElement.initOperations(_Signal__NamedElement);
			Fragments._Signal__Namespace.initOperations(_Signal__Namespace);
			Fragments._Signal__OclAny.initOperations(_Signal__OclAny);
			Fragments._Signal__OclElement.initOperations(_Signal__OclElement);
			Fragments._Signal__OclType.initOperations(_Signal__OclType);
			Fragments._Signal__Signal.initOperations(_Signal__Signal);
			Fragments._Signal__TemplateableElement.initOperations(_Signal__TemplateableElement);
			Fragments._Signal__Type.initOperations(_Signal__Type);

			Fragments._Slot__Element.initOperations(_Slot__Element);
			Fragments._Slot__OclAny.initOperations(_Slot__OclAny);
			Fragments._Slot__OclElement.initOperations(_Slot__OclElement);
			Fragments._Slot__Slot.initOperations(_Slot__Slot);

			Fragments._StandardLibrary__Element.initOperations(_StandardLibrary__Element);
			Fragments._StandardLibrary__OclAny.initOperations(_StandardLibrary__OclAny);
			Fragments._StandardLibrary__OclElement.initOperations(_StandardLibrary__OclElement);
			Fragments._StandardLibrary__StandardLibrary.initOperations(_StandardLibrary__StandardLibrary);

			Fragments._State__Element.initOperations(_State__Element);
			Fragments._State__NamedElement.initOperations(_State__NamedElement);
			Fragments._State__Namespace.initOperations(_State__Namespace);
			Fragments._State__OclAny.initOperations(_State__OclAny);
			Fragments._State__OclElement.initOperations(_State__OclElement);
			Fragments._State__OclState.initOperations(_State__OclState);
			Fragments._State__State.initOperations(_State__State);
			Fragments._State__Vertex.initOperations(_State__Vertex);

			Fragments._StateExp__Element.initOperations(_StateExp__Element);
			Fragments._StateExp__NamedElement.initOperations(_StateExp__NamedElement);
			Fragments._StateExp__OCLExpression.initOperations(_StateExp__OCLExpression);
			Fragments._StateExp__OclAny.initOperations(_StateExp__OclAny);
			Fragments._StateExp__OclElement.initOperations(_StateExp__OclElement);
			Fragments._StateExp__StateExp.initOperations(_StateExp__StateExp);
			Fragments._StateExp__TypedElement.initOperations(_StateExp__TypedElement);

			Fragments._StateMachine__AbstractClass.initOperations(_StateMachine__AbstractClass);
			Fragments._StateMachine__Behavior.initOperations(_StateMachine__Behavior);
			Fragments._StateMachine__Class.initOperations(_StateMachine__Class);
			Fragments._StateMachine__Element.initOperations(_StateMachine__Element);
			Fragments._StateMachine__NamedElement.initOperations(_StateMachine__NamedElement);
			Fragments._StateMachine__Namespace.initOperations(_StateMachine__Namespace);
			Fragments._StateMachine__OclAny.initOperations(_StateMachine__OclAny);
			Fragments._StateMachine__OclElement.initOperations(_StateMachine__OclElement);
			Fragments._StateMachine__OclType.initOperations(_StateMachine__OclType);
			Fragments._StateMachine__StateMachine.initOperations(_StateMachine__StateMachine);
			Fragments._StateMachine__TemplateableElement.initOperations(_StateMachine__TemplateableElement);
			Fragments._StateMachine__Type.initOperations(_StateMachine__Type);

			Fragments._Stereotype__AbstractClass.initOperations(_Stereotype__AbstractClass);
			Fragments._Stereotype__Class.initOperations(_Stereotype__Class);
			Fragments._Stereotype__Element.initOperations(_Stereotype__Element);
			Fragments._Stereotype__NamedElement.initOperations(_Stereotype__NamedElement);
			Fragments._Stereotype__Namespace.initOperations(_Stereotype__Namespace);
			Fragments._Stereotype__OclAny.initOperations(_Stereotype__OclAny);
			Fragments._Stereotype__OclElement.initOperations(_Stereotype__OclElement);
			Fragments._Stereotype__OclStereotype.initOperations(_Stereotype__OclStereotype);
			Fragments._Stereotype__OclType.initOperations(_Stereotype__OclType);
			Fragments._Stereotype__Stereotype.initOperations(_Stereotype__Stereotype);
			Fragments._Stereotype__TemplateableElement.initOperations(_Stereotype__TemplateableElement);
			Fragments._Stereotype__Type.initOperations(_Stereotype__Type);

			Fragments._StereotypeExtender__Element.initOperations(_StereotypeExtender__Element);
			Fragments._StereotypeExtender__OclAny.initOperations(_StereotypeExtender__OclAny);
			Fragments._StereotypeExtender__OclElement.initOperations(_StereotypeExtender__OclElement);
			Fragments._StereotypeExtender__StereotypeExtender.initOperations(_StereotypeExtender__StereotypeExtender);

			Fragments._StringLiteralExp__Element.initOperations(_StringLiteralExp__Element);
			Fragments._StringLiteralExp__LiteralExp.initOperations(_StringLiteralExp__LiteralExp);
			Fragments._StringLiteralExp__NamedElement.initOperations(_StringLiteralExp__NamedElement);
			Fragments._StringLiteralExp__OCLExpression.initOperations(_StringLiteralExp__OCLExpression);
			Fragments._StringLiteralExp__OclAny.initOperations(_StringLiteralExp__OclAny);
			Fragments._StringLiteralExp__OclElement.initOperations(_StringLiteralExp__OclElement);
			Fragments._StringLiteralExp__PrimitiveLiteralExp.initOperations(_StringLiteralExp__PrimitiveLiteralExp);
			Fragments._StringLiteralExp__StringLiteralExp.initOperations(_StringLiteralExp__StringLiteralExp);
			Fragments._StringLiteralExp__TypedElement.initOperations(_StringLiteralExp__TypedElement);

			Fragments._TemplateBinding__Element.initOperations(_TemplateBinding__Element);
			Fragments._TemplateBinding__OclAny.initOperations(_TemplateBinding__OclAny);
			Fragments._TemplateBinding__OclElement.initOperations(_TemplateBinding__OclElement);
			Fragments._TemplateBinding__TemplateBinding.initOperations(_TemplateBinding__TemplateBinding);

			Fragments._TemplateParameter__Element.initOperations(_TemplateParameter__Element);
			Fragments._TemplateParameter__NamedElement.initOperations(_TemplateParameter__NamedElement);
			Fragments._TemplateParameter__OclAny.initOperations(_TemplateParameter__OclAny);
			Fragments._TemplateParameter__OclElement.initOperations(_TemplateParameter__OclElement);
			Fragments._TemplateParameter__OclType.initOperations(_TemplateParameter__OclType);
			Fragments._TemplateParameter__TemplateParameter.initOperations(_TemplateParameter__TemplateParameter);
			Fragments._TemplateParameter__Type.initOperations(_TemplateParameter__Type);

			Fragments._TemplateParameterSubstitution__Element.initOperations(_TemplateParameterSubstitution__Element);
			Fragments._TemplateParameterSubstitution__OclAny.initOperations(_TemplateParameterSubstitution__OclAny);
			Fragments._TemplateParameterSubstitution__OclElement.initOperations(_TemplateParameterSubstitution__OclElement);
			Fragments._TemplateParameterSubstitution__TemplateParameterSubstitution.initOperations(_TemplateParameterSubstitution__TemplateParameterSubstitution);

			Fragments._TemplateSignature__Element.initOperations(_TemplateSignature__Element);
			Fragments._TemplateSignature__OclAny.initOperations(_TemplateSignature__OclAny);
			Fragments._TemplateSignature__OclElement.initOperations(_TemplateSignature__OclElement);
			Fragments._TemplateSignature__TemplateSignature.initOperations(_TemplateSignature__TemplateSignature);

			Fragments._TemplateableElement__Element.initOperations(_TemplateableElement__Element);
			Fragments._TemplateableElement__OclAny.initOperations(_TemplateableElement__OclAny);
			Fragments._TemplateableElement__OclElement.initOperations(_TemplateableElement__OclElement);
			Fragments._TemplateableElement__TemplateableElement.initOperations(_TemplateableElement__TemplateableElement);

			Fragments._Throwable__OclAny.initOperations(_Throwable__OclAny);
			Fragments._Throwable__Throwable.initOperations(_Throwable__Throwable);

			Fragments._Transition__Element.initOperations(_Transition__Element);
			Fragments._Transition__NamedElement.initOperations(_Transition__NamedElement);
			Fragments._Transition__Namespace.initOperations(_Transition__Namespace);
			Fragments._Transition__OclAny.initOperations(_Transition__OclAny);
			Fragments._Transition__OclElement.initOperations(_Transition__OclElement);
			Fragments._Transition__Transition.initOperations(_Transition__Transition);

			Fragments._TransitionKind__OclAny.initOperations(_TransitionKind__OclAny);
			Fragments._TransitionKind__OclElement.initOperations(_TransitionKind__OclElement);
			Fragments._TransitionKind__OclEnumeration.initOperations(_TransitionKind__OclEnumeration);
			Fragments._TransitionKind__OclType.initOperations(_TransitionKind__OclType);
			Fragments._TransitionKind__TransitionKind.initOperations(_TransitionKind__TransitionKind);

			Fragments._Trigger__Element.initOperations(_Trigger__Element);
			Fragments._Trigger__NamedElement.initOperations(_Trigger__NamedElement);
			Fragments._Trigger__OclAny.initOperations(_Trigger__OclAny);
			Fragments._Trigger__OclElement.initOperations(_Trigger__OclElement);
			Fragments._Trigger__Trigger.initOperations(_Trigger__Trigger);

			Fragments._TupleLiteralExp__Element.initOperations(_TupleLiteralExp__Element);
			Fragments._TupleLiteralExp__LiteralExp.initOperations(_TupleLiteralExp__LiteralExp);
			Fragments._TupleLiteralExp__NamedElement.initOperations(_TupleLiteralExp__NamedElement);
			Fragments._TupleLiteralExp__OCLExpression.initOperations(_TupleLiteralExp__OCLExpression);
			Fragments._TupleLiteralExp__OclAny.initOperations(_TupleLiteralExp__OclAny);
			Fragments._TupleLiteralExp__OclElement.initOperations(_TupleLiteralExp__OclElement);
			Fragments._TupleLiteralExp__TupleLiteralExp.initOperations(_TupleLiteralExp__TupleLiteralExp);
			Fragments._TupleLiteralExp__TypedElement.initOperations(_TupleLiteralExp__TypedElement);

			Fragments._TupleLiteralPart__Element.initOperations(_TupleLiteralPart__Element);
			Fragments._TupleLiteralPart__NamedElement.initOperations(_TupleLiteralPart__NamedElement);
			Fragments._TupleLiteralPart__OclAny.initOperations(_TupleLiteralPart__OclAny);
			Fragments._TupleLiteralPart__OclElement.initOperations(_TupleLiteralPart__OclElement);
			Fragments._TupleLiteralPart__TupleLiteralPart.initOperations(_TupleLiteralPart__TupleLiteralPart);
			Fragments._TupleLiteralPart__TypedElement.initOperations(_TupleLiteralPart__TypedElement);
			Fragments._TupleLiteralPart__VariableDeclaration.initOperations(_TupleLiteralPart__VariableDeclaration);

			Fragments._TupleType__AbstractClass.initOperations(_TupleType__AbstractClass);
			Fragments._TupleType__Class.initOperations(_TupleType__Class);
			Fragments._TupleType__DataType.initOperations(_TupleType__DataType);
			Fragments._TupleType__Element.initOperations(_TupleType__Element);
			Fragments._TupleType__NamedElement.initOperations(_TupleType__NamedElement);
			Fragments._TupleType__Namespace.initOperations(_TupleType__Namespace);
			Fragments._TupleType__OclAny.initOperations(_TupleType__OclAny);
			Fragments._TupleType__OclElement.initOperations(_TupleType__OclElement);
			Fragments._TupleType__OclType.initOperations(_TupleType__OclType);
			Fragments._TupleType__TemplateableElement.initOperations(_TupleType__TemplateableElement);
			Fragments._TupleType__TupleType.initOperations(_TupleType__TupleType);
			Fragments._TupleType__Type.initOperations(_TupleType__Type);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::FragmentOperations1 and all preceding sub-packages.
		 */
		public static void init() {}
	}

	public static class FragmentOperations {
		static {
			Init.initStart();
			FragmentOperations1.init();
		}

		private static final @NonNull Operation @NonNull [] _Type__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Type__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Type__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Type__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Type__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Type__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};

		private static final @NonNull Operation @NonNull [] _TypeExp__TypeExp = {};
		private static final @NonNull Operation @NonNull [] _TypeExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TypeExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _TypeExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _TypeExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TypeExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _TypeExp__ReferringElement = {
			PivotTables.Operations._ReferringElement__getReferredElement /* getReferredElement() */
		};
		private static final @NonNull Operation @NonNull [] _TypeExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _TypedElement__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TypedElement__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _TypedElement__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _TypedElement__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _TypedElement__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__UnlimitedNaturalLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__LiteralExp = {};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__NumericLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__PrimitiveLiteralExp = {};
		private static final @NonNull Operation @NonNull [] _UnlimitedNaturalLiteralExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _UnspecifiedValueExp__UnspecifiedValueExp = {};
		private static final @NonNull Operation @NonNull [] _UnspecifiedValueExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _UnspecifiedValueExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _UnspecifiedValueExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _UnspecifiedValueExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _UnspecifiedValueExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _UnspecifiedValueExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _ValueSpecification__ValueSpecification = {
			PivotTables.Operations._ValueSpecification__booleanValue /* booleanValue() */,
			PivotTables.Operations._ValueSpecification__integerValue /* integerValue() */,
			PivotTables.Operations._ValueSpecification__isComputable /* isComputable() */,
			PivotTables.Operations._ValueSpecification__isNull /* isNull() */,
			PivotTables.Operations._ValueSpecification__stringValue /* stringValue() */,
			PivotTables.Operations._ValueSpecification__unlimitedValue /* unlimitedValue() */
		};
		private static final @NonNull Operation @NonNull [] _ValueSpecification__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _ValueSpecification__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _ValueSpecification__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _ValueSpecification__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _ValueSpecification__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Variable__Variable = {};
		private static final @NonNull Operation @NonNull [] _Variable__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Variable__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Variable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Variable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _Variable__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Variable__VariableDeclaration = {};

		private static final @NonNull Operation @NonNull [] _VariableDeclaration__VariableDeclaration = {};
		private static final @NonNull Operation @NonNull [] _VariableDeclaration__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _VariableDeclaration__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _VariableDeclaration__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _VariableDeclaration__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _VariableDeclaration__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _VariableExp__VariableExp = {};
		private static final @NonNull Operation @NonNull [] _VariableExp__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _VariableExp__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _VariableExp__OCLExpression = {
			PivotTables.Operations._OCLExpression__isNonNull /* isNonNull() */,
			PivotTables.Operations._OCLExpression__isNull /* isNull() */
		};
		private static final @NonNull Operation @NonNull [] _VariableExp__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _VariableExp__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _VariableExp__ReferringElement = {
			PivotTables.Operations._ReferringElement__getReferredElement /* getReferredElement() */
		};
		private static final @NonNull Operation @NonNull [] _VariableExp__TypedElement = {
			PivotTables.Operations._TypedElement__CompatibleBody /* CompatibleBody(ValueSpecification[1]) */
		};

		private static final @NonNull Operation @NonNull [] _Vertex__Vertex = {};
		private static final @NonNull Operation @NonNull [] _Vertex__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _Vertex__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _Vertex__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Vertex__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _Visitable__Visitable = {};
		private static final @NonNull Operation @NonNull [] _Visitable__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _Visitable__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};

		private static final @NonNull Operation @NonNull [] _VoidType__VoidType = {
			PivotTables.Operations._VoidType__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _VoidType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _VoidType__Class = {
			PivotTables.Operations._VoidType__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _VoidType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _VoidType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _VoidType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _VoidType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _VoidType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _VoidType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _VoidType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _VoidType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		private static final @NonNull Operation @NonNull [] _WildcardType__WildcardType = {};
		private static final @NonNull Operation @NonNull [] _WildcardType__AbstractClass = {};
		private static final @NonNull Operation @NonNull [] _WildcardType__Class = {
			PivotTables.Operations._Class__allInstances /* allInstances() */
		};
		private static final @NonNull Operation @NonNull [] _WildcardType__Element = {
			PivotTables.Operations._Element__allOwnedElements /* allOwnedElements() */,
			PivotTables.Operations._Element__getValue /* getValue(Type[1],String[1]) */
		};
		private static final @NonNull Operation @NonNull [] _WildcardType__NamedElement = {};
		private static final @NonNull Operation @NonNull [] _WildcardType__Namespace = {};
		private static final @NonNull Operation @NonNull [] _WildcardType__OclAny = {
			OCLstdlibTables.Operations._OclAny___lt__gt_ /* _'<>'(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny___eq_ /* _'='(OclSelf[?]) */,
			OCLstdlibTables.Operations._OclAny__oclAsSet /* oclAsSet() */,
			OCLstdlibTables.Operations._OclAny__oclAsType /* oclAsType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInState /* oclIsInState(OclState[?]) */,
			OCLstdlibTables.Operations._OclAny__oclIsInvalid /* oclIsInvalid() */,
			OCLstdlibTables.Operations._OclAny__oclIsKindOf /* oclIsKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsNew /* oclIsNew() */,
			OCLstdlibTables.Operations._OclAny__oclIsTypeOf /* oclIsTypeOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclAny__oclIsUndefined /* oclIsUndefined() */,
			OCLstdlibTables.Operations._OclAny__0_oclLog /* oclLog() */,
			OCLstdlibTables.Operations._OclAny__1_oclLog /* oclLog(String[1]) */,
			OCLstdlibTables.Operations._OclAny__oclType /* oclType() */,
			OCLstdlibTables.Operations._OclAny__oclTypes /* oclTypes() */,
			OCLstdlibTables.Operations._OclAny__toString /* toString() */
		};
		private static final @NonNull Operation @NonNull [] _WildcardType__OclElement = {
			OCLstdlibTables.Operations._OclElement__allInstances /* allInstances(Integer[1]) */,
			OCLstdlibTables.Operations._OclElement__oclAsModelType /* oclAsModelType(TT)(TT[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclBase /* oclBase() */,
			OCLstdlibTables.Operations._OclElement__1_oclBase /* oclBase(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclContainer /* oclContainer() */,
			OCLstdlibTables.Operations._OclElement__oclContents /* oclContents() */,
			OCLstdlibTables.Operations._OclElement__oclExtension /* oclExtension(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__0_oclExtensions /* oclExtensions() */,
			OCLstdlibTables.Operations._OclElement__1_oclExtensions /* oclExtensions(OclStereotype[1]) */,
			OCLstdlibTables.Operations._OclElement__oclIsModelKindOf /* oclIsModelKindOf(OclType[1]) */,
			OCLstdlibTables.Operations._OclElement__oclModelType /* oclModelType() */,
			OCLstdlibTables.Operations._OclElement__oclModelTypes /* oclModelTypes() */
		};
		private static final @NonNull Operation @NonNull [] _WildcardType__OclType = {
			OCLstdlibTables.Operations._OclType__conformsTo /* conformsTo(OclType[?]) */
		};
		private static final @NonNull Operation @NonNull [] _WildcardType__TemplateableElement = {};
		private static final @NonNull Operation @NonNull [] _WildcardType__Type = {
			PivotTables.Operations._Type__conformsTo /* conformsTo(Type[?]) */,
			PivotTables.Operations._Type__flattenedType /* flattenedType() */,
			PivotTables.Operations._Type__isClass /* isClass() */,
			PivotTables.Operations._Type__isTemplateParameter /* isTemplateParameter() */,
			PivotTables.Operations._Type__specializeIn /* specializeIn(CallExp[1],Type[1]) */
		};

		/*
		 *	Install the operation descriptors in the fragment descriptors.
		 */
		static {
			Fragments._Type__Element.initOperations(_Type__Element);
			Fragments._Type__NamedElement.initOperations(_Type__NamedElement);
			Fragments._Type__OclAny.initOperations(_Type__OclAny);
			Fragments._Type__OclElement.initOperations(_Type__OclElement);
			Fragments._Type__OclType.initOperations(_Type__OclType);
			Fragments._Type__Type.initOperations(_Type__Type);

			Fragments._TypeExp__Element.initOperations(_TypeExp__Element);
			Fragments._TypeExp__NamedElement.initOperations(_TypeExp__NamedElement);
			Fragments._TypeExp__OCLExpression.initOperations(_TypeExp__OCLExpression);
			Fragments._TypeExp__OclAny.initOperations(_TypeExp__OclAny);
			Fragments._TypeExp__OclElement.initOperations(_TypeExp__OclElement);
			Fragments._TypeExp__ReferringElement.initOperations(_TypeExp__ReferringElement);
			Fragments._TypeExp__TypeExp.initOperations(_TypeExp__TypeExp);
			Fragments._TypeExp__TypedElement.initOperations(_TypeExp__TypedElement);

			Fragments._TypedElement__Element.initOperations(_TypedElement__Element);
			Fragments._TypedElement__NamedElement.initOperations(_TypedElement__NamedElement);
			Fragments._TypedElement__OclAny.initOperations(_TypedElement__OclAny);
			Fragments._TypedElement__OclElement.initOperations(_TypedElement__OclElement);
			Fragments._TypedElement__TypedElement.initOperations(_TypedElement__TypedElement);

			Fragments._UnlimitedNaturalLiteralExp__Element.initOperations(_UnlimitedNaturalLiteralExp__Element);
			Fragments._UnlimitedNaturalLiteralExp__LiteralExp.initOperations(_UnlimitedNaturalLiteralExp__LiteralExp);
			Fragments._UnlimitedNaturalLiteralExp__NamedElement.initOperations(_UnlimitedNaturalLiteralExp__NamedElement);
			Fragments._UnlimitedNaturalLiteralExp__NumericLiteralExp.initOperations(_UnlimitedNaturalLiteralExp__NumericLiteralExp);
			Fragments._UnlimitedNaturalLiteralExp__OCLExpression.initOperations(_UnlimitedNaturalLiteralExp__OCLExpression);
			Fragments._UnlimitedNaturalLiteralExp__OclAny.initOperations(_UnlimitedNaturalLiteralExp__OclAny);
			Fragments._UnlimitedNaturalLiteralExp__OclElement.initOperations(_UnlimitedNaturalLiteralExp__OclElement);
			Fragments._UnlimitedNaturalLiteralExp__PrimitiveLiteralExp.initOperations(_UnlimitedNaturalLiteralExp__PrimitiveLiteralExp);
			Fragments._UnlimitedNaturalLiteralExp__TypedElement.initOperations(_UnlimitedNaturalLiteralExp__TypedElement);
			Fragments._UnlimitedNaturalLiteralExp__UnlimitedNaturalLiteralExp.initOperations(_UnlimitedNaturalLiteralExp__UnlimitedNaturalLiteralExp);

			Fragments._UnspecifiedValueExp__Element.initOperations(_UnspecifiedValueExp__Element);
			Fragments._UnspecifiedValueExp__NamedElement.initOperations(_UnspecifiedValueExp__NamedElement);
			Fragments._UnspecifiedValueExp__OCLExpression.initOperations(_UnspecifiedValueExp__OCLExpression);
			Fragments._UnspecifiedValueExp__OclAny.initOperations(_UnspecifiedValueExp__OclAny);
			Fragments._UnspecifiedValueExp__OclElement.initOperations(_UnspecifiedValueExp__OclElement);
			Fragments._UnspecifiedValueExp__TypedElement.initOperations(_UnspecifiedValueExp__TypedElement);
			Fragments._UnspecifiedValueExp__UnspecifiedValueExp.initOperations(_UnspecifiedValueExp__UnspecifiedValueExp);

			Fragments._ValueSpecification__Element.initOperations(_ValueSpecification__Element);
			Fragments._ValueSpecification__NamedElement.initOperations(_ValueSpecification__NamedElement);
			Fragments._ValueSpecification__OclAny.initOperations(_ValueSpecification__OclAny);
			Fragments._ValueSpecification__OclElement.initOperations(_ValueSpecification__OclElement);
			Fragments._ValueSpecification__TypedElement.initOperations(_ValueSpecification__TypedElement);
			Fragments._ValueSpecification__ValueSpecification.initOperations(_ValueSpecification__ValueSpecification);

			Fragments._Variable__Element.initOperations(_Variable__Element);
			Fragments._Variable__NamedElement.initOperations(_Variable__NamedElement);
			Fragments._Variable__OclAny.initOperations(_Variable__OclAny);
			Fragments._Variable__OclElement.initOperations(_Variable__OclElement);
			Fragments._Variable__TypedElement.initOperations(_Variable__TypedElement);
			Fragments._Variable__Variable.initOperations(_Variable__Variable);
			Fragments._Variable__VariableDeclaration.initOperations(_Variable__VariableDeclaration);

			Fragments._VariableDeclaration__Element.initOperations(_VariableDeclaration__Element);
			Fragments._VariableDeclaration__NamedElement.initOperations(_VariableDeclaration__NamedElement);
			Fragments._VariableDeclaration__OclAny.initOperations(_VariableDeclaration__OclAny);
			Fragments._VariableDeclaration__OclElement.initOperations(_VariableDeclaration__OclElement);
			Fragments._VariableDeclaration__TypedElement.initOperations(_VariableDeclaration__TypedElement);
			Fragments._VariableDeclaration__VariableDeclaration.initOperations(_VariableDeclaration__VariableDeclaration);

			Fragments._VariableExp__Element.initOperations(_VariableExp__Element);
			Fragments._VariableExp__NamedElement.initOperations(_VariableExp__NamedElement);
			Fragments._VariableExp__OCLExpression.initOperations(_VariableExp__OCLExpression);
			Fragments._VariableExp__OclAny.initOperations(_VariableExp__OclAny);
			Fragments._VariableExp__OclElement.initOperations(_VariableExp__OclElement);
			Fragments._VariableExp__ReferringElement.initOperations(_VariableExp__ReferringElement);
			Fragments._VariableExp__TypedElement.initOperations(_VariableExp__TypedElement);
			Fragments._VariableExp__VariableExp.initOperations(_VariableExp__VariableExp);

			Fragments._Vertex__Element.initOperations(_Vertex__Element);
			Fragments._Vertex__NamedElement.initOperations(_Vertex__NamedElement);
			Fragments._Vertex__OclAny.initOperations(_Vertex__OclAny);
			Fragments._Vertex__OclElement.initOperations(_Vertex__OclElement);
			Fragments._Vertex__Vertex.initOperations(_Vertex__Vertex);

			Fragments._Visitable__OclAny.initOperations(_Visitable__OclAny);
			Fragments._Visitable__OclElement.initOperations(_Visitable__OclElement);
			Fragments._Visitable__Visitable.initOperations(_Visitable__Visitable);

			Fragments._VoidType__AbstractClass.initOperations(_VoidType__AbstractClass);
			Fragments._VoidType__Class.initOperations(_VoidType__Class);
			Fragments._VoidType__Element.initOperations(_VoidType__Element);
			Fragments._VoidType__NamedElement.initOperations(_VoidType__NamedElement);
			Fragments._VoidType__Namespace.initOperations(_VoidType__Namespace);
			Fragments._VoidType__OclAny.initOperations(_VoidType__OclAny);
			Fragments._VoidType__OclElement.initOperations(_VoidType__OclElement);
			Fragments._VoidType__OclType.initOperations(_VoidType__OclType);
			Fragments._VoidType__TemplateableElement.initOperations(_VoidType__TemplateableElement);
			Fragments._VoidType__Type.initOperations(_VoidType__Type);
			Fragments._VoidType__VoidType.initOperations(_VoidType__VoidType);

			Fragments._WildcardType__AbstractClass.initOperations(_WildcardType__AbstractClass);
			Fragments._WildcardType__Class.initOperations(_WildcardType__Class);
			Fragments._WildcardType__Element.initOperations(_WildcardType__Element);
			Fragments._WildcardType__NamedElement.initOperations(_WildcardType__NamedElement);
			Fragments._WildcardType__Namespace.initOperations(_WildcardType__Namespace);
			Fragments._WildcardType__OclAny.initOperations(_WildcardType__OclAny);
			Fragments._WildcardType__OclElement.initOperations(_WildcardType__OclElement);
			Fragments._WildcardType__OclType.initOperations(_WildcardType__OclType);
			Fragments._WildcardType__TemplateableElement.initOperations(_WildcardType__TemplateableElement);
			Fragments._WildcardType__Type.initOperations(_WildcardType__Type);
			Fragments._WildcardType__WildcardType.initOperations(_WildcardType__WildcardType);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::FragmentOperations and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of local properties for the local fragment of each type.
	 */
	public static class FragmentProperties {
		static {
			Init.initStart();
			FragmentOperations.init();
		}

		private static final @NonNull Property @NonNull [] _AbstractClass = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _Annotation = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Annotation__ownedContents,
			PivotTables.Properties._Annotation__ownedDetails,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Annotation__references
		};

		private static final @NonNull Property @NonNull [] _AnyType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _AssociationClass = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._AssociationClass__unownedAttributes,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _AssociationClassCallExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._FeatureCallExp__isPre,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			PivotTables.Properties._NavigationCallExp__navigationSource,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._NavigationCallExp__qualifiers,
			PivotTables.Properties._AssociationClassCallExp__referredAssociationClass,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _AssociativityKind = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _BagType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._CollectionType__elementType,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._CollectionType__isNullFree,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._CollectionType__lower,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._CollectionType__upper,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _Behavior = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Behavior__owningTransition,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _BooleanLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._BooleanLiteralExp__booleanSymbol,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _BooleanType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._PrimitiveType__coercions,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _CallExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _CallOperationAction = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._CallOperationAction__operation,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions
		};

		private static final @NonNull Property @NonNull [] _Class = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _CollectionItem = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CollectionItem__ownedItem,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _CollectionKind = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _CollectionLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CollectionLiteralExp__kind,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CollectionLiteralExp__ownedParts,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _CollectionLiteralPart = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _CollectionRange = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CollectionRange__ownedFirst,
			PivotTables.Properties._CollectionRange__ownedLast,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _CollectionType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._CollectionType__elementType,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._CollectionType__isNullFree,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._CollectionType__lower,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._CollectionType__upper,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _Comment = {
			PivotTables.Properties._Comment__annotatedElements,
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Comment__body,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Comment__owningElement
		};

		private static final @NonNull Property @NonNull [] _CompleteClass = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CompleteClass__owningCompletePackage,
			PivotTables.Properties._CompleteClass__partialClasses
		};

		private static final @NonNull Property @NonNull [] _CompleteEnvironment = {
			PivotTables.Properties._Element__annotatingComments,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._CompleteEnvironment__ownedCompleteModel,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CompleteEnvironment__ownedStandardLibrary
		};

		private static final @NonNull Property @NonNull [] _CompleteModel = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._CompleteModel__orphanCompletePackage,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._CompleteModel__ownedCompletePackages,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CompleteModel__owningCompleteEnvironment,
			PivotTables.Properties._CompleteModel__partialModels,
			PivotTables.Properties._CompleteModel__primitiveCompletePackage
		};

		private static final @NonNull Property @NonNull [] _CompletePackage = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._CompletePackage__ownedCompleteClasses,
			PivotTables.Properties._CompletePackage__ownedCompletePackages,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CompletePackage__owningCompleteModel,
			PivotTables.Properties._CompletePackage__owningCompletePackage,
			PivotTables.Properties._CompletePackage__partialPackages
		};

		private static final @NonNull Property @NonNull [] _ConnectionPointReference = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._ConnectionPointReference__entries,
			PivotTables.Properties._ConnectionPointReference__exits,
			PivotTables.Properties._Vertex__incomingTransitions,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Vertex__outgoingTransitions,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Vertex__owningRegion,
			PivotTables.Properties._ConnectionPointReference__owningState
		};

		private static final @NonNull Property @NonNull [] _Constraint = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Constraint__constrainedElements,
			PivotTables.Properties._Constraint__context,
			PivotTables.Properties._Constraint__isCallable,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Constraint__ownedSpecification,
			PivotTables.Properties._Constraint__owningPostContext,
			PivotTables.Properties._Constraint__owningPreContext,
			PivotTables.Properties._Constraint__owningState,
			PivotTables.Properties._Constraint__owningTransition,
			PivotTables.Properties._Constraint__redefinedConstraints
		};

		private static final @NonNull Property @NonNull [] _DataType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _Detail = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Detail__values
		};

		private static final @NonNull Property @NonNull [] _DynamicBehavior = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DynamicElement__metaType,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._DynamicType__ownedDynamicProperties,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Behavior__owningTransition,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _DynamicElement = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DynamicElement__metaType,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions
		};

		private static final @NonNull Property @NonNull [] _DynamicProperty = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DynamicProperty__default,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._DynamicProperty__referredProperty
		};

		private static final @NonNull Property @NonNull [] _DynamicType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DynamicElement__metaType,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._DynamicType__ownedDynamicProperties,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _DynamicValueSpecification = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _EcoreObject = {};

		private static final @NonNull Property @NonNull [] _Element = {
			PivotTables.Properties._Element__annotatingComments,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions
		};

		private static final @NonNull Property @NonNull [] _ElementExtension = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._ElementExtension__base,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._ElementExtension__isApplied,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._ElementExtension__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._ElementExtension__stereotype,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _ElementLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._ElementLiteralExp__referredElement,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _EnumLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._EnumLiteralExp__referredLiteral,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _Enumeration = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Enumeration__ownedLiterals,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _EnumerationLiteral = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._InstanceSpecification__classes,
			PivotTables.Properties._EnumerationLiteral__literal,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._InstanceSpecification__ownedSlots,
			PivotTables.Properties._InstanceSpecification__ownedSpecification,
			PivotTables.Properties._EnumerationLiteral__owningEnumeration,
			PivotTables.Properties._InstanceSpecification__owningPackage,
			PivotTables.Properties._EnumerationLiteral__value
		};

		private static final @NonNull Property @NonNull [] _ExpressionInOCL = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._LanguageExpression__body,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._LanguageExpression__language,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._ExpressionInOCL__ownedBody,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._ExpressionInOCL__ownedContext,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._ExpressionInOCL__ownedParameters,
			PivotTables.Properties._ExpressionInOCL__ownedResult,
			PivotTables.Properties._LanguageExpression__owningConstraint,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _Feature = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Feature__implementation,
			PivotTables.Properties._Feature__implementationClass,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._Feature__isStatic,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _FeatureCallExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._FeatureCallExp__isPre,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _FinalState = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Vertex__incomingTransitions,
			PivotTables.Properties._State__isComposite,
			PivotTables.Properties._State__isOrthogonal,
			PivotTables.Properties._State__isSimple,
			PivotTables.Properties._State__isSubmachineState,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Vertex__outgoingTransitions,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._State__ownedConnectionPoints,
			PivotTables.Properties._State__ownedConnections,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._State__ownedDeferrableTriggers,
			PivotTables.Properties._State__ownedDoActivity,
			PivotTables.Properties._State__ownedEntry,
			PivotTables.Properties._State__ownedExit,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._State__ownedRegions,
			PivotTables.Properties._State__ownedStateInvariant,
			PivotTables.Properties._Vertex__owningRegion,
			PivotTables.Properties._State__redefinedState,
			PivotTables.Properties._State__submachines
		};

		private static final @NonNull Property @NonNull [] _IfExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._IfExp__isElseIf,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._IfExp__ownedCondition,
			PivotTables.Properties._IfExp__ownedElse,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._IfExp__ownedThen,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _Import = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Import__importedNamespace,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Import__xmiidVersion
		};

		private static final @NonNull Property @NonNull [] _InstanceSpecification = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._InstanceSpecification__classes,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._InstanceSpecification__ownedSlots,
			PivotTables.Properties._InstanceSpecification__ownedSpecification,
			PivotTables.Properties._InstanceSpecification__owningPackage
		};

		private static final @NonNull Property @NonNull [] _IntegerLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._IntegerLiteralExp__integerSymbol,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _InvalidLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _InvalidType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _IterableType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _IterateExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._LoopExp__ownedBody,
			PivotTables.Properties._LoopExp__ownedCoIterators,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._LoopExp__ownedIterators,
			PivotTables.Properties._IterateExp__ownedResult,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._LoopExp__referredIteration,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _Iteration = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Operation__bodyExpression,
			PivotTables.Properties._Feature__implementation,
			PivotTables.Properties._Feature__implementationClass,
			PivotTables.Properties._Operation__isInvalidating,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._Feature__isStatic,
			PivotTables.Properties._Operation__isTransient,
			PivotTables.Properties._Operation__isTypeof,
			PivotTables.Properties._Operation__isValidating,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Iteration__ownedAccumulators,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Iteration__ownedIterators,
			PivotTables.Properties._Operation__ownedParameters,
			PivotTables.Properties._Operation__ownedPostconditions,
			PivotTables.Properties._Operation__ownedPreconditions,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Operation__owningClass,
			PivotTables.Properties._Operation__precedence,
			PivotTables.Properties._Operation__raisedExceptions,
			PivotTables.Properties._Operation__redefinedOperations,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _IteratorExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._LoopExp__ownedBody,
			PivotTables.Properties._LoopExp__ownedCoIterators,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._LoopExp__ownedIterators,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._LoopExp__referredIteration,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _IteratorVariable = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Variable__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Variable__ownedInit,
			PivotTables.Properties._Variable__representedParameter,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._VariableDeclaration__typeValue
		};

		private static final @NonNull Property @NonNull [] _LambdaType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._LambdaType__contextType,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._LambdaType__parameterType,
			PivotTables.Properties._LambdaType__resultType,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _LanguageExpression = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._LanguageExpression__body,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._LanguageExpression__language,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._LanguageExpression__owningConstraint,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _LetExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._LetExp__ownedIn,
			PivotTables.Properties._LetExp__ownedVariable,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _LetVariable = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Variable__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Variable__ownedInit,
			PivotTables.Properties._Variable__representedParameter,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._VariableDeclaration__typeValue
		};

		private static final @NonNull Property @NonNull [] _Library = {
			PivotTables.Properties._Package__URI,
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Package__importedPackages,
			PivotTables.Properties._NamedElement__name,
			PivotTables.Properties._Package__nsPrefix,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Package__ownedClasses,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Package__ownedInstances,
			PivotTables.Properties._Package__ownedPackages,
			PivotTables.Properties._Library__ownedPrecedences,
			PivotTables.Properties._Package__ownedProfileApplications,
			PivotTables.Properties._Package__owningPackage
		};

		private static final @NonNull Property @NonNull [] _LibraryFeature = {};

		private static final @NonNull Property @NonNull [] _LiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _LoopExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._LoopExp__ownedBody,
			PivotTables.Properties._LoopExp__ownedCoIterators,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._LoopExp__ownedIterators,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._LoopExp__referredIteration,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _MapLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._MapLiteralExp__ownedParts,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _MapLiteralPart = {
			PivotTables.Properties._Element__annotatingComments,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._MapLiteralPart__ownedKey,
			PivotTables.Properties._MapLiteralPart__ownedValue
		};

		private static final @NonNull Property @NonNull [] _MapType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._MapType__entryClass,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._MapType__keyType,
			PivotTables.Properties._MapType__keysAreNullFree,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._DataType__value,
			PivotTables.Properties._MapType__valueType,
			PivotTables.Properties._MapType__valuesAreNullFree
		};

		private static final @NonNull Property @NonNull [] _MessageExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._MessageExp__ownedArguments,
			PivotTables.Properties._MessageExp__ownedCalledOperation,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._MessageExp__ownedSentSignal,
			PivotTables.Properties._MessageExp__ownedTarget,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _MessageType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._MessageType__referredOperation,
			PivotTables.Properties._MessageType__referredSignal,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _Model = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Model__externalURI,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Model__ownedImports,
			PivotTables.Properties._Model__ownedPackages,
			PivotTables.Properties._Model__xmiidVersion
		};

		private static final @NonNull Property @NonNull [] _MorePivotable = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _Nameable = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _NamedElement = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions
		};

		private static final @NonNull Property @NonNull [] _Namespace = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions
		};

		private static final @NonNull Property @NonNull [] _NavigationCallExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._FeatureCallExp__isPre,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			PivotTables.Properties._NavigationCallExp__navigationSource,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._NavigationCallExp__qualifiers,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _NullLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _NumericLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _OCLExpression = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _Object = {};

		private static final @NonNull Property @NonNull [] _Operation = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Operation__bodyExpression,
			PivotTables.Properties._Feature__implementation,
			PivotTables.Properties._Feature__implementationClass,
			PivotTables.Properties._Operation__isInvalidating,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._Feature__isStatic,
			PivotTables.Properties._Operation__isTransient,
			PivotTables.Properties._Operation__isTypeof,
			PivotTables.Properties._Operation__isValidating,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Operation__ownedParameters,
			PivotTables.Properties._Operation__ownedPostconditions,
			PivotTables.Properties._Operation__ownedPreconditions,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Operation__owningClass,
			PivotTables.Properties._Operation__precedence,
			PivotTables.Properties._Operation__raisedExceptions,
			PivotTables.Properties._Operation__redefinedOperations,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _OperationCallExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._FeatureCallExp__isPre,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._OperationCallExp__isVirtual,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._OperationCallExp__ownedArguments,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._OperationCallExp__referredOperation,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _OppositePropertyCallExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._FeatureCallExp__isPre,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			PivotTables.Properties._NavigationCallExp__navigationSource,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._NavigationCallExp__qualifiers,
			PivotTables.Properties._OppositePropertyCallExp__referredProperty,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _OrderedSetType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._CollectionType__elementType,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._CollectionType__isNullFree,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._CollectionType__lower,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._CollectionType__upper,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _OrphanCompletePackage = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._CompletePackage__ownedCompleteClasses,
			PivotTables.Properties._CompletePackage__ownedCompletePackages,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CompletePackage__owningCompleteModel,
			PivotTables.Properties._CompletePackage__owningCompletePackage,
			PivotTables.Properties._CompletePackage__partialPackages
		};

		private static final @NonNull Property @NonNull [] _Package = {
			PivotTables.Properties._Package__URI,
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Package__importedPackages,
			PivotTables.Properties._NamedElement__name,
			PivotTables.Properties._Package__nsPrefix,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Package__ownedClasses,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Package__ownedInstances,
			PivotTables.Properties._Package__ownedPackages,
			PivotTables.Properties._Package__ownedProfileApplications,
			PivotTables.Properties._Package__owningPackage
		};

		private static final @NonNull Property @NonNull [] _Parameter = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._Parameter__isTypeof,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Parameter__owningOperation,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._VariableDeclaration__typeValue
		};

		private static final @NonNull Property @NonNull [] _ParameterVariable = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Variable__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Variable__ownedInit,
			PivotTables.Properties._Variable__representedParameter,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._VariableDeclaration__typeValue
		};

		private static final @NonNull Property @NonNull [] _Pivotable = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _Precedence = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Precedence__associativity,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Precedence__order,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions
		};

		private static final @NonNull Property @NonNull [] _PrimitiveCompletePackage = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._CompletePackage__ownedCompleteClasses,
			PivotTables.Properties._CompletePackage__ownedCompletePackages,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CompletePackage__owningCompleteModel,
			PivotTables.Properties._CompletePackage__owningCompletePackage,
			PivotTables.Properties._CompletePackage__partialPackages
		};

		private static final @NonNull Property @NonNull [] _PrimitiveLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _PrimitiveType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._PrimitiveType__coercions,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _Profile = {
			PivotTables.Properties._Package__URI,
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Package__importedPackages,
			PivotTables.Properties._NamedElement__name,
			PivotTables.Properties._Package__nsPrefix,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Package__ownedClasses,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Package__ownedInstances,
			PivotTables.Properties._Package__ownedPackages,
			PivotTables.Properties._Package__ownedProfileApplications,
			PivotTables.Properties._Package__owningPackage,
			PivotTables.Properties._Profile__profileApplications
		};

		private static final @NonNull Property @NonNull [] _ProfileApplication = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._ProfileApplication__appliedProfile,
			PivotTables.Properties._ProfileApplication__isStrict,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._ProfileApplication__owningPackage
		};

		private static final @NonNull Property @NonNull [] _Property = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Property__associationClass,
			PivotTables.Properties._Property__defaultValue,
			PivotTables.Properties._Property__defaultValueString,
			PivotTables.Properties._Feature__implementation,
			PivotTables.Properties._Feature__implementationClass,
			PivotTables.Properties._Property__isComposite,
			PivotTables.Properties._Property__isDerived,
			PivotTables.Properties._Property__isID,
			PivotTables.Properties._Property__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._Property__isReadOnly,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._Property__isResolveProxies,
			PivotTables.Properties._Feature__isStatic,
			PivotTables.Properties._Property__isTransient,
			PivotTables.Properties._Property__isUnsettable,
			PivotTables.Properties._Property__isVolatile,
			PivotTables.Properties._Property__keys,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Property__opposite,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Property__ownedExpression,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Property__owningClass,
			PivotTables.Properties._Property__redefinedProperties,
			PivotTables.Properties._Property__referredProperty,
			PivotTables.Properties._Property__subsettedProperty,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _PropertyCallExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._CallExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._FeatureCallExp__isPre,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._CallExp__isSafe,
			PivotTables.Properties._NamedElement__name,
			PivotTables.Properties._NavigationCallExp__navigationSource,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._CallExp__ownedSource,
			PivotTables.Properties._NavigationCallExp__qualifiers,
			PivotTables.Properties._PropertyCallExp__referredProperty,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _Pseudostate = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Vertex__incomingTransitions,
			PivotTables.Properties._Pseudostate__kind,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Vertex__outgoingTransitions,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Vertex__owningRegion,
			PivotTables.Properties._Pseudostate__owningState,
			PivotTables.Properties._Pseudostate__owningStateMachine
		};

		private static final @NonNull Property @NonNull [] _PseudostateKind = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _RealLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._RealLiteralExp__realSymbol,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _ReferringElement = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _Region = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Region__extendedRegion,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Region__ownedSubvertexes,
			PivotTables.Properties._Region__ownedTransitions,
			PivotTables.Properties._Region__owningState,
			PivotTables.Properties._Region__owningStateMachine
		};

		private static final @NonNull Property @NonNull [] _ResultVariable = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Variable__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Variable__ownedInit,
			PivotTables.Properties._Variable__representedParameter,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._VariableDeclaration__typeValue
		};

		private static final @NonNull Property @NonNull [] _SelfType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _SendSignalAction = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._SendSignalAction__signal
		};

		private static final @NonNull Property @NonNull [] _SequenceType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._CollectionType__elementType,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._CollectionType__isNullFree,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._CollectionType__lower,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._CollectionType__upper,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _SetType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._CollectionType__elementType,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._CollectionType__isNullFree,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._CollectionType__lower,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._CollectionType__upper,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _ShadowExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._ShadowExp__ownedParts,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue,
			PivotTables.Properties._ShadowExp__value
		};

		private static final @NonNull Property @NonNull [] _ShadowPart = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._ShadowPart__ownedInit,
			PivotTables.Properties._ShadowPart__referredProperty,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _Signal = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _Slot = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Slot__definingProperty,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Slot__ownedValues,
			PivotTables.Properties._Slot__owningInstance
		};

		private static final @NonNull Property @NonNull [] _StandardLibrary = {
			PivotTables.Properties._Element__annotatingComments,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._StandardLibrary__owningCompleteEnvironment
		};

		private static final @NonNull Property @NonNull [] _State = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Vertex__incomingTransitions,
			PivotTables.Properties._State__isComposite,
			PivotTables.Properties._State__isOrthogonal,
			PivotTables.Properties._State__isSimple,
			PivotTables.Properties._State__isSubmachineState,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Vertex__outgoingTransitions,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._State__ownedConnectionPoints,
			PivotTables.Properties._State__ownedConnections,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._State__ownedDeferrableTriggers,
			PivotTables.Properties._State__ownedDoActivity,
			PivotTables.Properties._State__ownedEntry,
			PivotTables.Properties._State__ownedExit,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._State__ownedRegions,
			PivotTables.Properties._State__ownedStateInvariant,
			PivotTables.Properties._Vertex__owningRegion,
			PivotTables.Properties._State__redefinedState,
			PivotTables.Properties._State__submachines
		};

		private static final @NonNull Property @NonNull [] _StateExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._StateExp__referredState,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _StateMachine = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._StateMachine__extendedStateMachines,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._StateMachine__ownedConnectionPoints,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._StateMachine__ownedRegions,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Behavior__owningTransition,
			PivotTables.Properties._StateMachine__submachineStates,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _Stereotype = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Stereotype__ownedExtenders,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _StereotypeExtender = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._StereotypeExtender__class,
			PivotTables.Properties._StereotypeExtender__isRequired,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._StereotypeExtender__owningStereotype
		};

		private static final @NonNull Property @NonNull [] _StringLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._StringLiteralExp__stringSymbol,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _TemplateBinding = {
			PivotTables.Properties._Element__annotatingComments,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TemplateBinding__ownedSubstitutions,
			PivotTables.Properties._TemplateBinding__owningElement,
			PivotTables.Properties._TemplateBinding__templateSignature
		};

		private static final @NonNull Property @NonNull [] _TemplateParameter = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TemplateParameter__constrainingClasses,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TemplateParameter__owningSignature
		};

		private static final @NonNull Property @NonNull [] _TemplateParameterSubstitution = {
			PivotTables.Properties._TemplateParameterSubstitution__actual,
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TemplateParameterSubstitution__formal,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TemplateParameterSubstitution__ownedWildcard,
			PivotTables.Properties._TemplateParameterSubstitution__owningBinding
		};

		private static final @NonNull Property @NonNull [] _TemplateSignature = {
			PivotTables.Properties._Element__annotatingComments,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TemplateSignature__ownedParameters,
			PivotTables.Properties._TemplateSignature__owningElement
		};

		private static final @NonNull Property @NonNull [] _TemplateableElement = {
			PivotTables.Properties._Element__annotatingComments,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _Throwable = {};

		private static final @NonNull Property @NonNull [] _Transition = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Transition__kind,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Transition__ownedEffect,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Transition__ownedGuard,
			PivotTables.Properties._Transition__ownedTriggers,
			PivotTables.Properties._Transition__owningRegion,
			PivotTables.Properties._Transition__source,
			PivotTables.Properties._Transition__target
		};

		private static final @NonNull Property @NonNull [] _TransitionKind = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _Trigger = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Trigger__owningState,
			PivotTables.Properties._Trigger__owningTransition
		};

		private static final @NonNull Property @NonNull [] _TupleLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TupleLiteralExp__ownedParts,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _TupleLiteralPart = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TupleLiteralPart__ownedInit,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._VariableDeclaration__typeValue
		};

		private static final @NonNull Property @NonNull [] _TupleType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._DataType__behavioralClass,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._DataType__isSerializable,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._DataType__value
		};

		private static final @NonNull Property @NonNull [] _Type = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions
		};

		private static final @NonNull Property @NonNull [] _TypeExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypeExp__referredType,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _TypedElement = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _UnlimitedNaturalLiteralExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue,
			PivotTables.Properties._UnlimitedNaturalLiteralExp__unlimitedNaturalSymbol
		};

		private static final @NonNull Property @NonNull [] _UnspecifiedValueExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _ValueSpecification = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type
		};

		private static final @NonNull Property @NonNull [] _Variable = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Variable__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Variable__ownedInit,
			PivotTables.Properties._Variable__representedParameter,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._VariableDeclaration__typeValue
		};

		private static final @NonNull Property @NonNull [] _VariableDeclaration = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._VariableDeclaration__typeValue
		};

		private static final @NonNull Property @NonNull [] _VariableExp = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._VariableExp__isImplicit,
			PivotTables.Properties._TypedElement__isMany,
			PivotTables.Properties._TypedElement__isRequired,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._VariableExp__referredVariable,
			PivotTables.Properties._TypedElement__type,
			PivotTables.Properties._OCLExpression__typeValue
		};

		private static final @NonNull Property @NonNull [] _Vertex = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Vertex__incomingTransitions,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Vertex__outgoingTransitions,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Vertex__owningRegion
		};

		private static final @NonNull Property @NonNull [] _Visitable = {
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents
		};

		private static final @NonNull Property @NonNull [] _VoidType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement
		};

		private static final @NonNull Property @NonNull [] _WildcardType = {
			PivotTables.Properties._Element__annotatingComments,
			PivotTables.Properties._Class__extenders,
			PivotTables.Properties._Class__instanceClassName,
			PivotTables.Properties._Class__isAbstract,
			PivotTables.Properties._Class__isActive,
			PivotTables.Properties._Class__isInterface,
			PivotTables.Properties._WildcardType__lowerBound,
			PivotTables.Properties._NamedElement__name,
			OCLstdlibTables.Properties._OclElement__oclContainer,
			OCLstdlibTables.Properties._OclElement__oclContents,
			PivotTables.Properties._Element__ownedAnnotations,
			PivotTables.Properties._Class__ownedBehaviors,
			PivotTables.Properties._TemplateableElement__ownedBindings,
			PivotTables.Properties._Element__ownedComments,
			PivotTables.Properties._Namespace__ownedConstraints,
			PivotTables.Properties._Element__ownedExtensions,
			PivotTables.Properties._Class__ownedInvariants,
			PivotTables.Properties._Class__ownedOperations,
			PivotTables.Properties._Class__ownedProperties,
			PivotTables.Properties._TemplateableElement__ownedSignature,
			PivotTables.Properties._Class__owningPackage,
			PivotTables.Properties._Class__superClasses,
			PivotTables.Properties._TemplateableElement__unspecializedElement,
			PivotTables.Properties._WildcardType__upperBound
		};

		/**
		 *	Install the property descriptors in the fragment descriptors.
		 */
		static {
			Fragments._AbstractClass__AbstractClass.initProperties(_AbstractClass);
			Fragments._Annotation__Annotation.initProperties(_Annotation);
			Fragments._AnyType__AnyType.initProperties(_AnyType);
			Fragments._AssociationClass__AssociationClass.initProperties(_AssociationClass);
			Fragments._AssociationClassCallExp__AssociationClassCallExp.initProperties(_AssociationClassCallExp);
			Fragments._AssociativityKind__AssociativityKind.initProperties(_AssociativityKind);
			Fragments._BagType__BagType.initProperties(_BagType);
			Fragments._Behavior__Behavior.initProperties(_Behavior);
			Fragments._BooleanLiteralExp__BooleanLiteralExp.initProperties(_BooleanLiteralExp);
			Fragments._BooleanType__BooleanType.initProperties(_BooleanType);
			Fragments._CallExp__CallExp.initProperties(_CallExp);
			Fragments._CallOperationAction__CallOperationAction.initProperties(_CallOperationAction);
			Fragments._Class__Class.initProperties(_Class);
			Fragments._CollectionItem__CollectionItem.initProperties(_CollectionItem);
			Fragments._CollectionKind__CollectionKind.initProperties(_CollectionKind);
			Fragments._CollectionLiteralExp__CollectionLiteralExp.initProperties(_CollectionLiteralExp);
			Fragments._CollectionLiteralPart__CollectionLiteralPart.initProperties(_CollectionLiteralPart);
			Fragments._CollectionRange__CollectionRange.initProperties(_CollectionRange);
			Fragments._CollectionType__CollectionType.initProperties(_CollectionType);
			Fragments._Comment__Comment.initProperties(_Comment);
			Fragments._CompleteClass__CompleteClass.initProperties(_CompleteClass);
			Fragments._CompleteEnvironment__CompleteEnvironment.initProperties(_CompleteEnvironment);
			Fragments._CompleteModel__CompleteModel.initProperties(_CompleteModel);
			Fragments._CompletePackage__CompletePackage.initProperties(_CompletePackage);
			Fragments._ConnectionPointReference__ConnectionPointReference.initProperties(_ConnectionPointReference);
			Fragments._Constraint__Constraint.initProperties(_Constraint);
			Fragments._DataType__DataType.initProperties(_DataType);
			Fragments._Detail__Detail.initProperties(_Detail);
			Fragments._DynamicBehavior__DynamicBehavior.initProperties(_DynamicBehavior);
			Fragments._DynamicElement__DynamicElement.initProperties(_DynamicElement);
			Fragments._DynamicProperty__DynamicProperty.initProperties(_DynamicProperty);
			Fragments._DynamicType__DynamicType.initProperties(_DynamicType);
			Fragments._DynamicValueSpecification__DynamicValueSpecification.initProperties(_DynamicValueSpecification);
			Fragments._EcoreObject__EcoreObject.initProperties(_EcoreObject);
			Fragments._Element__Element.initProperties(_Element);
			Fragments._ElementExtension__ElementExtension.initProperties(_ElementExtension);
			Fragments._ElementLiteralExp__ElementLiteralExp.initProperties(_ElementLiteralExp);
			Fragments._EnumLiteralExp__EnumLiteralExp.initProperties(_EnumLiteralExp);
			Fragments._Enumeration__Enumeration.initProperties(_Enumeration);
			Fragments._EnumerationLiteral__EnumerationLiteral.initProperties(_EnumerationLiteral);
			Fragments._ExpressionInOCL__ExpressionInOCL.initProperties(_ExpressionInOCL);
			Fragments._Feature__Feature.initProperties(_Feature);
			Fragments._FeatureCallExp__FeatureCallExp.initProperties(_FeatureCallExp);
			Fragments._FinalState__FinalState.initProperties(_FinalState);
			Fragments._IfExp__IfExp.initProperties(_IfExp);
			Fragments._Import__Import.initProperties(_Import);
			Fragments._InstanceSpecification__InstanceSpecification.initProperties(_InstanceSpecification);
			Fragments._IntegerLiteralExp__IntegerLiteralExp.initProperties(_IntegerLiteralExp);
			Fragments._InvalidLiteralExp__InvalidLiteralExp.initProperties(_InvalidLiteralExp);
			Fragments._InvalidType__InvalidType.initProperties(_InvalidType);
			Fragments._IterableType__IterableType.initProperties(_IterableType);
			Fragments._IterateExp__IterateExp.initProperties(_IterateExp);
			Fragments._Iteration__Iteration.initProperties(_Iteration);
			Fragments._IteratorExp__IteratorExp.initProperties(_IteratorExp);
			Fragments._IteratorVariable__IteratorVariable.initProperties(_IteratorVariable);
			Fragments._LambdaType__LambdaType.initProperties(_LambdaType);
			Fragments._LanguageExpression__LanguageExpression.initProperties(_LanguageExpression);
			Fragments._LetExp__LetExp.initProperties(_LetExp);
			Fragments._LetVariable__LetVariable.initProperties(_LetVariable);
			Fragments._Library__Library.initProperties(_Library);
			Fragments._LibraryFeature__LibraryFeature.initProperties(_LibraryFeature);
			Fragments._LiteralExp__LiteralExp.initProperties(_LiteralExp);
			Fragments._LoopExp__LoopExp.initProperties(_LoopExp);
			Fragments._MapLiteralExp__MapLiteralExp.initProperties(_MapLiteralExp);
			Fragments._MapLiteralPart__MapLiteralPart.initProperties(_MapLiteralPart);
			Fragments._MapType__MapType.initProperties(_MapType);
			Fragments._MessageExp__MessageExp.initProperties(_MessageExp);
			Fragments._MessageType__MessageType.initProperties(_MessageType);
			Fragments._Model__Model.initProperties(_Model);
			Fragments._MorePivotable__MorePivotable.initProperties(_MorePivotable);
			Fragments._Nameable__Nameable.initProperties(_Nameable);
			Fragments._NamedElement__NamedElement.initProperties(_NamedElement);
			Fragments._Namespace__Namespace.initProperties(_Namespace);
			Fragments._NavigationCallExp__NavigationCallExp.initProperties(_NavigationCallExp);
			Fragments._NullLiteralExp__NullLiteralExp.initProperties(_NullLiteralExp);
			Fragments._NumericLiteralExp__NumericLiteralExp.initProperties(_NumericLiteralExp);
			Fragments._OCLExpression__OCLExpression.initProperties(_OCLExpression);
			Fragments._Object__Object.initProperties(_Object);
			Fragments._Operation__Operation.initProperties(_Operation);
			Fragments._OperationCallExp__OperationCallExp.initProperties(_OperationCallExp);
			Fragments._OppositePropertyCallExp__OppositePropertyCallExp.initProperties(_OppositePropertyCallExp);
			Fragments._OrderedSetType__OrderedSetType.initProperties(_OrderedSetType);
			Fragments._OrphanCompletePackage__OrphanCompletePackage.initProperties(_OrphanCompletePackage);
			Fragments._Package__Package.initProperties(_Package);
			Fragments._Parameter__Parameter.initProperties(_Parameter);
			Fragments._ParameterVariable__ParameterVariable.initProperties(_ParameterVariable);
			Fragments._Pivotable__Pivotable.initProperties(_Pivotable);
			Fragments._Precedence__Precedence.initProperties(_Precedence);
			Fragments._PrimitiveCompletePackage__PrimitiveCompletePackage.initProperties(_PrimitiveCompletePackage);
			Fragments._PrimitiveLiteralExp__PrimitiveLiteralExp.initProperties(_PrimitiveLiteralExp);
			Fragments._PrimitiveType__PrimitiveType.initProperties(_PrimitiveType);
			Fragments._Profile__Profile.initProperties(_Profile);
			Fragments._ProfileApplication__ProfileApplication.initProperties(_ProfileApplication);
			Fragments._Property__Property.initProperties(_Property);
			Fragments._PropertyCallExp__PropertyCallExp.initProperties(_PropertyCallExp);
			Fragments._Pseudostate__Pseudostate.initProperties(_Pseudostate);
			Fragments._PseudostateKind__PseudostateKind.initProperties(_PseudostateKind);
			Fragments._RealLiteralExp__RealLiteralExp.initProperties(_RealLiteralExp);
			Fragments._ReferringElement__ReferringElement.initProperties(_ReferringElement);
			Fragments._Region__Region.initProperties(_Region);
			Fragments._ResultVariable__ResultVariable.initProperties(_ResultVariable);
			Fragments._SelfType__SelfType.initProperties(_SelfType);
			Fragments._SendSignalAction__SendSignalAction.initProperties(_SendSignalAction);
			Fragments._SequenceType__SequenceType.initProperties(_SequenceType);
			Fragments._SetType__SetType.initProperties(_SetType);
			Fragments._ShadowExp__ShadowExp.initProperties(_ShadowExp);
			Fragments._ShadowPart__ShadowPart.initProperties(_ShadowPart);
			Fragments._Signal__Signal.initProperties(_Signal);
			Fragments._Slot__Slot.initProperties(_Slot);
			Fragments._StandardLibrary__StandardLibrary.initProperties(_StandardLibrary);
			Fragments._State__State.initProperties(_State);
			Fragments._StateExp__StateExp.initProperties(_StateExp);
			Fragments._StateMachine__StateMachine.initProperties(_StateMachine);
			Fragments._Stereotype__Stereotype.initProperties(_Stereotype);
			Fragments._StereotypeExtender__StereotypeExtender.initProperties(_StereotypeExtender);
			Fragments._StringLiteralExp__StringLiteralExp.initProperties(_StringLiteralExp);
			Fragments._TemplateBinding__TemplateBinding.initProperties(_TemplateBinding);
			Fragments._TemplateParameter__TemplateParameter.initProperties(_TemplateParameter);
			Fragments._TemplateParameterSubstitution__TemplateParameterSubstitution.initProperties(_TemplateParameterSubstitution);
			Fragments._TemplateSignature__TemplateSignature.initProperties(_TemplateSignature);
			Fragments._TemplateableElement__TemplateableElement.initProperties(_TemplateableElement);
			Fragments._Throwable__Throwable.initProperties(_Throwable);
			Fragments._Transition__Transition.initProperties(_Transition);
			Fragments._TransitionKind__TransitionKind.initProperties(_TransitionKind);
			Fragments._Trigger__Trigger.initProperties(_Trigger);
			Fragments._TupleLiteralExp__TupleLiteralExp.initProperties(_TupleLiteralExp);
			Fragments._TupleLiteralPart__TupleLiteralPart.initProperties(_TupleLiteralPart);
			Fragments._TupleType__TupleType.initProperties(_TupleType);
			Fragments._Type__Type.initProperties(_Type);
			Fragments._TypeExp__TypeExp.initProperties(_TypeExp);
			Fragments._TypedElement__TypedElement.initProperties(_TypedElement);
			Fragments._UnlimitedNaturalLiteralExp__UnlimitedNaturalLiteralExp.initProperties(_UnlimitedNaturalLiteralExp);
			Fragments._UnspecifiedValueExp__UnspecifiedValueExp.initProperties(_UnspecifiedValueExp);
			Fragments._ValueSpecification__ValueSpecification.initProperties(_ValueSpecification);
			Fragments._Variable__Variable.initProperties(_Variable);
			Fragments._VariableDeclaration__VariableDeclaration.initProperties(_VariableDeclaration);
			Fragments._VariableExp__VariableExp.initProperties(_VariableExp);
			Fragments._Vertex__Vertex.initProperties(_Vertex);
			Fragments._Visitable__Visitable.initProperties(_Visitable);
			Fragments._VoidType__VoidType.initProperties(_VoidType);
			Fragments._WildcardType__WildcardType.initProperties(_WildcardType);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::FragmentProperties and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 *	The lists of enumeration literals for each enumeration.
	 */
	public static class EnumerationLiterals {
		static {
			Init.initStart();
			FragmentProperties.init();
		}

		public static final @NonNull EnumerationLiteral _AssociativityKind__left = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.ASSOCIATIVITY_KIND.getEEnumLiteral("left"), Types._AssociativityKind, 0);
		public static final @NonNull EnumerationLiteral _AssociativityKind__right = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.ASSOCIATIVITY_KIND.getEEnumLiteral("right"), Types._AssociativityKind, 1);
		private static final @NonNull EnumerationLiteral @NonNull [] _AssociativityKind = {
			_AssociativityKind__left,
			_AssociativityKind__right
		};

		public static final @NonNull EnumerationLiteral _CollectionKind__Collection = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("Collection"), Types._CollectionKind, 0);
		public static final @NonNull EnumerationLiteral _CollectionKind__Set = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("Set"), Types._CollectionKind, 1);
		public static final @NonNull EnumerationLiteral _CollectionKind__OrderedSet = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("OrderedSet"), Types._CollectionKind, 2);
		public static final @NonNull EnumerationLiteral _CollectionKind__Bag = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("Bag"), Types._CollectionKind, 3);
		public static final @NonNull EnumerationLiteral _CollectionKind__Sequence = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.COLLECTION_KIND.getEEnumLiteral("Sequence"), Types._CollectionKind, 4);
		private static final @NonNull EnumerationLiteral @NonNull [] _CollectionKind = {
			_CollectionKind__Collection,
			_CollectionKind__Set,
			_CollectionKind__OrderedSet,
			_CollectionKind__Bag,
			_CollectionKind__Sequence
		};

		public static final @NonNull EnumerationLiteral _PseudostateKind__initial = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("initial"), Types._PseudostateKind, 0);
		public static final @NonNull EnumerationLiteral _PseudostateKind__deepHistory = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("deepHistory"), Types._PseudostateKind, 1);
		public static final @NonNull EnumerationLiteral _PseudostateKind__shallowHistory = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("shallowHistory"), Types._PseudostateKind, 2);
		public static final @NonNull EnumerationLiteral _PseudostateKind__join = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("join"), Types._PseudostateKind, 3);
		public static final @NonNull EnumerationLiteral _PseudostateKind__fork = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("fork"), Types._PseudostateKind, 4);
		public static final @NonNull EnumerationLiteral _PseudostateKind__junction = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("junction"), Types._PseudostateKind, 5);
		public static final @NonNull EnumerationLiteral _PseudostateKind__choice = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("choice"), Types._PseudostateKind, 6);
		public static final @NonNull EnumerationLiteral _PseudostateKind__entryPoint = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("entryPoint"), Types._PseudostateKind, 7);
		public static final @NonNull EnumerationLiteral _PseudostateKind__exitPoint = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("exitPoint"), Types._PseudostateKind, 8);
		public static final @NonNull EnumerationLiteral _PseudostateKind__terminate = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.PSEUDOSTATE_KIND.getEEnumLiteral("terminate"), Types._PseudostateKind, 9);
		private static final @NonNull EnumerationLiteral @NonNull [] _PseudostateKind = {
			_PseudostateKind__initial,
			_PseudostateKind__deepHistory,
			_PseudostateKind__shallowHistory,
			_PseudostateKind__join,
			_PseudostateKind__fork,
			_PseudostateKind__junction,
			_PseudostateKind__choice,
			_PseudostateKind__entryPoint,
			_PseudostateKind__exitPoint,
			_PseudostateKind__terminate
		};

		public static final @NonNull EnumerationLiteral _TransitionKind__internal = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral("internal"), Types._TransitionKind, 0);
		public static final @NonNull EnumerationLiteral _TransitionKind__local = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral("local"), Types._TransitionKind, 1);
		public static final @NonNull EnumerationLiteral _TransitionKind__external = LIBRARY.createEnumerationLiteral(PivotPackage.Literals.TRANSITION_KIND.getEEnumLiteral("external"), Types._TransitionKind, 2);
		private static final @NonNull EnumerationLiteral @NonNull [] _TransitionKind = {
			_TransitionKind__internal,
			_TransitionKind__local,
			_TransitionKind__external
		};

		/**
		 *	Install the enumeration literals in the enumerations.
		 */
		static {
			LIBRARY.initLiterals(Types._AssociativityKind, _AssociativityKind);
			LIBRARY.initLiterals(Types._CollectionKind, _CollectionKind);
			LIBRARY.initLiterals(Types._PseudostateKind, _PseudostateKind);
			LIBRARY.initLiterals(Types._TransitionKind, _TransitionKind);

			Init.initEnd();
		}

		/**
		 * Force initialization of the fields of PivotTables::EnumerationLiterals and all preceding sub-packages.
		 */
		public static void init() {}
	}

	/**
	 * The multiple packages above avoid problems with the Java 65536 byte limit but introduce a difficulty in ensuring that
	 * static construction occurs in the disciplined order of the packages when construction may start in any of the packages.
	 * The problem is resolved by ensuring that the static construction of each package first initializes its immediate predecessor.
	 * On completion of predecessor initialization, the residual packages are initialized by starting an initialization in the last package.
	 * This class maintains a count so that the various predecessors can distinguish whether they are the starting point and so
	 * ensure that residual construction occurs just once after all predecessors.
	 */
	private static class Init {
		/**
		 * Counter of nested static constructions. On return to zero residual construction starts. -ve once residual construction started.
		 */
		private static int initCount = 0;

		/**
		 * Invoked at the start of a static construction to defer residual construction until primary constructions complete.
		 */
		private static void initStart() {
			if (initCount >= 0) {
				initCount++;
			}
		}

		/**
		 * Invoked at the end of a static construction to activate residual construction once primary constructions complete.
		 */
		private static void initEnd() {
			if (initCount > 0) {
				if (--initCount == 0) {
					initCount = -1;
					EnumerationLiterals.init();
				}
			}
		}
	}

	static {
		Init.initEnd();
	}

	/*
	 * Force initialization of outer fields. Inner fields are lazily initialized.
	 */
	public static void init() {
		new PivotTables();
	}

	private PivotTables() {
		super(PivotPackage.eNS_URI);
	}
}
