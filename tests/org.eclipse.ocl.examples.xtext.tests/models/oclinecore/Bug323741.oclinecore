import ecore : 'http://www.eclipse.org/emf/2002/Ecore#/';

package my : my = 'http://my/1.0'
{
    class Model
    {
        property bs : BType[*] { composes };
    }
    class Entity
    {
        attribute name : String[?];
    }
    class AType extends Entity
    {
        operation selfReferences() : Sequence(BType[*|1])
        {
            body: BType.allInstances()->select(references->includes(self))->asSequence();
        }
        operation referenced() : BType[?] 
        {
            body: let selfReferences = selfReferences()
            in if selfReferences->notEmpty() then selfReferences->first() else null endif;
        }
        attribute referencedAttr : BType[?] { derived,volatile,transient,readonly }
        {
            derivation: let selfReferences = selfReferences()
            in if selfReferences->notEmpty() then selfReferences->first() else null endif;
        }

    }
    class BType extends Entity
    {
        property references : AType[*] { composes };
    }
}
