/*******************************************************************************
 * Copyright (c) 2010, 2011 Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * Run As->MWE2 Workflow to regenerate the editor.
 * If it fails with a stack dump, open the Xtext file and do
 * a dummy edit. Generally there is an error in the source file.
 *******************************************************************************/
module GenerateOCLinEcoreEditor

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.xtext.xtext.generator.ui.codemining.CodeMiningFragment

var oclInEcoreProjectName = "org.eclipse.ocl.xtext.oclinecore"
var oclInEcoreRuntimeProject = "../../plugins/${oclInEcoreProjectName}"

var rootPath = "../../plugins"

/**
 *	Generate the OCLinEcore Editor.
 */
Workflow {
    bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
		scanClassPath = true
		platformUri = ".."
		registerGeneratedEPackage = "org.eclipse.ocl.xtext.essentialoclcs.EssentialOCLCSPackage"
		registerGeneratedEPackage = "org.eclipse.ocl.xtext.oclinecorecs.OCLinEcoreCSPackage"
		registerGenModelFile = "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.ocl.xtext.oclinecore/model/OCLinEcoreCS.genmodel"
	}
	
	component = XtextGenerator {
		standaloneSetup = XtextGeneratorStandaloneSetup {
			scanClasspath = false
		}
		configuration = org.eclipse.ocl.examples.build.fragments.MyDefaultGeneratorModule {
			project = org.eclipse.ocl.examples.build.fragments.MyStandardProjectConfig {
				activatorName = "OCLinEcoreActivator"
				baseName = "${oclInEcoreProjectName}"
				rootPath = rootPath
				runtimeTest = {
					enabled = false
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = false
				}
				genericIde = {
					enabled = true
					name = "${oclInEcoreProjectName}.ui"
				}
				createEclipseMetaData = true
			}
			code = {
				preferXtendStubs = false
				encoding = "UTF-8"
				fileHeader =
"/*******************************************************************************
 * Copyright (c) 2011, \${year} Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *******************************************************************************/"
			}
		}
		language = StandardLanguage {
			name = "${oclInEcoreProjectName}.OCLinEcore"
			fileExtensions = "oclinecore"
			generator = null
			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				generateDeprecationValidation = false
			}
		/*	fragment = CodeMiningFragment {
				generateStub = true
				generateXtendStub = false
			} */
			parserGenerator = parser.antlr.XtextAntlrGeneratorFragment2 {
				options = parser.antlr.AntlrOptions {
					backtrack = true
					classSplitting = true
				}
			}
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.formatting.FormatterFragment {}
			}
			// EssentialOCL bindings 
			fragment = org.eclipse.ocl.examples.build.fragments.EssentialOCLFragment {}			
			// Support Markup and Hover text 
			fragment = org.eclipse.ocl.examples.build.fragments.MarkupHoverFragment {}
			// *.xtextbin support on Xtext 2.3		
			fragment = org.eclipse.ocl.examples.build.fragments.CompatibilityFragment {}			
		}
	}
	component = org.eclipse.ocl.examples.build.xtend.GenerateGrammarXtend {
		javaFolder = "${oclInEcoreRuntimeProject}/src-gen"
		javaPackageName = "${oclInEcoreProjectName}"
		grammarFileStem = "OCLinEcore"
	}
	component = org.eclipse.ocl.examples.build.utilities.InjectCompatibilityAbstractInternalAntlrParser {
		fileName = "${oclInEcoreRuntimeProject}/src-gen/org/eclipse/ocl/xtext/oclinecore/parser/antlr/internal/InternalOCLinEcoreParser.java"
	}
	component = org.eclipse.ocl.examples.build.utilities.ConvertToUnixLineEndings {
		directory = "${oclInEcoreRuntimeProject}/src-gen"
	}
	component = org.eclipse.ocl.examples.build.utilities.ConvertToUnixLineEndings {
		directory = "${oclInEcoreRuntimeProject}.ui/src-gen"
	}
}
