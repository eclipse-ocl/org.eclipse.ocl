/*******************************************************************************
 * Copyright (c) 2014 Willink Transformations and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *     Adolfo Sanchez-Barbudo Herrera (University of York) - bug397429"
 * 
 * Run As->MWE2 Workflow to regenerate the Xtest CS models.
 *******************************************************************************/
module GenerateCSModelsFromUML

import org.eclipse.ocl.examples.build.*
import org.eclipse.ocl.examples.build.utilities.*
import org.eclipse.ocl.examples.build.xtend.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.emf.mwe.utils.*
import org.eclipse.emf.ecore.resource.impl.*

var resourcesProjectName = "org.eclipse.ocl.examples.build" //"org.eclipse.ocl.resources"
var projectName = "org.eclipse.ocl.examples.build"
var modelSrc = "cs-model"
var modelGen = "cs-gen"
var ecoreSlot = "ecore"

/**
 *	Migrate the CS models from their OMG UML representation to their Eclipse Ecore representation.
 */
Workflow {
	bean = ResourceSetImpl : resourceSet {}
    bean = StandaloneSetup { resourceSet = resourceSet
//    	uriMap = Mapping {
//    		from = "http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi"
//    		to = "platform:/resource/${projectName}/model/PrimitiveTypes.xmi"
//    	}
//    	platformUri = ".."
//    	scanClassPath = true
//    	registerGeneratedEPackage = "org.eclipse.xtext.common.types.TypesPackage"
    }
    bean = ProjectMapSetup { resourceSet = resourceSet }
    bean = UMLStandaloneSetup { resourceSet = resourceSet }
    bean = OCLStandaloneSetup { resourceSet = resourceSet
    	dynamicPackage = Mapping {
    		from = "http://www.eclipse.org/ocl/2012/UML2EcoreControl"
    		to = "platform:/resource/${projectName}/model/UML2EcoreControl.ecore#/"
    	}
    	dynamicPackage = Mapping {
    		from = "http://www.eclipse.org/ocl/2012/UML2EcoreMapping"
    		to = "platform:/resource/${projectName}/model/UML2EcoreMapping.ecore#/"
    	}
    }
    bean = OCLDelegateSetup { resourceSet = resourceSet }
    bean = GenModelSetup { resourceSet = resourceSet }
    bean = UMLGenModelSetup { resourceSet = resourceSet }
    
    
    component = IdAssigner { resourceSet = resourceSet skipOnErrors = true
    	assignFlatIds = false
    	normalizeEcore = true
//    	normalizePrimitives = "/${resourcesProjectName}/${modelSrc}/pivot.uml"
    	alphabeticize = true
    	removeEcoreStereotypes = true
    	removeProfileApplications = true
//    	mapping = Mapping {
//    		from = "/${projectName}/model/ecore.uml"
//    		to = "/${projectName}/${modelGen}/CSEcore.uml"
//    	}
    	mapping = Mapping {
    		from = "/${resourcesProjectName}/${modelSrc}/pivot.uml"
    		to = "/${projectName}/${modelGen}/CSPivot.uml"
    	}
    	mapping = Mapping {
    		from = "/${resourcesProjectName}/${modelSrc}/basecs.uml"
    		to = "/${projectName}/${modelGen}/BaseCS.uml"
    	}
    	mapping = Mapping {
    		from = "/${resourcesProjectName}/${modelSrc}/essentialoclcs.uml"
    		to = "/${projectName}/${modelGen}/EssentialOCLCS.uml"
    	}
    	mapping = Mapping {
    		from = "/${resourcesProjectName}/${modelSrc}/completeoclcs.uml"
    		to = "/${projectName}/${modelGen}/CompleteOCLCS.uml"
    	}
    	mapping = Mapping {
    		from = "/${resourcesProjectName}/${modelSrc}/oclstdlibcs.uml"
    		to = "/${projectName}/${modelGen}/OCLstdlibCS.uml"
    	}
    	mapping = Mapping {
    		from = "/${resourcesProjectName}/${modelSrc}/oclinecorecs.uml"
    		to = "/${projectName}/${modelGen}/OCLinEcoreCS.uml"
    	}
    }
    
    component = QVToTransformationExecutor { resourceSet = resourceSet skipOnErrors = true validate = false
    	uri = "platform:/resource/${projectName}/src/org/eclipse/ocl/examples/build/qvto/UML2EcoreMerger.qvto"
    	in = "platform:/resource/${projectName}/${modelSrc}/CS2ASinEcore.xmi" 
    	out = "platform:/resource/${projectName}/${modelGen}/CS2ASinEcore.xmi" 
	}
    component = QVToTransformationExecutor { resourceSet = resourceSet skipOnErrors = true validate = false
    	uri = "platform:/resource/${projectName}/src/org/eclipse/ocl/examples/build/qvto/UML2EcoreAnalyzer.qvto"
    	in = "platform:/resource/${projectName}/${modelGen}/CS2ASinEcore.xmi" 
    	out = "platform:/resource/${projectName}/${modelGen}/CS2ASAnalysis.xmi" 
	}
    component = QVToTransformationExecutor { resourceSet = resourceSet skipOnErrors = true validate = false
    	uri = "platform:/resource/${projectName}/src/org/eclipse/ocl/examples/build/qvto/UML2EcoreSynthesizer.qvto"
    	in = "platform:/resource/${projectName}/${modelGen}/CS2ASAnalysis.xmi" 
    	in = "http://www.eclipse.org/emf/2002/Ecore" 
    	out = "platform:/resource/${projectName}/${modelGen}/CS2AS.ecore"
    	blackbox = "${projectName}.qvto.BlackBoxLibrary"
	}
     component = CSSplitter { resourceSet = resourceSet skipOnErrors = true
    	in = "platform:/resource/${projectName}/${modelGen}/CS2AS.ecore" 
     	exclude = Mapping {
    		from = "csecore"
    		to = "http://www.eclipse.org/emf/2002/Ecore"
    	}
     	exclude = Mapping {
    		from = "cspivot"
//    		to = "platform:/resource/org.eclipse.ocl.pivot/model/Pivot.ecore"
    		to = "Pivot.ecore"
    	}
     	include = Mapping {
    		from = "basecs"
    		to = "platform:/resource/${projectName}/${modelGen}/BaseCS.ecore"
    	}
     	include = Mapping {
    		from = "essentialoclcs"
    		to = "platform:/resource/${projectName}/${modelGen}/EssentialOCLCS.ecore"
    	}
     	include = Mapping {
    		from = "completeoclcs"
    		to = "platform:/resource/${projectName}/${modelGen}/CompleteOCLCS.ecore"
    	}
     	include = Mapping {
    		from = "oclstdlibcs"
    		to = "platform:/resource/${projectName}/${modelGen}/OCLstdlibCS.ecore"
    	}
     	include = Mapping {
    		from = "oclinecorecs"
    		to = "platform:/resource/${projectName}/${modelGen}/OCLinEcoreCS.ecore"
    	}
	}
    
	bean = ResourceSetImpl : mergeResourceSet {}
    bean = ProjectMapSetup { resourceSet = mergeResourceSet }
    bean = OCLStandaloneSetup {}
//    bean = GenModelSetup { resourceSet = pivot2modelsResourceSet }
//    bean = UMLGenModelSetup { resourceSet = pivot2modelsResourceSet }
    bean = EcoreGenModelSetup { resourceSet = mergeResourceSet }
    component = ResourceReader { resourceSet = mergeResourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    	uri = "/${projectName}/${modelGen}/BaseCS.ecore"
	}
    component = ConstraintMerger { resourceSet = mergeResourceSet skipOnErrors = true
    	projectName = "${projectName}"
    	modelSlot = "${ecoreSlot}"
    	uri = "${modelSrc}/BaseCS.ocl"
    	invariantPrefix = "validate"
    }
    component = EPackageAlphabetizer { skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    }
//    component = PruneSuperClasses { skipOnErrors = true
//    	modelSlot = "${ecoreSlot}"
//    }
//    component = SetASmetamodel { skipOnErrors = true
//    	modelSlot = "${ecoreSlot}"
//    }
//    component = PivotWorkarounds { skipOnErrors = true
//    	modelSlot = "${ecoreSlot}"
//    }
//    component = OCLDelegateActivator { skipOnErrors = true
//    	modelSlot = "${pivotSlot}"
//    }
    component = ResourceWriter { resourceSet = mergeResourceSet skipOnErrors = true
    	modelSlot = "${ecoreSlot}"
    	uri = "/${projectName}/${modelGen}/BaseCSMerged.ecore"
    }
}
