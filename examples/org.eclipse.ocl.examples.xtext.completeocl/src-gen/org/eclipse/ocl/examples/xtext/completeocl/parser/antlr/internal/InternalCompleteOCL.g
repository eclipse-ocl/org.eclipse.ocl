/*
* generated by Xtext
*/
grammar InternalCompleteOCL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipse.ocl.examples.xtext.completeocl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.ocl.examples.xtext.completeocl.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.eclipse.ocl.examples.xtext.completeocl.services.CompleteOCLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private CompleteOCLGrammarAccess grammarAccess;
 	
    public InternalCompleteOCLParser(TokenStream input, IAstFactory factory, CompleteOCLGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/eclipse/ocl/examples/xtext/completeocl/parser/antlr/internal/InternalCompleteOCL.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CompleteOCLDocumentCS";	
   	}
   	
   	@Override
   	protected CompleteOCLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCompleteOCLDocumentCS
entryRuleCompleteOCLDocumentCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCompleteOCLDocumentCSRule(), currentNode); }
	 iv_ruleCompleteOCLDocumentCS=ruleCompleteOCLDocumentCS 
	 { $current=$iv_ruleCompleteOCLDocumentCS.current; } 
	 EOF 
;

// Rule CompleteOCLDocumentCS
ruleCompleteOCLDocumentCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompleteOCLDocumentCSAccess().getOwnedImportImportCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_ownedImport_0_0=ruleImportCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompleteOCLDocumentCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedImport",
	        		lv_ownedImport_0_0, 
	        		"ImportCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompleteOCLDocumentCSAccess().getPackagesPackageDeclarationCSParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_packages_1_0=rulePackageDeclarationCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompleteOCLDocumentCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"packages",
	        		lv_packages_1_0, 
	        		"PackageDeclarationCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCompleteOCLDocumentCSAccess().getContextsContextDeclCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_contexts_2_0=ruleContextDeclCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCompleteOCLDocumentCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"contexts",
	        		lv_contexts_2_0, 
	        		"ContextDeclCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleNavigationOperator
entryRuleNavigationOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigationOperatorRule(), currentNode); } 
	 iv_ruleNavigationOperator=ruleNavigationOperator 
	 { $current=$iv_ruleNavigationOperator.current.getText(); }  
	 EOF 
;

// Rule NavigationOperator
ruleNavigationOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNavigationOperatorAccess().getEssentialOCLNavigationOperatorParserRuleCall_0(), currentNode); 
    }
    this_EssentialOCLNavigationOperator_0=ruleEssentialOCLNavigationOperator    {
		$current.merge(this_EssentialOCLNavigationOperator_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNavigationOperatorAccess().getCircumflexAccentKeyword_1(), null); 
    }

    |
	kw='^^' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNavigationOperatorAccess().getCircumflexAccentCircumflexAccentKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleUnrestrictedName
entryRuleUnrestrictedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnrestrictedNameRule(), currentNode); } 
	 iv_ruleUnrestrictedName=ruleUnrestrictedName 
	 { $current=$iv_ruleUnrestrictedName.current.getText(); }  
	 EOF 
;

// Rule UnrestrictedName
ruleUnrestrictedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getUnrestrictedNameAccess().getEssentialOCLUnrestrictedNameParserRuleCall_0(), currentNode); 
    }
    this_EssentialOCLUnrestrictedName_0=ruleEssentialOCLUnrestrictedName    {
		$current.merge(this_EssentialOCLUnrestrictedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |
	kw='body' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnrestrictedNameAccess().getBodyKeyword_1(), null); 
    }

    |
	kw='context' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnrestrictedNameAccess().getContextKeyword_2(), null); 
    }

    |
	kw='def' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnrestrictedNameAccess().getDefKeyword_3(), null); 
    }

    |
	kw='derive' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnrestrictedNameAccess().getDeriveKeyword_4(), null); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnrestrictedNameAccess().getImportKeyword_5(), null); 
    }

    |
	kw='init' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnrestrictedNameAccess().getInitKeyword_6(), null); 
    }

    |
	kw='inv' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnrestrictedNameAccess().getInvKeyword_7(), null); 
    }
)
    ;





// Entry rule entryRulePrimitiveTypeIdentifier
entryRulePrimitiveTypeIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeIdentifierRule(), currentNode); } 
	 iv_rulePrimitiveTypeIdentifier=rulePrimitiveTypeIdentifier 
	 { $current=$iv_rulePrimitiveTypeIdentifier.current.getText(); }  
	 EOF 
;

// Rule PrimitiveTypeIdentifier
rulePrimitiveTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Boolean' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getBooleanKeyword_0(), null); 
    }

    |
	kw='Integer' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getIntegerKeyword_1(), null); 
    }

    |
	kw='Real' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getRealKeyword_2(), null); 
    }

    |
	kw='String' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getStringKeyword_3(), null); 
    }

    |
	kw='UnlimitedNatural' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getUnlimitedNaturalKeyword_4(), null); 
    }

    |
	kw='OclAny' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getOclAnyKeyword_5(), null); 
    }

    |
	kw='OclInvalid' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getOclInvalidKeyword_6(), null); 
    }

    |
	kw='OclMessage' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getOclMessageKeyword_7(), null); 
    }

    |
	kw='OclState' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getOclStateKeyword_8(), null); 
    }

    |
	kw='OclVoid' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getPrimitiveTypeIdentifierAccess().getOclVoidKeyword_9(), null); 
    }
)
    ;





// Entry rule entryRuleBodyCS
entryRuleBodyCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBodyCSRule(), currentNode); }
	 iv_ruleBodyCS=ruleBodyCS 
	 { $current=$iv_ruleBodyCS.current; } 
	 EOF 
;

// Rule BodyCS
ruleBodyCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'body' 
    {
        createLeafNode(grammarAccess.getBodyCSAccess().getBodyKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBodyCSAccess().getNameUnrestrictedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getBodyCSAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBodyCSAccess().getOwnedExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_ownedExpression_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBodyCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleClassifierContextDeclCS
entryRuleClassifierContextDeclCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassifierContextDeclCSRule(), currentNode); }
	 iv_ruleClassifierContextDeclCS=ruleClassifierContextDeclCS 
	 { $current=$iv_ruleClassifierContextDeclCS.current; } 
	 EOF 
;

// Rule ClassifierContextDeclCS
ruleClassifierContextDeclCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'context' 
    {
        createLeafNode(grammarAccess.getClassifierContextDeclCSAccess().getContextKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifierContextDeclCSAccess().getSelfNameUnrestrictedNameParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_selfName_1_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifierContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"selfName",
	        		lv_selfName_1_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getClassifierContextDeclCSAccess().getColonKeyword_1_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifierContextDeclCSAccess().getClassifierClassifierRefCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_classifier_3_0=ruleClassifierRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifierContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"classifier",
	        		lv_classifier_3_0, 
	        		"ClassifierRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifierContextDeclCSAccess().getInvsInvCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_invs_4_0=ruleInvCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifierContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"invs",
	        		lv_invs_4_0, 
	        		"InvCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassifierContextDeclCSAccess().getDefsDefCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_defs_5_0=ruleDefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassifierContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"defs",
	        		lv_defs_5_0, 
	        		"DefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleClassifierRefCS
entryRuleClassifierRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassifierRefCSRule(), currentNode); }
	 iv_ruleClassifierRefCS=ruleClassifierRefCS 
	 { $current=$iv_ruleClassifierRefCS.current; } 
	 EOF 
;

// Rule ClassifierRefCS
ruleClassifierRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierRefCSAccess().getQualifiedClassifierRefCSParserRuleCall_0(), currentNode); 
    }
    this_QualifiedClassifierRefCS_0=ruleQualifiedClassifierRefCS
    { 
        $current = $this_QualifiedClassifierRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getClassifierRefCSAccess().getSimpleClassifierRefCSParserRuleCall_1(), currentNode); 
    }
    this_SimpleClassifierRefCS_1=ruleSimpleClassifierRefCS
    { 
        $current = $this_SimpleClassifierRefCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleContextDeclCS
entryRuleContextDeclCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getContextDeclCSRule(), currentNode); }
	 iv_ruleContextDeclCS=ruleContextDeclCS 
	 { $current=$iv_ruleContextDeclCS.current; } 
	 EOF 
;

// Rule ContextDeclCS
ruleContextDeclCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContextDeclCSAccess().getPropertyContextDeclCSParserRuleCall_0(), currentNode); 
    }
    this_PropertyContextDeclCS_0=rulePropertyContextDeclCS
    { 
        $current = $this_PropertyContextDeclCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContextDeclCSAccess().getClassifierContextDeclCSParserRuleCall_1(), currentNode); 
    }
    this_ClassifierContextDeclCS_1=ruleClassifierContextDeclCS
    { 
        $current = $this_ClassifierContextDeclCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getContextDeclCSAccess().getOperationContextDeclCSParserRuleCall_2(), currentNode); 
    }
    this_OperationContextDeclCS_2=ruleOperationContextDeclCS
    { 
        $current = $this_OperationContextDeclCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleDefCS
entryRuleDefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDefCSRule(), currentNode); }
	 iv_ruleDefCS=ruleDefCS 
	 { $current=$iv_ruleDefCS.current; } 
	 EOF 
;

// Rule DefCS
ruleDefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_static_0_0=	'static' 
    {
        createLeafNode(grammarAccess.getDefCSAccess().getStaticStaticKeyword_0_0(), "static"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "static", true, "static", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'def' 
    {
        createLeafNode(grammarAccess.getDefCSAccess().getDefKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefCSAccess().getNameUnrestrictedNameParserRuleCall_2_0(), currentNode); 
	    }
		lv_name_2_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getDefCSAccess().getColonKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefCSAccess().getConstrainedNameUnrestrictedNameParserRuleCall_4_0(), currentNode); 
	    }
		lv_constrainedName_4_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"constrainedName",
	        		lv_constrainedName_4_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getDefCSAccess().getLeftParenthesisKeyword_5_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefCSAccess().getParametersParameterCSParserRuleCall_5_1_0_0(), currentNode); 
	    }
		lv_parameters_6_0=ruleParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_6_0, 
	        		"ParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getDefCSAccess().getCommaKeyword_5_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefCSAccess().getParametersParameterCSParserRuleCall_5_1_1_1_0(), currentNode); 
	    }
		lv_parameters_8_0=ruleParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_8_0, 
	        		"ParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getDefCSAccess().getRightParenthesisKeyword_5_2(), null); 
    }
)?	':' 
    {
        createLeafNode(grammarAccess.getDefCSAccess().getColonKeyword_6(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefCSAccess().getOwnedTypeTypeExpCSParserRuleCall_7_0(), currentNode); 
	    }
		lv_ownedType_11_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_11_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	'=' 
    {
        createLeafNode(grammarAccess.getDefCSAccess().getEqualsSignKeyword_8(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDefCSAccess().getOwnedExpressionExpCSParserRuleCall_9_0(), currentNode); 
	    }
		lv_ownedExpression_13_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_13_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleDerCS
entryRuleDerCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDerCSRule(), currentNode); }
	 iv_ruleDerCS=ruleDerCS 
	 { $current=$iv_ruleDerCS.current; } 
	 EOF 
;

// Rule DerCS
ruleDerCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'derive' 
    {
        createLeafNode(grammarAccess.getDerCSAccess().getStereotypeDeriveKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "derive", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getDerCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDerCSAccess().getOwnedExpressionExpCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_ownedExpression_2_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDerCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_2_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleImportCS
entryRuleImportCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getImportCSRule(), currentNode); }
	 iv_ruleImportCS=ruleImportCS 
	 { $current=$iv_ruleImportCS.current; } 
	 EOF 
;

// Rule ImportCS
ruleImportCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'import' 
    {
        createLeafNode(grammarAccess.getImportCSAccess().getImportKeyword_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getImportCSAccess().getNameIdentifierParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getImportCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"Identifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getImportCSAccess().getColonKeyword_1_1(), null); 
    }
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getImportCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_SINGLE_QUOTED_STRING
	{
		createLeafNode(grammarAccess.getImportCSAccess().getNamespaceNamespaceCrossReference_2_0(), "namespace"); 
	}

)
))
;





// Entry rule entryRuleInitCS
entryRuleInitCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInitCSRule(), currentNode); }
	 iv_ruleInitCS=ruleInitCS 
	 { $current=$iv_ruleInitCS.current; } 
	 EOF 
;

// Rule InitCS
ruleInitCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'init' 
    {
        createLeafNode(grammarAccess.getInitCSAccess().getStereotypeInitKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "init", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getInitCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInitCSAccess().getOwnedExpressionExpCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_ownedExpression_2_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInitCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_2_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleInvCS
entryRuleInvCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvCSRule(), currentNode); }
	 iv_ruleInvCS=ruleInvCS 
	 { $current=$iv_ruleInvCS.current; } 
	 EOF 
;

// Rule InvCS
ruleInvCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'inv' 
    {
        createLeafNode(grammarAccess.getInvCSAccess().getStereotypeInvKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "inv", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvCSAccess().getNameUnrestrictedNameParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_name_1_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getInvCSAccess().getLeftParenthesisKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvCSAccess().getOwnedReasonExpCSParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_ownedReason_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedReason",
	        		lv_ownedReason_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getInvCSAccess().getRightParenthesisKeyword_1_1_2(), null); 
    }
)?)?	':' 
    {
        createLeafNode(grammarAccess.getInvCSAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInvCSAccess().getOwnedExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_ownedExpression_6_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInvCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_6_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleOperationContextDeclCS
entryRuleOperationContextDeclCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationContextDeclCSRule(), currentNode); }
	 iv_ruleOperationContextDeclCS=ruleOperationContextDeclCS 
	 { $current=$iv_ruleOperationContextDeclCS.current; } 
	 EOF 
;

// Rule OperationContextDeclCS
ruleOperationContextDeclCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'context' 
    {
        createLeafNode(grammarAccess.getOperationContextDeclCSAccess().getContextKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclCSAccess().getOperationOperationRefCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_operation_1_0=ruleOperationRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"operation",
	        		lv_operation_1_0, 
	        		"OperationRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getOperationContextDeclCSAccess().getLeftParenthesisKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclCSAccess().getParametersParameterCSParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_parameters_3_0=ruleParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_3_0, 
	        		"ParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getOperationContextDeclCSAccess().getCommaKeyword_3_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclCSAccess().getParametersParameterCSParserRuleCall_3_1_1_0(), currentNode); 
	    }
		lv_parameters_5_0=ruleParameterCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parameters",
	        		lv_parameters_5_0, 
	        		"ParameterCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getOperationContextDeclCSAccess().getRightParenthesisKeyword_4(), null); 
    }
	':' 
    {
        createLeafNode(grammarAccess.getOperationContextDeclCSAccess().getColonKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclCSAccess().getOwnedTypeTypeExpCSParserRuleCall_6_0(), currentNode); 
	    }
		lv_ownedType_8_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_8_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclCSAccess().getPresPreCSParserRuleCall_7_0_0(), currentNode); 
	    }
		lv_pres_9_0=rulePreCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"pres",
	        		lv_pres_9_0, 
	        		"PreCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclCSAccess().getPostsPostCSParserRuleCall_7_1_0(), currentNode); 
	    }
		lv_posts_10_0=rulePostCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"posts",
	        		lv_posts_10_0, 
	        		"PostCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperationContextDeclCSAccess().getBodiesBodyCSParserRuleCall_7_2_0(), currentNode); 
	    }
		lv_bodies_11_0=ruleBodyCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperationContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"bodies",
	        		lv_bodies_11_0, 
	        		"BodyCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleOperationRefCS
entryRuleOperationRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperationRefCSRule(), currentNode); }
	 iv_ruleOperationRefCS=ruleOperationRefCS 
	 { $current=$iv_ruleOperationRefCS.current; } 
	 EOF 
;

// Rule OperationRefCS
ruleOperationRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOperationRefCSAccess().getQualifiedOperationRefCSParserRuleCall_0(), currentNode); 
    }
    this_QualifiedOperationRefCS_0=ruleQualifiedOperationRefCS
    { 
        $current = $this_QualifiedOperationRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getOperationRefCSAccess().getSimpleOperationRefCSParserRuleCall_1(), currentNode); 
    }
    this_SimpleOperationRefCS_1=ruleSimpleOperationRefCS
    { 
        $current = $this_SimpleOperationRefCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRulePackageDeclarationCS
entryRulePackageDeclarationCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageDeclarationCSRule(), currentNode); }
	 iv_rulePackageDeclarationCS=rulePackageDeclarationCS 
	 { $current=$iv_rulePackageDeclarationCS.current; } 
	 EOF 
;

// Rule PackageDeclarationCS
rulePackageDeclarationCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'package' 
    {
        createLeafNode(grammarAccess.getPackageDeclarationCSAccess().getPackageKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageDeclarationCSAccess().getPackagePackageRefCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_package_1_0=rulePackageRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageDeclarationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"package",
	        		lv_package_1_0, 
	        		"PackageRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPackageDeclarationCSAccess().getContextsContextDeclCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_contexts_2_0=ruleContextDeclCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPackageDeclarationCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"contexts",
	        		lv_contexts_2_0, 
	        		"ContextDeclCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'endpackage' 
    {
        createLeafNode(grammarAccess.getPackageDeclarationCSAccess().getEndpackageKeyword_3(), null); 
    }
)
;





// Entry rule entryRulePackageRefCS
entryRulePackageRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPackageRefCSRule(), currentNode); }
	 iv_rulePackageRefCS=rulePackageRefCS 
	 { $current=$iv_rulePackageRefCS.current; } 
	 EOF 
;

// Rule PackageRefCS
rulePackageRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageRefCSAccess().getQualifiedPackageRefCSParserRuleCall_0(), currentNode); 
    }
    this_QualifiedPackageRefCS_0=ruleQualifiedPackageRefCS
    { 
        $current = $this_QualifiedPackageRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPackageRefCSAccess().getSimplePackageRefCSParserRuleCall_1(), currentNode); 
    }
    this_SimplePackageRefCS_1=ruleSimplePackageRefCS
    { 
        $current = $this_SimplePackageRefCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleParameterCS
entryRuleParameterCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParameterCSRule(), currentNode); }
	 iv_ruleParameterCS=ruleParameterCS 
	 { $current=$iv_ruleParameterCS.current; } 
	 EOF 
;

// Rule ParameterCS
ruleParameterCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getNameUnrestrictedNameParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getParameterCSAccess().getColonKeyword_0_1(), null); 
    }
)?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getParameterCSAccess().getOwnedTypeTypeExpCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_ownedType_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParameterCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePostCS
entryRulePostCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPostCSRule(), currentNode); }
	 iv_rulePostCS=rulePostCS 
	 { $current=$iv_rulePostCS.current; } 
	 EOF 
;

// Rule PostCS
rulePostCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'post' 
    {
        createLeafNode(grammarAccess.getPostCSAccess().getStereotypePostKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "post", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostCSAccess().getNameUnrestrictedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getPostCSAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostCSAccess().getOwnedExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_ownedExpression_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePreCS
entryRulePreCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPreCSRule(), currentNode); }
	 iv_rulePreCS=rulePreCS 
	 { $current=$iv_rulePreCS.current; } 
	 EOF 
;

// Rule PreCS
rulePreCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_stereotype_0_0=	'pre' 
    {
        createLeafNode(grammarAccess.getPreCSAccess().getStereotypePreKeyword_0_0(), "stereotype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "stereotype", lv_stereotype_0_0, "pre", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreCSAccess().getNameUnrestrictedNameParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	':' 
    {
        createLeafNode(grammarAccess.getPreCSAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPreCSAccess().getOwnedExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_ownedExpression_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPreCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePropertyContextDeclCS
entryRulePropertyContextDeclCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyContextDeclCSRule(), currentNode); }
	 iv_rulePropertyContextDeclCS=rulePropertyContextDeclCS 
	 { $current=$iv_rulePropertyContextDeclCS.current; } 
	 EOF 
;

// Rule PropertyContextDeclCS
rulePropertyContextDeclCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'context' 
    {
        createLeafNode(grammarAccess.getPropertyContextDeclCSAccess().getContextKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclCSAccess().getPropertyPropertyRefCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_property_1_0=rulePropertyRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"property",
	        		lv_property_1_0, 
	        		"PropertyRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getPropertyContextDeclCSAccess().getColonKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclCSAccess().getOwnedTypeTypeExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_ownedType_3_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_3_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclCSAccess().getInitInitCSParserRuleCall_4_0_0_0(), currentNode); 
	    }
		lv_init_4_0=ruleInitCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_4_0, 
	        		"InitCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclCSAccess().getDerDerCSParserRuleCall_4_0_1_0(), currentNode); 
	    }
		lv_der_5_0=ruleDerCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"der",
	        		lv_der_5_0, 
	        		"DerCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)?
    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclCSAccess().getDerDerCSParserRuleCall_4_1_0_0(), currentNode); 
	    }
		lv_der_6_0=ruleDerCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"der",
	        		lv_der_6_0, 
	        		"DerCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPropertyContextDeclCSAccess().getInitInitCSParserRuleCall_4_1_1_0(), currentNode); 
	    }
		lv_init_7_0=ruleInitCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPropertyContextDeclCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_7_0, 
	        		"InitCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?)))
;





// Entry rule entryRulePropertyRefCS
entryRulePropertyRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPropertyRefCSRule(), currentNode); }
	 iv_rulePropertyRefCS=rulePropertyRefCS 
	 { $current=$iv_rulePropertyRefCS.current; } 
	 EOF 
;

// Rule PropertyRefCS
rulePropertyRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyRefCSAccess().getQualifiedPropertyRefCSParserRuleCall_0(), currentNode); 
    }
    this_QualifiedPropertyRefCS_0=ruleQualifiedPropertyRefCS
    { 
        $current = $this_QualifiedPropertyRefCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPropertyRefCSAccess().getSimplePropertyRefCSParserRuleCall_1(), currentNode); 
    }
    this_SimplePropertyRefCS_1=ruleSimplePropertyRefCS
    { 
        $current = $this_SimplePropertyRefCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleQualifiedClassifierRefCS
entryRuleQualifiedClassifierRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedClassifierRefCSRule(), currentNode); }
	 iv_ruleQualifiedClassifierRefCS=ruleQualifiedClassifierRefCS 
	 { $current=$iv_ruleQualifiedClassifierRefCS.current; } 
	 EOF 
;

// Rule QualifiedClassifierRefCS
ruleQualifiedClassifierRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedClassifierRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedClassifierRefCSAccess().getNamespaceNamespaceCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getQualifiedClassifierRefCSAccess().getColonColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedClassifierRefCSAccess().getElementClassifierRefCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=ruleClassifierRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedClassifierRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"ClassifierRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedOperationRefCS
entryRuleQualifiedOperationRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedOperationRefCSRule(), currentNode); }
	 iv_ruleQualifiedOperationRefCS=ruleQualifiedOperationRefCS 
	 { $current=$iv_ruleQualifiedOperationRefCS.current; } 
	 EOF 
;

// Rule QualifiedOperationRefCS
ruleQualifiedOperationRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedOperationRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedOperationRefCSAccess().getNamespaceNamespaceCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getQualifiedOperationRefCSAccess().getColonColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedOperationRefCSAccess().getElementOperationRefCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=ruleOperationRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedOperationRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"OperationRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedPropertyRefCS
entryRuleQualifiedPropertyRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedPropertyRefCSRule(), currentNode); }
	 iv_ruleQualifiedPropertyRefCS=ruleQualifiedPropertyRefCS 
	 { $current=$iv_ruleQualifiedPropertyRefCS.current; } 
	 EOF 
;

// Rule QualifiedPropertyRefCS
ruleQualifiedPropertyRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedPropertyRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedPropertyRefCSAccess().getNamespaceNamespaceCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getQualifiedPropertyRefCSAccess().getColonColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedPropertyRefCSAccess().getElementPropertyRefCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=rulePropertyRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedPropertyRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"PropertyRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQualifiedPackageRefCS
entryRuleQualifiedPackageRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedPackageRefCSRule(), currentNode); }
	 iv_ruleQualifiedPackageRefCS=ruleQualifiedPackageRefCS 
	 { $current=$iv_ruleQualifiedPackageRefCS.current; } 
	 EOF 
;

// Rule QualifiedPackageRefCS
ruleQualifiedPackageRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedPackageRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedPackageRefCSAccess().getNamespaceNamespaceCrossReference_0_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getQualifiedPackageRefCSAccess().getColonColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQualifiedPackageRefCSAccess().getElementPackageRefCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_element_2_0=rulePackageRefCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedPackageRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"element",
	        		lv_element_2_0, 
	        		"PackageRefCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleSimpleClassifierRefCS
entryRuleSimpleClassifierRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleClassifierRefCSRule(), currentNode); }
	 iv_ruleSimpleClassifierRefCS=ruleSimpleClassifierRefCS 
	 { $current=$iv_ruleSimpleClassifierRefCS.current; } 
	 EOF 
;

// Rule SimpleClassifierRefCS
ruleSimpleClassifierRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleClassifierRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleClassifierRefCSAccess().getClassifierClassifierCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSimpleOperationRefCS
entryRuleSimpleOperationRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimpleOperationRefCSRule(), currentNode); }
	 iv_ruleSimpleOperationRefCS=ruleSimpleOperationRefCS 
	 { $current=$iv_ruleSimpleOperationRefCS.current; } 
	 EOF 
;

// Rule SimpleOperationRefCS
ruleSimpleOperationRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSimpleOperationRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimpleOperationRefCSAccess().getOperationOperationCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSimplePackageRefCS
entryRuleSimplePackageRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimplePackageRefCSRule(), currentNode); }
	 iv_ruleSimplePackageRefCS=ruleSimplePackageRefCS 
	 { $current=$iv_ruleSimplePackageRefCS.current; } 
	 EOF 
;

// Rule SimplePackageRefCS
ruleSimplePackageRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSimplePackageRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimplePackageRefCSAccess().getPackagePackageCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleSimplePropertyRefCS
entryRuleSimplePropertyRefCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSimplePropertyRefCSRule(), currentNode); }
	 iv_ruleSimplePropertyRefCS=ruleSimplePropertyRefCS 
	 { $current=$iv_ruleSimplePropertyRefCS.current; } 
	 EOF 
;

// Rule SimplePropertyRefCS
ruleSimplePropertyRefCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getSimplePropertyRefCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getSimplePropertyRefCSAccess().getFeatureStructuralFeatureCSCrossReference_0(), currentNode); 
	    }
		ruleIdentifier		{ 
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleNavigatingExpCS_Base
entryRuleNavigatingExpCS_Base returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingExpCS_BaseRule(), currentNode); }
	 iv_ruleNavigatingExpCS_Base=ruleNavigatingExpCS_Base 
	 { $current=$iv_ruleNavigatingExpCS_Base.current; } 
	 EOF 
;

// Rule NavigatingExpCS_Base
ruleNavigatingExpCS_Base returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCS_BaseAccess().getIndexExpCSParserRuleCall_0(), currentNode); 
    }
    this_IndexExpCS_0=ruleIndexExpCS
    { 
        $current = $this_IndexExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigatingExpCS_BaseAccess().getPreExpCSNamedExpAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "namedExp", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigatingExpCS_BaseAccess().getPreExpCSNamedExpAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'@' 
    {
        createLeafNode(grammarAccess.getNavigatingExpCS_BaseAccess().getCommercialAtKeyword_1_1(), null); 
    }
	'pre' 
    {
        createLeafNode(grammarAccess.getNavigatingExpCS_BaseAccess().getPreKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleNavigatingArgExpCS
entryRuleNavigatingArgExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingArgExpCSRule(), currentNode); }
	 iv_ruleNavigatingArgExpCS=ruleNavigatingArgExpCS 
	 { $current=$iv_ruleNavigatingArgExpCS.current; } 
	 EOF 
;

// Rule NavigatingArgExpCS
ruleNavigatingArgExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigatingArgExpCSAccess().getOclMessageArgCSAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigatingArgExpCSAccess().getOclMessageArgCSAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'?' 
    {
        createLeafNode(grammarAccess.getNavigatingArgExpCSAccess().getQuestionMarkKeyword_0_1(), null); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNavigatingArgExpCSAccess().getExpCSParserRuleCall_1(), currentNode); 
    }
    this_ExpCS_2=ruleExpCS
    { 
        $current = $this_ExpCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;







// Entry rule entryRuleNUMBER_LITERAL
entryRuleNUMBER_LITERAL returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNUMBER_LITERALRule(), currentNode); } 
	 iv_ruleNUMBER_LITERAL=ruleNUMBER_LITERAL 
	 { $current=$iv_ruleNUMBER_LITERAL.current.getText(); }  
	 EOF 
;

// Rule NUMBER_LITERAL
ruleNUMBER_LITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_0(), null); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getFullStopKeyword_1_0(), null); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_1_1(), null); 
    }
)?((
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getEKeyword_2_0_0(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getEKeyword_2_0_1(), null); 
    }
)(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getPlusSignKeyword_2_1_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getHyphenMinusKeyword_2_1_1(), null); 
    }
)?    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    createLeafNode(grammarAccess.getNUMBER_LITERALAccess().getINTTerminalRuleCall_2_2(), null); 
    }
)?)
    ;







// Entry rule entryRuleEssentialOCLUnrestrictedIdentifier
entryRuleEssentialOCLUnrestrictedIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierRule(), currentNode); } 
	 iv_ruleEssentialOCLUnrestrictedIdentifier=ruleEssentialOCLUnrestrictedIdentifier 
	 { $current=$iv_ruleEssentialOCLUnrestrictedIdentifier.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLUnrestrictedIdentifier
ruleEssentialOCLUnrestrictedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='e' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierAccess().getEKeyword_0(), null); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierAccess().getEKeyword_1(), null); 
    }

    |
	kw='body' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierAccess().getBodyKeyword_2(), null); 
    }

    |
	kw='der' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierAccess().getDerKeyword_3(), null); 
    }

    |
	kw='init' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierAccess().getInitKeyword_4(), null); 
    }

    |
	kw='inv' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierAccess().getInvKeyword_5(), null); 
    }

    |
	kw='post' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierAccess().getPostKeyword_6(), null); 
    }

    |
	kw='pre' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLUnrestrictedIdentifierAccess().getPreKeyword_7(), null); 
    }
)
    ;





// Entry rule entryRuleEssentialOCLPrefixOperator
entryRuleEssentialOCLPrefixOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEssentialOCLPrefixOperatorRule(), currentNode); } 
	 iv_ruleEssentialOCLPrefixOperator=ruleEssentialOCLPrefixOperator 
	 { $current=$iv_ruleEssentialOCLPrefixOperator.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLPrefixOperator
ruleEssentialOCLPrefixOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLPrefixOperatorAccess().getHyphenMinusKeyword_0(), null); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLPrefixOperatorAccess().getNotKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleEssentialOCLInfixOperator
entryRuleEssentialOCLInfixOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEssentialOCLInfixOperatorRule(), currentNode); } 
	 iv_ruleEssentialOCLInfixOperator=ruleEssentialOCLInfixOperator 
	 { $current=$iv_ruleEssentialOCLInfixOperator.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLInfixOperator
ruleEssentialOCLInfixOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getAsteriskKeyword_0(), null); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getSolidusKeyword_1(), null); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getPlusSignKeyword_2(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getHyphenMinusKeyword_3(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getGreaterThanSignKeyword_4(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getLessThanSignKeyword_5(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getGreaterThanSignEqualsSignKeyword_6(), null); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getLessThanSignEqualsSignKeyword_7(), null); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getEqualsSignKeyword_8(), null); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getLessThanSignGreaterThanSignKeyword_9(), null); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getAndKeyword_10(), null); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getOrKeyword_11(), null); 
    }

    |
	kw='xor' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getXorKeyword_12(), null); 
    }

    |
	kw='implies' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLInfixOperatorAccess().getImpliesKeyword_13(), null); 
    }
)
    ;





// Entry rule entryRuleEssentialOCLNavigationOperator
entryRuleEssentialOCLNavigationOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEssentialOCLNavigationOperatorRule(), currentNode); } 
	 iv_ruleEssentialOCLNavigationOperator=ruleEssentialOCLNavigationOperator 
	 { $current=$iv_ruleEssentialOCLNavigationOperator.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLNavigationOperator
ruleEssentialOCLNavigationOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLNavigationOperatorAccess().getFullStopKeyword_0(), null); 
    }

    |
	kw='->' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEssentialOCLNavigationOperatorAccess().getHyphenMinusGreaterThanSignKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIdentifierRule(), currentNode); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    createLeafNode(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall_0(), null); 
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getIdentifierAccess().getEssentialOCLUnrestrictedIdentifierParserRuleCall_1(), currentNode); 
    }
    this_EssentialOCLUnrestrictedIdentifier_1=ruleEssentialOCLUnrestrictedIdentifier    {
		$current.merge(this_EssentialOCLUnrestrictedIdentifier_1);
    }

    { 
        currentNode = currentNode.getParent();
    }
)
    ;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralRule(), currentNode); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_SINGLE_QUOTED_STRING_0=RULE_SINGLE_QUOTED_STRING    {
		$current.merge(this_SINGLE_QUOTED_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getStringLiteralAccess().getSINGLE_QUOTED_STRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRulePrefixOperator
entryRulePrefixOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrefixOperatorRule(), currentNode); } 
	 iv_rulePrefixOperator=rulePrefixOperator 
	 { $current=$iv_rulePrefixOperator.current.getText(); }  
	 EOF 
;

// Rule PrefixOperator
rulePrefixOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getPrefixOperatorAccess().getEssentialOCLPrefixOperatorParserRuleCall(), currentNode); 
    }
    this_EssentialOCLPrefixOperator_0=ruleEssentialOCLPrefixOperator    {
		$current.merge(this_EssentialOCLPrefixOperator_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleInfixOperator
entryRuleInfixOperator returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInfixOperatorRule(), currentNode); } 
	 iv_ruleInfixOperator=ruleInfixOperator 
	 { $current=$iv_ruleInfixOperator.current.getText(); }  
	 EOF 
;

// Rule InfixOperator
ruleInfixOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getInfixOperatorAccess().getEssentialOCLInfixOperatorParserRuleCall(), currentNode); 
    }
    this_EssentialOCLInfixOperator_0=ruleEssentialOCLInfixOperator    {
		$current.merge(this_EssentialOCLInfixOperator_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleEssentialOCLUnrestrictedName
entryRuleEssentialOCLUnrestrictedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEssentialOCLUnrestrictedNameRule(), currentNode); } 
	 iv_ruleEssentialOCLUnrestrictedName=ruleEssentialOCLUnrestrictedName 
	 { $current=$iv_ruleEssentialOCLUnrestrictedName.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLUnrestrictedName
ruleEssentialOCLUnrestrictedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getEssentialOCLUnrestrictedNameAccess().getIdentifierParserRuleCall(), currentNode); 
    }
    this_Identifier_0=ruleIdentifier    {
		$current.merge(this_Identifier_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleEssentialOCLUnreservedName
entryRuleEssentialOCLUnreservedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEssentialOCLUnreservedNameRule(), currentNode); } 
	 iv_ruleEssentialOCLUnreservedName=ruleEssentialOCLUnreservedName 
	 { $current=$iv_ruleEssentialOCLUnreservedName.current.getText(); }  
	 EOF 
;

// Rule EssentialOCLUnreservedName
ruleEssentialOCLUnreservedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getEssentialOCLUnreservedNameAccess().getUnrestrictedNameParserRuleCall(), currentNode); 
    }
    this_UnrestrictedName_0=ruleUnrestrictedName    {
		$current.merge(this_UnrestrictedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRuleUnreservedName
entryRuleUnreservedName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnreservedNameRule(), currentNode); } 
	 iv_ruleUnreservedName=ruleUnreservedName 
	 { $current=$iv_ruleUnreservedName.current.getText(); }  
	 EOF 
;

// Rule UnreservedName
ruleUnreservedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getUnreservedNameAccess().getEssentialOCLUnreservedNameParserRuleCall(), currentNode); 
    }
    this_EssentialOCLUnreservedName_0=ruleEssentialOCLUnreservedName    {
		$current.merge(this_EssentialOCLUnreservedName_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    ;





// Entry rule entryRulePrimitiveTypeCS
entryRulePrimitiveTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveTypeCSRule(), currentNode); }
	 iv_rulePrimitiveTypeCS=rulePrimitiveTypeCS 
	 { $current=$iv_rulePrimitiveTypeCS.current; } 
	 EOF 
;

// Rule PrimitiveTypeCS
rulePrimitiveTypeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrimitiveTypeCSAccess().getNamePrimitiveTypeIdentifierParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=rulePrimitiveTypeIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrimitiveTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"PrimitiveTypeIdentifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleCollectionTypeIdentifier
entryRuleCollectionTypeIdentifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeIdentifierRule(), currentNode); } 
	 iv_ruleCollectionTypeIdentifier=ruleCollectionTypeIdentifier 
	 { $current=$iv_ruleCollectionTypeIdentifier.current.getText(); }  
	 EOF 
;

// Rule CollectionTypeIdentifier
ruleCollectionTypeIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='Set' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getSetKeyword_0(), null); 
    }

    |
	kw='Bag' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getBagKeyword_1(), null); 
    }

    |
	kw='Sequence' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getSequenceKeyword_2(), null); 
    }

    |
	kw='Collection' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getCollectionKeyword_3(), null); 
    }

    |
	kw='OrderedSet' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getCollectionTypeIdentifierAccess().getOrderedSetKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleCollectionTypeCS
entryRuleCollectionTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionTypeCSRule(), currentNode); }
	 iv_ruleCollectionTypeCS=ruleCollectionTypeCS 
	 { $current=$iv_ruleCollectionTypeCS.current; } 
	 EOF 
;

// Rule CollectionTypeCS
ruleCollectionTypeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeCSAccess().getNameCollectionTypeIdentifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleCollectionTypeIdentifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"CollectionTypeIdentifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getCollectionTypeCSAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionTypeCSAccess().getOwnedTypeTypeExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedType_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getCollectionTypeCSAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuleTupleTypeCS
entryRuleTupleTypeCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleTypeCSRule(), currentNode); }
	 iv_ruleTupleTypeCS=ruleTupleTypeCS 
	 { $current=$iv_ruleTupleTypeCS.current; } 
	 EOF 
;

// Rule TupleTypeCS
ruleTupleTypeCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getNameTupleKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "Tuple", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeCSAccess().getOwnedPartsTuplePartCSParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_ownedParts_2_0=ruletuplePartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedParts",
	        		lv_ownedParts_2_0, 
	        		"tuplePartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getCommaKeyword_1_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleTypeCSAccess().getOwnedPartsTuplePartCSParserRuleCall_1_1_1_1_0(), currentNode); 
	    }
		lv_ownedParts_4_0=ruletuplePartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleTypeCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedParts",
	        		lv_ownedParts_4_0, 
	        		"tuplePartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getTupleTypeCSAccess().getRightParenthesisKeyword_1_2(), null); 
    }
)?)
;





// Entry rule entryRuletuplePartCS
entryRuletuplePartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTuplePartCSRule(), currentNode); }
	 iv_ruletuplePartCS=ruletuplePartCS 
	 { $current=$iv_ruletuplePartCS.current; } 
	 EOF 
;

// Rule tuplePartCS
ruletuplePartCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartCSAccess().getNameUnrestrictedNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getTuplePartCSAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTuplePartCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_ownedType_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTuplePartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleCollectionLiteralExpCS
entryRuleCollectionLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralExpCSRule(), currentNode); }
	 iv_ruleCollectionLiteralExpCS=ruleCollectionLiteralExpCS 
	 { $current=$iv_ruleCollectionLiteralExpCS.current; } 
	 EOF 
;

// Rule CollectionLiteralExpCS
ruleCollectionLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getOwnedTypeCollectionTypeCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_ownedType_0_0=ruleCollectionTypeCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_0_0, 
	        		"CollectionTypeCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getOwnedPartsCollectionLiteralPartCSParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_ownedParts_2_0=ruleCollectionLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedParts",
	        		lv_ownedParts_2_0, 
	        		"CollectionLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getCommaKeyword_2_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralExpCSAccess().getOwnedPartsCollectionLiteralPartCSParserRuleCall_2_1_1_0(), currentNode); 
	    }
		lv_ownedParts_4_0=ruleCollectionLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedParts",
	        		lv_ownedParts_4_0, 
	        		"CollectionLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	'}' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralExpCSAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleCollectionLiteralPartCS
entryRuleCollectionLiteralPartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getCollectionLiteralPartCSRule(), currentNode); }
	 iv_ruleCollectionLiteralPartCS=ruleCollectionLiteralPartCS 
	 { $current=$iv_ruleCollectionLiteralPartCS.current; } 
	 EOF 
;

// Rule CollectionLiteralPartCS
ruleCollectionLiteralPartCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getExpressionCSExpCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_expressionCS_0_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expressionCS",
	        		lv_expressionCS_0_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'..' 
    {
        createLeafNode(grammarAccess.getCollectionLiteralPartCSAccess().getFullStopFullStopKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getCollectionLiteralPartCSAccess().getLastExpressionCSExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_lastExpressionCS_2_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getCollectionLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lastExpressionCS",
	        		lv_lastExpressionCS_2_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulePrimitiveLiteralExpCS
entryRulePrimitiveLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSRule(), currentNode); }
	 iv_rulePrimitiveLiteralExpCS=rulePrimitiveLiteralExpCS 
	 { $current=$iv_rulePrimitiveLiteralExpCS.current; } 
	 EOF 
;

// Rule PrimitiveLiteralExpCS
rulePrimitiveLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getNumberLiteralExpCSParserRuleCall_0(), currentNode); 
    }
    this_NumberLiteralExpCS_0=ruleNumberLiteralExpCS
    { 
        $current = $this_NumberLiteralExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getStringLiteralExpCSParserRuleCall_1(), currentNode); 
    }
    this_StringLiteralExpCS_1=ruleStringLiteralExpCS
    { 
        $current = $this_StringLiteralExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getBooleanLiteralExpCSParserRuleCall_2(), currentNode); 
    }
    this_BooleanLiteralExpCS_2=ruleBooleanLiteralExpCS
    { 
        $current = $this_BooleanLiteralExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSParserRuleCall_3(), currentNode); 
    }
    this_UnlimitedNaturalLiteralExpCS_3=ruleUnlimitedNaturalLiteralExpCS
    { 
        $current = $this_UnlimitedNaturalLiteralExpCS_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getInvalidLiteralExpCSParserRuleCall_4(), currentNode); 
    }
    this_InvalidLiteralExpCS_4=ruleInvalidLiteralExpCS
    { 
        $current = $this_InvalidLiteralExpCS_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimitiveLiteralExpCSAccess().getNullLiteralExpCSParserRuleCall_5(), currentNode); 
    }
    this_NullLiteralExpCS_5=ruleNullLiteralExpCS
    { 
        $current = $this_NullLiteralExpCS_5.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTupleLiteralExpCS
entryRuleTupleLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralExpCSRule(), currentNode); }
	 iv_ruleTupleLiteralExpCS=ruleTupleLiteralExpCS 
	 { $current=$iv_ruleTupleLiteralExpCS.current; } 
	 EOF 
;

// Rule TupleLiteralExpCS
ruleTupleLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Tuple' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getTupleKeyword_0(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getOwnedPartsTupleLiteralPartCSParserRuleCall_2_0(), currentNode); 
	    }
		lv_ownedParts_2_0=ruleTupleLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedParts",
	        		lv_ownedParts_2_0, 
	        		"TupleLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getCommaKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralExpCSAccess().getOwnedPartsTupleLiteralPartCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_ownedParts_4_0=ruleTupleLiteralPartCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedParts",
	        		lv_ownedParts_4_0, 
	        		"TupleLiteralPartCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'}' 
    {
        createLeafNode(grammarAccess.getTupleLiteralExpCSAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleTupleLiteralPartCS
entryRuleTupleLiteralPartCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTupleLiteralPartCSRule(), currentNode); }
	 iv_ruleTupleLiteralPartCS=ruleTupleLiteralPartCS 
	 { $current=$iv_ruleTupleLiteralPartCS.current; } 
	 EOF 
;

// Rule TupleLiteralPartCS
ruleTupleLiteralPartCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getNameUnrestrictedNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getTupleLiteralPartCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getOwnedTypeTypeExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedType_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'=' 
    {
        createLeafNode(grammarAccess.getTupleLiteralPartCSAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTupleLiteralPartCSAccess().getInitExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTupleLiteralPartCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNumberLiteralExpCS
entryRuleNumberLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumberLiteralExpCSRule(), currentNode); }
	 iv_ruleNumberLiteralExpCS=ruleNumberLiteralExpCS 
	 { $current=$iv_ruleNumberLiteralExpCS.current; } 
	 EOF 
;

// Rule NumberLiteralExpCS
ruleNumberLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNumberLiteralExpCSAccess().getNameNUMBER_LITERALParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleNUMBER_LITERAL		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNumberLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NUMBER_LITERAL", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleStringLiteralExpCS
entryRuleStringLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStringLiteralExpCSRule(), currentNode); }
	 iv_ruleStringLiteralExpCS=ruleStringLiteralExpCS 
	 { $current=$iv_ruleStringLiteralExpCS.current; } 
	 EOF 
;

// Rule StringLiteralExpCS
ruleStringLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStringLiteralExpCSAccess().getNameStringLiteralParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleStringLiteral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStringLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"StringLiteral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+
;





// Entry rule entryRuleBooleanLiteralExpCS
entryRuleBooleanLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBooleanLiteralExpCSRule(), currentNode); }
	 iv_ruleBooleanLiteralExpCS=ruleBooleanLiteralExpCS 
	 { $current=$iv_ruleBooleanLiteralExpCS.current; } 
	 EOF 
;

// Rule BooleanLiteralExpCS
ruleBooleanLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=	'true' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpCSAccess().getNameTrueKeyword_0_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_0_0, "true", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_name_1_0=	'false' 
    {
        createLeafNode(grammarAccess.getBooleanLiteralExpCSAccess().getNameFalseKeyword_1_0(), "name"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBooleanLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "name", lv_name_1_0, "false", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleUnlimitedNaturalLiteralExpCS
entryRuleUnlimitedNaturalLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnlimitedNaturalLiteralExpCSRule(), currentNode); }
	 iv_ruleUnlimitedNaturalLiteralExpCS=ruleUnlimitedNaturalLiteralExpCS 
	 { $current=$iv_ruleUnlimitedNaturalLiteralExpCS.current; } 
	 EOF 
;

// Rule UnlimitedNaturalLiteralExpCS
ruleUnlimitedNaturalLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getUnlimitedNaturalLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'*' 
    {
        createLeafNode(grammarAccess.getUnlimitedNaturalLiteralExpCSAccess().getAsteriskKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleInvalidLiteralExpCS
entryRuleInvalidLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInvalidLiteralExpCSRule(), currentNode); }
	 iv_ruleInvalidLiteralExpCS=ruleInvalidLiteralExpCS 
	 { $current=$iv_ruleInvalidLiteralExpCS.current; } 
	 EOF 
;

// Rule InvalidLiteralExpCS
ruleInvalidLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'invalid' 
    {
        createLeafNode(grammarAccess.getInvalidLiteralExpCSAccess().getInvalidKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleNullLiteralExpCS
entryRuleNullLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNullLiteralExpCSRule(), currentNode); }
	 iv_ruleNullLiteralExpCS=ruleNullLiteralExpCS 
	 { $current=$iv_ruleNullLiteralExpCS.current; } 
	 EOF 
;

// Rule NullLiteralExpCS
ruleNullLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNullLiteralExpCSAccess().getNullLiteralExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'null' 
    {
        createLeafNode(grammarAccess.getNullLiteralExpCSAccess().getNullKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleTypeLiteralCS
entryRuleTypeLiteralCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeLiteralCSRule(), currentNode); }
	 iv_ruleTypeLiteralCS=ruleTypeLiteralCS 
	 { $current=$iv_ruleTypeLiteralCS.current; } 
	 EOF 
;

// Rule TypeLiteralCS
ruleTypeLiteralCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralCSAccess().getPrimitiveTypeCSParserRuleCall_0(), currentNode); 
    }
    this_PrimitiveTypeCS_0=rulePrimitiveTypeCS
    { 
        $current = $this_PrimitiveTypeCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralCSAccess().getCollectionTypeCSParserRuleCall_1(), currentNode); 
    }
    this_CollectionTypeCS_1=ruleCollectionTypeCS
    { 
        $current = $this_CollectionTypeCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeLiteralCSAccess().getTupleTypeCSParserRuleCall_2(), currentNode); 
    }
    this_TupleTypeCS_2=ruleTupleTypeCS
    { 
        $current = $this_TupleTypeCS_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTypeLiteralExpCS
entryRuleTypeLiteralExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeLiteralExpCSRule(), currentNode); }
	 iv_ruleTypeLiteralExpCS=ruleTypeLiteralExpCS 
	 { $current=$iv_ruleTypeLiteralExpCS.current; } 
	 EOF 
;

// Rule TypeLiteralExpCS
ruleTypeLiteralExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeLiteralExpCSAccess().getOwnedTypeTypeLiteralCSParserRuleCall_0(), currentNode); 
	    }
		lv_ownedType_0_0=ruleTypeLiteralCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeLiteralExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_0_0, 
	        		"TypeLiteralCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleTypeNameExpCS
entryRuleTypeNameExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeNameExpCSRule(), currentNode); }
	 iv_ruleTypeNameExpCS=ruleTypeNameExpCS 
	 { $current=$iv_ruleTypeNameExpCS.current; } 
	 EOF 
;

// Rule TypeNameExpCS
ruleTypeNameExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeNameExpCSAccess().getNamespaceNamespaceCrossReference_0_0_0_0(), currentNode); 
	    }
		ruleUnrestrictedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getTypeNameExpCSAccess().getColonColonKeyword_0_0_1(), null); 
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeNameExpCSAccess().getNamespaceNamespaceCrossReference_0_0_2_0_0(), currentNode); 
	    }
		ruleUnreservedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getTypeNameExpCSAccess().getColonColonKeyword_0_0_2_1(), null); 
    }
)*)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeNameExpCSAccess().getElementTypeCrossReference_0_1_0(), currentNode); 
	    }
		ruleUnreservedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTypeNameExpCSAccess().getElementTypeCrossReference_1_0(), currentNode); 
	    }
		ruleUnrestrictedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleTypeExpCS
entryRuleTypeExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeExpCSRule(), currentNode); }
	 iv_ruleTypeExpCS=ruleTypeExpCS 
	 { $current=$iv_ruleTypeExpCS.current; } 
	 EOF 
;

// Rule TypeExpCS
ruleTypeExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpCSAccess().getTypeNameExpCSParserRuleCall_0(), currentNode); 
    }
    this_TypeNameExpCS_0=ruleTypeNameExpCS
    { 
        $current = $this_TypeNameExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getTypeExpCSAccess().getTypeLiteralCSParserRuleCall_1(), currentNode); 
    }
    this_TypeLiteralCS_1=ruleTypeLiteralCS
    { 
        $current = $this_TypeLiteralCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExpCS
entryRuleExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpCSRule(), currentNode); }
	 iv_ruleExpCS=ruleExpCS 
	 { $current=$iv_ruleExpCS.current; } 
	 EOF 
;

// Rule ExpCS
ruleExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExpCSAccess().getInfixedExpCSParserRuleCall(), currentNode); 
    }
    this_InfixedExpCS_0=ruleInfixedExpCS
    { 
        $current = $this_InfixedExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRuleInfixedExpCS
entryRuleInfixedExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInfixedExpCSRule(), currentNode); }
	 iv_ruleInfixedExpCS=ruleInfixedExpCS 
	 { $current=$iv_ruleInfixedExpCS.current; } 
	 EOF 
;

// Rule InfixedExpCS
ruleInfixedExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getInfixedExpCSAccess().getPrefixedExpCSParserRuleCall_0(), currentNode); 
    }
    this_PrefixedExpCS_0=rulePrefixedExpCS
    { 
        $current = $this_PrefixedExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getInfixedExpCSAccess().getInfixExpCSOwnedExpressionAction_1_0().getType().getClassifier());
        try {
        	factory.add(temp, "ownedExpression", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getInfixedExpCSAccess().getInfixExpCSOwnedExpressionAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInfixedExpCSAccess().getOwnedOperatorBinaryOperatorCSParserRuleCall_1_1_0_0(), currentNode); 
	    }
		lv_ownedOperator_2_0=ruleBinaryOperatorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixedExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedOperator",
	        		lv_ownedOperator_2_0, 
	        		"BinaryOperatorCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInfixedExpCSAccess().getOwnedExpressionPrefixedExpCSParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_ownedExpression_3_0=rulePrefixedExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixedExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_3_0, 
	        		"PrefixedExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))+)?)
;





// Entry rule entryRuleBinaryOperatorCS
entryRuleBinaryOperatorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBinaryOperatorCSRule(), currentNode); }
	 iv_ruleBinaryOperatorCS=ruleBinaryOperatorCS 
	 { $current=$iv_ruleBinaryOperatorCS.current; } 
	 EOF 
;

// Rule BinaryOperatorCS
ruleBinaryOperatorCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBinaryOperatorCSAccess().getInfixOperatorCSParserRuleCall_0(), currentNode); 
    }
    this_InfixOperatorCS_0=ruleInfixOperatorCS
    { 
        $current = $this_InfixOperatorCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getBinaryOperatorCSAccess().getNavigationOperatorCSParserRuleCall_1(), currentNode); 
    }
    this_NavigationOperatorCS_1=ruleNavigationOperatorCS
    { 
        $current = $this_NavigationOperatorCS_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleInfixOperatorCS
entryRuleInfixOperatorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInfixOperatorCSRule(), currentNode); }
	 iv_ruleInfixOperatorCS=ruleInfixOperatorCS 
	 { $current=$iv_ruleInfixOperatorCS.current; } 
	 EOF 
;

// Rule InfixOperatorCS
ruleInfixOperatorCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInfixOperatorCSAccess().getNameInfixOperatorParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleInfixOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInfixOperatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"InfixOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRuleNavigationOperatorCS
entryRuleNavigationOperatorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigationOperatorCSRule(), currentNode); }
	 iv_ruleNavigationOperatorCS=ruleNavigationOperatorCS 
	 { $current=$iv_ruleNavigationOperatorCS.current; } 
	 EOF 
;

// Rule NavigationOperatorCS
ruleNavigationOperatorCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigationOperatorCSAccess().getNameNavigationOperatorParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=ruleNavigationOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigationOperatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NavigationOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRulePrefixedExpCS
entryRulePrefixedExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrefixedExpCSRule(), currentNode); }
	 iv_rulePrefixedExpCS=rulePrefixedExpCS 
	 { $current=$iv_rulePrefixedExpCS.current; } 
	 EOF 
;

// Rule PrefixedExpCS
rulePrefixedExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrefixedExpCSAccess().getPrimaryExpCSParserRuleCall_0(), currentNode); 
    }
    this_PrimaryExpCS_0=rulePrimaryExpCS
    { 
        $current = $this_PrimaryExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getPrefixedExpCSAccess().getPrefixExpCSAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPrefixedExpCSAccess().getPrefixExpCSAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrefixedExpCSAccess().getOwnedOperatorUnaryOperatorCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedOperator_2_0=ruleUnaryOperatorCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrefixedExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"ownedOperator",
	        		lv_ownedOperator_2_0, 
	        		"UnaryOperatorCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPrefixedExpCSAccess().getOwnedExpressionPrimaryExpCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_ownedExpression_3_0=rulePrimaryExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPrefixedExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedExpression",
	        		lv_ownedExpression_3_0, 
	        		"PrimaryExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleUnaryOperatorCS
entryRuleUnaryOperatorCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryOperatorCSRule(), currentNode); }
	 iv_ruleUnaryOperatorCS=ruleUnaryOperatorCS 
	 { $current=$iv_ruleUnaryOperatorCS.current; } 
	 EOF 
;

// Rule UnaryOperatorCS
ruleUnaryOperatorCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryOperatorCSAccess().getNamePrefixOperatorParserRuleCall_0(), currentNode); 
	    }
		lv_name_0_0=rulePrefixOperator		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryOperatorCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"PrefixOperator", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





// Entry rule entryRulePrimaryExpCS
entryRulePrimaryExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPrimaryExpCSRule(), currentNode); }
	 iv_rulePrimaryExpCS=rulePrimaryExpCS 
	 { $current=$iv_rulePrimaryExpCS.current; } 
	 EOF 
;

// Rule PrimaryExpCS
rulePrimaryExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getNavigatingExpCSParserRuleCall_0(), currentNode); 
    }
    this_NavigatingExpCS_0=ruleNavigatingExpCS
    { 
        $current = $this_NavigatingExpCS_0.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getSelfExpCSParserRuleCall_1(), currentNode); 
    }
    this_SelfExpCS_1=ruleSelfExpCS
    { 
        $current = $this_SelfExpCS_1.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getPrimitiveLiteralExpCSParserRuleCall_2(), currentNode); 
    }
    this_PrimitiveLiteralExpCS_2=rulePrimitiveLiteralExpCS
    { 
        $current = $this_PrimitiveLiteralExpCS_2.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getTupleLiteralExpCSParserRuleCall_3(), currentNode); 
    }
    this_TupleLiteralExpCS_3=ruleTupleLiteralExpCS
    { 
        $current = $this_TupleLiteralExpCS_3.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getCollectionLiteralExpCSParserRuleCall_4(), currentNode); 
    }
    this_CollectionLiteralExpCS_4=ruleCollectionLiteralExpCS
    { 
        $current = $this_CollectionLiteralExpCS_4.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getTypeLiteralExpCSParserRuleCall_5(), currentNode); 
    }
    this_TypeLiteralExpCS_5=ruleTypeLiteralExpCS
    { 
        $current = $this_TypeLiteralExpCS_5.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getLetExpCSParserRuleCall_6(), currentNode); 
    }
    this_LetExpCS_6=ruleLetExpCS
    { 
        $current = $this_LetExpCS_6.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getIfExpCSParserRuleCall_7(), currentNode); 
    }
    this_IfExpCS_7=ruleIfExpCS
    { 
        $current = $this_IfExpCS_7.current; 
        currentNode = currentNode.getParent();
    }

    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getPrimaryExpCSAccess().getNestedExpCSParserRuleCall_8(), currentNode); 
    }
    this_NestedExpCS_8=ruleNestedExpCS
    { 
        $current = $this_NestedExpCS_8.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleNameExpCS
entryRuleNameExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNameExpCSRule(), currentNode); }
	 iv_ruleNameExpCS=ruleNameExpCS 
	 { $current=$iv_ruleNameExpCS.current; } 
	 EOF 
;

// Rule NameExpCS
ruleNameExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpCSAccess().getNamespaceNamespaceCrossReference_0_0_0_0(), currentNode); 
	    }
		ruleUnrestrictedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getNameExpCSAccess().getColonColonKeyword_0_0_1(), null); 
    }
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpCSAccess().getNamespaceNamespaceCrossReference_0_0_2_0_0(), currentNode); 
	    }
		ruleUnreservedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
)	'::' 
    {
        createLeafNode(grammarAccess.getNameExpCSAccess().getColonColonKeyword_0_0_2_1(), null); 
    }
)*)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpCSAccess().getElementNamedElementCrossReference_0_1_0(), currentNode); 
	    }
		ruleUnreservedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getNameExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNameExpCSAccess().getElementNamedElementCrossReference_1_0(), currentNode); 
	    }
		ruleUnrestrictedName		{ 
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleIndexExpCS
entryRuleIndexExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIndexExpCSRule(), currentNode); }
	 iv_ruleIndexExpCS=ruleIndexExpCS 
	 { $current=$iv_ruleIndexExpCS.current; } 
	 EOF 
;

// Rule IndexExpCS
ruleIndexExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getNameExpCSParserRuleCall_0(), currentNode); 
    }
    this_NameExpCS_0=ruleNameExpCS
    { 
        $current = $this_NameExpCS_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getIndexExpCSAccess().getIndexExpCSNamedExpAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "namedExp", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getIndexExpCSAccess().getIndexExpCSNamedExpAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'[' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getLeftSquareBracketKeyword_1_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getFirstIndexesExpCSParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_firstIndexes_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIndexExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"firstIndexes",
	        		lv_firstIndexes_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getCommaKeyword_1_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getFirstIndexesExpCSParserRuleCall_1_3_1_0(), currentNode); 
	    }
		lv_firstIndexes_5_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIndexExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"firstIndexes",
	        		lv_firstIndexes_5_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getRightSquareBracketKeyword_1_4(), null); 
    }
(	'[' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getLeftSquareBracketKeyword_1_5_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getSecondIndexesExpCSParserRuleCall_1_5_1_0(), currentNode); 
	    }
		lv_secondIndexes_8_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIndexExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"secondIndexes",
	        		lv_secondIndexes_8_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getCommaKeyword_1_5_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIndexExpCSAccess().getSecondIndexesExpCSParserRuleCall_1_5_2_1_0(), currentNode); 
	    }
		lv_secondIndexes_10_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIndexExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"secondIndexes",
	        		lv_secondIndexes_10_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	']' 
    {
        createLeafNode(grammarAccess.getIndexExpCSAccess().getRightSquareBracketKeyword_1_5_3(), null); 
    }
)?)?)
;





// Entry rule entryRuleNavigatingExpCS
entryRuleNavigatingExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingExpCSRule(), currentNode); }
	 iv_ruleNavigatingExpCS=ruleNavigatingExpCS 
	 { $current=$iv_ruleNavigatingExpCS.current; } 
	 EOF 
;

// Rule NavigatingExpCS
ruleNavigatingExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getNavigatingExpCS_BaseParserRuleCall_0(), currentNode); 
    }
    this_NavigatingExpCS_Base_0=ruleNavigatingExpCS_Base
    { 
        $current = $this_NavigatingExpCS_Base_0.current; 
        currentNode = currentNode.getParent();
    }
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getNavigatingExpCSAccess().getNavigatingExpCSNamedExpAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "namedExp", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getNavigatingExpCSNamedExpAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getNavigatingExpCSAccess().getLeftParenthesisKeyword_1_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getArgumentNavigatingArgCSParserRuleCall_1_2_0_0(), currentNode); 
	    }
		lv_argument_3_0=ruleNavigatingArgCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argument",
	        		lv_argument_3_0, 
	        		"NavigatingArgCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getArgumentNavigatingCommaArgCSParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_argument_4_0=ruleNavigatingCommaArgCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argument",
	        		lv_argument_4_0, 
	        		"NavigatingCommaArgCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getArgumentNavigatingSemiArgCSParserRuleCall_1_2_2_0_0(), currentNode); 
	    }
		lv_argument_5_0=ruleNavigatingSemiArgCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argument",
	        		lv_argument_5_0, 
	        		"NavigatingSemiArgCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getArgumentNavigatingCommaArgCSParserRuleCall_1_2_2_1_0(), currentNode); 
	    }
		lv_argument_6_0=ruleNavigatingCommaArgCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argument",
	        		lv_argument_6_0, 
	        		"NavigatingCommaArgCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)?((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getArgumentNavigatingBarArgCSParserRuleCall_1_2_3_0_0(), currentNode); 
	    }
		lv_argument_7_0=ruleNavigatingBarArgCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argument",
	        		lv_argument_7_0, 
	        		"NavigatingBarArgCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingExpCSAccess().getArgumentNavigatingCommaArgCSParserRuleCall_1_2_3_1_0(), currentNode); 
	    }
		lv_argument_8_0=ruleNavigatingCommaArgCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argument",
	        		lv_argument_8_0, 
	        		"NavigatingCommaArgCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)?)?	')' 
    {
        createLeafNode(grammarAccess.getNavigatingExpCSAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)?)
;





// Entry rule entryRuleNavigatingArgCS
entryRuleNavigatingArgCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingArgCSRule(), currentNode); }
	 iv_ruleNavigatingArgCS=ruleNavigatingArgCS 
	 { $current=$iv_ruleNavigatingArgCS.current; } 
	 EOF 
;

// Rule NavigatingArgCS
ruleNavigatingArgCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingArgCSAccess().getNameNavigatingArgExpCSParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleNavigatingArgExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"NavigatingArgExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getNavigatingArgCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedType_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'=' 
    {
        createLeafNode(grammarAccess.getNavigatingArgCSAccess().getEqualsSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingArgCSAccess().getInitExpCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_init_4_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_4_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleNavigatingBarArgCS
entryRuleNavigatingBarArgCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingBarArgCSRule(), currentNode); }
	 iv_ruleNavigatingBarArgCS=ruleNavigatingBarArgCS 
	 { $current=$iv_ruleNavigatingBarArgCS.current; } 
	 EOF 
;

// Rule NavigatingBarArgCS
ruleNavigatingBarArgCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_prefix_0_0=	'|' 
    {
        createLeafNode(grammarAccess.getNavigatingBarArgCSAccess().getPrefixVerticalLineKeyword_0_0(), "prefix"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingBarArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "prefix", lv_prefix_0_0, "|", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingBarArgCSAccess().getNameNavigatingArgExpCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleNavigatingArgExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingBarArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"NavigatingArgExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getNavigatingBarArgCSAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingBarArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_ownedType_3_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingBarArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_3_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'=' 
    {
        createLeafNode(grammarAccess.getNavigatingBarArgCSAccess().getEqualsSignKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingBarArgCSAccess().getInitExpCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_init_5_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingBarArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_5_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleNavigatingCommaArgCS
entryRuleNavigatingCommaArgCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingCommaArgCSRule(), currentNode); }
	 iv_ruleNavigatingCommaArgCS=ruleNavigatingCommaArgCS 
	 { $current=$iv_ruleNavigatingCommaArgCS.current; } 
	 EOF 
;

// Rule NavigatingCommaArgCS
ruleNavigatingCommaArgCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_prefix_0_0=	',' 
    {
        createLeafNode(grammarAccess.getNavigatingCommaArgCSAccess().getPrefixCommaKeyword_0_0(), "prefix"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingCommaArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "prefix", lv_prefix_0_0, ",", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getNameNavigatingArgExpCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleNavigatingArgExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingCommaArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"NavigatingArgExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getNavigatingCommaArgCSAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_ownedType_3_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingCommaArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_3_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'=' 
    {
        createLeafNode(grammarAccess.getNavigatingCommaArgCSAccess().getEqualsSignKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingCommaArgCSAccess().getInitExpCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_init_5_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingCommaArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_5_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleNavigatingSemiArgCS
entryRuleNavigatingSemiArgCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNavigatingSemiArgCSRule(), currentNode); }
	 iv_ruleNavigatingSemiArgCS=ruleNavigatingSemiArgCS 
	 { $current=$iv_ruleNavigatingSemiArgCS.current; } 
	 EOF 
;

// Rule NavigatingSemiArgCS
ruleNavigatingSemiArgCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_prefix_0_0=	';' 
    {
        createLeafNode(grammarAccess.getNavigatingSemiArgCSAccess().getPrefixSemicolonKeyword_0_0(), "prefix"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingSemiArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "prefix", lv_prefix_0_0, ";", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingSemiArgCSAccess().getNameNavigatingArgExpCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_name_1_0=ruleNavigatingArgExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingSemiArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"NavigatingArgExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getNavigatingSemiArgCSAccess().getColonKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingSemiArgCSAccess().getOwnedTypeTypeExpCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_ownedType_3_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingSemiArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_3_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(	'=' 
    {
        createLeafNode(grammarAccess.getNavigatingSemiArgCSAccess().getEqualsSignKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNavigatingSemiArgCSAccess().getInitExpCSParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_init_5_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNavigatingSemiArgCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"init",
	        		lv_init_5_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleIfExpCS
entryRuleIfExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIfExpCSRule(), currentNode); }
	 iv_ruleIfExpCS=ruleIfExpCS 
	 { $current=$iv_ruleIfExpCS.current; } 
	 EOF 
;

// Rule IfExpCS
ruleIfExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'if' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getIfKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getConditionExpCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_condition_1_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"condition",
	        		lv_condition_1_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'then' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getThenKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getThenExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_thenExpression_3_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"thenExpression",
	        		lv_thenExpression_3_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'else' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getElseKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getIfExpCSAccess().getElseExpressionExpCSParserRuleCall_5_0(), currentNode); 
	    }
		lv_elseExpression_5_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIfExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"elseExpression",
	        		lv_elseExpression_5_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'endif' 
    {
        createLeafNode(grammarAccess.getIfExpCSAccess().getEndifKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLetExpCS
entryRuleLetExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetExpCSRule(), currentNode); }
	 iv_ruleLetExpCS=ruleLetExpCS 
	 { $current=$iv_ruleLetExpCS.current; } 
	 EOF 
;

// Rule LetExpCS
ruleLetExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'let' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getLetKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getVariableLetVariableCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_variable_1_0=ruleLetVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_1_0, 
	        		"LetVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getCommaKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getVariableLetVariableCSParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_variable_3_0=ruleLetVariableCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variable",
	        		lv_variable_3_0, 
	        		"LetVariableCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*	'in' 
    {
        createLeafNode(grammarAccess.getLetExpCSAccess().getInKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetExpCSAccess().getInExpCSParserRuleCall_4_0(), currentNode); 
	    }
		lv_in_5_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"in",
	        		lv_in_5_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleLetVariableCS
entryRuleLetVariableCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLetVariableCSRule(), currentNode); }
	 iv_ruleLetVariableCS=ruleLetVariableCS 
	 { $current=$iv_ruleLetVariableCS.current; } 
	 EOF 
;

// Rule LetVariableCS
ruleLetVariableCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getNameUnrestrictedNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_name_0_0=ruleUnrestrictedName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"UnrestrictedName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	':' 
    {
        createLeafNode(grammarAccess.getLetVariableCSAccess().getColonKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getOwnedTypeTypeExpCSParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_ownedType_2_0=ruleTypeExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ownedType",
	        		lv_ownedType_2_0, 
	        		"TypeExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	'=' 
    {
        createLeafNode(grammarAccess.getLetVariableCSAccess().getEqualsSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getLetVariableCSAccess().getInitExpressionExpCSParserRuleCall_3_0(), currentNode); 
	    }
		lv_initExpression_4_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLetVariableCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"initExpression",
	        		lv_initExpression_4_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNestedExpCS
entryRuleNestedExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNestedExpCSRule(), currentNode); }
	 iv_ruleNestedExpCS=ruleNestedExpCS 
	 { $current=$iv_ruleNestedExpCS.current; } 
	 EOF 
;

// Rule NestedExpCS
ruleNestedExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'(' 
    {
        createLeafNode(grammarAccess.getNestedExpCSAccess().getLeftParenthesisKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getNestedExpCSAccess().getSourceExpCSParserRuleCall_1_0(), currentNode); 
	    }
		lv_source_1_0=ruleExpCS		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNestedExpCSRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"source",
	        		lv_source_1_0, 
	        		"ExpCS", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getNestedExpCSAccess().getRightParenthesisKeyword_2(), null); 
    }
)
;





// Entry rule entryRuleSelfExpCS
entryRuleSelfExpCS returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSelfExpCSRule(), currentNode); }
	 iv_ruleSelfExpCS=ruleSelfExpCS 
	 { $current=$iv_ruleSelfExpCS.current; } 
	 EOF 
;

// Rule SelfExpCS
ruleSelfExpCS returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getSelfExpCSAccess().getSelfExpCSAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getSelfExpCSAccess().getSelfExpCSAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'self' 
    {
        createLeafNode(grammarAccess.getSelfExpCSAccess().getSelfKeyword_1(), null); 
    }
)
;





RULE_DOUBLE_QUOTED_STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_SINGLE_QUOTED_STRING : '\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'';

RULE_ML_SINGLE_QUOTED_STRING : '/\'' ( options {greedy=false;} : . )*'\'/';

RULE_ID : (('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*|'_' RULE_SINGLE_QUOTED_STRING);

RULE_INT : ('0'..'9')+;

RULE_DOCUMENTATION : '/**' ( options {greedy=false;} : . )*'**/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


