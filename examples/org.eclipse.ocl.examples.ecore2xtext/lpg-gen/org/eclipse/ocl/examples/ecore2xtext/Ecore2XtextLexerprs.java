package org.eclipse.ocl.examples.ecore2xtext;

public class Ecore2XtextLexerprs implements lpg.runtime.ParseTable, Ecore2XtextLexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 304;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 101;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 789;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 219;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 14;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 115;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 220;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 1;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 102;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 569;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 570;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return Ecore2XtextLexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            6,7,8,5,14,10,3,4,2,9,
            11,12,13,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            2,1,1,2,10,15,15,15,14,12,
            14,22,17,17,10,5,8,13,13,13,
            12,12,20,13,15,15,8,1,1,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,2,2,1,1,1,1,2,2,
            2,2,1,2,3,1,1,2,2,1,
            1,1,1,1,1,2,2,2,2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            9,9,9,9,9,9,9,9,9,9,
            9,7,7,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,4,4,4,4,4,
            4,4,4,4,4,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,9,10,
            10,10,10,10,10,6,6,6,6,6,
            6,6,6,9,11,11,12,12,12,12,
            9,13,5,5,5,5,5,5,5,5,
            201,234,241,248,69,567,263,674,676,224,
            188,203,219,210,277,255,255,255,255,686,
            255,343,260,260,260,260,687,260,409,265,
            265,265,265,673,265,475,202,201,200,199,
            541,202,201,200,199,607,202,201,200,199,
            1,683,101,169,704,693,218,272,272,208,
            209,689,272,694,258,709,217,710,216,675,
            259,344,677,712,713,716,719,723,688,727,
            728,260,410,733,680,730,735,738,765,761,
            770,754,771,739,756,774,772,476,779,776,
            782,783,71,784,785,542,791,793,741,792,
            797,798,799,800,803,608,804,257,810,805,
            811,815,816,817,818,820,821,822,825,826,
            828,830,827,834,839,840,841,844,847,836,
            848,849,853,855,857,859,860,861,862,863,
            872,873,868,876,877,882,878,881,888,889,
            890,891,892,893,896,902,899,900,904,907,
            909,910,914,913,912,917,915,925,924,926,
            929,930,933,934,936,935,947,937,944,950,
            951,956,957,959,960,962,961,963,964,965,
            966,971,970,974,979,982,984,985,987,986,
            989,991,990,993,1001,996,1005,1006,1009,1015,
            1018,1010,1011,997,1019,1020,1022,1025,1029,1028,
            1031,1032,1034,1035,1039,1037,1042,1047,1044,1049,
            1052,1053,1054,1058,1056,1062,1060,1066,1069,1070,
            1063,1076,1072,1077,1081,1079,1087,1080,1089,1090,
            1092,1095,1099,1097,1100,1101,1102,1103,1106,1110,
            1109,1117,1113,1118,1119,1123,1125,1126,1127,1128,
            1131,1132,1134,1137,1139,1142,1143,1145,1149,1146,
            1153,1157,1156,1160,1162,1164,1166,1168,1170,1172,
            1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,
            1196,1198,1200,1202,1204,1206,1208,1210,1212,1214,
            1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,
            1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,
            1256,1258,1260,1262,1264,1266,1268,2,570,570
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,0,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,0,1,
            0,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,99,
            0,31,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,0,0,
            2,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,99,
            0,0,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,0,0,0,0,
            4,3,0,4,7,9,66,67,68,69,
            70,71,72,73,74,75,0,15,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,0,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,0,0,2,3,4,5,6,7,
            8,9,10,11,12,13,14,14,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,0,0,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,14,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,0,0,2,3,4,5,
            6,7,8,9,10,11,12,13,14,14,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            0,0,2,3,4,5,6,7,8,9,
            10,11,12,13,14,14,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,0,0,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,14,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,0,0,0,0,0,2,2,0,
            6,9,0,4,10,0,0,0,0,17,
            18,19,0,0,2,23,9,22,26,13,
            15,29,30,0,17,18,19,32,0,0,
            23,0,0,26,22,0,29,30,0,11,
            8,6,0,12,32,22,0,0,2,0,
            21,13,0,4,0,13,2,0,0,66,
            0,68,69,70,4,8,71,72,66,11,
            68,69,70,0,66,0,68,69,70,66,
            0,68,69,70,0,12,34,3,8,0,
            0,0,3,0,3,0,21,7,0,6,
            2,0,0,0,0,2,2,12,6,8,
            0,0,0,2,67,3,0,0,0,0,
            10,5,0,0,0,7,4,4,11,0,
            0,2,8,3,0,0,0,0,3,0,
            0,0,8,3,0,0,0,0,3,0,
            9,4,6,0,5,0,17,13,0,0,
            0,2,2,0,28,12,0,0,0,3,
            2,4,0,10,0,20,0,5,0,0,
            0,0,0,7,4,11,67,0,6,31,
            9,0,0,2,7,0,0,0,6,3,
            0,0,7,24,67,27,5,0,0,0,
            0,0,0,3,3,0,4,9,0,0,
            5,0,13,0,17,28,0,6,0,0,
            12,0,0,0,0,6,0,18,10,16,
            7,9,6,0,0,0,20,4,0,0,
            2,6,0,0,0,0,0,3,6,3,
            7,27,7,0,33,16,0,67,24,0,
            0,5,3,10,4,0,0,2,0,0,
            0,0,0,0,0,0,7,11,7,0,
            0,6,2,0,10,15,7,19,0,16,
            18,0,9,0,0,0,0,6,0,0,
            0,3,0,9,4,0,0,8,15,13,
            0,16,2,7,0,0,11,3,0,0,
            0,33,4,21,0,10,2,0,0,0,
            11,0,5,2,0,7,2,0,0,19,
            0,0,5,0,0,5,0,4,0,20,
            12,0,8,0,3,14,0,9,0,13,
            4,0,0,0,2,0,8,0,15,0,
            3,0,0,8,11,0,5,2,0,0,
            0,0,21,5,5,0,0,2,0,0,
            0,5,20,12,25,5,0,8,0,0,
            4,0,14,2,0,6,0,3,0,0,
            0,0,0,2,16,0,8,5,0,0,
            5,2,0,5,15,15,0,0,0,3,
            2,25,0,6,0,0,0,0,16,2,
            0,0,6,0,3,5,0,15,0,15,
            15,0,0,10,0,0,4,6,0,4,
            2,15,0,15,10,0,0,5,2,0,
            5,0,1,0,1,0,1,0,1,0,
            1,0,1,0,15,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            570,210,272,272,272,272,272,272,272,272,
            272,272,272,272,272,272,272,272,272,272,
            272,272,272,272,272,272,272,272,272,272,
            272,272,272,272,272,272,272,272,272,272,
            272,272,272,272,272,272,272,272,272,272,
            272,272,272,272,272,272,272,272,272,272,
            272,272,272,272,272,272,272,272,570,569,
            570,272,272,774,272,272,272,272,272,272,
            272,272,272,272,272,272,272,272,272,272,
            272,272,272,272,272,272,272,272,272,272,
            570,343,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,778,779,570,570,
            295,779,779,775,779,779,778,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            779,779,779,779,779,779,779,779,779,779,
            570,570,545,541,558,559,560,549,554,543,
            561,555,552,553,556,599,547,514,529,533,
            551,565,564,516,518,519,520,522,526,528,
            532,537,544,546,542,515,517,521,523,524,
            525,527,530,531,534,535,536,538,539,548,
            550,557,562,563,566,540,570,570,570,570,
            358,305,570,323,300,359,227,572,283,281,
            271,239,226,270,228,598,188,600,255,255,
            255,255,255,255,255,255,255,255,255,255,
            255,570,255,255,255,255,255,255,255,255,
            255,255,255,255,255,255,255,255,255,255,
            255,255,255,255,255,255,255,255,255,255,
            255,255,255,255,255,255,255,255,255,255,
            255,255,255,255,255,255,255,255,255,255,
            255,255,188,570,260,260,260,260,260,260,
            260,260,260,260,260,260,260,306,260,260,
            260,260,260,260,260,260,260,260,260,260,
            260,260,260,260,260,260,260,260,260,260,
            260,260,260,260,260,260,260,260,260,260,
            260,260,260,260,260,260,260,260,260,260,
            260,260,260,260,260,260,260,260,188,570,
            265,265,265,265,265,265,265,265,265,265,
            265,265,265,324,265,265,265,265,265,265,
            265,265,265,265,265,265,265,265,265,265,
            265,265,265,265,265,265,265,265,265,265,
            265,265,265,265,265,265,265,265,265,265,
            265,265,265,265,265,265,265,265,265,265,
            265,265,265,265,194,570,770,770,770,770,
            770,770,770,770,770,770,770,770,770,338,
            770,772,772,772,770,770,770,772,772,772,
            772,772,772,772,772,772,770,770,770,772,
            772,772,772,772,772,772,772,772,772,772,
            772,772,772,770,770,770,770,770,770,771,
            769,769,769,769,769,769,769,769,769,769,
            193,570,770,770,770,770,770,770,770,770,
            770,770,770,770,770,346,770,772,772,772,
            770,770,770,772,772,772,772,772,772,772,
            772,772,770,770,770,772,772,772,772,772,
            772,772,772,772,772,772,772,772,772,770,
            770,770,770,770,770,771,769,769,769,769,
            769,769,769,769,769,769,192,570,770,770,
            770,770,770,770,770,770,770,770,770,770,
            770,356,770,772,772,772,770,770,770,772,
            772,772,772,772,772,772,772,772,770,770,
            770,772,772,772,772,772,772,772,772,772,
            772,772,772,772,772,770,770,770,770,770,
            770,771,769,769,769,769,769,769,769,769,
            769,769,570,215,570,3,570,253,307,570,
            304,285,214,326,303,570,570,570,213,294,
            290,287,4,212,298,293,313,246,292,284,
            571,291,289,570,320,316,314,273,570,570,
            319,570,570,318,297,570,317,315,570,301,
            309,310,570,308,299,296,570,570,321,570,
            302,311,570,327,570,312,328,570,570,227,
            570,283,281,271,349,329,275,274,227,334,
            283,281,271,570,227,570,283,281,271,227,
            570,283,281,271,570,586,325,330,331,570,
            570,570,332,570,337,570,335,333,570,336,
            339,570,570,570,570,344,345,340,342,341,
            570,570,570,350,322,348,570,570,570,570,
            347,351,570,570,570,353,355,357,352,570,
            570,360,361,362,570,570,570,570,364,570,
            570,570,363,368,570,570,570,570,371,570,
            369,372,374,570,373,570,367,370,570,570,
            570,377,378,570,365,375,570,570,570,380,
            383,382,570,379,570,381,570,384,570,570,
            570,570,570,386,388,385,354,570,390,376,
            389,570,570,391,393,570,570,570,392,395,
            570,570,394,387,366,597,587,570,570,570,
            570,570,570,401,402,570,403,399,570,570,
            404,570,400,570,398,396,570,405,570,570,
            406,570,570,570,570,411,570,407,410,408,
            412,413,415,570,570,570,409,418,570,570,
            420,419,570,570,570,570,570,425,422,427,
            423,416,424,570,414,421,570,397,417,570,
            570,426,429,428,430,570,570,431,570,570,
            570,570,570,570,570,570,434,432,435,570,
            570,439,440,570,438,585,441,433,570,437,
            436,570,442,570,570,570,570,444,570,570,
            570,448,570,445,449,570,570,450,575,446,
            570,447,452,461,570,570,453,454,570,570,
            570,443,456,451,570,455,457,570,570,570,
            459,570,458,464,570,462,465,570,570,460,
            570,570,592,570,570,591,570,468,570,463,
            466,570,469,570,472,467,570,470,570,471,
            473,570,570,570,476,570,474,570,580,570,
            478,570,570,479,477,570,594,590,570,570,
            570,570,475,589,588,570,570,482,570,570,
            570,484,481,483,480,485,570,488,570,570,
            487,570,486,491,570,490,570,492,570,570,
            570,570,570,495,489,570,493,496,570,570,
            497,596,570,595,581,579,570,570,570,498,
            501,494,570,500,570,570,570,570,499,503,
            570,570,502,570,505,504,570,578,570,577,
            576,570,570,506,570,570,508,507,570,511,
            510,584,570,583,509,570,570,593,512,570,
            513,135,188,136,188,137,188,138,188,139,
            188,140,188,570,582,141,188,142,188,143,
            188,144,188,145,188,146,188,147,188,148,
            188,149,188,150,188,151,188,152,188,153,
            188,154,188,155,188,156,188,157,188,158,
            188,159,188,160,188,161,188,162,188,163,
            188,164,188,165,188,166,188,167,188,168,
            188,169,188,170,188,171,188,172,188,173,
            188,174,188,175,188,176,188,177,188,178,
            188,179,188,180,188,181,188,182,188,183,
            188,184,188,185,188,186,188,187,188
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
