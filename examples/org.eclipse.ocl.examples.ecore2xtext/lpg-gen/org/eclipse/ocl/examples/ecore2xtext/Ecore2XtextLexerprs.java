package org.eclipse.ocl.examples.ecore2xtext;

public class Ecore2XtextLexerprs implements lpg.runtime.ParseTable, Ecore2XtextLexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 376;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 102;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 814;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 1;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 190;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 13;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 115;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 191;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 1;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 103;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 623;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 624;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return Ecore2XtextLexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            4,6,3,5,8,13,11,2,7,9,
            10,12,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            2,1,1,2,10,15,15,15,14,12,
            14,22,17,17,10,5,8,13,13,13,
            12,10,12,20,15,15,8,1,1,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,2,2,1,2,3,2,2,2,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,3,
            1,1,1,1,1,1,2,2,2,2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,8,8,8,8,8,8,8,8,8,
            8,3,3,3,3,3,3,3,3,3,
            3,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,4,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,8,9,5,5,5,5,
            5,5,5,5,8,10,10,7,7,7,
            7,11,11,11,11,11,11,11,11,11,
            11,11,11,11,11,11,11,11,11,11,
            11,11,11,11,11,11,11,11,11,11,
            11,11,11,11,11,11,11,11,11,11,
            11,11,11,11,11,11,11,11,11,11,
            11,11,11,11,11,11,11,11,11,11,
            11,11,11,11,11,11,11,11,11,11,
            11,8,12,6,6,6,6,6,6,6,
            6,197,209,222,228,216,557,558,276,198,
            94,104,272,181,1,234,234,234,234,297,
            209,222,228,216,103,234,363,209,222,228,
            216,102,429,209,222,228,216,101,495,209,
            222,228,216,100,99,178,176,175,177,673,
            242,250,561,242,250,786,179,274,279,109,
            617,242,250,728,242,250,784,107,793,797,
            180,803,190,783,189,188,281,187,291,823,
            282,785,789,287,787,364,616,88,286,799,
            285,791,798,672,744,822,430,829,269,794,
            811,831,830,832,186,836,837,820,840,839,
            496,854,867,868,874,844,881,882,877,886,
            858,887,890,893,885,894,848,896,562,899,
            271,902,897,906,907,908,910,849,912,913,
            914,917,921,926,923,925,932,916,933,934,
            937,939,940,941,949,950,943,952,946,954,
            957,956,963,958,964,967,968,966,971,977,
            979,980,981,982,983,984,985,988,992,991,
            994,996,1000,1001,1002,999,1008,1009,1013,1014,
            1015,1016,1018,1021,1022,1025,1026,1027,1029,1030,
            1037,1043,1044,1045,1046,1028,1050,1052,1053,1055,
            1056,1058,1057,1061,1062,1063,1066,1065,1073,1076,
            1077,1078,1080,1081,1082,1084,1087,1093,1094,1088,
            1096,1102,1101,1107,1095,1108,1109,1110,1111,1112,
            1118,1120,1119,1122,1121,1127,1128,1132,1133,1131,
            1138,1139,1140,1143,1145,1144,1149,1154,1150,1157,
            1151,1159,1158,1163,1164,1165,1172,1167,1173,1177,
            1179,1182,1178,1166,1184,1188,1190,1189,1193,1195,
            1196,1199,1203,1205,1206,1207,1209,1210,1212,1213,
            1214,1221,1216,1220,1222,1228,1229,1230,1235,1239,
            1240,1242,1246,1231,1248,1252,1254,1256,1258,1260,
            1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,
            1282,1284,1286,1288,1290,1292,1294,1296,1298,1300,
            1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,
            1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,
            1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,
            1362,1364,1366,1368,1370,1372,1374,2,729,1376,
            1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,
            1398,1400,1402,1404,1406,1408,1410,1412,1414,1416,
            1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,
            1438,1440,1442,1444,1446,1448,1450,1452,1454,1456,
            1458,1460,1462,1464,1466,1468,1470,1472,1474,1476,
            1478,1480,1482,1484,1486,1488,1490,1492,1494,1496,
            1498,1500,624,624
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,0,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,0,88,89,
            90,91,92,93,94,95,96,97,0,12,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,0,88,89,90,91,
            92,93,94,95,96,97,0,12,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,0,73,
            0,0,4,0,4,0,1,9,0,9,
            0,0,2,87,0,0,0,16,7,16,
            0,13,6,8,98,99,0,13,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,22,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,0,0,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,15,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,0,0,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,15,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,0,0,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            15,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            0,0,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,15,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,0,0,2,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,72,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,0,0,2,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,72,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,0,0,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,0,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,0,0,0,0,0,2,0,3,
            0,9,0,0,10,2,0,0,0,17,
            18,19,0,13,6,23,9,22,26,21,
            0,29,30,70,17,18,19,32,8,0,
            23,0,0,26,2,4,29,30,0,0,
            0,0,4,3,3,0,0,8,0,0,
            21,3,7,0,22,6,10,0,0,66,
            67,68,69,0,32,2,71,0,66,67,
            68,69,66,67,68,69,0,0,66,67,
            68,69,87,0,31,8,0,20,12,6,
            0,0,2,2,0,0,0,11,3,0,
            4,2,0,0,10,0,0,5,0,4,
            7,0,4,2,8,0,0,0,3,0,
            3,0,0,0,8,0,0,70,70,3,
            0,9,0,3,0,0,13,5,17,4,
            6,0,0,0,2,2,0,28,0,0,
            0,3,0,12,4,0,31,11,0,0,
            2,0,10,0,5,0,0,0,7,20,
            4,6,0,0,2,0,0,0,3,6,
            0,14,27,7,7,5,0,24,0,0,
            0,0,0,0,0,3,3,0,4,9,
            0,0,5,0,13,0,17,6,0,0,
            0,0,12,2,28,7,6,0,0,14,
            11,18,0,0,0,0,9,0,6,4,
            0,0,2,6,0,0,0,0,0,0,
            6,3,7,7,5,14,0,10,24,3,
            27,33,0,0,0,0,2,4,70,0,
            5,0,0,11,0,0,0,0,7,7,
            0,0,0,2,0,0,6,11,19,7,
            16,14,0,18,9,0,0,0,6,0,
            0,0,3,0,4,9,0,0,2,8,
            13,16,0,0,0,0,3,33,11,4,
            0,0,10,2,21,5,0,0,0,0,
            0,0,2,19,7,7,10,0,0,0,
            0,0,5,12,5,4,0,0,8,20,
            0,0,0,15,3,9,4,0,0,0,
            13,2,0,0,0,8,16,3,0,0,
            0,8,10,0,5,2,0,0,0,21,
            2,5,0,0,0,0,0,5,5,12,
            20,0,0,25,8,4,0,0,0,15,
            2,0,6,0,3,8,14,0,0,0,
            25,2,0,5,0,0,2,5,0,16,
            5,3,0,16,0,0,0,2,0,0,
            6,0,0,0,2,0,14,6,5,0,
            0,0,16,3,16,16,11,0,0,0,
            0,0,4,6,0,16,2,16,0,0,
            11,0,4,2,5,0,16,0,1,0,
            5,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,1,0,1,0,1,0,1,0,
            1,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            624,94,234,234,234,234,234,234,234,234,
            234,234,234,234,234,234,234,234,234,234,
            234,234,234,234,234,234,234,234,234,234,
            234,234,234,234,234,234,234,234,234,234,
            234,234,234,234,234,234,234,234,234,234,
            234,234,234,234,234,234,234,234,234,234,
            234,234,234,234,234,234,234,234,234,234,
            234,234,234,729,234,234,234,234,239,234,
            234,234,234,234,234,234,234,624,234,234,
            234,234,234,234,234,234,234,234,624,291,
            800,800,800,800,800,800,800,800,800,800,
            800,800,800,800,788,802,802,802,800,800,
            800,802,802,802,802,802,802,802,802,802,
            800,800,802,802,802,802,802,802,802,802,
            802,802,802,802,802,802,800,800,800,800,
            800,800,800,799,799,799,799,799,799,799,
            799,799,799,801,769,770,771,772,786,785,
            787,730,773,774,775,776,253,777,778,779,
            780,781,782,783,784,624,789,790,791,792,
            793,794,795,796,797,798,624,640,508,504,
            521,522,523,512,517,506,518,524,515,516,
            510,519,653,531,546,550,514,528,527,533,
            535,536,537,539,543,545,549,554,507,509,
            532,534,538,540,541,542,544,547,548,551,
            552,553,555,556,505,511,513,520,525,526,
            529,494,495,496,497,498,499,500,501,502,
            503,530,261,259,258,256,626,247,624,204,
            624,624,309,624,341,624,623,310,624,342,
            624,624,279,202,624,624,624,654,284,625,
            624,270,287,292,245,652,99,294,573,569,
            586,587,588,577,582,571,583,589,580,581,
            575,584,280,596,611,615,579,593,592,598,
            600,601,602,604,608,610,614,619,572,574,
            597,599,603,605,606,607,609,612,613,616,
            617,618,620,621,570,576,578,585,590,591,
            594,559,560,561,562,563,564,565,566,567,
            568,595,98,624,573,569,586,587,588,577,
            582,571,583,589,580,581,575,584,289,596,
            611,615,579,593,592,598,600,601,602,604,
            608,610,614,619,572,574,597,599,603,605,
            606,607,609,612,613,616,617,618,620,621,
            570,576,578,585,590,591,594,559,560,561,
            562,563,564,565,566,567,568,595,97,624,
            573,569,586,587,588,577,582,571,583,589,
            580,581,575,584,307,596,611,615,579,593,
            592,598,600,601,602,604,608,610,614,619,
            572,574,597,599,603,605,606,607,609,612,
            613,616,617,618,620,621,570,576,578,585,
            590,591,594,559,560,561,562,563,564,565,
            566,567,568,595,96,624,573,569,586,587,
            588,577,582,571,583,589,580,581,575,584,
            321,596,611,615,579,593,592,598,600,601,
            602,604,608,610,614,619,572,574,597,599,
            603,605,606,607,609,612,613,616,617,618,
            620,621,570,576,578,585,590,591,594,559,
            560,561,562,563,564,565,566,567,568,595,
            624,624,250,250,250,250,250,250,250,250,
            250,250,250,250,250,250,339,242,242,242,
            250,250,250,242,242,242,242,242,242,242,
            242,242,250,250,242,242,242,242,242,242,
            242,242,242,242,242,242,242,242,250,250,
            250,250,250,250,250,624,624,290,250,250,
            250,250,250,250,250,250,250,250,250,250,
            250,250,734,242,242,242,250,250,250,242,
            242,242,242,242,242,242,242,242,250,250,
            242,242,242,242,242,242,242,242,242,242,
            242,242,242,242,250,250,250,250,250,250,
            250,624,624,304,250,250,250,250,250,250,
            250,250,250,250,250,250,250,250,732,242,
            242,242,250,250,250,242,242,242,242,242,
            242,242,242,242,250,250,242,242,242,242,
            242,242,242,242,242,242,242,242,242,242,
            250,250,250,250,250,250,250,624,181,250,
            250,250,250,250,250,250,250,250,250,250,
            250,250,250,624,242,242,242,250,250,250,
            242,242,242,242,242,242,242,242,242,250,
            250,242,242,242,242,242,242,242,242,242,
            242,242,242,242,242,250,250,250,250,250,
            250,250,624,186,624,3,624,263,624,288,
            624,271,185,624,285,311,184,624,624,278,
            274,272,183,295,293,277,296,248,276,286,
            624,275,273,305,303,299,297,266,312,624,
            302,624,4,301,282,306,300,298,624,624,
            624,624,308,313,315,624,624,314,624,624,
            318,320,316,624,281,319,317,624,624,261,
            259,258,256,624,283,322,269,624,261,259,
            258,256,261,259,258,256,624,624,261,259,
            258,256,268,624,326,324,624,331,323,325,
            624,624,327,328,624,624,624,329,330,624,
            332,333,624,624,335,624,624,334,624,338,
            336,624,340,343,344,624,624,624,345,624,
            347,624,624,624,346,624,624,337,349,353,
            624,351,624,354,624,624,352,356,350,355,
            357,624,624,624,360,361,624,348,624,624,
            624,363,624,358,365,624,359,362,624,624,
            366,624,368,624,367,624,624,624,369,364,
            371,372,624,624,373,624,624,624,378,375,
            624,374,651,376,377,641,624,370,624,624,
            624,624,624,624,624,384,385,624,386,382,
            624,624,387,624,383,624,381,388,624,624,
            624,624,389,394,379,395,393,624,624,391,
            392,390,624,624,624,624,396,624,398,401,
            624,624,403,402,624,624,624,624,624,624,
            405,408,406,407,409,404,624,414,400,410,
            399,397,624,624,624,624,413,412,380,624,
            646,624,624,411,624,624,624,624,416,417,
            624,624,624,422,624,624,421,420,415,423,
            639,419,624,418,424,624,624,624,426,624,
            624,624,429,624,430,427,624,624,433,431,
            428,629,624,624,624,624,435,425,436,437,
            624,624,434,438,432,439,624,624,624,624,
            624,624,445,441,442,443,440,624,624,624,
            624,624,647,446,645,448,624,624,449,444,
            624,624,624,447,452,450,453,624,624,624,
            451,456,624,624,624,454,634,458,624,624,
            624,459,457,624,643,644,624,624,624,455,
            462,642,624,624,624,624,624,464,465,463,
            461,624,624,460,468,467,624,624,624,466,
            471,624,470,624,472,473,469,624,624,624,
            474,475,624,476,624,624,650,477,624,635,
            649,478,624,633,624,624,624,481,624,624,
            480,624,624,624,483,624,479,482,484,624,
            624,624,632,485,631,630,486,624,624,624,
            624,624,488,487,624,638,490,637,624,624,
            489,624,491,492,648,624,636,31,94,624,
            493,32,94,33,94,34,94,35,94,36,
            94,37,94,38,94,39,94,40,94,68,
            94,69,94,70,94,71,94,72,94,73,
            94,74,94,75,94,76,94,77,94,78,
            94,79,94,80,94,81,94,82,94,83,
            94,84,94,85,94,86,94,87,94,88,
            94,89,94,90,94,91,94,92,94,93,
            94,67,94,41,94,42,94,43,94,44,
            94,45,94,46,94,47,94,48,94,49,
            94,50,94,51,94,52,94,53,94,54,
            94,55,94,56,94,57,94,58,94,59,
            94,60,94,61,94,62,94,63,94,64,
            94,65,94,66,94,31,96,32,96,33,
            96,34,96,35,96,36,96,37,96,38,
            96,39,96,40,96,68,97,69,97,70,
            97,71,97,72,97,73,97,74,97,75,
            97,76,97,77,97,78,97,79,97,80,
            97,81,97,82,97,83,97,84,97,85,
            97,86,97,87,97,88,97,89,97,90,
            97,91,97,92,97,93,97,67,98,41,
            99,42,99,43,99,44,99,45,99,46,
            99,47,99,48,99,49,99,50,99,51,
            99,52,99,53,99,54,99,55,99,56,
            99,57,99,58,99,59,99,60,99,61,
            99,62,99,63,99,64,99,65,99,66,
            99
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
