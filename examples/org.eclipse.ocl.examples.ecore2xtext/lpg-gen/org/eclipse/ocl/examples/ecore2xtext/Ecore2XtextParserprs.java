/**
*******************************************************************************/

package org.eclipse.ocl.examples.ecore2xtext;

public class Ecore2XtextParserprs implements lpg.runtime.ParseTable, Ecore2XtextParsersym {
    public final static int ERROR_SYMBOL = 69;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 19;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 20;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 57;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 179;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 69;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 1603;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 0;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 384;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 74;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 143;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 448;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 65;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 65;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 1218;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 1219;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return Ecore2XtextParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            18,21,20,59,43,15,19,27,33,39,
            25,26,48,69,22,63,64,24,74,36,
            51,52,66,4,5,6,7,8,9,10,
            11,12,13,14,23,30,31,32,40,46,
            47,57,58,60,73,3,17,29,35,38,
            42,45,50,54,56,62,65,68,70,71,
            2,16,28,34,37,41,44,49,53,55,
            61,67,1,72
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,2,3,3,4,4,5,1,1,1,
            1,2,2,2,2,1,1,1,1,1,
            2,2,2,2,2,2,3,3,4,4,
            5,1,1,1,2,2,2,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            3,3,4,4,5,1,1,2,2,1,
            1,1,2,2,2,2,3,3,4,4,
            5,1,1,1,2,2,2,1,1,1,
            2,2,2,2,3,3,4,4,5,1,
            1,1,2,2,2,1,1,1,1,2,
            2,2,2,2,3,3,4,4,5,1,
            1,1,1,2,2,2,2,1,1,1,
            1,1,1,1,2,2,2,2,2,2,
            2,2,3,3,4,4,5,1,1,1,
            1,2,2,2,2,1,1,1,1,1,
            2,2,2,2,2,2,3,3,4,4,
            5,1,1,1,2,2,2,1,1,1,
            2,2,2,2,3,3,4,4,5,1,
            1,2,2,1,1,1,1,2,2,2,
            2,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,2,3,3,4,4,
            5,1,1,1,2,2,2,1,1,1,
            1,1,1,1,2,2,2,2,2,2,
            2,3,1,1,3,3,4,6,7,7,
            8,1,2,1,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,5,5,5,3,4,5,5,
            6,6,6,6,7,7,7,8,8,8,
            8,9,9,9,9,9,10,10,10,11,
            11,12,12,13,1,2,1,1,2,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,-91,-51,0,0,0,-17,
            0,0,0,-7,0,0,0,0,-2,0,
            0,0,0,-8,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-3,-44,
            0,-4,0,0,-77,0,0,-143,-5,-36,
            0,0,0,0,0,0,-11,-1,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -12,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-14,-15,0,-29,-103,0,
            0,0,-52,-16,0,0,0,0,0,0,
            0,0,0,0,0,0,-19,0,0,0,
            0,-20,-21,0,0,0,0,0,0,0,
            0,0,-35,0,0,0,-56,0,-30,-55,
            0,0,0,0,0,0,-22,0,0,0,
            0,0,0,-23,0,-120,0,0,0,-24,
            0,-40,0,0,0,0,0,0,0,0,
            0,-43,0,0,0,-13,0,0,0,-53,
            0,0,0,0,0,0,-54,0,0,0,
            -38,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-98,0,0,0,0,
            0,0,0,0,0,0,-57,-6,0,0,
            -100,0,0,0,0,0,0,0,0,0,
            0,-37,-58,0,0,-142,0,0,0,0,
            0,0,0,0,0,0,-59,-60,0,0,
            -149,0,0,0,0,0,0,0,0,0,
            0,0,-61,0,0,-151,0,0,0,0,
            0,0,0,0,0,0,-31,-39,0,0,
            -42,0,0,-62,0,0,-25,0,0,-163,
            0,0,0,0,0,0,0,0,0,0,
            0,-63,0,0,-171,0,0,0,-64,0,
            0,0,0,0,0,0,-161,0,0,-177,
            0,0,0,0,0,0,0,0,0,0,
            0,-45,0,0,-65,0,0,-66,0,0,
            -26,0,-67,-27,0,0,0,0,0,0,
            0,0,0,0,-168,-147,0,0,-92,0,
            0,0,-169,0,0,0,0,0,0,-175,
            -68,0,0,-148,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-150,0,
            0,0,0,0,0,0,0,0,0,0,
            -71,0,0,-162,0,0,0,-74,0,0,
            0,0,0,0,-79,-80,0,0,-165,0,
            0,0,-81,0,0,0,0,0,0,-82,
            -89,0,0,-166,0,0,0,-90,0,0,
            0,0,0,0,-93,-94,0,0,-170,0,
            0,0,-96,0,0,0,0,0,0,-97,
            -167,0,0,-176,0,0,0,-173,0,0,
            0,0,0,0,-174,-178,0,0,-179,0,
            0,0,-10,0,0,0,0,0,0,0,
            -33,0,0,0,0,-18,-46,0,0,0,
            0,0,0,0,0,0,0,0,-78,-47,
            0,0,0,0,0,0,0,0,-48,0,
            0,-9,0,0,-28,-107,0,0,0,-34,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-32,0,-69,0,0,0,0,
            0,0,-104,0,0,0,0,0,0,0,
            -84,0,-83,0,0,0,0,0,-129,0,
            0,0,0,0,0,0,0,-75,0,0,
            0,0,0,-72,0,0,0,-135,0,0,
            0,0,0,0,0,-76,0,0,0,-85,
            0,0,-124,0,0,-88,0,0,0,0,
            0,0,0,0,-105,0,0,0,0,0,
            0,0,-102,0,0,0,0,0,0,0,
            -137,0,0,0,-127,0,0,0,-108,0,
            0,0,0,-128,0,0,-109,0,0,0,
            0,0,0,0,-134,0,0,0,0,0,
            -152,0,0,0,-157,0,0,0,0,0,
            0,-49,0,-158,0,0,0,-50,0,-70,
            0,-41,0,0,0,0,0,0,0,-73,
            0,0,-86,0,0,-87,0,0,-110,0,
            0,0,0,0,0,-95,0,0,0,0,
            0,0,0,-121,0,0,0,-106,0,0,
            0,0,0,-123,0,0,0,0,0,-126,
            0,0,0,0,-136,0,0,-139,0,0,
            -159,0,0,0,-153,0,0,0,-164,0,
            0,-155,0,0,-156,0,0,0,-99,-111,
            -101,0,0,0,0,0,-138,0,0,-154,
            0,0,-172,0,0,0,0,0,-160,0,
            0,-112,-113,-114,0,0,0,0,0,0,
            -115,-116,0,0,0,0,-117,-118,-119,-122,
            0,0,0,0,-125,-130,-131,-132,0,0,
            0,0,-133,-140,-141,-144,0,0,0,0,
            -145,-146,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            61,46,46,46,46,46,46,46,46,46,
            46,46,6,6,6,6,6,6,47,47,
            47,47,47,47,47,47,62,62,62,62,
            62,62,62,62,62,62,8,8,8,8,
            8,8,48,48,48,48,48,48,63,63,
            63,63,63,63,63,63,63,63,63,63,
            63,63,63,63,63,63,63,63,63,63,
            63,63,63,63,63,63,63,63,63,63,
            9,9,9,9,9,9,49,49,49,49,
            64,64,64,64,64,64,1,1,1,1,
            1,1,50,50,50,50,50,50,65,65,
            65,65,65,65,7,7,7,7,7,7,
            51,51,51,51,51,51,66,66,66,66,
            66,66,66,66,5,5,5,5,5,5,
            52,52,52,52,52,52,52,52,67,67,
            67,67,67,67,67,67,67,67,67,67,
            67,67,13,13,13,13,13,13,53,53,
            53,53,53,53,53,53,68,68,68,68,
            68,68,68,68,68,68,3,3,3,3,
            3,3,54,54,54,54,54,54,69,69,
            69,69,69,69,10,10,10,10,10,10,
            55,55,55,55,70,70,70,70,70,70,
            70,70,39,24,40,25,15,35,20,21,
            22,26,36,27,42,43,28,29,30,31,
            32,33,18,37,34,38,44,44,44,44,
            44,44,56,56,56,56,56,56,71,71,
            71,71,71,71,71,71,71,71,71,71,
            71,71,41,57,57,11,2,2,2,2,
            2,2,58,58,72,72,60,60,60,60,
            60,60,60,60,60,60,60,60,60,60,
            60,74,74,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,4,16,17,12,61,61,61,
            61,61,61,61,61,61,61,61,61,61,
            61,61,61,61,61,61,61,61,61,61,
            61,61,61,61,61,19,19,45,45,45,
            45,59,59,59,59,14,14,14,14,14,
            14,14,14,14,14,1,91,18,21,20,
            46,252,254,19,209,253,373,300,447,288,
            288,298,299,296,209,290,291,292,461,1,
            2,3,4,5,6,7,8,9,10,11,
            289,293,273,274,286,287,297,294,295,554,
            209,371,3,1013,275,134,142,143,45,4,
            709,140,372,141,284,374,1072,280,50,373,
            300,216,217,288,298,299,296,438,290,291,
            292,99,1,2,3,4,5,6,7,8,
            9,10,11,289,293,273,274,286,287,297,
            294,295,214,215,371,656,108,1034,133,746,
            18,21,20,667,170,372,19,285,374,62,
            63,369,370,48,34,35,58,178,31,399,
            996,33,182,208,49,51,52,53,54,55,
            56,57,60,435,50,59,61,171,32,346,
            818,42,44,43,199,200,1051,586,78,79,
            91,92,64,198,618,74,219,88,89,90,
            626,527,229,65,67,68,69,70,71,72,
            73,76,90,66,75,77,215,378,384,382,
            633,380,375,379,376,377,383,644,1108,381,
            365,249,378,384,382,734,380,375,379,376,
            377,383,1083,1070,381,365,283,378,384,382,
            749,380,375,379,376,377,383,648,190,381,
            365,300,378,384,382,764,380,375,379,376,
            377,383,89,678,381,365,317,378,384,382,
            779,380,375,379,376,377,383,688,695,381,
            282,355,378,384,382,385,380,375,379,376,
            377,383,337,750,381,365,389,378,384,382,
            809,380,375,379,376,377,383,151,89,381,
            365,799,252,254,763,824,253,321,109,110,
            422,378,384,382,794,380,375,379,376,377,
            383,835,777,381,282,494,378,384,382,784,
            380,375,379,376,377,383,108,89,381,365,
            533,378,384,382,854,380,375,379,376,377,
            383,344,209,381,365,788,230,1096,833,869,
            851,330,1080,834,232,378,384,382,839,380,
            375,379,376,377,383,89,338,381,366,266,
            378,384,382,89,380,375,379,376,377,383,
            89,894,381,366,333,378,384,382,858,380,
            375,379,376,377,383,343,865,381,366,372,
            378,384,382,866,380,375,379,376,377,383,
            356,938,381,366,406,378,384,382,942,380,
            375,379,376,377,383,944,945,381,283,444,
            378,384,382,948,380,375,379,376,377,383,
            951,952,381,366,461,378,384,382,958,380,
            375,379,376,377,383,961,962,381,366,478,
            378,384,382,964,380,375,379,376,377,383,
            138,2,381,283,516,378,384,382,179,380,
            375,379,376,377,383,347,436,381,366,550,
            378,384,382,563,380,375,379,376,377,383,
            1219,603,381,366,261,264,583,209,258,262,
            263,229,153,154,259,260,151,268,271,615,
            209,265,269,270,226,148,150,266,267,209,
            160,161,606,850,158,637,857,42,44,43,
            655,149,152,155,157,1219,29,30,367,368,
            26,179,180,28,697,176,202,86,87,156,
            159,177,178,209,886,128,129,242,899,126,
            27,685,127,10,168,171,170,485,169,770,
            142,143,184,185,1135,140,181,141,827,120,
            122,121,182,183,192,102,104,493,572,168,
            171,170,1219,169,103,546,712,1219,951,1219,
            426,193,194,864,102,104,724,132,133,192,
            986,130,1219,103,131,209,1045,220,221,227,
            1219,1055,1219,95,22,25,24,1219,1219,1120,
            23,886,193,194,1114,879,120,122,121,209,
            192,1064,1219,245,758,146,147,209,218,219,
            144,244,145,1142,1125,54,172,175,174,1219,
            173,773,22,25,24,785,146,147,23,1219,
            1219,144,686,145,592,172,175,174,807,173,
            507,1219,790,255,257,1131,1145,256,367,368,
            727,94,95,739,367,368,663,210,211,209,
            93,112,113,243,202,203,802,255,257,1219,
            1219,256,1219,201,537,86,87,1149,845,45,
            47,46,1219,1151,861,105,107,1219,1219,111,
            873,123,125,124,106,883,196,197,915,210,
            211,911,196,197,195,889,45,47,46,914,
            195,1157,900,105,107,903,123,125,124,831,
            209,836,106,1160,241,367,368,719,212,213,
            814,88,89,921,1219,369,370,369,370,935,
            212,213,209,209,209,1219,240,239,238,369,
            370,209,209,1169,1163,237,236,209,209,209,
            209,233,232,231,228,209,209,209,209,222,
            272,225,224,209,209,209,209,223,235,234,
            335,209,209,1219,1219,334,336,1219,1219
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,0,0,0,4,4,6,5,5,0,
            1,2,3,13,14,0,7,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,0,0,1,2,4,0,
            6,0,7,0,1,2,3,13,14,50,
            7,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,0,0,
            0,1,2,3,0,1,2,3,0,54,
            10,13,14,50,10,17,18,0,20,21,
            22,62,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,0,0,1,2,4,0,6,49,
            0,0,9,49,11,13,14,59,60,17,
            0,63,20,64,4,57,6,25,26,27,
            28,0,30,13,14,58,34,35,36,0,
            0,39,40,41,4,43,6,0,0,0,
            47,0,4,13,14,0,5,17,38,0,
            20,0,1,2,57,25,26,27,28,8,
            30,0,1,2,34,35,36,0,0,39,
            40,41,5,43,0,1,2,3,0,1,
            2,7,8,9,10,11,12,58,0,15,
            16,0,1,2,3,58,0,46,7,8,
            9,10,11,12,55,56,15,16,0,1,
            2,3,0,0,53,7,8,9,10,11,
            12,0,0,15,16,0,1,2,3,61,
            0,53,7,8,9,10,11,12,0,0,
            15,16,0,1,2,3,0,0,60,7,
            8,9,10,11,12,0,0,15,16,0,
            1,2,3,0,0,0,7,8,9,10,
            11,12,0,0,15,16,0,1,2,3,
            0,0,0,7,8,9,10,11,12,0,
            0,15,0,1,2,3,57,0,59,7,
            8,9,10,11,12,0,0,15,16,4,
            4,6,65,0,0,1,2,3,13,14,
            44,7,8,9,10,11,12,0,23,15,
            16,0,1,2,3,55,56,0,7,8,
            9,10,11,12,55,56,15,16,0,1,
            2,3,55,56,0,7,8,9,10,11,
            12,0,0,15,16,0,1,2,3,0,
            0,0,7,8,9,10,11,12,0,0,
            15,0,1,2,3,0,1,2,7,8,
            9,10,11,12,0,0,15,12,4,4,
            6,0,0,0,1,2,3,13,14,44,
            7,8,9,10,11,12,0,23,15,16,
            0,1,2,3,0,44,0,7,8,9,
            10,11,12,48,0,15,16,0,1,2,
            3,0,0,0,7,8,9,10,11,12,
            0,0,15,0,1,2,3,0,0,0,
            7,8,9,10,11,12,0,0,15,16,
            4,0,6,0,0,0,1,2,3,13,
            14,44,7,8,9,10,11,12,0,23,
            15,16,0,1,2,3,0,1,2,7,
            8,9,10,11,12,0,0,15,16,0,
            1,2,3,0,0,0,7,8,9,10,
            11,12,0,0,15,16,4,0,6,0,
            0,0,1,2,3,13,14,0,7,17,
            18,19,0,21,22,0,4,0,6,53,
            5,0,1,2,3,13,14,0,7,17,
            18,19,0,21,22,0,4,0,6,4,
            57,6,59,60,0,13,14,0,4,17,
            6,50,5,18,19,0,24,13,14,0,
            5,17,0,31,32,0,0,5,24,37,
            4,50,6,0,0,31,32,0,5,13,
            14,37,5,17,0,0,20,0,4,4,
            6,6,0,1,2,29,0,13,14,0,
            4,17,6,18,19,21,22,0,0,13,
            14,0,5,17,0,0,20,0,4,4,
            6,6,5,0,0,29,0,13,14,5,
            4,17,6,18,19,21,22,45,0,13,
            14,0,4,17,6,4,20,6,0,1,
            2,13,14,0,13,14,0,4,17,6,
            4,20,6,0,0,0,13,14,0,13,
            14,33,4,0,6,0,1,2,3,0,
            42,13,14,0,5,10,33,0,1,2,
            0,23,0,45,38,42,9,5,11,0,
            1,2,0,1,2,3,0,0,9,0,
            11,5,10,0,0,1,2,0,5,0,
            1,2,5,9,49,11,7,0,0,1,
            2,0,1,2,47,7,0,0,7,0,
            4,0,6,0,1,2,47,0,1,2,
            3,49,0,0,18,19,0,1,2,3,
            0,47,0,0,4,0,6,5,5,4,
            0,6,0,54,0,1,2,3,18,19,
            0,0,54,18,19,54,0,1,2,3,
            0,1,2,0,1,2,53,0,8,52,
            0,8,0,1,2,3,0,51,0,1,
            2,3,0,1,2,0,1,2,0,1,
            2,3,0,0,12,0,52,12,5,0,
            1,2,0,1,2,3,46,8,52,46,
            0,1,2,0,0,1,2,4,0,6,
            0,0,12,51,4,0,6,0,0,51,
            48,18,19,48,0,1,2,0,18,19,
            52,0,5,0,0,46,5,0,5,5,
            0,0,5,51,0,5,5,0,48,45,
            0,0,5,0,0,5,5,0,5,0,
            0,0,0,0,0,0,0,0,0,45,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1219,1219,1219,1219,626,1497,1495,394,404,1219,
            622,667,523,512,507,1219,881,544,494,486,
            570,537,513,791,820,725,761,699,692,577,
            733,813,805,828,637,623,728,806,798,674,
            653,607,821,638,1219,1219,622,667,680,1219,
            1496,1219,881,1219,622,667,523,512,507,1383,
            881,544,494,486,570,537,513,791,820,725,
            761,699,692,577,733,813,805,828,637,623,
            728,806,798,674,653,607,821,638,1219,1219,
            1219,622,667,523,1219,622,667,523,1219,1467,
            934,1551,1550,1385,934,1536,1549,1219,1531,1537,
            1538,429,1522,1523,1524,1525,1526,1528,1529,1530,
            1533,1534,1535,1539,1540,1541,1542,1543,1544,1545,
            1546,1548,1219,1219,622,667,530,1219,1255,1233,
            1219,1219,915,1235,488,512,507,1532,1547,544,
            1219,1527,570,843,974,731,1315,725,761,699,
            692,1219,733,512,507,668,637,623,728,1219,
            1219,674,653,607,916,638,1256,1219,1219,1219,
            1355,1219,1499,512,507,1219,430,544,798,1219,
            570,1219,622,667,746,725,761,699,692,440,
            733,1219,622,667,637,623,728,1219,1219,674,
            653,607,722,638,1219,622,667,523,1219,622,
            667,881,440,915,934,488,529,552,1219,920,
            1559,1219,622,667,523,562,1219,1317,881,440,
            915,934,488,529,873,912,920,1561,1219,622,
            667,523,1219,1219,1301,881,440,915,934,488,
            529,1219,1219,920,1560,1219,622,667,523,1552,
            1219,1303,881,440,915,934,488,529,1219,1219,
            920,1564,1219,622,667,523,1219,1219,836,881,
            440,915,934,488,529,1219,1219,920,1570,1219,
            622,667,523,1219,1219,1219,881,440,915,934,
            488,529,1219,1219,920,1568,1219,622,667,523,
            1219,1219,1219,881,440,915,934,488,529,1219,
            1219,920,1219,622,667,523,677,1219,550,881,
            440,915,934,488,529,1219,1219,920,1574,936,
            1498,1299,1218,1219,1219,622,667,523,512,507,
            707,881,440,915,934,488,529,1219,791,920,
            1573,1219,622,667,523,873,1062,1219,881,440,
            915,934,488,529,873,1068,920,1572,1219,622,
            667,523,873,1139,1219,881,440,915,934,488,
            529,1219,1219,920,1571,1219,622,667,523,1219,
            1219,1219,881,440,915,934,488,529,1219,1219,
            920,1219,622,667,523,1219,622,667,881,440,
            915,934,488,529,1219,1219,920,529,990,1500,
            1405,1219,1219,1219,622,667,523,512,507,745,
            881,440,915,934,488,529,1219,791,920,1577,
            1219,622,667,523,1219,753,1219,881,440,915,
            934,488,529,1407,1219,920,1576,1219,622,667,
            523,1219,1219,1219,881,440,915,934,488,529,
            1219,1219,920,1219,622,667,523,1219,1219,1219,
            881,440,915,934,488,529,1219,1219,920,1580,
            1104,1219,1300,1219,1219,1219,622,667,523,512,
            507,760,881,440,915,934,488,529,1219,791,
            920,1582,1219,622,667,523,1219,622,667,881,
            440,915,934,488,529,1219,1219,920,1581,1219,
            622,667,523,1219,1219,1219,881,440,915,934,
            488,529,1219,1219,920,1583,390,1219,1465,1219,
            1219,1219,622,667,523,512,507,1219,881,544,
            494,486,1219,537,513,1219,671,1219,1466,1302,
            887,1219,622,667,523,512,507,1219,881,544,
            494,486,1219,537,513,1219,435,1219,1353,566,
            608,1557,439,432,1219,512,507,1219,959,544,
            1354,1384,900,494,486,1219,820,512,507,1219,
            909,544,1219,813,805,1219,1219,943,820,806,
            386,1386,1231,1219,1219,813,805,1219,1005,512,
            507,806,1029,544,1219,1219,570,1219,953,581,
            1381,1558,1219,622,667,577,1219,512,507,1219,
            489,544,1232,494,486,537,513,1219,1219,512,
            507,1219,1037,544,1219,1219,570,1219,978,596,
            1382,1566,1089,1219,1219,577,1219,512,507,1150,
            968,544,1333,494,486,537,513,1425,1219,512,
            507,1219,1086,544,1423,1025,570,1334,1219,622,
            667,512,507,1219,512,507,1219,1128,544,1424,
            993,570,1316,1219,1219,1219,512,507,1219,512,
            507,828,1021,1219,1406,1219,622,667,523,1219,
            821,512,507,1219,1172,934,828,1219,622,667,
            1219,791,1219,1427,798,821,915,1173,488,1219,
            622,667,1219,622,667,523,1219,1219,915,1219,
            488,1174,934,1219,1219,622,667,1219,1181,1219,
            622,667,1182,915,1234,488,881,1219,1219,622,
            667,1219,622,667,1357,881,1219,1219,881,1219,
            611,1219,1565,1219,622,667,1356,1219,622,667,
            523,1236,1219,1219,494,486,1219,622,667,523,
            1219,1358,1219,1219,641,1219,1569,1187,1188,656,
            1219,1567,1219,1469,1219,622,667,523,494,486,
            1219,1219,1468,494,486,1470,1219,622,667,523,
            1219,622,667,1219,622,667,1304,1219,440,1257,
            1219,440,1219,622,667,523,1219,1335,1219,622,
            667,523,1219,622,667,1219,622,667,1219,622,
            667,523,1219,1219,529,1219,1259,529,1189,1219,
            622,667,1219,622,667,523,1319,440,1258,1318,
            1219,622,667,1219,1219,622,667,695,1219,1578,
            1219,1219,529,1337,710,1219,1579,1219,1219,1336,
            1409,494,486,1408,1219,622,667,1219,494,486,
            1260,1219,1190,1219,1219,1320,1195,1219,1196,1197,
            1219,1219,1198,1338,1219,1203,1204,1219,1410,1426,
            1219,1219,1205,1219,1219,1206,1211,1219,1212,1219,
            1219,1219,1219,1219,1219,1219,1219,1219,1219,1428
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            67,46,48,52,52,96,44,44,168,148,
            49,50,84,168,69,69,39,148,69,52,
            52,52,52,52,96,96,84,173,14,71,
            142,26,158,150,71,60,99,84,99,128,
            39,39,82,44,44,44,44,44,168,168,
            33,173,52,52,77,14,52,52,52,52,
            52,52,52,52,52,52,52,52,181,71,
            52,196,142,52,191,26,54,158,52,52,
            52,52,185,150,201,71,206,60,52,52,
            1,84,52,52,39,52,50,84,168,84,
            168,33,33,44,44,77,77,44,44,44,
            44,44,44,44,44,44,44,44,44,181,
            181,44,196,196,44,191,191,54,54,44,
            44,44,44,185,185,201,201,206,206,44,
            44,130,1,44,44,44,96,84,84,84,
            84,33,77,181,196,191,54,185,201,206,
            99,130,130,168,84,84,31,99,99,130,
            84,168,31,31,99,84,84,31,84
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            38,31,29,23,21,22,33,42,32,18,
            19,24,37,26,30,36,25,27,28,39,
            40,43,34,35,41,17,20,13,14,6,
            4,0,2,10,3,1,49,0,2,7,
            1,54,0,61,0,65,0,60,59,57,
            0,5,0,9,11,2,1,47,0,33,
            42,13,14,6,4,0,62,0,58,0,
            23,13,14,6,4,0,2,3,1,52,
            0,64,0,1,8,3,15,7,10,2,
            12,11,9,16,0,55,56,0,24,25,
            26,27,28,63,29,30,31,20,59,32,
            33,34,17,21,22,35,36,37,38,39,
            40,41,42,43,18,14,13,60,0,1,
            8,3,15,7,10,2,12,11,9,44,
            0,38,13,14,6,4,0,18,19,17,
            21,22,13,14,6,4,0,24,31,37,
            17,32,13,14,6,4,0,18,19,6,
            4,0,17,29,20,13,14,6,4,0,
            2,1,53,0,2,7,3,1,50,0,
            2,3,1,51,0,2,8,1,46,0,
            12,2,1,48,0,2,1,45,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            15,46,46,46,46,53,7,7,83,63,
            46,46,51,17,46,46,5,67,46,46,
            46,46,46,46,53,53,61,85,20,47,
            59,89,65,87,28,13,55,51,55,46,
            125,5,46,7,7,7,7,7,83,83,
            3,22,46,46,49,30,46,46,46,46,
            46,46,46,46,46,46,46,46,91,121,
            46,97,129,46,95,42,9,75,46,46,
            46,46,93,69,99,121,133,101,46,46,
            1,61,46,46,125,46,46,51,17,51,
            17,106,3,7,7,117,49,7,7,7,
            7,7,7,7,7,7,7,7,7,118,
            91,7,135,97,7,117,95,111,9,7,
            7,7,7,116,93,139,99,118,133,7,
            7,57,11,7,7,7,53,61,51,61,
            51,106,117,118,135,117,111,116,139,118,
            55,61,57,83,61,61,46,55,55,61,
            51,17,46,46,55,61,51,46,61
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            72,0,47,0,56,0,4,0,52,0,
            59,0,70,0,61,0,16,17,0,63,
            0,15,35,18,11,12,0,69,0,26,
            36,27,28,29,30,31,32,33,37,34,
            38,15,18,11,12,0,64,0,48,0,
            19,0,44,0,23,0,58,0,65,0,
            14,0,71,0,67,0,16,17,15,21,
            22,11,12,0,24,40,25,15,41,11,
            12,0,45,0,62,0,68,0,66,0,
            49,0,53,0,51,0,50,0,54,0,
            42,43,11,12,0,1,7,3,2,0,
            6,8,1,2,0,5,3,1,2,0,
            20,11,12,0,1,5,2,0,39,11,
            12,0,55,0,1,10,2,0,9,1,
            2,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            3,18,20,29,28,1,19,17,21,22,
            23,25,32,68,24,15,51,66,67,45,
            52,53,41,35,36,37,38,39,42,43,
            44,48,49,50,54,55,56,57,58,61,
            62,63,65,4,5,6,7,8,9,10,
            11,12,13,14,26,27,30,2,46,64,
            33,16,40,60,69,34,47,59,70
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            86,89,88,126,111,83,87,95,101,107,
            93,94,0,135,90,130,131,92,138,104,
            118,119,132,72,73,74,75,76,77,78,
            79,80,81,82,91,98,99,100,108,114,
            115,124,125,127,137,0,85,97,103,106,
            110,113,117,121,123,129,0,134,136,0,
            71,84,96,102,105,109,112,116,120,122,
            128,133,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            1,16,27,38,49,60,71,82,93,104,
            11,23,34,45,56,67,78,89,100,111
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            7,21,32,43,54,65,76,87,98,109,
            7,21,32,43,54,65,76,87,98,109
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            2,10,3,13,5,7,1,9,8,6,
            2,10,3,13,5,7,1,9,8,6
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            44,45,48,50,47,51,46,53,52,49,
            44,45,48,50,47,51,46,53,52,49
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static char scopeStateSet[] = {
            51,141,75,91,112,87,51,26,1,1,
            51,141,75,91,112,87,51,26,1,1
        };
    };
    public final static char scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            127,4,141,92,1,0,44,92,4,0,
            127,4,92,1,0,124,4,139,8,0,
            45,0,124,4,8,0,123,4,138,3,
            0,48,0,123,4,3,0,122,4,137,
            15,0,50,0,122,4,15,0,121,4,
            136,7,0,47,0,121,4,7,0,120,
            4,135,10,0,51,0,120,4,10,0,
            119,4,134,2,0,46,0,119,4,2,
            0,118,4,133,12,0,53,0,118,4,
            12,0,117,4,132,11,0,52,0,117,
            4,11,0,116,4,131,9,0,49,0,
            116,4,9,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            869,710,854,695,839,824,809,680,794,1055,
            656,779,641,764,626,959,1034,611,596,749,
            435,581,734,566,0,869,710,854,695,839,
            824,809,680,794,1131,656,779,641,764,626,
            1021,1125,611,596,749,990,581,734,566,0,
            1169,1131,1055,1142,1160,1128,1157,1021,1125,959,
            1034,993,1114,1104,546,1096,1086,990,435,974,
            936,671,1072,390,1064,1145,1135,978,1045,1025,
            1120,916,1108,953,968,530,1051,489,1013,386,
            869,710,854,695,839,824,809,680,794,656,
            779,641,764,626,611,596,749,581,734,566,
            0,869,710,854,695,839,824,809,680,794,
            1064,656,779,641,764,626,978,1045,611,596,
            1096,749,953,671,1072,581,734,390,566,0,
            869,710,854,695,839,824,809,680,794,1142,
            656,779,641,764,626,993,1114,611,596,749,
            974,581,734,566,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,130,62,60,59,57,5,5,56,55,
            73,73,4,114,19,18,4,140,14,13,
            22,21,17,59,57,57,88,9,11,12,
            2,10,7,15,3,8,1,4,58,58,
            125,4,58,5,5,5,5,5,56,56,
            4,131,20,29,4,132,41,35,34,43,
            40,39,28,27,25,36,30,26,4,133,
            23,4,134,38,4,135,4,136,32,37,
            31,24,4,137,4,138,4,139,42,33,
            92,88,92,60,125,64,73,4,114,4,
            114,116,4,5,5,117,4,5,5,5,
            5,5,5,5,5,5,5,5,5,118,
            4,5,119,4,5,120,4,121,4,5,
            5,5,5,122,4,123,4,124,4,5,
            5,4,141,5,5,5,57,88,4,88,
            4,116,117,118,119,120,121,122,123,124,
            44,127,4,56,88,88,92,44,44,127,
            4,114,92,92,44,88,4,92,88
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "/>",
            ":",
            "<",
            "</",
            "</details>",
            "</eAnnotations>",
            "</eClassifiers>",
            "</eGenericType>",
            "</eOperations>",
            "</ePackages>",
            "</eParameters>",
            "</eStructuralFeatures>",
            "</eTypeArguments>",
            "</ecore:EPackage>",
            "</xmi:XMI>",
            "<?xml",
            "<details",
            "<eAnnotations",
            "<eClassifiers",
            "<eGenericType",
            "<eOperations",
            "<eParameters",
            "<eStructuralFeatures",
            "<eSubpackages",
            "<eTypeArguments",
            "<ecore:EPackage",
            "<xmi:XMI",
            "=",
            ">",
            "?>",
            "$empty",
            "IDENTIFIER",
            "STRING",
            "WS",
            "abstract",
            "changeable",
            "containment",
            "defaultValueLiteral",
            "derived",
            "eClassifier",
            "eClassifiers",
            "eExceptions",
            "eOpposite",
            "eSuperTypes",
            "eType",
            "encoding",
            "false",
            "instanceClassName",
            "key",
            "lowerBound",
            "name",
            "nsPrefix",
            "nsURI",
            "ordered",
            "resolveProxies",
            "serializable",
            "source",
            "transient",
            "true",
            "type",
            "unsettable",
            "upperBound",
            "value",
            "version",
            "volatile",
            "xmi",
            "xmlns",
            "xsi",
            "EOF_TOKEN",
            "ERROR_TOKEN",
            "XMLDocument_ecore_EPackage",
            "EcoreFeature_ecore_EClass_abst" +
            "ract",
            "EcoreFeature_ecore_EDataType_s" +
            "erializable",
            "EcoreFeature_ecore_EReference_" +
            "containment",
            "EcoreFeature_ecore_EReference_" +
            "resolveProxies",
            "EcoreFeature_ecore_EStructural" +
            "Feature_changeable",
            "EcoreFeature_ecore_EStructural" +
            "Feature_defaultValueLiteral",
            "EcoreFeature_ecore_EStructural" +
            "Feature_derived",
            "EcoreFeature_ecore_EStructural" +
            "Feature_transient",
            "EcoreFeature_ecore_EStructural" +
            "Feature_unsettable",
            "EcoreFeature_ecore_EStructural" +
            "Feature_volatile",
            "EcoreFeature_ecore_ETypedEleme" +
            "nt_ordered",
            "EcoreClass_ecore_EClass_eOpera" +
            "tions",
            "EcoreClass_ecore_EClass_eOpera" +
            "tions_8",
            "EcoreClass_ecore_EClass_eOpera" +
            "tions_3",
            "EcoreClass_ecore_EModelElement" +
            "_eAnnotations",
            "EcoreClass_ecore_EOperation_eP" +
            "arameters",
            "EcoreClass_ecore_ETypedElement" +
            "_eGenericType",
            "OtherElement",
            "EcoreFeature_ecore_ENamedEleme" +
            "nt_name",
            "EcoreFeature_ecore_EOperation_" +
            "eExceptions",
            "EcoreFeature_ecore_ETypedEleme" +
            "nt_eType",
            "OtherAttribute",
            "XMLAttribute_xsi_type",
            "EcoreClass_ecore_EClass_eStruc" +
            "turalFeatures",
            "EcoreClass_ecore_EClass_eStruc" +
            "turalFeatures_8",
            "EcoreClass_ecore_EClass_eStruc" +
            "turalFeatures_3",
            "EcoreFeature_ecore_EReference_" +
            "eOpposite",
            "EcoreFeature_ecore_ETypedEleme" +
            "nt_lowerBound",
            "EcoreFeature_ecore_ETypedEleme" +
            "nt_upperBound",
            "EcoreClass_ecore_EGenericType_" +
            "eTypeArguments",
            "EcoreClass_ecore_EGenericType_" +
            "eTypeArguments_8",
            "EcoreClass_ecore_EGenericType_" +
            "eTypeArguments_3",
            "EcoreFeature_ecore_EPackage_eC" +
            "lassifiers",
            "EcoreClass_ecore_EModelElement" +
            "_eAnnotations_8",
            "EcoreClass_ecore_EModelElement" +
            "_eAnnotations_3",
            "EcoreFeature_ecore_EAnnotation" +
            "_details",
            "EcoreFeature_ecore_EAnnotation" +
            "_source",
            "EcoreClass_ecore_EOperation_eP" +
            "arameters_8",
            "EcoreClass_ecore_EOperation_eP" +
            "arameters_3",
            "EcoreClass_ecore_EPackage_eCla" +
            "ssifiers",
            "EcoreClass_ecore_EPackage_eCla" +
            "ssifiers_8",
            "EcoreClass_ecore_EPackage_eCla" +
            "ssifiers_3",
            "EcoreFeature_ecore_EClass_eSup" +
            "erTypes",
            "InstanceClassNameAttribute",
            "EcoreClass_ecore_EPackage_eSub" +
            "packages_8",
            "EcoreClass_ecore_EPackage_eSub" +
            "packages_3",
            "EcoreFeature_ecore_EPackage_ns" +
            "Prefix",
            "EcoreFeature_ecore_EPackage_ns" +
            "URI",
            "EcoreClass_ecore_ETypedElement" +
            "_eGenericType_8",
            "EcoreClass_ecore_ETypedElement" +
            "_eGenericType_3",
            "EcoreFeature_ecore_EAnnotation" +
            "_details_8",
            "EcoreFeature_ecore_EAnnotation" +
            "_details_3",
            "EcoreFeature_ecore_EStringToSt" +
            "ringMapEntry_key",
            "EcoreFeature_ecore_EStringToSt" +
            "ringMapEntry_value",
            "Terminal_String",
            "EcoreRoot_ecore_EPackage",
            "EcoreRoot_ecore_EPackage_8",
            "EcoreRoot_ecore_EPackage_3",
            "XMLAttribute_xmi_version",
            "XMLAttribute_xmlns_",
            "Terminal_Identifier",
            "OtherElement_6",
            "OtherElement_2",
            "XmlElement",
            "XmlAttribute",
            "XMLDocument_ecore_EPackage_7",
            "XMLDocument_ecore_EPackage_2"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
