/**
*******************************************************************************/

package org.eclipse.ocl.examples.ecore2xtext;

public class Ecore2XtextParserprs implements lpg.runtime.ParseTable, Ecore2XtextParsersym {
    public final static int ERROR_SYMBOL = 67;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 19;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 20;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 57;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 179;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 67;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 1599;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 0;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 382;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 73;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 140;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 446;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 65;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 65;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 1216;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 1217;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return Ecore2XtextParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            18,21,20,59,43,15,19,27,33,39,
            25,26,48,69,22,63,64,24,73,36,
            51,52,66,4,5,6,7,8,9,10,
            11,12,13,14,23,30,31,32,40,46,
            47,57,58,60,72,3,17,29,35,38,
            42,45,50,54,56,62,65,68,70,71,
            2,16,28,34,37,41,44,49,53,55,
            61,67,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,2,3,3,4,4,5,1,1,1,
            1,2,2,2,2,1,1,1,1,1,
            2,2,2,2,2,2,3,3,4,4,
            5,1,1,1,2,2,2,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            3,3,4,4,5,1,1,2,2,1,
            1,1,2,2,2,2,3,3,4,4,
            5,1,1,1,2,2,2,1,1,1,
            2,2,2,2,3,3,4,4,5,1,
            1,1,2,2,2,1,1,1,1,2,
            2,2,2,2,3,3,4,4,5,1,
            1,1,1,2,2,2,2,1,1,1,
            1,1,1,1,2,2,2,2,2,2,
            2,2,3,3,4,4,5,1,1,1,
            1,2,2,2,2,1,1,1,1,1,
            2,2,2,2,2,2,3,3,4,4,
            5,1,1,1,2,2,2,1,1,1,
            2,2,2,2,3,3,4,4,5,1,
            1,2,2,1,1,1,1,2,2,2,
            2,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,2,3,3,4,4,
            5,1,1,1,2,2,2,1,1,1,
            1,1,1,1,2,2,2,2,2,2,
            2,3,1,1,3,3,4,6,7,7,
            8,1,2,1,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,5,5,5,3,4,5,5,6,6,
            6,6,7,7,7,8,8,8,8,9,
            9,9,9,9,10,10,10,11,11,12,
            12,13,1,2,1,1,2,2,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,-91,-51,0,0,0,-17,0,0,
            0,-7,0,0,0,0,-2,0,0,0,
            0,-8,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-3,-44,0,-4,
            0,0,-77,0,0,-143,-5,-36,0,0,
            0,0,0,0,-11,-1,0,0,0,0,
            0,0,0,0,0,0,0,0,-12,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-14,-15,0,-29,-103,0,0,0,
            -52,-16,0,0,0,0,0,0,0,0,
            0,0,0,0,-19,0,0,0,0,-20,
            -21,0,0,0,0,0,0,0,0,0,
            -35,0,0,0,-56,0,-30,-55,0,0,
            0,0,0,0,-22,0,0,0,0,0,
            0,-23,0,-120,0,0,0,-24,0,-40,
            0,0,0,0,0,0,0,0,0,-43,
            0,0,0,-13,0,0,0,-53,0,0,
            0,0,0,0,-54,0,0,0,-38,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-98,0,0,0,0,0,0,
            0,0,0,0,-57,-6,0,0,-100,0,
            0,0,0,0,0,0,0,0,0,-37,
            -58,0,0,-142,0,0,0,0,0,0,
            0,0,0,0,-59,-60,0,0,-149,0,
            0,0,0,0,0,0,0,0,0,0,
            -61,0,0,-151,0,0,0,0,0,0,
            0,0,0,0,-31,-39,0,0,-42,0,
            0,-62,0,0,-25,0,0,-163,0,0,
            0,0,0,0,0,0,0,0,0,-63,
            0,0,-171,0,0,0,-64,0,0,0,
            0,0,0,0,-161,0,0,-177,0,0,
            0,0,0,0,0,0,0,0,0,-45,
            0,0,-65,0,0,-66,0,0,-26,0,
            -67,-27,0,0,0,0,0,0,0,0,
            0,0,-168,-147,0,0,-92,0,0,0,
            -169,0,0,0,0,0,0,-175,-68,0,
            0,-148,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-150,0,0,0,
            0,0,0,0,0,0,0,0,-71,0,
            0,-162,0,0,0,-74,0,0,0,0,
            0,0,-79,-80,0,0,-165,0,0,0,
            -81,0,0,0,0,0,0,-82,-89,0,
            0,-166,0,0,0,-90,0,0,0,0,
            0,0,-93,-94,0,0,-170,0,0,0,
            -96,0,0,0,0,0,0,-97,-167,0,
            0,-176,0,0,0,-173,0,0,0,0,
            0,0,-174,-178,0,0,-179,0,0,0,
            -10,0,0,0,0,0,0,0,-33,0,
            0,0,0,-18,-46,0,0,0,0,0,
            0,0,0,0,0,0,-78,-47,0,0,
            0,0,0,0,0,0,-48,0,0,-9,
            0,0,-28,-107,0,0,0,-34,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-32,0,-69,0,0,0,0,0,0,
            -104,0,0,0,0,0,0,0,-84,0,
            -83,0,0,0,0,0,-129,0,0,0,
            0,0,0,0,0,-75,0,0,0,0,
            0,-72,0,0,0,-135,0,0,0,0,
            0,0,0,-76,0,0,0,-85,0,0,
            -124,0,0,-88,0,0,0,0,0,0,
            0,0,-105,0,0,0,0,0,0,0,
            -102,0,0,0,0,0,0,0,-137,0,
            0,0,-127,0,0,0,-108,0,0,0,
            0,-128,0,0,-109,0,0,0,0,0,
            0,0,-134,0,0,0,0,0,-152,0,
            0,0,-157,0,0,0,0,0,0,-49,
            0,-158,0,0,0,-50,0,-70,0,-41,
            0,0,0,0,0,0,0,-73,0,0,
            -86,0,0,-87,0,0,-110,0,0,0,
            0,0,0,-95,0,0,0,0,0,0,
            0,-121,0,0,0,-106,0,0,0,0,
            0,-123,0,0,0,0,0,-126,0,0,
            0,0,-136,0,0,-139,0,0,-159,0,
            0,0,-153,0,0,0,-164,0,0,-155,
            0,0,-156,0,0,0,-99,-111,-101,0,
            0,0,0,0,-138,0,0,-154,0,0,
            -172,0,0,0,0,0,-160,0,0,-112,
            -113,-114,0,0,0,0,0,0,-115,-116,
            0,0,0,0,-117,-118,-119,-122,0,0,
            0,0,-125,-130,-131,-132,0,0,0,0,
            -133,-140,-141,-144,0,0,0,0,-145,-146,
            0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            61,46,46,46,46,46,46,46,46,46,
            46,46,6,6,6,6,6,6,47,47,
            47,47,47,47,47,47,62,62,62,62,
            62,62,62,62,62,62,8,8,8,8,
            8,8,48,48,48,48,48,48,63,63,
            63,63,63,63,63,63,63,63,63,63,
            63,63,63,63,63,63,63,63,63,63,
            63,63,63,63,63,63,63,63,63,63,
            9,9,9,9,9,9,49,49,49,49,
            64,64,64,64,64,64,1,1,1,1,
            1,1,50,50,50,50,50,50,65,65,
            65,65,65,65,7,7,7,7,7,7,
            51,51,51,51,51,51,66,66,66,66,
            66,66,66,66,5,5,5,5,5,5,
            52,52,52,52,52,52,52,52,67,67,
            67,67,67,67,67,67,67,67,67,67,
            67,67,13,13,13,13,13,13,53,53,
            53,53,53,53,53,53,68,68,68,68,
            68,68,68,68,68,68,3,3,3,3,
            3,3,54,54,54,54,54,54,69,69,
            69,69,69,69,10,10,10,10,10,10,
            55,55,55,55,70,70,70,70,70,70,
            70,70,39,24,40,25,15,35,20,21,
            22,26,36,27,42,43,28,29,30,31,
            32,33,18,37,34,38,44,44,44,44,
            44,44,56,56,56,56,56,56,71,71,
            71,71,71,71,71,71,71,71,71,71,
            71,71,41,57,57,11,2,2,2,2,
            2,2,58,58,72,72,60,60,60,60,
            60,60,60,60,60,60,60,60,60,60,
            60,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,4,16,17,12,61,61,61,61,61,
            61,61,61,61,61,61,61,61,61,61,
            61,61,61,61,61,61,61,61,61,61,
            61,61,61,19,19,45,45,45,45,59,
            59,59,59,14,14,14,14,14,14,14,
            14,14,14,1,91,18,21,20,46,252,
            254,19,209,253,371,300,445,288,288,298,
            299,296,209,290,291,292,459,1,2,3,
            4,5,6,7,8,9,10,11,289,293,
            273,274,286,287,297,294,295,554,209,369,
            3,1011,275,134,142,143,45,4,709,140,
            370,141,284,372,1070,280,50,371,300,216,
            217,288,298,299,296,436,290,291,292,99,
            1,2,3,4,5,6,7,8,9,10,
            11,289,293,273,274,286,287,297,294,295,
            214,215,369,656,108,1032,133,746,18,21,
            20,667,170,370,19,285,372,62,63,367,
            368,48,34,35,58,178,31,397,994,33,
            182,208,49,51,52,53,54,55,56,57,
            60,435,50,59,61,171,32,346,818,42,
            44,43,199,200,1049,586,78,79,91,92,
            64,198,618,74,219,88,89,90,626,525,
            229,65,67,68,69,70,71,72,73,76,
            90,66,75,77,215,376,382,380,633,378,
            373,377,374,375,381,644,1106,379,363,249,
            376,382,380,732,378,373,377,374,375,381,
            1081,1068,379,363,283,376,382,380,747,378,
            373,377,374,375,381,648,190,379,363,300,
            376,382,380,762,378,373,377,374,375,381,
            89,678,379,363,317,376,382,380,777,378,
            373,377,374,375,381,688,695,379,282,355,
            376,382,380,383,378,373,377,374,375,381,
            335,750,379,363,389,376,382,380,807,378,
            373,377,374,375,381,151,89,379,363,799,
            252,254,763,822,253,321,109,110,422,376,
            382,380,792,378,373,377,374,375,381,833,
            777,379,282,494,376,382,380,784,378,373,
            377,374,375,381,108,89,379,363,533,376,
            382,380,852,378,373,377,374,375,381,342,
            209,379,363,788,230,1094,833,867,849,330,
            1078,834,232,376,382,380,837,378,373,377,
            374,375,381,89,338,379,364,266,376,382,
            380,89,378,373,377,374,375,381,89,894,
            379,364,333,376,382,380,856,378,373,377,
            374,375,381,341,863,379,364,372,376,382,
            380,864,378,373,377,374,375,381,354,938,
            379,364,406,376,382,380,942,378,373,377,
            374,375,381,944,945,379,283,444,376,382,
            380,948,378,373,377,374,375,381,951,952,
            379,364,461,376,382,380,958,378,373,377,
            374,375,381,961,962,379,364,478,376,382,
            380,964,378,373,377,374,375,381,138,2,
            379,283,516,376,382,380,179,378,373,377,
            374,375,381,347,436,379,364,550,376,382,
            380,563,378,373,377,374,375,381,1217,603,
            379,364,261,264,583,209,258,262,263,229,
            153,154,259,260,151,268,271,615,209,265,
            269,270,226,148,150,266,267,209,160,161,
            606,848,158,637,857,42,44,43,655,149,
            152,155,157,1217,29,30,365,366,26,179,
            180,28,697,176,202,86,87,156,159,177,
            178,209,884,128,129,242,897,126,27,685,
            127,10,168,171,170,483,169,770,142,143,
            184,185,1133,140,181,141,827,120,122,121,
            182,183,192,102,104,491,572,168,171,170,
            1217,169,103,544,712,1217,949,1217,426,193,
            194,864,102,104,724,132,133,192,984,130,
            1217,103,131,209,1043,220,221,227,1217,1053,
            1217,95,22,25,24,1217,1217,1118,23,886,
            193,194,1112,879,120,122,121,209,192,1062,
            1217,245,758,146,147,209,218,219,144,244,
            145,1140,1123,54,172,175,174,1217,173,773,
            22,25,24,785,146,147,23,1217,1217,144,
            686,145,592,172,175,174,807,173,507,1217,
            790,255,257,1129,1143,256,365,366,727,94,
            95,739,365,366,663,210,211,209,93,112,
            113,243,202,203,802,255,257,1217,1217,256,
            1217,201,537,86,87,1147,845,45,47,46,
            1217,1149,861,105,107,1217,1217,111,873,123,
            125,124,106,883,196,197,915,210,211,911,
            196,197,195,889,45,47,46,914,195,1155,
            900,105,107,903,123,125,124,831,209,836,
            106,1158,241,365,366,719,212,213,814,88,
            89,921,1217,367,368,367,368,935,212,213,
            209,209,209,1217,240,239,238,367,368,209,
            209,1167,1161,237,236,209,209,209,209,233,
            232,231,228,209,209,209,209,222,272,225,
            224,209,209,209,209,223,235,234,333,209,
            209,1217,1217,332,334,1217,1217
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,0,0,0,4,4,6,5,5,0,
            1,2,3,13,14,0,7,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,0,0,1,2,4,0,
            6,0,7,0,1,2,3,13,14,50,
            7,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,0,0,
            0,1,2,3,0,1,2,3,0,54,
            10,13,14,50,10,17,18,0,20,21,
            22,62,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,0,0,1,2,4,0,6,49,
            0,0,9,49,11,13,14,59,60,17,
            0,63,20,64,4,57,6,25,26,27,
            28,0,30,13,14,58,34,35,36,0,
            0,39,40,41,4,43,6,0,0,0,
            47,0,4,13,14,0,5,17,38,0,
            20,0,1,2,57,25,26,27,28,8,
            30,0,1,2,34,35,36,0,0,39,
            40,41,5,43,0,1,2,3,0,1,
            2,7,8,9,10,11,12,58,0,15,
            16,0,1,2,3,58,0,46,7,8,
            9,10,11,12,55,56,15,16,0,1,
            2,3,0,0,53,7,8,9,10,11,
            12,0,0,15,16,0,1,2,3,61,
            0,53,7,8,9,10,11,12,0,0,
            15,16,0,1,2,3,0,0,60,7,
            8,9,10,11,12,0,0,15,16,0,
            1,2,3,0,0,0,7,8,9,10,
            11,12,0,0,15,16,0,1,2,3,
            0,0,0,7,8,9,10,11,12,0,
            0,15,0,1,2,3,57,0,59,7,
            8,9,10,11,12,0,0,15,16,4,
            4,6,65,0,0,1,2,3,13,14,
            44,7,8,9,10,11,12,0,23,15,
            16,0,1,2,3,55,56,0,7,8,
            9,10,11,12,55,56,15,16,0,1,
            2,3,55,56,0,7,8,9,10,11,
            12,0,0,15,16,0,1,2,3,0,
            0,0,7,8,9,10,11,12,0,0,
            15,0,1,2,3,0,1,2,7,8,
            9,10,11,12,0,0,15,12,4,4,
            6,0,0,0,1,2,3,13,14,44,
            7,8,9,10,11,12,0,23,15,16,
            0,1,2,3,0,44,0,7,8,9,
            10,11,12,48,0,15,16,0,1,2,
            3,0,0,0,7,8,9,10,11,12,
            0,0,15,0,1,2,3,0,0,0,
            7,8,9,10,11,12,0,0,15,16,
            4,0,6,0,0,0,1,2,3,13,
            14,44,7,8,9,10,11,12,0,23,
            15,16,0,1,2,3,0,1,2,7,
            8,9,10,11,12,0,0,15,16,0,
            1,2,3,0,0,0,7,8,9,10,
            11,12,0,0,15,16,4,0,6,0,
            0,0,1,2,3,13,14,0,7,17,
            18,19,0,21,22,0,4,0,6,53,
            5,0,1,2,3,13,14,0,7,17,
            18,19,0,21,22,0,4,0,6,4,
            57,6,59,60,0,13,14,0,4,17,
            6,50,5,18,19,0,24,13,14,0,
            5,17,0,31,32,0,0,5,24,37,
            4,50,6,0,0,31,32,0,5,13,
            14,37,5,17,0,0,20,0,4,4,
            6,6,0,1,2,29,0,13,14,0,
            4,17,6,18,19,21,22,0,0,13,
            14,0,5,17,0,0,20,0,4,4,
            6,6,5,0,0,29,0,13,14,5,
            4,17,6,18,19,21,22,45,0,13,
            14,0,4,17,6,4,20,6,0,1,
            2,13,14,0,13,14,0,4,17,6,
            4,20,6,0,0,0,13,14,0,13,
            14,33,4,0,6,0,1,2,3,0,
            42,13,14,0,5,10,33,0,1,2,
            0,23,0,45,38,42,9,5,11,0,
            1,2,0,1,2,3,0,0,9,0,
            11,5,10,0,0,1,2,0,5,0,
            1,2,5,9,49,11,7,0,0,1,
            2,0,1,2,47,7,0,0,7,0,
            4,0,6,0,1,2,47,0,1,2,
            3,49,0,0,18,19,0,1,2,3,
            0,47,0,0,4,0,6,5,5,4,
            0,6,0,54,0,1,2,3,18,19,
            0,0,54,18,19,54,0,1,2,3,
            0,1,2,0,1,2,53,0,8,52,
            0,8,0,1,2,3,0,51,0,1,
            2,3,0,1,2,0,1,2,0,1,
            2,3,0,0,12,0,52,12,5,0,
            1,2,0,1,2,3,46,8,52,46,
            0,1,2,0,0,1,2,4,0,6,
            0,0,12,51,4,0,6,0,0,51,
            48,18,19,48,0,1,2,0,18,19,
            52,0,5,0,0,46,5,0,5,5,
            0,0,5,51,0,5,5,0,48,45,
            0,0,5,0,0,5,5,0,5,0,
            0,0,0,0,0,0,0,0,0,45,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1217,1217,1217,1217,624,1495,1493,392,402,1217,
            620,665,521,510,505,1217,879,542,492,484,
            568,535,511,789,818,723,759,697,690,575,
            731,811,803,826,635,621,726,804,796,672,
            651,605,819,636,1217,1217,620,665,678,1217,
            1494,1217,879,1217,620,665,521,510,505,1381,
            879,542,492,484,568,535,511,789,818,723,
            759,697,690,575,731,811,803,826,635,621,
            726,804,796,672,651,605,819,636,1217,1217,
            1217,620,665,521,1217,620,665,521,1217,1465,
            932,1547,1546,1383,932,1532,1545,1217,1527,1533,
            1534,427,1518,1519,1520,1521,1522,1524,1525,1526,
            1529,1530,1531,1535,1536,1537,1538,1539,1540,1541,
            1542,1544,1217,1217,620,665,528,1217,1253,1231,
            1217,1217,913,1233,486,510,505,1528,1543,542,
            1217,1523,568,841,972,729,1313,723,759,697,
            690,1217,731,510,505,666,635,621,726,1217,
            1217,672,651,605,914,636,1254,1217,1217,1217,
            1353,1217,1497,510,505,1217,428,542,796,1217,
            568,1217,620,665,744,723,759,697,690,438,
            731,1217,620,665,635,621,726,1217,1217,672,
            651,605,720,636,1217,620,665,521,1217,620,
            665,879,438,913,932,486,527,550,1217,918,
            1555,1217,620,665,521,560,1217,1315,879,438,
            913,932,486,527,871,910,918,1557,1217,620,
            665,521,1217,1217,1299,879,438,913,932,486,
            527,1217,1217,918,1556,1217,620,665,521,1548,
            1217,1301,879,438,913,932,486,527,1217,1217,
            918,1560,1217,620,665,521,1217,1217,834,879,
            438,913,932,486,527,1217,1217,918,1566,1217,
            620,665,521,1217,1217,1217,879,438,913,932,
            486,527,1217,1217,918,1564,1217,620,665,521,
            1217,1217,1217,879,438,913,932,486,527,1217,
            1217,918,1217,620,665,521,675,1217,548,879,
            438,913,932,486,527,1217,1217,918,1570,934,
            1496,1297,1216,1217,1217,620,665,521,510,505,
            705,879,438,913,932,486,527,1217,789,918,
            1569,1217,620,665,521,871,1060,1217,879,438,
            913,932,486,527,871,1066,918,1568,1217,620,
            665,521,871,1137,1217,879,438,913,932,486,
            527,1217,1217,918,1567,1217,620,665,521,1217,
            1217,1217,879,438,913,932,486,527,1217,1217,
            918,1217,620,665,521,1217,620,665,879,438,
            913,932,486,527,1217,1217,918,527,988,1498,
            1403,1217,1217,1217,620,665,521,510,505,743,
            879,438,913,932,486,527,1217,789,918,1573,
            1217,620,665,521,1217,751,1217,879,438,913,
            932,486,527,1405,1217,918,1572,1217,620,665,
            521,1217,1217,1217,879,438,913,932,486,527,
            1217,1217,918,1217,620,665,521,1217,1217,1217,
            879,438,913,932,486,527,1217,1217,918,1576,
            1102,1217,1298,1217,1217,1217,620,665,521,510,
            505,758,879,438,913,932,486,527,1217,789,
            918,1578,1217,620,665,521,1217,620,665,879,
            438,913,932,486,527,1217,1217,918,1577,1217,
            620,665,521,1217,1217,1217,879,438,913,932,
            486,527,1217,1217,918,1579,388,1217,1463,1217,
            1217,1217,620,665,521,510,505,1217,879,542,
            492,484,1217,535,511,1217,669,1217,1464,1300,
            885,1217,620,665,521,510,505,1217,879,542,
            492,484,1217,535,511,1217,433,1217,1351,564,
            606,1553,437,430,1217,510,505,1217,957,542,
            1352,1382,898,492,484,1217,818,510,505,1217,
            907,542,1217,811,803,1217,1217,941,818,804,
            384,1384,1229,1217,1217,811,803,1217,1003,510,
            505,804,1027,542,1217,1217,568,1217,951,579,
            1379,1554,1217,620,665,575,1217,510,505,1217,
            487,542,1230,492,484,535,511,1217,1217,510,
            505,1217,1035,542,1217,1217,568,1217,976,594,
            1380,1562,1087,1217,1217,575,1217,510,505,1148,
            966,542,1331,492,484,535,511,1423,1217,510,
            505,1217,1084,542,1421,1023,568,1332,1217,620,
            665,510,505,1217,510,505,1217,1126,542,1422,
            991,568,1314,1217,1217,1217,510,505,1217,510,
            505,826,1019,1217,1404,1217,620,665,521,1217,
            819,510,505,1217,1170,932,826,1217,620,665,
            1217,789,1217,1425,796,819,913,1171,486,1217,
            620,665,1217,620,665,521,1217,1217,913,1217,
            486,1172,932,1217,1217,620,665,1217,1179,1217,
            620,665,1180,913,1232,486,879,1217,1217,620,
            665,1217,620,665,1355,879,1217,1217,879,1217,
            609,1217,1561,1217,620,665,1354,1217,620,665,
            521,1234,1217,1217,492,484,1217,620,665,521,
            1217,1356,1217,1217,639,1217,1565,1185,1186,654,
            1217,1563,1217,1467,1217,620,665,521,492,484,
            1217,1217,1466,492,484,1468,1217,620,665,521,
            1217,620,665,1217,620,665,1302,1217,438,1255,
            1217,438,1217,620,665,521,1217,1333,1217,620,
            665,521,1217,620,665,1217,620,665,1217,620,
            665,521,1217,1217,527,1217,1257,527,1187,1217,
            620,665,1217,620,665,521,1317,438,1256,1316,
            1217,620,665,1217,1217,620,665,693,1217,1574,
            1217,1217,527,1335,708,1217,1575,1217,1217,1334,
            1407,492,484,1406,1217,620,665,1217,492,484,
            1258,1217,1188,1217,1217,1318,1193,1217,1194,1195,
            1217,1217,1196,1336,1217,1201,1202,1217,1408,1424,
            1217,1217,1203,1217,1217,1204,1209,1217,1210,1217,
            1217,1217,1217,1217,1217,1217,1217,1217,1217,1426
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            67,46,48,52,52,96,44,44,168,148,
            49,50,84,168,69,69,39,148,69,52,
            52,52,52,52,96,96,84,173,14,71,
            142,26,158,150,71,60,99,84,99,128,
            39,39,82,44,44,44,44,44,168,168,
            33,173,52,52,77,14,52,52,52,52,
            52,52,52,52,52,52,52,52,181,71,
            52,196,142,52,191,26,54,158,52,52,
            52,52,185,150,201,71,206,60,52,52,
            1,84,52,52,39,52,50,84,168,84,
            168,33,33,44,44,77,77,44,44,44,
            44,44,44,44,44,44,44,44,44,181,
            181,44,196,196,44,191,191,54,54,44,
            44,44,44,185,185,201,201,206,206,44,
            44,130,1,44,44,44,96,84,84,84,
            84,33,77,181,196,191,54,185,201,206,
            99,130,130,168,84,84,31,99,99,130,
            84,168,31,31,99,84,84,31,84
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            38,31,29,23,21,22,33,42,32,18,
            19,24,37,26,30,36,25,27,28,39,
            40,43,34,35,41,17,20,13,14,6,
            4,0,2,10,3,1,49,0,2,7,
            1,54,0,61,0,65,0,60,59,57,
            0,5,0,9,11,2,1,47,0,33,
            42,13,14,6,4,0,62,0,58,0,
            23,13,14,6,4,0,2,3,1,52,
            0,64,0,1,8,3,15,7,10,2,
            12,11,9,16,0,55,56,0,24,25,
            26,27,28,63,29,30,31,20,59,32,
            33,34,17,21,22,35,36,37,38,39,
            40,41,42,43,18,14,13,60,0,1,
            8,3,15,7,10,2,12,11,9,44,
            0,38,13,14,6,4,0,18,19,17,
            21,22,13,14,6,4,0,24,31,37,
            17,32,13,14,6,4,0,18,19,6,
            4,0,17,29,20,13,14,6,4,0,
            2,1,53,0,2,7,3,1,50,0,
            2,3,1,51,0,2,8,1,46,0,
            12,2,1,48,0,2,1,45,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            15,46,46,46,46,53,7,7,83,63,
            46,46,51,17,46,46,5,67,46,46,
            46,46,46,46,53,53,61,85,20,47,
            59,89,65,87,28,13,55,51,55,46,
            125,5,46,7,7,7,7,7,83,83,
            3,22,46,46,49,30,46,46,46,46,
            46,46,46,46,46,46,46,46,91,121,
            46,97,129,46,95,42,9,75,46,46,
            46,46,93,69,99,121,133,101,46,46,
            1,61,46,46,125,46,46,51,17,51,
            17,106,3,7,7,117,49,7,7,7,
            7,7,7,7,7,7,7,7,7,118,
            91,7,135,97,7,117,95,111,9,7,
            7,7,7,116,93,139,99,118,133,7,
            7,57,11,7,7,7,53,61,51,61,
            51,106,117,118,135,117,111,116,139,118,
            55,61,57,83,61,61,46,55,55,61,
            51,17,46,46,55,61,51,46,61
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            72,0,47,0,56,0,4,0,52,0,
            59,0,70,0,61,0,16,17,0,63,
            0,15,35,18,11,12,0,69,0,26,
            36,27,28,29,30,31,32,33,37,34,
            38,15,18,11,12,0,64,0,48,0,
            19,0,44,0,23,0,58,0,65,0,
            14,0,71,0,67,0,16,17,15,21,
            22,11,12,0,24,40,25,15,41,11,
            12,0,45,0,62,0,68,0,66,0,
            49,0,53,0,51,0,50,0,54,0,
            42,43,11,12,0,1,7,3,2,0,
            6,8,1,2,0,5,3,1,2,0,
            20,11,12,0,1,5,2,0,39,11,
            12,0,55,0,1,10,2,0,9,1,
            2,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            3,18,20,29,28,1,19,17,21,22,
            23,25,32,66,24,15,50,64,65,45,
            51,52,41,35,36,37,38,39,42,43,
            44,47,48,49,53,54,55,56,57,59,
            60,61,63,4,5,6,7,8,9,10,
            11,12,13,14,26,27,30,2,46,62,
            33,16,40,58,67,34,68
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            84,87,86,124,109,81,85,93,99,105,
            91,92,0,133,88,128,129,90,136,102,
            116,117,130,70,71,72,73,74,75,76,
            77,78,79,80,89,96,97,98,106,112,
            113,122,123,125,135,0,83,95,101,104,
            108,111,115,119,121,127,0,132,134,0,
            69,82,94,100,103,107,110,114,118,120,
            126,131,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            1,16,27,38,49,60,71,82,93,104,
            11,23,34,45,56,67,78,89,100,111
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            7,21,32,43,54,65,76,87,98,109,
            7,21,32,43,54,65,76,87,98,109
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            2,10,3,13,5,7,1,9,8,6,
            2,10,3,13,5,7,1,9,8,6
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            44,45,48,50,47,51,46,53,52,49,
            44,45,48,50,47,51,46,53,52,49
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static char scopeStateSet[] = {
            51,141,75,91,112,87,51,26,1,1,
            51,141,75,91,112,87,51,26,1,1
        };
    };
    public final static char scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            125,4,139,90,1,0,44,90,4,0,
            125,4,90,1,0,122,4,137,8,0,
            45,0,122,4,8,0,121,4,136,3,
            0,48,0,121,4,3,0,120,4,135,
            15,0,50,0,120,4,15,0,119,4,
            134,7,0,47,0,119,4,7,0,118,
            4,133,10,0,51,0,118,4,10,0,
            117,4,132,2,0,46,0,117,4,2,
            0,116,4,131,12,0,53,0,116,4,
            12,0,115,4,130,11,0,52,0,115,
            4,11,0,114,4,129,9,0,49,0,
            114,4,9,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            867,708,852,693,837,822,807,678,792,1053,
            654,777,639,762,624,957,1032,609,594,747,
            433,579,732,564,0,867,708,852,693,837,
            822,807,678,792,1129,654,777,639,762,624,
            1019,1123,609,594,747,988,579,732,564,0,
            1167,1129,1053,1140,1158,1126,1155,1019,1123,957,
            1032,991,1112,1102,544,1094,1084,988,433,972,
            934,669,1070,388,1062,1143,1133,976,1043,1023,
            1118,914,1106,951,966,528,1049,487,1011,384,
            867,708,852,693,837,822,807,678,792,654,
            777,639,762,624,609,594,747,579,732,564,
            0,867,708,852,693,837,822,807,678,792,
            1062,654,777,639,762,624,976,1043,609,594,
            1094,747,951,669,1070,579,732,388,564,0,
            867,708,852,693,837,822,807,678,792,1140,
            654,777,639,762,624,991,1112,609,594,747,
            972,579,732,564,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,128,62,60,59,57,5,5,56,55,
            71,71,4,112,19,18,4,138,14,13,
            22,21,17,59,57,57,86,9,11,12,
            2,10,7,15,3,8,1,4,58,58,
            123,4,58,5,5,5,5,5,56,56,
            4,129,20,29,4,130,41,35,34,43,
            40,39,28,27,25,36,30,26,4,131,
            23,4,132,38,4,133,4,134,32,37,
            31,24,4,135,4,136,4,137,42,33,
            90,86,90,60,123,64,71,4,112,4,
            112,114,4,5,5,115,4,5,5,5,
            5,5,5,5,5,5,5,5,5,116,
            4,5,117,4,5,118,4,119,4,5,
            5,5,5,120,4,121,4,122,4,5,
            5,4,139,5,5,5,57,86,4,86,
            4,114,115,116,117,118,119,120,121,122,
            44,125,4,56,86,86,90,44,44,125,
            4,112,90,90,44,86,4,90,86
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "/>",
            ":",
            "<",
            "</",
            "</details>",
            "</eAnnotations>",
            "</eClassifiers>",
            "</eGenericType>",
            "</eOperations>",
            "</ePackages>",
            "</eParameters>",
            "</eStructuralFeatures>",
            "</eTypeArguments>",
            "</ecore:EPackage>",
            "</xmi:XMI>",
            "<?xml",
            "<details",
            "<eAnnotations",
            "<eClassifiers",
            "<eGenericType",
            "<eOperations",
            "<eParameters",
            "<eStructuralFeatures",
            "<eSubpackages",
            "<eTypeArguments",
            "<ecore:EPackage",
            "<xmi:XMI",
            "=",
            ">",
            "?>",
            "$empty",
            "IDENTIFIER",
            "STRING",
            "WS",
            "abstract",
            "changeable",
            "containment",
            "defaultValueLiteral",
            "derived",
            "eClassifier",
            "eClassifiers",
            "eExceptions",
            "eOpposite",
            "eSuperTypes",
            "eType",
            "encoding",
            "instanceClassName",
            "key",
            "lowerBound",
            "name",
            "nsPrefix",
            "nsURI",
            "ordered",
            "resolveProxies",
            "serializable",
            "source",
            "transient",
            "type",
            "unsettable",
            "upperBound",
            "value",
            "version",
            "volatile",
            "xmi",
            "xmlns",
            "xsi",
            "EOF_TOKEN",
            "ERROR_TOKEN",
            "XMLDocument_ecore_EPackage",
            "EcoreFeature_ecore_EClass_abst" +
            "ract",
            "EcoreFeature_ecore_EDataType_s" +
            "erializable",
            "EcoreFeature_ecore_EReference_" +
            "containment",
            "EcoreFeature_ecore_EReference_" +
            "resolveProxies",
            "EcoreFeature_ecore_EStructural" +
            "Feature_changeable",
            "EcoreFeature_ecore_EStructural" +
            "Feature_defaultValueLiteral",
            "EcoreFeature_ecore_EStructural" +
            "Feature_derived",
            "EcoreFeature_ecore_EStructural" +
            "Feature_transient",
            "EcoreFeature_ecore_EStructural" +
            "Feature_unsettable",
            "EcoreFeature_ecore_EStructural" +
            "Feature_volatile",
            "EcoreFeature_ecore_ETypedEleme" +
            "nt_ordered",
            "EcoreClass_ecore_EClass_eOpera" +
            "tions",
            "EcoreClass_ecore_EClass_eOpera" +
            "tions_8",
            "EcoreClass_ecore_EClass_eOpera" +
            "tions_3",
            "EcoreClass_ecore_EModelElement" +
            "_eAnnotations",
            "EcoreClass_ecore_EOperation_eP" +
            "arameters",
            "EcoreClass_ecore_ETypedElement" +
            "_eGenericType",
            "OtherElement",
            "EcoreFeature_ecore_ENamedEleme" +
            "nt_name",
            "EcoreFeature_ecore_EOperation_" +
            "eExceptions",
            "EcoreFeature_ecore_ETypedEleme" +
            "nt_eType",
            "OtherAttribute",
            "XMLAttribute_xsi_type",
            "EcoreClass_ecore_EClass_eStruc" +
            "turalFeatures",
            "EcoreClass_ecore_EClass_eStruc" +
            "turalFeatures_8",
            "EcoreClass_ecore_EClass_eStruc" +
            "turalFeatures_3",
            "EcoreFeature_ecore_EReference_" +
            "eOpposite",
            "EcoreFeature_ecore_ETypedEleme" +
            "nt_lowerBound",
            "EcoreFeature_ecore_ETypedEleme" +
            "nt_upperBound",
            "EcoreClass_ecore_EGenericType_" +
            "eTypeArguments",
            "EcoreClass_ecore_EGenericType_" +
            "eTypeArguments_8",
            "EcoreClass_ecore_EGenericType_" +
            "eTypeArguments_3",
            "EcoreFeature_ecore_EPackage_eC" +
            "lassifiers",
            "EcoreClass_ecore_EModelElement" +
            "_eAnnotations_8",
            "EcoreClass_ecore_EModelElement" +
            "_eAnnotations_3",
            "EcoreFeature_ecore_EAnnotation" +
            "_details",
            "EcoreFeature_ecore_EAnnotation" +
            "_source",
            "EcoreClass_ecore_EOperation_eP" +
            "arameters_8",
            "EcoreClass_ecore_EOperation_eP" +
            "arameters_3",
            "EcoreClass_ecore_EPackage_eCla" +
            "ssifiers",
            "EcoreClass_ecore_EPackage_eCla" +
            "ssifiers_8",
            "EcoreClass_ecore_EPackage_eCla" +
            "ssifiers_3",
            "EcoreFeature_ecore_EClass_eSup" +
            "erTypes",
            "InstanceClassNameAttribute",
            "EcoreClass_ecore_EPackage_eSub" +
            "packages_8",
            "EcoreClass_ecore_EPackage_eSub" +
            "packages_3",
            "EcoreFeature_ecore_EPackage_ns" +
            "Prefix",
            "EcoreFeature_ecore_EPackage_ns" +
            "URI",
            "EcoreClass_ecore_ETypedElement" +
            "_eGenericType_8",
            "EcoreClass_ecore_ETypedElement" +
            "_eGenericType_3",
            "EcoreFeature_ecore_EAnnotation" +
            "_details_8",
            "EcoreFeature_ecore_EAnnotation" +
            "_details_3",
            "EcoreFeature_ecore_EStringToSt" +
            "ringMapEntry_key",
            "EcoreFeature_ecore_EStringToSt" +
            "ringMapEntry_value",
            "Terminal_String",
            "EcoreRoot_ecore_EPackage",
            "EcoreRoot_ecore_EPackage_8",
            "EcoreRoot_ecore_EPackage_3",
            "XMLAttribute_xmi_version",
            "XMLAttribute_xmlns_",
            "Terminal_Identifier",
            "OtherElement_6",
            "OtherElement_2",
            "XmlElement",
            "XmlAttribute",
            "XMLDocument_ecore_EPackage_7",
            "XMLDocument_ecore_EPackage_2"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
