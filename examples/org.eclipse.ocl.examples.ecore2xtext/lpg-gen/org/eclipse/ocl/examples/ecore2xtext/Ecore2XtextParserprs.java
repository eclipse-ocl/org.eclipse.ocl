/**
*******************************************************************************/

package org.eclipse.ocl.examples.ecore2xtext;

public class Ecore2XtextParserprs implements lpg.runtime.ParseTable, Ecore2XtextParsersym {
    public final static int ERROR_SYMBOL = 66;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 19;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 20;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 28;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 179;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 66;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 1551;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 0;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 379;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 72;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 138;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 426;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 64;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 64;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 1171;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 1172;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return Ecore2XtextParsersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            15,19,37,23,18,26,27,40,43,20,
            22,46,63,30,68,69,44,72,31,49,
            50,59,3,5,6,7,8,9,10,11,
            12,13,14,21,28,29,34,35,36,45,
            55,56,65,71,4,17,25,33,39,42,
            48,52,54,58,60,62,64,67,70,2,
            16,24,32,38,41,47,51,53,57,61,
            66,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            3,1,1,1,1,1,1,1,1,1,
            1,1,3,3,3,3,2,3,3,4,
            4,5,1,1,1,2,2,2,1,1,
            1,2,2,2,2,3,3,4,4,5,
            1,1,1,1,2,2,2,2,1,1,
            1,1,1,1,1,2,2,2,2,2,
            2,2,3,2,3,3,4,4,5,1,
            1,2,2,1,1,1,1,2,2,2,
            2,3,2,3,3,4,4,5,1,1,
            1,2,2,2,1,1,1,2,2,2,
            2,3,3,4,4,5,1,1,1,1,
            2,2,2,2,1,1,1,1,1,2,
            2,2,2,2,3,2,3,3,4,4,
            5,1,1,1,1,2,2,2,2,1,
            1,1,1,1,2,2,2,2,2,2,
            3,3,4,4,5,1,1,1,2,2,
            2,1,1,1,1,2,2,2,2,2,
            3,3,4,4,5,1,1,1,2,2,
            2,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,3,2,3,3,4,4,5,
            1,1,2,2,1,1,1,2,2,2,
            3,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,3,
            1,1,3,3,3,3,3,3,3,3,
            4,6,7,7,8,1,2,1,2,3,
            2,3,3,4,4,5,1,1,1,2,
            2,2,1,1,1,1,1,1,1,2,
            2,2,2,2,2,2,3,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,3,3,3,3,3,5,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,3,4,5,5,6,6,6,
            6,7,7,7,8,8,8,8,9,9,
            9,9,9,10,10,10,11,11,12,12,
            13,1,2,1,1,2,2,5,5,-91,
            -54,0,0,-51,0,0,0,0,0,0,
            0,-2,-6,0,0,0,0,-25,0,0,
            0,-37,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-3,0,0,-1,-4,0,-14,0,
            -5,-143,-26,-7,0,0,0,-8,0,-11,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-12,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-39,0,0,-161,-17,0,
            0,-35,0,-34,-15,0,0,-147,0,-168,
            0,0,0,0,0,0,0,0,0,0,
            0,-73,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-76,-16,-72,-111,0,
            0,0,0,0,-19,0,0,0,0,0,
            0,0,0,-89,0,0,0,0,0,0,
            0,0,0,0,0,-20,0,0,0,0,
            0,-21,-22,0,-23,0,0,0,-13,0,
            0,0,0,0,0,0,0,0,-24,-40,
            0,0,-75,0,0,0,0,-38,0,0,
            0,0,0,0,0,0,0,0,-43,0,
            0,-127,0,0,0,0,-98,0,0,0,
            0,0,0,0,0,0,-44,-45,0,0,
            -125,0,0,0,0,-100,0,0,0,0,
            0,0,0,0,0,0,-46,0,0,-60,
            0,0,-47,0,-142,0,0,0,0,0,
            0,0,0,0,0,-48,0,0,-149,0,
            0,0,0,0,0,0,0,0,-53,-169,
            0,0,0,-140,0,0,0,-151,0,0,
            0,0,0,0,0,0,0,0,-30,0,
            0,0,-42,0,0,0,0,-56,0,0,
            0,-163,0,0,0,0,0,0,0,0,
            0,-57,-58,0,0,-171,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-124,
            0,0,0,0,-177,0,0,0,0,0,
            0,0,0,0,-59,-61,0,0,-62,-63,
            0,0,0,-9,-66,0,0,0,-27,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-92,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-148,0,0,0,
            0,0,0,0,0,0,-69,0,0,0,
            -150,0,0,0,0,0,0,0,0,0,
            -70,-77,0,0,-162,0,0,0,0,0,
            0,0,0,0,-78,-79,0,0,-165,0,
            0,0,0,0,0,0,0,0,-80,-81,
            0,0,-166,0,0,0,0,0,0,0,
            0,0,-82,-83,0,0,-170,0,0,0,
            0,0,0,0,0,0,-84,-85,0,0,
            -176,0,0,0,0,0,0,0,0,0,
            -86,-87,0,0,-179,0,0,0,0,0,
            0,0,0,0,-10,-88,0,0,-175,-41,
            0,0,-29,0,0,0,-93,-18,0,0,
            0,-94,0,0,0,0,0,0,0,-55,
            0,0,0,0,-49,0,-96,0,0,0,
            0,-97,0,0,-32,-104,-33,0,0,0,
            0,-107,0,-108,0,0,0,0,0,0,
            0,0,-68,-109,0,0,0,0,-67,0,
            0,0,0,0,0,0,0,0,0,0,
            -112,0,0,0,-71,0,0,0,0,-106,
            0,0,-28,-110,-74,0,0,-119,0,0,
            0,0,0,0,0,0,0,-113,0,0,
            -31,0,0,-123,0,0,0,0,0,-114,
            0,0,-36,-64,0,0,0,-117,0,0,
            -120,0,0,0,-121,0,0,-103,0,0,
            -128,0,0,-105,0,0,-129,0,-130,0,
            0,-131,-132,0,-116,0,0,-118,0,0,
            0,-133,0,-50,0,-134,0,-122,0,0,
            0,0,0,-135,0,-153,0,0,0,0,
            -136,0,0,0,-156,0,0,0,-137,-52,
            -138,0,-139,0,-157,0,0,0,0,0,
            0,-65,-144,0,-145,-90,-146,0,-102,0,
            0,0,0,0,-167,0,0,-95,0,0,
            0,0,-173,0,0,-115,0,0,-126,0,
            0,0,-174,0,-141,0,0,-152,0,0,
            -178,-164,0,-155,0,0,-158,0,0,0,
            -99,0,-159,0,0,0,0,0,-101,-154,
            0,0,-160,0,0,0,0,-172,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            60,23,45,45,45,45,45,45,45,45,
            45,45,45,24,25,26,27,1,1,1,
            1,1,1,46,46,46,46,46,46,61,
            61,61,61,61,61,4,4,4,4,4,
            4,47,47,47,47,47,47,47,47,62,
            62,62,62,62,62,62,62,62,62,62,
            62,62,62,19,5,5,5,5,5,5,
            48,48,48,48,63,63,63,63,63,63,
            63,63,39,3,3,3,3,3,3,49,
            49,49,49,49,49,64,64,64,64,64,
            64,6,6,6,6,6,6,50,50,50,
            50,50,50,50,50,65,65,65,65,65,
            65,65,65,65,65,40,12,12,12,12,
            12,12,51,51,51,51,51,51,51,51,
            66,66,66,66,66,66,66,66,66,66,
            9,9,9,9,9,9,52,52,52,52,
            52,52,67,67,67,67,67,67,67,67,
            7,7,7,7,7,7,53,53,53,53,
            53,53,68,68,68,68,68,68,68,68,
            68,68,68,68,68,68,68,68,68,68,
            68,68,68,68,68,68,68,68,68,68,
            68,68,68,68,35,8,8,8,8,8,
            8,54,54,54,54,69,69,69,69,69,
            69,17,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            22,22,22,22,22,22,22,22,22,22,
            36,55,55,37,41,14,20,21,28,10,
            2,2,2,2,2,2,56,56,70,70,
            29,43,43,43,43,43,43,58,58,58,
            58,58,58,71,71,71,71,71,71,71,
            71,71,71,71,71,71,71,30,34,59,
            59,59,59,59,59,59,59,59,59,59,
            59,59,59,59,31,32,42,38,33,15,
            57,57,57,57,13,13,13,13,13,13,
            13,13,13,13,60,60,60,60,60,60,
            60,60,60,60,60,60,60,60,60,60,
            60,60,60,60,60,60,60,60,60,60,
            60,60,18,18,44,44,44,44,16,11,
            1,47,41,44,9,23,25,42,43,24,
            332,323,144,6,316,321,322,313,54,309,
            317,318,91,2,3,4,5,6,7,8,
            9,10,11,12,319,312,314,315,320,310,
            311,261,262,103,380,330,96,101,1024,677,
            1089,189,46,483,2,331,344,278,172,333,
            518,351,332,323,376,377,316,321,322,313,
            432,309,317,318,142,2,3,4,5,6,
            7,8,9,10,11,12,319,312,314,315,
            320,310,311,261,262,91,350,330,91,805,
            287,289,139,288,698,401,392,331,501,279,
            91,333,191,197,164,165,189,897,163,187,
            1095,162,843,156,158,157,182,183,184,185,
            190,192,1103,193,194,196,178,560,676,210,
            72,73,186,188,195,598,207,213,148,149,
            205,363,145,203,136,221,222,890,146,147,
            198,199,200,201,206,208,197,209,210,212,
            516,975,362,528,720,591,202,204,211,223,
            334,343,337,335,336,338,341,342,340,633,
            266,339,372,391,176,178,177,749,259,334,
            343,337,335,336,338,341,342,340,664,106,
            339,372,896,176,178,177,763,295,334,343,
            337,335,336,338,341,342,340,602,682,339,
            372,884,156,158,157,777,313,334,343,337,
            335,336,338,341,342,340,1109,688,339,372,
            12,70,71,704,791,331,334,343,337,335,
            336,338,341,342,340,1133,706,339,276,369,
            334,343,337,335,336,338,341,342,340,708,
            91,339,372,1127,245,223,224,819,405,334,
            343,337,335,336,338,341,342,340,519,187,
            339,372,1113,817,287,289,833,288,715,75,
            77,805,440,334,343,337,335,336,338,341,
            342,340,722,730,339,276,514,334,343,337,
            335,336,338,341,342,340,74,76,339,372,
            880,159,161,160,861,553,334,343,337,335,
            336,338,341,342,340,742,703,339,372,773,
            856,1098,736,875,628,869,79,81,847,241,
            334,343,337,335,336,338,341,342,340,374,
            375,339,373,277,334,343,337,335,336,338,
            341,342,340,78,80,339,373,348,334,343,
            337,335,336,338,341,342,340,894,429,339,
            373,387,334,343,337,335,336,338,341,342,
            340,922,924,339,373,423,334,343,337,335,
            336,338,341,342,340,925,929,339,277,461,
            334,343,337,335,336,338,341,342,340,937,
            940,339,373,479,334,343,337,335,336,338,
            341,342,340,942,944,339,373,497,334,343,
            337,335,336,338,341,342,340,945,947,339,
            277,535,334,343,337,335,336,338,341,342,
            340,954,955,339,373,571,334,343,337,335,
            336,338,341,342,340,585,956,339,373,91,
            808,290,292,627,291,296,299,959,606,293,
            297,298,964,53,55,294,295,52,303,306,
            636,1121,300,304,305,820,49,966,301,302,
            60,62,216,54,59,141,726,649,50,51,
            374,375,798,56,826,118,119,143,144,117,
            61,140,116,671,836,57,58,141,142,97,
            107,110,108,123,124,910,898,122,109,1131,
            121,227,70,71,115,593,132,135,134,133,
            445,41,44,725,859,720,42,43,352,107,
            110,108,120,29,31,168,169,109,873,167,
            943,743,166,518,753,132,135,134,133,1038,
            968,96,97,745,519,89,91,30,969,1140,
            95,971,90,226,227,975,1048,1056,428,23,
            25,977,225,24,92,45,48,978,1065,979,
            46,47,981,985,1070,866,89,91,317,111,
            114,112,987,90,828,1075,988,113,615,136,
            139,138,137,1106,989,1082,785,45,48,374,
            375,991,46,47,1118,409,111,114,112,995,
            762,997,1086,998,113,791,136,139,138,137,
            32,34,768,999,1124,1001,774,1005,1139,336,
            26,28,99,100,27,51,229,230,821,290,
            292,98,291,184,33,228,852,92,94,888,
            179,181,180,454,93,281,221,222,502,26,
            28,529,914,27,903,92,94,906,159,161,
            160,830,93,910,179,181,180,374,375,851,
            263,72,73,373,223,224,376,377,919,1172,
            1172,1172,1172,1172,376,377,1172,1172,1172,1172,
            1172,1172,1172,376,377,1172,1148,1172,1172,1143,
            1172,1172
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,0,0,0,4,0,5,7,0,1,
            2,0,1,2,14,15,0,9,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,0,0,1,2,4,
            0,0,7,0,4,47,10,46,12,14,
            15,56,57,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            0,0,1,2,48,0,0,1,2,3,
            0,10,0,12,14,0,6,11,18,56,
            57,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,0,1,2,0,48,
            0,0,4,0,4,7,50,7,0,0,
            60,61,14,15,14,15,18,62,18,21,
            58,21,60,61,26,27,28,29,63,31,
            30,0,0,35,36,37,5,0,40,41,
            42,4,44,0,7,0,0,4,0,54,
            4,14,15,7,6,18,0,0,21,58,
            14,15,6,26,27,28,29,64,31,0,
            1,2,35,36,37,0,0,40,41,42,
            34,44,0,1,2,3,0,1,2,43,
            8,9,10,11,12,13,0,0,16,17,
            0,1,2,3,0,1,2,0,8,9,
            10,11,12,13,0,46,16,17,0,1,
            2,3,0,1,2,0,8,9,10,11,
            12,13,46,58,16,17,0,1,2,3,
            0,1,2,0,8,9,10,11,12,13,
            0,0,16,17,0,1,2,3,54,0,
            0,0,8,9,10,11,12,13,46,0,
            16,17,0,1,2,3,0,1,2,3,
            8,9,10,11,12,13,61,11,16,17,
            0,1,2,3,54,0,1,2,8,9,
            10,11,12,13,9,0,16,0,1,2,
            3,0,1,2,3,8,9,10,11,12,
            13,0,11,16,17,0,50,6,0,1,
            2,3,0,1,2,45,8,9,10,11,
            12,13,47,0,16,17,0,1,2,3,
            0,1,2,3,8,9,10,11,12,13,
            0,50,16,17,0,1,2,3,0,1,
            2,3,8,9,10,11,12,13,0,11,
            16,17,0,1,2,3,54,0,1,2,
            8,9,10,11,12,13,9,0,16,0,
            1,2,3,53,0,1,2,8,9,10,
            11,12,13,0,10,16,12,4,50,59,
            0,1,2,3,0,0,0,45,8,9,
            10,11,12,13,47,0,16,17,0,1,
            2,3,0,0,45,0,8,9,10,11,
            12,13,48,0,16,17,0,1,2,3,
            0,0,1,2,8,9,10,11,12,13,
            9,0,16,0,1,2,3,0,0,1,
            2,8,9,10,11,12,13,0,0,16,
            17,13,4,6,0,1,2,3,56,57,
            0,45,8,9,10,11,12,13,47,0,
            16,17,0,1,2,3,56,57,0,0,
            8,9,10,11,12,13,0,49,16,17,
            0,1,2,3,0,58,0,60,8,9,
            10,11,12,13,0,0,16,17,4,0,
            0,7,0,1,2,3,6,0,14,15,
            8,0,18,19,20,0,5,23,24,4,
            0,0,7,0,0,1,2,3,59,14,
            15,0,8,18,19,20,0,0,23,24,
            4,4,0,7,7,0,0,0,6,4,
            14,15,7,51,18,0,19,20,0,14,
            15,25,4,18,0,7,59,0,32,33,
            25,0,14,15,38,51,18,32,33,0,
            0,23,24,38,4,0,0,7,0,4,
            4,0,7,7,14,15,5,0,18,14,
            15,21,5,18,0,19,20,0,23,24,
            30,4,0,0,7,0,4,0,5,7,
            5,14,15,6,0,18,14,15,21,0,
            6,0,0,4,0,0,7,6,4,0,
            5,7,0,14,15,6,34,18,14,15,
            21,0,0,0,0,43,4,6,4,7,
            0,7,0,1,2,3,14,15,14,15,
            8,0,0,39,22,4,22,0,7,0,
            0,4,0,0,7,14,15,4,6,0,
            7,14,15,0,0,1,2,14,15,22,
            0,1,2,3,10,22,12,0,8,0,
            39,0,5,51,0,1,2,0,1,2,
            0,0,8,0,0,8,0,1,2,0,
            0,1,2,4,8,0,7,0,8,0,
            5,4,48,4,7,0,7,0,19,20,
            5,51,0,1,2,3,19,20,19,20,
            0,0,1,2,4,0,0,7,0,55,
            0,6,55,5,13,0,1,2,0,19,
            20,55,0,0,6,55,0,5,13,0,
            1,2,3,0,1,2,3,0,1,2,
            3,0,0,0,52,0,1,2,3,6,
            49,0,0,1,2,0,1,2,3,0,
            1,2,3,0,49,13,0,4,0,0,
            7,0,4,0,0,7,0,6,0,6,
            6,52,19,20,6,52,0,19,20,0,
            53,0,6,0,0,6,0,6,53,6,
            6,49,6,0,0,0,0,52,0,6,
            6,6,53,0,6,0,0,0,0,6,
            0,6,5,5,0,5,0,0,0,5,
            0,5,5,5,0,5,0,0,0,5,
            0,5,5,5,0,5,0,0,0,5,
            0,5,5,5,0,5,0,0,0,5,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            1172,1172,1172,1172,635,1172,440,1442,1172,402,
            973,1172,402,973,546,525,1172,679,555,517,
            485,787,745,553,552,735,886,872,871,858,
            801,857,703,702,740,844,843,830,688,659,
            829,816,815,739,802,1172,1172,402,973,692,
            1172,1172,1443,1172,1444,1191,925,1238,482,546,
            525,885,744,555,517,485,787,745,553,552,
            735,886,872,871,858,801,857,703,702,740,
            844,843,830,688,659,829,816,815,739,802,
            1172,1172,402,973,1209,1172,1172,402,973,991,
            1172,925,1172,482,1431,1172,434,484,1418,885,
            915,1413,1409,1419,1420,1404,1405,1406,1407,1408,
            1410,1411,1412,1415,1416,1417,1421,1422,1423,1424,
            1425,1426,1427,1428,1430,1172,402,973,1172,1211,
            1172,1172,573,1172,949,1342,1275,1273,1172,1172,
            1414,1429,546,525,546,525,555,423,555,787,
            393,787,431,427,886,872,871,858,917,857,
            801,1172,1172,844,843,830,454,1172,829,816,
            815,592,802,1172,1343,1172,1172,1446,1172,1389,
            630,546,525,1236,438,555,1172,1172,787,433,
            546,525,607,886,872,871,858,1171,857,1172,
            402,973,844,843,830,1172,1172,829,816,815,
            740,802,1172,402,973,991,1172,402,973,739,
            893,679,925,484,482,1003,1172,1172,927,1519,
            1172,402,973,991,1172,402,973,1172,893,679,
            925,484,482,1003,1172,1240,927,1521,1172,402,
            973,991,1172,402,973,1172,893,679,925,484,
            482,1003,1239,488,927,1520,1172,402,973,991,
            1172,402,973,1172,893,679,925,484,482,1003,
            1172,1172,927,1524,1172,402,973,991,1391,1172,
            1172,1172,893,679,925,484,482,1003,1241,1172,
            927,1530,1172,402,973,991,1172,402,973,991,
            893,679,925,484,482,1003,902,484,927,1528,
            1172,402,973,991,1390,1172,402,973,893,679,
            925,484,482,1003,679,1172,927,1172,402,973,
            991,1172,402,973,991,893,679,925,484,482,
            1003,1172,484,927,1534,1172,1277,608,1172,402,
            973,991,1172,402,973,478,893,679,925,484,
            482,1003,1193,1172,927,1533,1172,402,973,991,
            1172,402,973,991,893,679,925,484,482,1003,
            1172,1276,927,1532,1172,402,973,991,1172,402,
            973,991,893,679,925,484,482,1003,1172,484,
            927,1531,1172,402,973,991,1392,1172,402,973,
            893,679,925,484,482,1003,679,1172,927,1172,
            402,973,991,1344,1172,402,973,893,679,925,
            484,482,1003,1172,925,927,482,1445,1278,475,
            1172,402,973,991,1172,1172,1172,490,893,679,
            925,484,482,1003,1192,1172,927,1537,1172,402,
            973,991,1172,1172,660,1172,893,679,925,484,
            482,1003,1210,1172,927,1536,1172,402,973,991,
            1172,1172,402,973,893,679,925,484,482,1003,
            679,1172,927,1172,402,973,991,1172,1172,402,
            973,893,679,925,484,482,1003,1172,1172,927,
            1540,1003,1447,627,1172,402,973,991,885,1044,
            1172,889,893,679,925,484,482,1003,1194,1172,
            927,1542,1172,402,973,991,885,1122,1172,1172,
            893,679,925,484,482,1003,1172,1257,927,1541,
            1172,402,973,991,1172,398,1172,569,893,679,
            925,484,482,1003,1172,1172,927,1543,479,1172,
            1172,1453,1172,402,973,991,633,1172,546,525,
            893,1172,555,517,485,1172,1441,553,552,683,
            1172,1172,1454,1172,1172,402,973,991,570,546,
            525,1172,893,555,517,485,1172,1172,553,552,
            381,559,1172,1207,1517,1172,1172,1172,646,970,
            546,525,1208,1300,555,1172,517,485,1172,546,
            525,735,965,555,1172,1298,589,1172,703,702,
            735,1172,546,525,688,1302,555,703,702,1172,
            1172,553,552,688,978,1172,1172,1274,1172,994,
            578,1172,1299,1518,546,525,1439,1172,555,546,
            525,787,1438,555,1172,517,485,1172,553,552,
            801,502,1172,1172,1322,1172,961,1172,1437,1237,
            922,546,525,926,1172,555,546,525,787,1172,
            932,1172,1172,611,1172,1172,1323,934,384,1172,
            1480,1189,1172,546,525,944,740,555,546,525,
            787,1172,1172,1172,1172,739,1004,974,534,1255,
            1172,1387,1172,402,973,991,546,525,546,525,
            893,1172,1172,659,745,1018,745,1172,1190,1172,
            1172,1035,1172,1172,1256,546,525,1115,988,1172,
            1388,546,525,1172,1172,402,973,546,525,745,
            1172,402,973,991,925,745,482,1172,893,1172,
            659,1172,1479,1301,1172,402,973,1172,402,973,
            1172,1172,893,1172,1172,893,1172,402,973,1172,
            1172,402,973,597,893,1172,1526,1172,893,1172,
            1432,616,1212,649,1525,1172,1529,1172,517,485,
            1386,1303,1172,402,973,991,517,485,517,485,
            1172,1172,402,973,668,1172,1172,1527,1172,1455,
            1172,1000,1457,1173,1003,1172,402,973,1172,517,
            485,1456,1172,1172,1008,1458,1172,1499,1003,1172,
            402,973,991,1172,402,973,991,1172,402,973,
            991,1172,1172,1172,1324,1172,402,973,991,1011,
            1259,1172,1172,402,973,1172,402,973,991,1172,
            402,973,991,1172,1258,1003,1172,706,1172,1172,
            1538,1172,725,1172,1172,1539,1172,1015,1172,1021,
            1027,1326,517,485,1029,1325,1172,517,485,1172,
            1346,1172,1032,1172,1172,1033,1172,1042,1345,1046,
            1054,1260,1061,1172,1172,1172,1172,1327,1172,1069,
            1071,1073,1347,1172,1083,1172,1172,1172,1172,1085,
            1172,1087,1435,1235,1172,1403,1172,1172,1172,1254,
            1172,1500,1498,1497,1172,1496,1172,1172,1172,1452,
            1172,1440,1436,1297,1172,1188,1172,1172,1172,1187,
            1172,1186,1185,1550,1172,1501,1172,1172,1172,1551
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            82,44,78,84,84,46,86,86,146,151,
            79,80,104,146,93,93,88,151,93,84,
            84,84,84,84,46,46,104,191,161,139,
            197,171,153,26,14,197,49,104,49,76,
            88,88,121,86,86,86,86,86,146,146,
            39,191,84,33,161,84,84,84,84,123,
            139,84,84,203,197,84,179,171,84,84,
            185,153,95,26,116,14,84,84,84,84,
            84,84,84,84,84,84,84,84,100,197,
            1,104,84,84,88,84,80,104,146,104,
            146,39,39,86,33,33,86,86,86,86,
            123,123,86,86,203,203,86,179,179,86,
            86,185,185,95,95,116,116,86,86,86,
            86,86,86,86,86,86,86,86,86,100,
            100,127,1,86,86,86,46,104,104,104,
            104,39,33,123,203,179,185,95,116,100,
            49,127,127,146,104,104,31,49,49,127,
            104,146,31,31,49,104,104,31,104
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            22,30,32,33,34,23,24,39,43,19,
            20,25,38,26,27,28,29,31,35,36,
            37,40,41,42,44,21,18,14,15,7,
            4,0,2,10,12,1,48,0,2,9,
            1,47,0,64,0,56,57,0,25,26,
            27,28,29,22,30,31,32,21,60,33,
            34,35,18,23,24,36,37,38,39,40,
            41,42,43,44,14,61,0,61,60,58,
            0,62,0,6,0,5,0,2,8,1,
            55,0,59,0,2,3,1,52,0,2,
            1,54,0,1,13,12,11,16,10,3,
            9,8,2,17,0,2,3,1,53,0,
            63,0,2,1,46,0,1,13,12,11,
            16,10,3,9,8,2,45,0,34,14,
            43,15,7,4,0,19,20,7,4,0,
            19,20,18,23,24,14,15,7,4,0,
            25,32,33,18,14,38,15,7,4,0,
            30,21,18,14,15,7,4,0,2,3,
            11,1,50,0,2,8,3,1,51,0,
            14,39,15,7,4,0,22,14,15,7,
            4,0,2,13,1,49,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            11,42,42,42,42,7,42,42,60,64,
            42,42,45,13,42,42,18,72,42,42,
            42,42,42,42,7,7,62,102,70,53,
            104,88,90,22,20,106,9,45,9,42,
            66,18,42,42,42,42,42,42,60,60,
            5,125,42,3,80,42,42,42,42,49,
            55,42,42,108,129,42,98,92,42,42,
            100,74,24,38,47,26,42,42,42,42,
            42,42,42,42,42,42,42,42,43,129,
            1,62,42,42,66,42,42,45,13,45,
            13,133,5,42,110,3,42,42,42,42,
            122,49,42,42,137,108,42,115,98,42,
            42,120,100,121,24,121,47,42,42,42,
            42,42,42,42,42,42,42,42,42,122,
            43,51,16,42,42,42,7,62,45,62,
            45,133,110,122,137,115,120,121,121,122,
            9,62,51,60,62,62,42,9,9,62,
            45,13,42,42,9,62,45,42,62
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            70,0,47,0,46,0,43,0,22,0,
            60,0,15,16,0,57,0,58,0,68,
            0,67,0,52,0,24,25,26,27,40,
            41,28,29,31,32,42,33,17,14,10,
            11,0,54,0,18,0,53,0,48,0,
            56,0,63,0,37,10,38,11,0,44,
            0,13,0,71,0,1,4,2,0,62,
            0,15,16,14,20,21,10,11,0,23,
            35,36,14,10,30,11,0,65,0,66,
            0,39,17,14,10,11,0,50,0,51,
            0,61,0,64,0,69,0,49,0,1,
            6,7,2,0,1,3,9,2,0,4,
            3,1,2,0,10,34,11,0,19,10,
            11,0,1,5,2,0,1,8,2,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            3,18,20,29,33,28,1,19,17,21,
            23,24,25,32,65,22,15,49,63,64,
            44,40,50,51,35,36,37,38,39,41,
            42,43,46,47,48,52,53,54,55,56,
            58,59,60,62,4,5,6,7,8,9,
            10,11,12,13,14,26,27,30,2,45,
            61,16,57,66,34,67
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            80,84,102,88,83,91,92,105,108,85,
            87,0,126,95,131,132,109,134,96,113,
            114,123,69,70,71,72,73,74,75,76,
            77,78,79,86,93,94,99,100,101,110,
            119,120,128,133,0,82,90,98,104,107,
            112,116,118,122,0,125,127,130,0,68,
            81,89,97,103,106,111,115,117,121,124,
            129,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static byte scopePrefix[] = {
            1,16,27,38,49,60,71,82,93,104,
            11,23,34,45,56,67,78,89,100,111
        };
    };
    public final static byte scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static byte scopeSuffix[] = {
            7,21,32,43,54,65,76,87,98,109,
            7,21,32,43,54,65,76,87,98,109
        };
    };
    public final static byte scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            2,8,7,9,12,6,3,5,4,1,
            2,8,7,9,12,6,3,5,4,1
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            45,54,53,52,51,50,49,46,48,47,
            45,54,53,52,51,50,49,46,48,47
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static char scopeStateSet[] = {
            1,141,116,37,41,116,25,91,62,1,
            1,141,116,37,41,116,25,91,62,1
        };
    };
    public final static char scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            122,4,136,88,1,0,45,88,4,0,
            122,4,88,1,0,120,4,135,13,0,
            54,0,120,4,13,0,119,4,134,12,
            0,53,0,119,4,12,0,118,4,133,
            11,0,52,0,118,4,11,0,117,4,
            132,16,0,51,0,117,4,16,0,116,
            4,131,10,0,50,0,116,4,10,0,
            115,4,130,3,0,49,0,115,4,3,
            0,114,4,129,9,0,46,0,114,4,
            9,0,113,4,128,8,0,48,0,113,
            4,8,0,112,4,127,2,0,47,0,
            112,4,2,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            1143,1124,1140,1056,1118,1115,664,1035,1106,961,
            519,970,1024,1018,1089,1098,534,1004,630,381,
            384,683,890,479,1133,1127,1075,592,1109,611,
            720,994,1048,573,502,965,1065,978,1038,949,
            875,725,861,706,847,833,819,692,805,668,
            791,649,777,635,616,597,763,578,749,559,
            0,875,725,861,706,847,833,819,692,805,
            1075,668,791,649,777,635,994,1048,616,597,
            1098,763,965,683,890,578,749,479,559,0,
            875,725,861,706,847,833,819,692,805,1118,
            668,791,649,777,635,1018,1089,616,597,763,
            384,578,749,559,0,875,725,861,706,847,
            833,819,692,805,1056,668,791,649,777,635,
            970,1024,616,597,763,381,578,749,559,0,
            875,725,861,706,847,833,819,692,805,1124,
            668,791,649,777,635,1035,1106,616,597,763,
            1004,578,749,559,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,126,62,61,60,58,6,6,57,56,
            5,5,4,110,20,19,4,137,15,14,
            24,23,18,60,58,58,84,2,8,9,
            3,10,16,11,12,13,1,4,59,59,
            124,4,59,6,6,6,6,6,57,57,
            4,127,39,4,128,38,33,32,25,4,
            129,43,34,4,130,22,4,131,21,30,
            4,132,4,133,4,134,44,42,41,40,
            37,36,35,31,29,28,27,26,4,135,
            88,84,88,61,124,63,5,4,110,4,
            110,112,4,6,113,4,6,6,6,6,
            114,4,6,6,115,4,6,116,4,6,
            6,117,4,118,4,119,4,6,6,6,
            6,6,6,6,6,6,6,6,6,120,
            4,4,136,6,6,6,58,84,4,84,
            4,112,113,114,115,116,117,118,119,120,
            45,122,4,57,84,84,88,45,45,122,
            4,110,88,88,45,84,4,88,84
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            "/>",
            ":",
            "<",
            "</",
            "</details>",
            "</eAnnotations>",
            "</eClassifiers>",
            "</eGenericType>",
            "</eOperations>",
            "</ePackages>",
            "</eParameters>",
            "</eStructuralFeatures>",
            "</eTypeArguments>",
            "</ecore:EPackage>",
            "</xmi:XMI>",
            "<?xml",
            "<details",
            "<eAnnotations",
            "<eClassifiers",
            "<eGenericType",
            "<eOperations",
            "<ePackages",
            "<eParameters",
            "<eStructuralFeatures",
            "<eTypeArguments",
            "<ecore:EPackage",
            "<xmi:XMI",
            "=",
            ">",
            "?>",
            "$empty",
            "IDENTIFIER",
            "STRING",
            "WS",
            "abstract",
            "changeable",
            "containment",
            "defaultValueLiteral",
            "derived",
            "eClassifier",
            "eExceptions",
            "eOpposite",
            "eSuperTypes",
            "eType",
            "encoding",
            "instanceClassName",
            "key",
            "lowerBound",
            "name",
            "nsPrefix",
            "nsURI",
            "ordered",
            "resolveProxies",
            "serializable",
            "source",
            "transient",
            "type",
            "unsettable",
            "upperBound",
            "value",
            "version",
            "volatile",
            "xmi",
            "xmlns",
            "xsi",
            "EOF_TOKEN",
            "ERROR_TOKEN",
            "XmlRoot",
            "AbstractAttribute",
            "ChangeableAttribute",
            "ContainmentAttribute",
            "DefaultValueLiteralAttribute",
            "DerivedAttribute",
            "OrderedAttribute",
            "ResolveProxiesAttribute",
            "SerializableAttribute",
            "TransientAttribute",
            "UnsettableAttribute",
            "VolatileAttribute",
            "EAnnotation",
            "EAnnotation_8",
            "EAnnotation_3",
            "EDetail",
            "OtherElement",
            "OtherAttribute",
            "SourceAttribute",
            "XsiTypeAttribute",
            "EClassifier",
            "EClassifier_8",
            "EClassifier_3",
            "EOperation",
            "EStructuralFeature",
            "ESuperTypeAttribute",
            "InstanceClassNameAttribute",
            "NameAttribute",
            "EClassifierAttribute",
            "EDetail_8",
            "EDetail_3",
            "KeyAttribute",
            "ValueAttribute",
            "EExceptionsAttribute",
            "EGenericType",
            "EGenericType_8",
            "EGenericType_3",
            "ETypeArgument",
            "EOperation_8",
            "EOperation_3",
            "EParameter",
            "ETypeAttribute",
            "EOppositeAttribute",
            "EPackage_8",
            "EPackage_3",
            "NsPrefixAttribute",
            "NsURIAttribute",
            "EParameter_8",
            "EParameter_3",
            "EStructuralFeature_8",
            "EStructuralFeature_3",
            "LowerBoundAttribute",
            "UpperBoundAttribute",
            "ETypeArgument_8",
            "ETypeArgument_3",
            "ID",
            "OtherElement_6",
            "OtherElement_2",
            "XmlElement",
            "XmlAttribute",
            "RootEPackage",
            "RootEPackage_8",
            "RootEPackage_3",
            "XmiVersionAttribute",
            "XmlnsAttribute",
            "XmlRoot_7",
            "XmlRoot_2"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
