import 'Environment.ecore'
import 'Pivot.ecore'

package pivot

context Root
def : _env(env : env::Environment) : env::Environment =
	env
		.addElements(self.imports)
		.addElements(self.nestedPackage)

context Package
def : _env(env : env::Environment) : env::Environment =
	env
		.addElements(self.nestedPackage)
		.addElements(self.ownedType)

context Library
def : _env(env : env::Environment) : env::Environment =
	env
		.addElements(self.nestedPackage)
		.addElements(self.ownedType)
		.addElements(self.ownedPrecedence)

context DataType
def : _env(env : env::Environment) : env::Environment =
	-- FIXME need to translate NewPivotLookupVisitor.visitDatatype
	env
		--.addElements(self.ownedTemplateSignature.ownedParameter.parameteredElement.oclAsType(NamedElement))
		
context Class
def : _env(env : env::Environment) : env::Environment =
	env
		.addElements(self.ownedAttribute->select(not isStatic))
		.addElements(self.ownedOperation->select(not isStatic))
		.addElements(self.ownedBehavior)
		-- .addElements(self.ownedTemplateSignature.ownedParameter.parameteredElement.oclAsType(NamedElement))

context Metaclass
def : _env(env : env::Environment) : env::Environment =
	env
		.addElements(env.elements) -- add instance type properties FIXME Dummy valid expression. I can't access to instanceType
		.addElements(env.elements) -- add instance type operations FIXME Dummy valid expression. I can't access to instanceType 
	
context Enumeration
def : _env(env : env::Environment) : env::Environment =
	env
		.addElements(self.ownedLiteral)
		.addElements(self.ownedAttribute->select(not isStatic))
		.addElements(self.ownedOperation->select(not isStatic))
		.addElements(self.ownedBehavior)

context Operation
def : ownedParameter_env(env : env::Environment) : env::Environment =
	env
		--.addElements(self.ownedTemplateSignature.ownedParameter.parameteredElement.oclAsType(NamedElement))

def : _env(env : env::Environment) : env::Environment =
	env
		.addElements(self.ownedParameter)
		--.addElements(self.ownedTemplateSignature.ownedParameter.parameteredElement.oclAsType(NamedElement))

context LetExp
def : in_env(env : env::Environment) : env::Environment =
	env.nestedEnv()
		.addElement(self.variable)

context IterateExp
def : result_env(env : env::Environment) : env::Environment =
	env.nestedEnv()
		.addElements(self.iterator)
def : body_env(env : env::Environment) : env::Environment =
	env.nestedEnv()		
		.addElements(self.iterator)
		.addElement(self.result)
def : iterator_env(env : env::Environment, childIndex : Integer) : env::Environment =
	env.nestedEnv()
		.addElements(self.iterator->select(x| self.iterator->indexOf(x) < childIndex))		

context IteratorExp
def : body_env(env : env::Environment) : env::Environment =
	env.nestedEnv()
		.addElements(self.iterator)
def : iterator_env(env : env::Environment, childIndex : Integer) : env::Environment =
	env.nestedEnv()
		.addElements(self.iterator->select(x| self.iterator->indexOf(x) < childIndex))

context ExpressionInOCL
def : bodyExpression_env(env : env::Environment) : env::Environment =
	env.nestedEnv()
		.addElement(self.contextVariable)
		.addElement(self.resultVariable)

endpackage