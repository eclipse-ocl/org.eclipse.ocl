/**
 * <copyright>
 *
 * Copyright (c) 2010 E.D.Willink and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     E.D.Willink - initial API and implementation
 *
 * </copyright>
 *
 * $Id: EssentialOCL.xtext,v 1.5.6.2 2010/10/01 14:30:29 ewillink Exp $
 */
grammar org.eclipse.ocl.examples.xtext.essentialocl.EssentialOCL hidden(WS, ML_COMMENT, SL_COMMENT) //with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.ocl.examples.pivot/model/pivot.ecore" as pivot
import "platform:/resource/org.eclipse.ocl.examples.xtext.base/model/BaseCST.ecore" as base
import "platform:/resource/org.eclipse.ocl.examples.xtext.essentialocl/model/EssentialOCLCST.ecore" 
//generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"

Model returns ContextCS:
	name=('body'|'der'|'init'|'inv'|'post'|'pre') ':' ownedExpression=ExpCS ';'
;

terminal DOUBLE_QUOTED_STRING:
	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"'
;

terminal SINGLE_QUOTED_STRING :
	"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
; 

terminal ML_SINGLE_QUOTED_STRING	: "/'" -> "'/";
	
terminal ID :
	(('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*)
| 	("_" SINGLE_QUOTED_STRING)
;

terminal INT:											// String to allow diverse re-use
	('0'..'9')+
;

NUMBER_LITERAL returns BigNumber:					// Not terminal to allow parser backtracking to sort out "5..7"
	INT ('.' INT)? (('e'|'E') ('+'|'-')? INT)?
;

terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT : '--' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;

EssentialOCLReservedKeyword: 
	'and'
|	'else'
|	'endif'
|	'if'
|	'implies'
|	'in'
|	'let'
|	'not'
|	'or'
|	'then'
|	'xor'
;

EssentialOCLPrefixOperator:
	'-'|'not'
;

EssentialOCLInfixOperator:
	'*'|'/'|'+'|'-'|'>'|'<'|'>='|'<='|'='|'<>'|'and'|'or'|'xor'|'implies'|'.'|'->'
;

Identifier:
	ID
|	'e'
|	'E'
|	'body'
|	'der'
|	'init'
|	'inv'
|	'post'
|	'pre'
;

StringLiteral:
	SINGLE_QUOTED_STRING
;

PrefixOperator:						// Intended to be overridden
	EssentialOCLPrefixOperator
;

InfixOperator:						// Intended to be overridden
	EssentialOCLInfixOperator
;

//---------------------------------------------------------------------
//  Names
//---------------------------------------------------------------------
    
EssentialOCLUnrestrictedName returns ecore::EString:
	Identifier
;
    
UnrestrictedName returns ecore::EString:		// Intended to be overridden
	EssentialOCLUnrestrictedName
;

EssentialOCLUnreservedName returns ecore::EString:
	UnrestrictedName
;

UnreservedName returns ecore::EString:			// Intended to be overridden
	EssentialOCLUnreservedName
;
    
//---------------------------------------------------------------------
//  Types
//---------------------------------------------------------------------
PrimitiveTypeIdentifier:
	'Boolean'
|	'Integer'
|	'Real'
|	'String'
|	'UnlimitedNatural'
|	'OclAny'
|	'OclInvalid'
|	'OclVoid'
;

PrimitiveTypeCS returns base::PrimitiveTypeRefCS:
	name=PrimitiveTypeIdentifier
;
    
CollectionTypeIdentifier returns ecore::EString:
	'Set'
|	'Bag'
|	'Sequence'
|	'Collection'
|	'OrderedSet'
;

CollectionTypeCS returns CollectionTypeCS:
	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')')?
;

TupleTypeCS returns TupleTypeCS:
	name='Tuple' ('(' (ownedParts+=tuplePartCS (',' ownedParts+=tuplePartCS)*)? ')')?
;
        
tuplePartCS returns TuplePartCS:
	name=UnrestrictedName ':' ownedType=TypeExpCS
;

//---------------------------------------------------------------------
//  Literals
//---------------------------------------------------------------------
CollectionLiteralExpCS returns CollectionLiteralExpCS:
	ownedType=CollectionTypeCS
	'{' (ownedParts+=CollectionLiteralPartCS
	 (',' ownedParts+=CollectionLiteralPartCS)*)?
	 '}'
;

CollectionLiteralPartCS returns CollectionLiteralPartCS:
	expressionCS=ExpCS ('..' lastExpressionCS=ExpCS)?
;

PrimitiveLiteralExpCS returns PrimitiveLiteralExpCS:
	NumberLiteralExpCS
|	StringLiteralExpCS
|	BooleanLiteralExpCS
|	UnlimitedNaturalLiteralExpCS
|	InvalidLiteralExpCS
|	NullLiteralExpCS
;

TupleLiteralExpCS returns TupleLiteralExpCS:
	'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}'
;
	
TupleLiteralPartCS returns TupleLiteralPartCS:
	name=UnrestrictedName (':' ownedType=TypeExpCS)? '=' initExpression=ExpCS
;

NumberLiteralExpCS returns NumberLiteralExpCS:
	name=NUMBER_LITERAL
;

StringLiteralExpCS returns StringLiteralExpCS:
	name+=StringLiteral+
;

BooleanLiteralExpCS returns BooleanLiteralExpCS:
	name='true'
|	name='false'
;

UnlimitedNaturalLiteralExpCS returns UnlimitedNaturalLiteralExpCS:
	{UnlimitedNaturalLiteralExpCS} '*'
;

InvalidLiteralExpCS returns InvalidLiteralExpCS:
	{InvalidLiteralExpCS} 'invalid'
;

NullLiteralExpCS returns NullLiteralExpCS:
	{NullLiteralExpCS} 'null'
;
        
TypeLiteralCS returns base::TypedRefCS:
	PrimitiveTypeCS
|	CollectionTypeCS
|	TupleTypeCS
;
        
TypeLiteralExpCS returns TypeLiteralExpCS:
	ownedType=TypeLiteralCS
;

//TypeNameExpCS returns base::QualifiedTypeRefCS:
TypeNameExpCS returns TypeNameExpCS:
	(((namespace+=[pivot::Namespace|UnrestrictedName] '::' (namespace+=[pivot::Namespace|UnreservedName] '::')*) element=[pivot::Type|UnreservedName])
	|(element=[pivot::Type|UnrestrictedName])
	)
;

TypeExpCS returns base::TypedRefCS:
	TypeNameExpCS
|	TypeLiteralCS
;

//---------------------------------------------------------------------
//  Expressions
//---------------------------------------------------------------------
// An OclExpressionCS comprising one or more LetExpCS is kept separate to ensure
//  that let is right associative, whereas infix operators are left associative.
//   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
// is
//   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
ExpCS returns ExpCS:
	InfixedExpCS	
;

InfixedExpCS returns ExpCS:
	PrefixedExpCS
	({InfixExpCS.ownedExpression+=current} (ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)+)?
;

BinaryOperatorCS returns BinaryOperatorCS:
	name=InfixOperator
;

PrefixedExpCS returns ExpCS:
	PrimaryExpCS
|	({PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS)
;

UnaryOperatorCS returns UnaryOperatorCS:
	name=PrefixOperator
;

PrimaryExpCS returns ExpCS:
	NavigatingExpCS
|	SelfExpCS
|	PrimitiveLiteralExpCS
|	TupleLiteralExpCS
|	CollectionLiteralExpCS
|	TypeLiteralExpCS
|	LetExpCS
|	IfExpCS
|	NestedExpCS
;

NameExpCS returns NameExpCS:
	(((namespace+=[pivot::Namespace|UnrestrictedName] '::' (namespace+=[pivot::Namespace|UnreservedName] '::')*) element=[pivot::NamedElement|UnreservedName])
	|(element=[pivot::NamedElement|UnrestrictedName])
	)
;

IndexExpCS returns NamedExpCS:
	NameExpCS
	({IndexExpCS.name=current}
	  '[' firstIndexes+=ExpCS (',' firstIndexes+=ExpCS)* ']'
		('[' secondIndexes+=ExpCS (',' secondIndexes+=ExpCS)* ']')?)?
;

NavigatingExpCS_Base returns NamedExpCS:
	IndexExpCS
//	({PreExpCS.name=current} '@' 'pre')?	-- defined by Complete OCL
;

// For Xtext 1.0.0, this rule is very sensitive to the 65536 byte limit, so
//  keep it as simple as possible and avoid backtracking.
NavigatingExpCS returns NamedExpCS:
	NavigatingExpCS_Base
	({NavigatingExpCS.name=current}
		'(' (arguments+=NavigatingArgCSfirst (arguments+=NavigatingArgCSnext)*)? ')'
	)?
;

NavigatingArgCSfirst returns NavigatingArgCS:
	name=NavigatingArgExpCS (':' ownedType=TypeExpCS)?
;

NavigatingArgCSnext returns NavigatingArgCS:
	(prefix='|' name=NavigatingArgExpCS)
| 	(prefix=',' name=NavigatingArgExpCS (':' ownedType=TypeExpCS)?)
|	(prefix=';' name=NavigatingArgExpCS ':' ownedType=TypeExpCS '=' init=ExpCS)
;

NavigatingArgExpCS returns ExpCS:		// Intended to be overridden
	ExpCS
//	'?'	-- defined by Complete OCL
;

IfExpCS returns IfExpCS:
	'if' condition=ExpCS
	'then' thenExpression=ExpCS
	'else' elseExpression=ExpCS
	'endif'
;

LetExpCS returns LetExpCS:
	'let' variable+=LetVariableCS (',' variable+=LetVariableCS)*
	'in' in=ExpCS
;

LetVariableCS returns LetVariableCS:
	name=UnrestrictedName ':' ownedType=TypeExpCS '=' initExpression=ExpCS
;

NestedExpCS returns NestedExpCS:
	'(' source=ExpCS ')'
;
    
SelfExpCS returns SelfExpCS:
	{SelfExpCS} 'self'
;
		